pragma solidity ^0.8.9;
import {GaspMultiRollupService} from "../src/GaspMultiRollupService.sol";
import {stdStorage, StdStorage, Test} from "forge-std/Test.sol";
import "forge-std/console.sol";
import {Utilities, MyERC20} from "./utils/Utilities.sol";
import {IGaspMultiRollupServicePrimitives} from "../src/IGaspMultiRollupServicePrimitives.sol";
import {IFinalizerTaskManager} from "../src/IFinalizerTaskManager.sol";

contract GaspMultiRollupServiceTest is Test, IGaspMultiRollupServicePrimitives {
    using stdStorage for StdStorage;

    // Task public taskasdf;

    // function createNewTask(
    //     uint256 blockNumber,
    //     uint32 quorumThresholdPercentage,
    //     bytes calldata quorumNumbers
    // ) external{return;}

    // /// @notice Returns the current 'taskNumber' for the middleware
    // function taskNumber() external view returns (uint32){return 0;}

    // /// @notice Returns the TASK_RESPONSE_WINDOW_BLOCK
    // function getTaskResponseWindowBlock() external view returns (uint32){
    //     return 0;
    // }

    function testGasp() public {

        bytes memory qbytes = new bytes(1);
        qbytes[0] = 0x00;

        bytes memory lqbytes = new bytes(0);

        IFinalizerTaskManager.Task memory task =
            IFinalizerTaskManager.Task ({
        taskNum :1,
        blockNumber:20,
        taskCreatedBlock:30,
        lastCompletedTaskCreatedBlock:0 ,
        quorumNumbers: qbytes,
        quorumThresholdPercentage: 66,
        lastCompletedTaskQuorumNumbers: lqbytes,
        lastCompletedTaskQuorumThresholdPercentage:0
    });

        bytes memory encodedTask =  abi.encode(task);
        console.logBytes(encodedTask);
        bytes32 hashTask =  keccak256(abi.encode(task));
        console.logBytes32(hashTask);
    }

}

// RespondToTaskCall { task: Task { task_num: 2, block_number: 30, task_created_block: 31, last_completed_task_created_block: 0, quorum_numbers: Bytes(0x00), quorum_threshold_percentage: 66, last_completed_task_quorum_numbers: Bytes(0x), last_completed_task_quorum_threshold_percentage: 0 }, task_response: TaskResponse { reference_task_index: 2, reference_task_hash: [115, 72, 162, 102, 40, 38, 212, 15, 11, 251, 206, 143, 220, 247, 139, 157, 148, 37, 149, 87, 71, 78, 43, 94, 217, 14, 224, 192, 6, 189, 2, 125], operators_state_info_hash: [242, 126, 223, 7, 107, 205, 160, 42, 72, 43, 234, 113, 219, 54, 171, 24, 71, 165, 37, 4, 159, 117, 180, 211, 214, 237, 43, 78, 229, 37, 106, 253], block_hash: [77, 16, 181, 109, 102, 78, 59, 57, 92, 110, 84, 42, 52, 48, 170, 4, 41, 11, 109, 34, 99, 58, 19, 152, 113, 217, 227, 116, 62, 165, 157, 20], storage_proof_hash: [142, 239, 61, 128, 186, 37, 234, 21, 139, 76, 84, 174, 136, 199, 45, 54, 121, 138, 6, 154, 98, 80, 74, 205, 23, 41, 255, 164, 215, 170, 94, 52], pending_state_hash: [31, 188, 19, 31, 78, 175, 205, 220, 101, 13, 225, 81, 155, 55, 247, 31, 107, 154, 134, 69, 35, 200, 63, 22, 57, 47, 71, 152, 204, 46, 185, 25] }, non_signer_stakes_and_signature: NonSignerStakesAndSignature { non_signer_quorum_bitmap_indices: [], non_signer_pubkeys: [], quorum_apks: [G1Point { x: 20806089198638113865790608987500447893865474911085205122984954185270485397585, y: 21878502114059282910289379156184240534121031861095056124658603109490215306616 }], apk_g2: G2Point { x: [21836418458627207948878338584810913303068391136561272236250855921774423164067, 3849776464324032292544017129649842108455030412283119645456507298134820185115], y: [6605874162273967461294589597039686094329783190977788219038136400049639212066, 8187166421765511271709465640191848207754670446026259198879154273156103183187] }, sigma: G1Point { x: 6541628311129893314745706419002932608817939932557047711884006016028460523524, y: 18818128186438909424566767868572261211605376899302899375830831813925449032796 }, quorum_apk_indices: [1], total_stake_indices: [1], non_signer_stake_indices: [[]] }, non_signer_stakes_and_signature_for_old_state: NonSignerStakesAndSignatureForOldState { non_signer_g1_pubkeys_for_old_state: [], apk_g2_for_old_state: G2Point { x: [0, 0], y: [0, 0] }, sigma_for_old_state: G1Point { x: 0, y: 0 } } }
// gasp-syncer-1  | OperatorStateInfo { operators_state_changed: true, quorums_removed: [], quorums_added: [QuorumsAdded { quorum_number: 0, quorum_stake: 100, quorum_apk: G1Point { x: 20806089198638113865790608987500447893865474911085205122984954185270485397585, y: 21878502114059282910289379156184240534121031861095056124658603109490215306616 } }], quorums_stake_update: [], quorums_apk_update: [], operators_removed: [], operators_added: [OperatorsAdded { operator_id: [15, 13, 190, 30, 189, 226, 68, 54, 161, 118, 60, 88, 160, 164, 247, 44, 250, 20, 28, 55, 72, 213, 169, 127, 196, 196, 56, 176, 183, 159, 159, 246], quorum_for_stakes: [0], quorum_stakes: [100], quorum_count: 1 }], operators_stake_update: [], operators_quorum_count_update: [] }

// 0x
// 0000000000000000000000000000000000000000000000000000000000000020

// 0000000000000000000000000000000000000000000000000000000000000002
// 000000000000000000000000000000000000000000000000000000000000001e
// 000000000000000000000000000000000000000000000000000000000000001f
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000100
// 0000000000000000000000000000000000000000000000000000000000000042
// 0000000000000000000000000000000000000000000000000000000000000140
// 0000000000000000000000000000000000000000000000000000000000000000 
// 0000000000000000000000000000000000000000000000000000000000000001 0100
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000000 0140



// 0x
// 0000000000000000000000000000000000000000000000000000000000000020
// 0000000000000000000000000000000000000000000000000000000000000001
// 0000000000000000000000000000000000000000000000000000000000000014
// 000000000000000000000000000000000000000000000000000000000000001e
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000100
// 0000000000000000000000000000000000000000000000000000000000000042
// 0000000000000000000000000000000000000000000000000000000000000140
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000001
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000000

// 0x
// 0000000000000000000000000000000000000000000000000000000000000001
// 0000000000000000000000000000000000000000000000000000000000000014
// 000000000000000000000000000000000000000000000000000000000000001e
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000100
// 0000000000000000000000000000000000000000000000000000000000000042
// 0000000000000000000000000000000000000000000000000000000000000140
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000001
// 0000000000000000000000000000000000000000000000000000000000000000
// 0000000000000000000000000000000000000000000000000000000000000000