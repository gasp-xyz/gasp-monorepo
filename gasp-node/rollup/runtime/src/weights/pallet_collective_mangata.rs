// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_collective_mangata
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-11-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("rollup-local"), DB CACHE: 1024

// Executed Command:
// target/release/rollup-node
// benchmark
// pallet
// -l=info,runtime::collective=warn,xyk=warn
// --chain
// rollup-local
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_collective_mangata.
pub trait WeightInfo {
	fn set_members(m: u32, n: u32, p: u32, ) -> Weight;
	fn execute(b: u32, m: u32, ) -> Weight;
	fn propose_execute(b: u32, m: u32, ) -> Weight;
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight;
	fn vote(m: u32, ) -> Weight;
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn close_disapproved(m: u32, p: u32, ) -> Weight;
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight;
	fn disapprove_proposal(p: u32, ) -> Weight;
}

/// Weights for pallet_collective_mangata using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_collective_mangata::WeightInfo for ModuleWeight<T> {
	// Storage: `Council::Members` (r:1 w:1)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:0)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:100 w:100)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:0 w:1)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		(Weight::from_parts(148_080_000, 0))
			// Standard Error: 70_056
			.saturating_add((Weight::from_parts(4_005_859, 0)).saturating_mul(m as u64))
			// Standard Error: 70_056
			.saturating_add((Weight::from_parts(8_923_337, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_parts(24_704_254, 0))
			// Standard Error: 118
			.saturating_add((Weight::from_parts(2_079, 0)).saturating_mul(b as u64))
			// Standard Error: 1_220
			.saturating_add((Weight::from_parts(22_735, 0)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:0)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_parts(27_339_153, 0))
			// Standard Error: 134
			.saturating_add((Weight::from_parts(2_475, 0)).saturating_mul(b as u64))
			// Standard Error: 1_384
			.saturating_add((Weight::from_parts(36_408, 0)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalCount` (r:1 w:1)
	// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:0 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:0 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(41_070_816, 0))
			// Standard Error: 232
			.saturating_add((Weight::from_parts(3_561, 0)).saturating_mul(b as u64))
			// Standard Error: 2_427
			.saturating_add((Weight::from_parts(21_020, 0)).saturating_mul(m as u64))
			// Standard Error: 2_396
			.saturating_add((Weight::from_parts(324_501, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote(m: u32, ) -> Weight {
		(Weight::from_parts(41_208_337, 0))
			// Standard Error: 1_645
			.saturating_add((Weight::from_parts(61_793, 0)).saturating_mul(m as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `FoundationMembers::Members` (r:1 w:0)
	// Proof: `FoundationMembers::Members` (`max_values`: Some(1), `max_size`: Some(61), added: 556, mode: `MaxEncodedLen`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(62_025_353, 0))
			// Standard Error: 3_748
			.saturating_add((Weight::from_parts(28_097, 0)).saturating_mul(m as u64))
			// Standard Error: 3_655
			.saturating_add((Weight::from_parts(336_610, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `FoundationMembers::Members` (r:1 w:0)
	// Proof: `FoundationMembers::Members` (`max_values`: Some(1), `max_size`: Some(61), added: 556, mode: `MaxEncodedLen`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(80_472_792, 0))
			// Standard Error: 785
			.saturating_add((Weight::from_parts(3_376, 0)).saturating_mul(b as u64))
			// Standard Error: 8_300
			.saturating_add((Weight::from_parts(84_207, 0)).saturating_mul(m as u64))
			// Standard Error: 8_090
			.saturating_add((Weight::from_parts(373_260, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:1 w:0)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(56_432_300, 0))
			// Standard Error: 4_211
			.saturating_add((Weight::from_parts(69_518, 0)).saturating_mul(m as u64))
			// Standard Error: 4_106
			.saturating_add((Weight::from_parts(338_049, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:1 w:0)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(81_511_415, 0))
			// Standard Error: 512
			.saturating_add((Weight::from_parts(3_154, 0)).saturating_mul(b as u64))
			// Standard Error: 5_417
			.saturating_add((Weight::from_parts(37_847, 0)).saturating_mul(m as u64))
			// Standard Error: 5_280
			.saturating_add((Weight::from_parts(347_334, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:0 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:0 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn disapprove_proposal(p: u32, ) -> Weight {
		(Weight::from_parts(29_340_936, 0))
			// Standard Error: 1_590
			.saturating_add((Weight::from_parts(274_517, 0)).saturating_mul(p as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Council::Members` (r:1 w:1)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:0)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:100 w:100)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:0 w:1)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_members(m: u32, _n: u32, p: u32, ) -> Weight {
		(Weight::from_parts(148_080_000, 0))
			// Standard Error: 70_056
			.saturating_add((Weight::from_parts(4_005_859, 0)).saturating_mul(m as u64))
			// Standard Error: 70_056
			.saturating_add((Weight::from_parts(8_923_337, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(p as u64)))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(p as u64)))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_parts(24_704_254, 0))
			// Standard Error: 118
			.saturating_add((Weight::from_parts(2_079, 0)).saturating_mul(b as u64))
			// Standard Error: 1_220
			.saturating_add((Weight::from_parts(22_735, 0)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:0)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_execute(b: u32, m: u32, ) -> Weight {
		(Weight::from_parts(27_339_153, 0))
			// Standard Error: 134
			.saturating_add((Weight::from_parts(2_475, 0)).saturating_mul(b as u64))
			// Standard Error: 1_384
			.saturating_add((Weight::from_parts(36_408, 0)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalCount` (r:1 w:1)
	// Proof: `Council::ProposalCount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:0 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:0 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn propose_proposed(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(41_070_816, 0))
			// Standard Error: 232
			.saturating_add((Weight::from_parts(3_561, 0)).saturating_mul(b as u64))
			// Standard Error: 2_427
			.saturating_add((Weight::from_parts(21_020, 0)).saturating_mul(m as u64))
			// Standard Error: 2_396
			.saturating_add((Weight::from_parts(324_501, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn vote(m: u32, ) -> Weight {
		(Weight::from_parts(41_208_337, 0))
			// Standard Error: 1_645
			.saturating_add((Weight::from_parts(61_793, 0)).saturating_mul(m as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `FoundationMembers::Members` (r:1 w:0)
	// Proof: `FoundationMembers::Members` (`max_values`: Some(1), `max_size`: Some(61), added: 556, mode: `MaxEncodedLen`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_early_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(62_025_353, 0))
			// Standard Error: 3_748
			.saturating_add((Weight::from_parts(28_097, 0)).saturating_mul(m as u64))
			// Standard Error: 3_655
			.saturating_add((Weight::from_parts(336_610, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `FoundationMembers::Members` (r:1 w:0)
	// Proof: `FoundationMembers::Members` (`max_values`: Some(1), `max_size`: Some(61), added: 556, mode: `MaxEncodedLen`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_early_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(80_472_792, 0))
			// Standard Error: 785
			.saturating_add((Weight::from_parts(3_376, 0)).saturating_mul(b as u64))
			// Standard Error: 8_300
			.saturating_add((Weight::from_parts(84_207, 0)).saturating_mul(m as u64))
			// Standard Error: 8_090
			.saturating_add((Weight::from_parts(373_260, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:1 w:0)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn close_disapproved(m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(56_432_300, 0))
			// Standard Error: 4_211
			.saturating_add((Weight::from_parts(69_518, 0)).saturating_mul(m as u64))
			// Standard Error: 4_106
			.saturating_add((Weight::from_parts(338_049, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Members` (r:1 w:0)
	// Proof: `Council::Members` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:1 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:1 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Prime` (r:1 w:0)
	// Proof: `Council::Prime` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:1 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn close_approved(b: u32, m: u32, p: u32, ) -> Weight {
		(Weight::from_parts(81_511_415, 0))
			// Standard Error: 512
			.saturating_add((Weight::from_parts(3_154, 0)).saturating_mul(b as u64))
			// Standard Error: 5_417
			.saturating_add((Weight::from_parts(37_847, 0)).saturating_mul(m as u64))
			// Standard Error: 5_280
			.saturating_add((Weight::from_parts(347_334, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Council::Proposals` (r:1 w:1)
	// Proof: `Council::Proposals` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalProposedTime` (r:0 w:1)
	// Proof: `Council::ProposalProposedTime` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::Voting` (r:0 w:1)
	// Proof: `Council::Voting` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Council::ProposalOf` (r:0 w:1)
	// Proof: `Council::ProposalOf` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn disapprove_proposal(p: u32, ) -> Weight {
		(Weight::from_parts(29_340_936, 0))
			// Standard Error: 1_590
			.saturating_add((Weight::from_parts(274_517, 0)).saturating_mul(p as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
}
