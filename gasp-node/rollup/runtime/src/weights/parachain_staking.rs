// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for parachain_staking
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-11-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("rollup-local"), DB CACHE: 1024

// Executed Command:
// target/release/rollup-node
// benchmark
// pallet
// -l=info,runtime::collective=warn,xyk=warn
// --chain
// rollup-local
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for parachain_staking.
pub trait WeightInfo {
	fn set_total_selected() -> Weight;
	fn set_collator_commission() -> Weight;
	fn join_candidates(x: u32, y: u32, ) -> Weight;
	fn schedule_leave_candidates(x: u32, ) -> Weight;
	fn execute_leave_candidates(x: u32, ) -> Weight;
	fn cancel_leave_candidates(x: u32, ) -> Weight;
	fn go_offline() -> Weight;
	fn go_online() -> Weight;
	fn schedule_candidate_bond_more() -> Weight;
	fn schedule_candidate_bond_less() -> Weight;
	fn execute_candidate_bond_more() -> Weight;
	fn execute_candidate_bond_less() -> Weight;
	fn cancel_candidate_bond_more() -> Weight;
	fn cancel_candidate_bond_less() -> Weight;
	fn delegate(x: u32, y: u32, ) -> Weight;
	fn schedule_leave_delegators() -> Weight;
	fn execute_leave_delegators(x: u32, ) -> Weight;
	fn cancel_leave_delegators() -> Weight;
	fn schedule_revoke_delegation() -> Weight;
	fn schedule_delegator_bond_more() -> Weight;
	fn schedule_delegator_bond_less() -> Weight;
	fn execute_revoke_delegation() -> Weight;
	fn execute_delegator_bond_more() -> Weight;
	fn execute_delegator_bond_less() -> Weight;
	fn cancel_revoke_delegation() -> Weight;
	fn cancel_delegator_bond_more() -> Weight;
	fn cancel_delegator_bond_less() -> Weight;
	fn add_staking_liquidity_token(x: u32, ) -> Weight;
	fn remove_staking_liquidity_token(x: u32, ) -> Weight;
	fn aggregator_update_metadata() -> Weight;
	fn update_candidate_aggregator() -> Weight;
	fn payout_collator_rewards() -> Weight;
	fn payout_delegator_reward() -> Weight;
	fn passive_session_change() -> Weight;
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight;
}

/// Weights for parachain_staking using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> parachain_staking::WeightInfo for ModuleWeight<T> {
	// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		(Weight::from_parts(12_320_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		(Weight::from_parts(12_351_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:0)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:0)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn join_candidates(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(116_564_834, 0))
			// Standard Error: 16_473
			.saturating_add((Weight::from_parts(213_562, 0)).saturating_mul(x as u64))
			// Standard Error: 16_273
			.saturating_add((Weight::from_parts(283_611, 0)).saturating_mul(y as u64))
			.saturating_add(T::DbWeight::get().reads(11 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(31_889_184, 0))
			// Standard Error: 5_233
			.saturating_add((Weight::from_parts(190_865, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:30 w:30)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:30 w:30)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::DelegatorState` (r:29 w:29)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(102_215_060, 0))
			// Standard Error: 203_935
			.saturating_add((Weight::from_parts(24_857_739, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().reads((3 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
			.saturating_add(T::DbWeight::get().writes((3 as u64).saturating_mul(x as u64)))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(30_887_318, 0))
			// Standard Error: 4_124
			.saturating_add((Weight::from_parts(137_216, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_offline() -> Weight {
		(Weight::from_parts(30_860_000, 0))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_online() -> Weight {
		(Weight::from_parts(30_280_000, 0))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:0)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_more() -> Weight {
		(Weight::from_parts(47_650_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		(Weight::from_parts(49_030_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_more() -> Weight {
		(Weight::from_parts(92_090_000, 0))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_less() -> Weight {
		(Weight::from_parts(77_700_000, 0))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_more() -> Weight {
		(Weight::from_parts(24_720_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		(Weight::from_parts(24_040_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:0)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delegate(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(105_936_341, 0))
			// Standard Error: 22_237
			.saturating_add((Weight::from_parts(491_007, 0)).saturating_mul(x as u64))
			// Standard Error: 21_489
			.saturating_add((Weight::from_parts(440_176, 0)).saturating_mul(y as u64))
			.saturating_add(T::DbWeight::get().reads(10 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_leave_delegators() -> Weight {
		(Weight::from_parts(25_450_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:29 w:29)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_leave_delegators(x: u32, ) -> Weight {
		(Weight::from_parts(51_574_939, 0))
			// Standard Error: 41_324
			.saturating_add((Weight::from_parts(27_903_261, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().reads((1 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
			.saturating_add(T::DbWeight::get().writes((1 as u64).saturating_mul(x as u64)))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_leave_delegators() -> Weight {
		(Weight::from_parts(24_570_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_revoke_delegation() -> Weight {
		(Weight::from_parts(26_329_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:0)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_more() -> Weight {
		(Weight::from_parts(47_440_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_less() -> Weight {
		(Weight::from_parts(26_290_000, 0))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		(Weight::from_parts(111_760_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_more() -> Weight {
		(Weight::from_parts(117_260_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less() -> Weight {
		(Weight::from_parts(106_450_000, 0))
			.saturating_add(T::DbWeight::get().reads(7 as u64))
			.saturating_add(T::DbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_revoke_delegation() -> Weight {
		(Weight::from_parts(25_840_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_more() -> Weight {
		(Weight::from_parts(43_620_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_less() -> Weight {
		(Weight::from_parts(45_260_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(27_991_165, 0))
			// Standard Error: 6_623
			.saturating_add((Weight::from_parts(211_946, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(2 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(18_590_480, 0))
			// Standard Error: 5_707
			.saturating_add((Weight::from_parts(165_805, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:99 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:1)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn aggregator_update_metadata() -> Weight {
		(Weight::from_parts(1_355_640_000, 0))
			.saturating_add(T::DbWeight::get().reads(102 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:2 w:2)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_candidate_aggregator() -> Weight {
		(Weight::from_parts(112_310_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:2 w:1)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:32 w:32)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:32 w:31)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn payout_collator_rewards() -> Weight {
		(Weight::from_parts(949_290_000, 0))
			.saturating_add(T::DbWeight::get().reads(66 as u64))
			.saturating_add(T::DbWeight::get().writes(64 as u64))
	}
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:1 w:1)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn payout_delegator_reward() -> Weight {
		(Weight::from_parts(65_790_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn passive_session_change() -> Weight {
		(Weight::from_parts(5_770_000, 0))
			.saturating_add(T::DbWeight::get().reads(1 as u64))
	}
	// Storage: `ParachainStaking::Round` (r:1 w:1)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::CurrentIndex` (r:1 w:1)
	// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::QueuedChanged` (r:1 w:1)
	// Proof: `Session::QueuedChanged` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::QueuedKeys` (r:1 w:1)
	// Proof: `Session::QueuedKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::DisabledValidators` (r:1 w:0)
	// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Points` (r:1 w:1)
	// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Issuance::SessionIssuance` (r:1 w:1)
	// Proof: `Issuance::SessionIssuance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::RoundAggregatorInfo` (r:1 w:2)
	// Proof: `ParachainStaking::RoundAggregatorInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AwardedPts` (r:52 w:51)
	// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AtStake` (r:51 w:102)
	// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
	// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::Points` (r:1 w:0)
	// Proof: `SequencerStaking::Points` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:100 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:100 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:101 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:51 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Issuance::IssuanceConfigStore` (r:1 w:0)
	// Proof: `Issuance::IssuanceConfigStore` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:1)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:100 w:0)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:3 w:3)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `Session::NextKeys` (r:51 w:0)
	// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Aura::Authorities` (r:1 w:0)
	// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	// Storage: `Grandpa::Stalled` (r:1 w:0)
	// Proof: `Grandpa::Stalled` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `Grandpa::PendingChange` (r:1 w:0)
	// Proof: `Grandpa::PendingChange` (`max_values`: Some(1), `max_size`: Some(1294), added: 1789, mode: `MaxEncodedLen`)
	// Storage: `Grandpa::CurrentSetId` (r:1 w:0)
	// Proof: `Grandpa::CurrentSetId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::CurrentRound` (r:0 w:1)
	// Proof: `SequencerStaking::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Grandpa::SetIdSession` (r:0 w:1)
	// Proof: `Grandpa::SetIdSession` (`max_values`: None, `max_size`: Some(20), added: 2495, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:0 w:51)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Session::Validators` (r:0 w:1)
	// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight {
		(Weight::from_parts(1_840_795_663, 0))
			// Standard Error: 237_951
			.saturating_add((Weight::from_parts(19_017_290, 0)).saturating_mul(x as u64))
			// Standard Error: 487_980
			.saturating_add((Weight::from_parts(4_274_143, 0)).saturating_mul(y as u64))
			// Standard Error: 845_240
			.saturating_add((Weight::from_parts(35_696_789, 0)).saturating_mul(z as u64))
			.saturating_add(T::DbWeight::get().reads(229 as u64))
			.saturating_add(T::DbWeight::get().reads((4 as u64).saturating_mul(x as u64)))
			.saturating_add(T::DbWeight::get().writes(222 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `ParachainStaking::TotalSelected` (r:1 w:1)
	// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_total_selected() -> Weight {
		(Weight::from_parts(12_320_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CollatorCommission` (r:1 w:1)
	// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn set_collator_commission() -> Weight {
		(Weight::from_parts(12_351_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:0)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:0)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn join_candidates(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(116_564_834, 0))
			// Standard Error: 16_473
			.saturating_add((Weight::from_parts(213_562, 0)).saturating_mul(x as u64))
			// Standard Error: 16_273
			.saturating_add((Weight::from_parts(283_611, 0)).saturating_mul(y as u64))
			.saturating_add(RocksDbWeight::get().reads(11 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(31_889_184, 0))
			// Standard Error: 5_233
			.saturating_add((Weight::from_parts(190_865, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:30 w:30)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:30 w:30)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::DelegatorState` (r:29 w:29)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(102_215_060, 0))
			// Standard Error: 203_935
			.saturating_add((Weight::from_parts(24_857_739, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().reads((3 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
			.saturating_add(RocksDbWeight::get().writes((3 as u64).saturating_mul(x as u64)))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn cancel_leave_candidates(x: u32, ) -> Weight {
		(Weight::from_parts(30_887_318, 0))
			// Standard Error: 4_124
			.saturating_add((Weight::from_parts(137_216, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_offline() -> Weight {
		(Weight::from_parts(30_860_000, 0))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn go_online() -> Weight {
		(Weight::from_parts(30_280_000, 0))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:0)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_more() -> Weight {
		(Weight::from_parts(47_650_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_candidate_bond_less() -> Weight {
		(Weight::from_parts(49_030_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_more() -> Weight {
		(Weight::from_parts(92_090_000, 0))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn execute_candidate_bond_less() -> Weight {
		(Weight::from_parts(77_700_000, 0))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_more() -> Weight {
		(Weight::from_parts(24_720_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_candidate_bond_less() -> Weight {
		(Weight::from_parts(24_040_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:0)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:1 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:0)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn delegate(x: u32, y: u32, ) -> Weight {
		(Weight::from_parts(105_936_341, 0))
			// Standard Error: 22_237
			.saturating_add((Weight::from_parts(491_007, 0)).saturating_mul(x as u64))
			// Standard Error: 21_489
			.saturating_add((Weight::from_parts(440_176, 0)).saturating_mul(y as u64))
			.saturating_add(RocksDbWeight::get().reads(10 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_leave_delegators() -> Weight {
		(Weight::from_parts(25_450_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:29 w:29)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_leave_delegators(x: u32, ) -> Weight {
		(Weight::from_parts(51_574_939, 0))
			// Standard Error: 41_324
			.saturating_add((Weight::from_parts(27_903_261, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().reads((1 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
			.saturating_add(RocksDbWeight::get().writes((1 as u64).saturating_mul(x as u64)))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_leave_delegators() -> Weight {
		(Weight::from_parts(24_570_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_revoke_delegation() -> Weight {
		(Weight::from_parts(26_329_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:0)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:0)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_more() -> Weight {
		(Weight::from_parts(47_440_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn schedule_delegator_bond_less() -> Weight {
		(Weight::from_parts(26_290_000, 0))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_revoke_delegation() -> Weight {
		(Weight::from_parts(111_760_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_more() -> Weight {
		(Weight::from_parts(117_260_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `MultiPurposeLiquidity::ReserveStatus` (r:1 w:1)
	// Proof: `MultiPurposeLiquidity::ReserveStatus` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:1)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Total` (r:1 w:1)
	// Proof: `ParachainStaking::Total` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn execute_delegator_bond_less() -> Weight {
		(Weight::from_parts(106_450_000, 0))
			.saturating_add(RocksDbWeight::get().reads(7 as u64))
			.saturating_add(RocksDbWeight::get().writes(6 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_revoke_delegation() -> Weight {
		(Weight::from_parts(25_840_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_more() -> Weight {
		(Weight::from_parts(43_620_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:1)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_delegator_bond_less() -> Weight {
		(Weight::from_parts(45_260_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `Xyk::LiquidityPools` (r:1 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn add_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(27_991_165, 0))
			// Standard Error: 6_623
			.saturating_add((Weight::from_parts(211_946, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(2 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn remove_staking_liquidity_token(x: u32, ) -> Weight {
		(Weight::from_parts(18_590_480, 0))
			// Standard Error: 5_707
			.saturating_add((Weight::from_parts(165_805, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:99 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::DelegatorState` (r:1 w:0)
	// Proof: `ParachainStaking::DelegatorState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:1 w:1)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn aggregator_update_metadata() -> Weight {
		(Weight::from_parts(1_355_640_000, 0))
			.saturating_add(RocksDbWeight::get().reads(102 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `ParachainStaking::CandidateState` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:1)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AggregatorMetadata` (r:2 w:2)
	// Proof: `ParachainStaking::AggregatorMetadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn update_candidate_aggregator() -> Weight {
		(Weight::from_parts(112_310_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:2 w:1)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:32 w:32)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:32 w:31)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn payout_collator_rewards() -> Weight {
		(Weight::from_parts(949_290_000, 0))
			.saturating_add(RocksDbWeight::get().reads(66 as u64))
			.saturating_add(RocksDbWeight::get().writes(64 as u64))
	}
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:1 w:1)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:2 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn payout_delegator_reward() -> Weight {
		(Weight::from_parts(65_790_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `ParachainStaking::Round` (r:1 w:0)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn passive_session_change() -> Weight {
		(Weight::from_parts(5_770_000, 0))
			.saturating_add(RocksDbWeight::get().reads(1 as u64))
	}
	// Storage: `ParachainStaking::Round` (r:1 w:1)
	// Proof: `ParachainStaking::Round` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::CurrentIndex` (r:1 w:1)
	// Proof: `Session::CurrentIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::QueuedChanged` (r:1 w:1)
	// Proof: `Session::QueuedChanged` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::QueuedKeys` (r:1 w:1)
	// Proof: `Session::QueuedKeys` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Session::DisabledValidators` (r:1 w:0)
	// Proof: `Session::DisabledValidators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::Points` (r:1 w:1)
	// Proof: `ParachainStaking::Points` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Issuance::SessionIssuance` (r:1 w:1)
	// Proof: `Issuance::SessionIssuance` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::RoundAggregatorInfo` (r:1 w:2)
	// Proof: `ParachainStaking::RoundAggregatorInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AwardedPts` (r:52 w:51)
	// Proof: `ParachainStaking::AwardedPts` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::AtStake` (r:51 w:102)
	// Proof: `ParachainStaking::AtStake` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CollatorCommission` (r:1 w:0)
	// Proof: `ParachainStaking::CollatorCommission` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::Points` (r:1 w:0)
	// Proof: `SequencerStaking::Points` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::StakingLiquidityTokens` (r:1 w:1)
	// Proof: `ParachainStaking::StakingLiquidityTokens` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Xyk::LiquidityPools` (r:100 w:0)
	// Proof: `Xyk::LiquidityPools` (`max_values`: None, `max_size`: Some(29), added: 2504, mode: `MaxEncodedLen`)
	// Storage: `Xyk::Pools` (r:100 w:0)
	// Proof: `Xyk::Pools` (`max_values`: None, `max_size`: Some(56), added: 2531, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:101 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::CandidatePool` (r:1 w:0)
	// Proof: `ParachainStaking::CandidatePool` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateAggregator` (r:1 w:0)
	// Proof: `ParachainStaking::CandidateAggregator` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::TotalSelected` (r:1 w:0)
	// Proof: `ParachainStaking::TotalSelected` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::CandidateState` (r:51 w:0)
	// Proof: `ParachainStaking::CandidateState` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Issuance::IssuanceConfigStore` (r:1 w:0)
	// Proof: `Issuance::IssuanceConfigStore` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::PromotedPoolRewards` (r:1 w:1)
	// Proof: `ProofOfStake::PromotedPoolRewards` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ProofOfStake::TotalActivatedLiquidity` (r:100 w:0)
	// Proof: `ProofOfStake::TotalActivatedLiquidity` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:3 w:3)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `Session::NextKeys` (r:51 w:0)
	// Proof: `Session::NextKeys` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Aura::Authorities` (r:1 w:0)
	// Proof: `Aura::Authorities` (`max_values`: Some(1), `max_size`: Some(3200004), added: 3200499, mode: `MaxEncodedLen`)
	// Storage: `Grandpa::Stalled` (r:1 w:0)
	// Proof: `Grandpa::Stalled` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `Grandpa::PendingChange` (r:1 w:0)
	// Proof: `Grandpa::PendingChange` (`max_values`: Some(1), `max_size`: Some(1294), added: 1789, mode: `MaxEncodedLen`)
	// Storage: `Grandpa::CurrentSetId` (r:1 w:0)
	// Proof: `Grandpa::CurrentSetId` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::CurrentRound` (r:0 w:1)
	// Proof: `SequencerStaking::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Grandpa::SetIdSession` (r:0 w:1)
	// Proof: `Grandpa::SetIdSession` (`max_values`: None, `max_size`: Some(20), added: 2495, mode: `MaxEncodedLen`)
	// Storage: `ParachainStaking::SelectedCandidates` (r:0 w:1)
	// Proof: `ParachainStaking::SelectedCandidates` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `ParachainStaking::RoundCollatorRewardInfo` (r:0 w:51)
	// Proof: `ParachainStaking::RoundCollatorRewardInfo` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Session::Validators` (r:0 w:1)
	// Proof: `Session::Validators` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn active_session_change(x: u32, y: u32, z: u32, ) -> Weight {
		(Weight::from_parts(1_840_795_663, 0))
			// Standard Error: 237_951
			.saturating_add((Weight::from_parts(19_017_290, 0)).saturating_mul(x as u64))
			// Standard Error: 487_980
			.saturating_add((Weight::from_parts(4_274_143, 0)).saturating_mul(y as u64))
			// Standard Error: 845_240
			.saturating_add((Weight::from_parts(35_696_789, 0)).saturating_mul(z as u64))
			.saturating_add(RocksDbWeight::get().reads(229 as u64))
			.saturating_add(RocksDbWeight::get().reads((4 as u64).saturating_mul(x as u64)))
			.saturating_add(RocksDbWeight::get().writes(222 as u64))
	}
}
