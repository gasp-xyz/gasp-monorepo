type: application
language: rust
toolchain:
  rust:
    version: nightly-2024-01-20
  node:
    version: 18.20.7

env:
  CARGO_TERM_COLOR: 'always'
  # FORCE_COLOR is a jest specific variable to enforce color output
  FORCE_COLOR: 'true'
  SCCACHE_GCS_KEY_PREFIX: gasp-node
  IMAGE_BUILD_REPOSITORY: europe-docker.pkg.dev/direct-pixel-353917/gaspxyz/rollup-node
  DOCKERHUB_REPOSITORY: gaspxyz/rollup-node

fileGroups:
  sources:
    - 'pallets/**/*'
    - 'rollup/**/*'
    - 'rpc/**/*'
    - 'Cargo.toml'
    - 'Cargo.lock'
  gasp-e2e-sources:
    - 'gasp-e2e/**/*.ts'
    - 'gasp-e2e/package.json'
    - 'gasp-e2e/yarn.lock'

tasks:
  prepare-toolchain:
    command: rustup show
    options:
      cache: false

  build:
    command: cargo build --release
    inputs: ['@globs(sources)']
    options:
      outputStyle: 'stream'
    outputs:
      - 'target/release/rollup-node'
      - 'target/release/wbuild/rollup-runtime/rollup_runtime.compact.compressed.wasm'
    env:
      SCCACHE_GCS_KEY_PREFIX: gasp-node-release

  build-image-local:
    script: 'docker buildx build --build-arg ENABLE_FAST_RUNTIME=true -t gaspxyz/rollup-node:local --load .'
    inputs: ['@globs(sources)', 'Dockerfile']

  buildkit-build-and-push-image-digests-standard-runtime:
    script: |
      set -euo pipefail
      mkdir -p ./build
      echo "Starting buildkit build for standard runtime..."
      docker buildx build --platform linux/amd64,linux/arm64 \
        --cache-from type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache-standard-runtime \
        --cache-to type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache-standard-runtime,mode=max \
        --output type=image,push=true,push-by-digest=true,name=${IMAGE_BUILD_REPOSITORY} \
        --build-arg ENABLE_FAST_RUNTIME=false \
        --metadata-file build/gasp-node-standard-runtime-buildkit-metadata.json -f Dockerfile ./
      
      BUILD_EXIT_CODE=$?
      
      # Validate the metadata file exists and contains the expected digest
      if [ $BUILD_EXIT_CODE -eq 0 ] && [ -f build/gasp-node-standard-runtime-buildkit-metadata.json ]; then
        if grep -q "containerimage.digest" build/gasp-node-standard-runtime-buildkit-metadata.json; then
          echo "✅ Build successful and metadata file contains valid digest"
          cat build/gasp-node-standard-runtime-buildkit-metadata.json

          IMAGE_DIGEST=$(jq -r '.["containerimage.digest"]' build/gasp-node-standard-runtime-buildkit-metadata.json)
          CONTAINER_ID=$(docker create ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST})
          docker cp $CONTAINER_ID:/app/rollup_runtime.compact.compressed.wasm ./build/rollup_runtime_standard.compact.compressed.wasm
          docker rm $CONTAINER_ID
          # Verify the file was extracted
          if [ -f "./build/rollup_runtime_standard.compact.compressed.wasm" ]; then
            echo "✅ Successfully extracted WASM file"
            ls -la ./build/rollup_runtime_standard.compact.compressed.wasm
          else
            echo "❌ Failed to extract WASM file"
            exit 1
          fi
        else
          echo "❌ Build appeared successful but metadata file doesn't contain expected digest"
          cat build/gasp-node-standard-runtime-buildkit-metadata.json || echo "Cannot read metadata file"
          exit 1
        fi
      else
        echo "❌ Build failed with exit code: $BUILD_EXIT_CODE"
        [ -f build/gasp-node-standard-runtime-buildkit-metadata.json ] && cat build/gasp-node-standard-runtime-buildkit-metadata.json
        exit $BUILD_EXIT_CODE
      fi
      
      exit $BUILD_EXIT_CODE
    inputs: ["@globs(sources)", "Dockerfile"]
    outputs: ['build/gasp-node-standard-runtime-buildkit-metadata.json', 'build/rollup_runtime_standard.compact.compressed.wasm']
    options:
      outputStyle: buffer-only-failure
      cache: true
      internal: true

  buildkit-build-and-push-image-digests-fast-runtime:
    script: |
      set -euo pipefail
      mkdir -p ./build
      echo "Starting buildkit build for fast runtime..."
      docker buildx build --platform linux/amd64,linux/arm64 \
        --cache-from type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache-fast-runtime \
        --cache-to type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache-fast-runtime,mode=max \
        --output type=image,push=true,push-by-digest=true,name=${IMAGE_BUILD_REPOSITORY} \
        --build-arg ENABLE_FAST_RUNTIME=true \
        --metadata-file build/gasp-node-fast-runtime-buildkit-metadata.json -f Dockerfile ./
      
      BUILD_EXIT_CODE=$?
      
      # Validate the metadata file exists and contains the expected digest
      if [ $BUILD_EXIT_CODE -eq 0 ] && [ -f build/gasp-node-fast-runtime-buildkit-metadata.json ]; then
        if grep -q "containerimage.digest" build/gasp-node-fast-runtime-buildkit-metadata.json; then
          echo "✅ Build successful and metadata file contains valid digest"
          cat build/gasp-node-fast-runtime-buildkit-metadata.json

          IMAGE_DIGEST=$(jq -r '.["containerimage.digest"]' build/gasp-node-fast-runtime-buildkit-metadata.json)
          CONTAINER_ID=$(docker create ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST})
          mkdir -p ./build
          docker cp $CONTAINER_ID:/app/rollup_runtime.compact.compressed.wasm ./build/rollup_runtime_fast.compact.compressed.wasm
          docker rm $CONTAINER_ID
          # Verify the file was extracted
          if [ -f "./build/rollup_runtime_fast.compact.compressed.wasm" ]; then
            echo "✅ Successfully extracted WASM file"
            ls -la ./build/rollup_runtime_fast.compact.compressed.wasm
          else
            echo "❌ Failed to extract WASM file"
            exit 1
          fi
        else
          echo "❌ Build appeared successful but metadata file doesn't contain expected digest"
          cat build/gasp-node-fast-runtime-buildkit-metadata.json || echo "Cannot read metadata file"
          exit 1
        fi
      else
        echo "❌ Build failed with exit code: $BUILD_EXIT_CODE"
        [ -f build/gasp-node-fast-runtime-buildkit-metadata.json ] && cat build/gasp-node-fast-runtime-buildkit-metadata.json
        exit $BUILD_EXIT_CODE
      fi
      
      exit $BUILD_EXIT_CODE
    inputs: ["@globs(sources)", "Dockerfile"]
    outputs: ['build/gasp-node-fast-runtime-buildkit-metadata.json', 'build/rollup_runtime_fast.compact.compressed.wasm']
    options:
      outputStyle: buffer-only-failure
      cache: true
      internal: true
      
  build-image-ci:
    script: |
      set -ex
      IMAGE_DIGEST_STANDARD_RUNTIME=$(jq -r '."containerimage.digest"' build/gasp-node-standard-runtime-buildkit-metadata.json)
      IMAGE_DIGEST_FAST_RUNTIME=$(jq -r '."containerimage.digest"' build/gasp-node-fast-runtime-buildkit-metadata.json)
  
      docker buildx imagetools create \
        --tag ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci} \
        --tag ${DOCKERHUB_REPOSITORY}:${IMAGE_TAG:-ci} \
        ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST_STANDARD_RUNTIME}
      echo "Successfully created ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci} from existing digests"

      docker buildx imagetools create \
        --tag ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci}-fast \
        --tag ${DOCKERHUB_REPOSITORY}:${IMAGE_TAG:-ci}-fast \
        ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST_FAST_RUNTIME}
      echo "Successfully created ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci}-fast from existing digests"      
    deps: ['buildkit-build-and-push-image-digests-standard-runtime', 'buildkit-build-and-push-image-digests-fast-runtime']
    inputs: 
      - 'build/gasp-node-standard-runtime-buildkit-metadata.json'
      - 'build/gasp-node-fast-runtime-buildkit-metadata.json'
      - 'build/rollup_runtime_standard.compact.compressed.wasm'
    options:
      cache: false

  format:
    command: cargo fmt --all -- --check
    inputs: ['@globs(sources)']

  lint:
    command: cargo clippy -p pallet-xyk
    inputs: ['@globs(sources)']

  test:
    command: cargo test
    inputs: ['@globs(sources)']

  coverage-gasp-node:
    command: >
      cargo tarpaulin
      --timeout 120 --workspace --out Xml
      -e rollup-runtime-integration-test rollup-node rollup-runtime
      --exclude-files **/mock.rs **/weights.rs **/weights/*
      --target-dir target-coverage
    inputs: ['@globs(sources)']
    outputs: ['cobertura.xml']
  
  benchmark-tests-gasp-node:
    script: |
      cargo test --release -j8 --features=runtime-benchmarks -p pallet-xyk -p pallet-issuance -p pallet-multipurpose-liquidity -p pallet-fee-lock
      cargo test --release -j8 --features=runtime-benchmarks -p pallet-bootstrap -p pallet-market
      # NOTE: MGX-742
      cargo test --release -j8 --features=runtime-benchmarks -p pallet-proof-of-stake
    inputs: ['@globs(sources)']
    options:
      outputStyle: stream

  build-runtime-benchmarks-gasp-node:
    command: cargo build --release --no-default-features --features=runtime-benchmarks --target-dir target-runtime-benchmarks
    inputs: ['@globs(sources)']
    options:
      internal: true
      outputStyle: stream

  run-runtime-benchmarks-gasp-node:
    script: |
      mkdir -p ./benchmarks 
      target-runtime-benchmarks/release/rollup-node benchmark pallet \
        -l=info,runtime::collective=warn,xyk=warn \
        --chain rollup-local \
        --wasm-execution compiled \
        --pallet '*' \
        --extrinsic '*' \
        --steps ${STEPS} \
        --repeat ${REPEATS} \
        --template ./templates/module-weight-template.hbs \
        --output ./benchmarks/

      target-runtime-benchmarks/release/rollup-node benchmark overhead --chain rollup-local -lblock_builder=debug --max-ext-per-block 50000 --base-path .
      cp block_weights.rs extrinsic_weights.rs ./benchmarks
    inputs: ['@globs(sources)']
    outputs: ['benchmarks']
    deps: ['build-runtime-benchmarks-gasp-node']
    env:
      STEPS: '2'
      REPEATS: '1'

  release:
    command: 'yarn run release'
    options:
      cache: false
      runInCI: false

  e2e-test-sudoRemoval:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-sudoRemoval --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-bootstrap:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10      
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-bootstrap --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-parallel:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci} 
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-parallel --max-workers=10 --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-sequential-no-bootstrap:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci} 
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-sequential-no-bootstrap --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-seqgasless:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci} 
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-seqgasless --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-maintenance:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-maintenance --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-rollupUpdate:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-rollupUpdate --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-rewards-bootstrap:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci} 
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-rewards-bootstrap --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-parallel-autocompound:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-parallel-autocompound --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-sequential-autocompound:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-sequential-autocompound --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-poolliquidity:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-poolliquidity --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-governance:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-governance --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-multiswap:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci} 
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-multiswap --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-experimentalStaking:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-experimentalStaking --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-crowdloan:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-crowdloan --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-sdk:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-sdk --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-parallel-3rdPartyRewards:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-parallel-3rdPartyRewards --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-sequencerStaking:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-sequencerStaking --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-sequencerCancellation:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-sequencerCancellation --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-rolldown:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-rolldown --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-rolldownWithdrawal:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-rolldownWithdrawal --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-rolldownPreOperationWithdrawal:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-rolldownPreOperationWithdrawal --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-sequencerRewards:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-sequencerRewards --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-nonTransToken:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-nonTransToken --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-issuanceConfig:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}-fast
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-issuanceConfig --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-marketSwap:
    script: |
      export ROLLUP_NODE_VERSION=${ROLLUP_NODE_VERSION:-ci}
      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps
      sleep 10
      cd gasp-e2e && yarn install
      rm -rf reports/*.xml || true
      
      yarn test-marketSwap --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot/gasp-node && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot/gasp-node && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
    inputs: ['@globs(sources)', '@globs(gasp-e2e-sources)']
    outputs: ['gasp-e2e/reports/*.xml']

  e2e-test-rollup:
    script: |
      export ROLLUP_NODE_VERSION=${IMAGE_TAG:-ci}-fast
      export GASP_AVS_VERSION=${IMAGE_TAG:-ci}-fast
      export GASP_CONTRACTS_VERSION=${IMAGE_TAG:-ci}
      export AVS_AGGREGATOR_VERSION=${IMAGE_TAG:-ci}
      export FERRY_WITHDRAWAL_VERSION=${IMAGE_TAG:-ci}
      export FERRY_DEPOSIT_VERSION=${IMAGE_TAG:-ci}
      export ROLLUP_SEQUENCER_VERSION=${IMAGE_TAG:-ci}
      export UPDATER_VERSION=${IMAGE_TAG:-ci}

      docker compose down
      if [ "$CI" = "true" ]; then
        docker compose up -d --no-build
      else
        docker compose up -d
      fi
      docker compose ps

      cd $workspaceRoot/gasp-node/gasp-e2e && yarn install
      rm -rf $workspaceRoot/gasp-node/gasp-e2e/reports/*.xml || true

      echo "Sleeping for 120 seconds to ensure the environment is up and running\n" && sleep 120
      
      cd $workspaceRoot/gasp-node/gasp-e2e && yarn test-rollup --ci --testFailureExitCode=1  --cacheDirectory=./node_modules/.cache/jest
      TEST_EXIT_CODE=$?

      if [ $TEST_EXIT_CODE -ne 0 ] || grep -q 'failures="[1-9]' reports/*.xml 2>/dev/null; then
        # Also output last 1000 lines of logs to console for CI visibility
        cd $workspaceRoot && docker compose logs --tail=1000
        TEST_EXIT_CODE=1
      fi

      cd $workspaceRoot && docker compose down
      exit $TEST_EXIT_CODE
    options:
      cache: true
      runFromWorkspaceRoot: true
    inputs: 
      - '@globs(sources)'
      - '@globs(gasp-e2e-sources)'
      - '/gasp-avs/bindings/**/*.rs'
      - '/gasp-avs/src/**/*.rs'
      - '/gasp-avs/Cargo.toml'
      - '/gasp-avs/Cargo.lock'
      - '/ferry-deposit/src/**/*.ts'
      - '/ferry-deposit/package.json'
      - '/ferry-deposit/yarn.lock'
      - '/ferry-withdrawal/**/*.ts'
      - '/ferry-withdrawal/package.json'
      - '/ferry-withdrawal/yarn.lock'
      - "/contracts/lib/forge-std/src/**/*.sol"
      - "/contracts/lib/eigenlayer-middleware/src/**/*.sol"
      - "/contracts/src/**/*.sol"
      - "/contracts/test/**/*.sol"
      - "/contracts/script/**/*.sol"
      - "/contracts/tools/**/*"
      - "/contracts/package.json"
      - "/contracts/foundry.toml"
      - "/contracts/remappings.txt"
      - '/sequencer/bindings/**/*.rs'
      - '/sequencer/src/**/*.rs'
      - '/sequencer/Cargo.toml'
      - '/updater/bindings/**/*.rs'
      - '/updater/src/**/*.rs'
      - '/updater/Cargo.toml'
      # - '/avs-aggregator/bindings/**/*.rs'
      # - '/avs-aggregator/cmd/**/*'
      # - '/avs-aggregator/core/**/*'
      # - '/avs-aggregator/mocks/**/*'
      # - '/avs-aggregator/types/**/*'
      - '/avs-aggregator/go.mod'
      - '/avs-aggregator/go.sum'
      - '/avs-aggregator/*.go'
    outputs: ['gasp-e2e/reports/*.xml']
