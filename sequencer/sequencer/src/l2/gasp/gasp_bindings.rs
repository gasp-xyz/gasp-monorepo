#[allow(dead_code, unused_imports, non_camel_case_types, unreachable_patterns)]
#[allow(clippy::all)]
#[allow(rustdoc::broken_intra_doc_links)]
pub mod api {
    #[allow(unused_imports)]
    mod root_mod {
        pub use super::*;
    }
    pub static PALLETS: [&str; 30usize] = [
        "System",
        "Timestamp",
        "Utility",
        "Proxy",
        "Maintenance",
        "Rolldown",
        "Metamask",
        "Tokens",
        "TransactionPayment",
        "Xyk",
        "ProofOfStake",
        "FeeLock",
        "Vesting",
        "Crowdloan",
        "Issuance",
        "MultiPurposeLiquidity",
        "Bootstrap",
        "Authorship",
        "ParachainStaking",
        "SequencerStaking",
        "Session",
        "Aura",
        "Grandpa",
        "AssetRegistry",
        "Treasury",
        "Sudo",
        "SudoOrigin",
        "Council",
        "Identity",
        "FoundationMembers",
    ];
    pub static RUNTIME_APIS: [&str; 17usize] = [
        "MetamaskSignatureRuntimeApi",
        "RolldownRuntimeApi",
        "ProofOfStakeApi",
        "VerApi",
        "VerNonceApi",
        "XykRuntimeApi",
        "Core",
        "Metadata",
        "BlockBuilder",
        "TaggedTransactionQueue",
        "OffchainWorkerApi",
        "AuraApi",
        "SessionKeys",
        "GrandpaApi",
        "AccountNonceApi",
        "TransactionPaymentApi",
        "TransactionPaymentCallApi",
    ];
    #[doc = r" The error type that is returned when there is a runtime issue."]
    pub type DispatchError = runtime_types::sp_runtime::DispatchError;
    #[doc = r" The outer event enum."]
    pub type Event = runtime_types::rollup_runtime::RuntimeEvent;
    #[doc = r" The outer extrinsic enum."]
    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
    #[doc = r" The outer error enum represents the DispatchError's Module variant."]
    pub type Error = runtime_types::rollup_runtime::RuntimeError;
    pub fn constants() -> ConstantsApi {
        ConstantsApi
    }
    pub fn storage() -> StorageApi {
        StorageApi
    }
    pub fn tx() -> TransactionApi {
        TransactionApi
    }
    pub fn apis() -> runtime_apis::RuntimeApi {
        runtime_apis::RuntimeApi
    }
    pub mod runtime_apis {
        use super::root_mod;
        use super::runtime_types;
        use ::subxt::ext::subxt_core::ext::codec::Encode;
        pub struct RuntimeApi;
        impl RuntimeApi {
            pub fn metamask_signature_runtime_api(
                &self,
            ) -> metamask_signature_runtime_api::MetamaskSignatureRuntimeApi {
                metamask_signature_runtime_api::MetamaskSignatureRuntimeApi
            }
            pub fn rolldown_runtime_api(&self) -> rolldown_runtime_api::RolldownRuntimeApi {
                rolldown_runtime_api::RolldownRuntimeApi
            }
            pub fn proof_of_stake_api(&self) -> proof_of_stake_api::ProofOfStakeApi {
                proof_of_stake_api::ProofOfStakeApi
            }
            pub fn ver_api(&self) -> ver_api::VerApi {
                ver_api::VerApi
            }
            pub fn ver_nonce_api(&self) -> ver_nonce_api::VerNonceApi {
                ver_nonce_api::VerNonceApi
            }
            pub fn xyk_runtime_api(&self) -> xyk_runtime_api::XykRuntimeApi {
                xyk_runtime_api::XykRuntimeApi
            }
            pub fn core(&self) -> core::Core {
                core::Core
            }
            pub fn metadata(&self) -> metadata::Metadata {
                metadata::Metadata
            }
            pub fn block_builder(&self) -> block_builder::BlockBuilder {
                block_builder::BlockBuilder
            }
            pub fn tagged_transaction_queue(
                &self,
            ) -> tagged_transaction_queue::TaggedTransactionQueue {
                tagged_transaction_queue::TaggedTransactionQueue
            }
            pub fn offchain_worker_api(&self) -> offchain_worker_api::OffchainWorkerApi {
                offchain_worker_api::OffchainWorkerApi
            }
            pub fn aura_api(&self) -> aura_api::AuraApi {
                aura_api::AuraApi
            }
            pub fn session_keys(&self) -> session_keys::SessionKeys {
                session_keys::SessionKeys
            }
            pub fn grandpa_api(&self) -> grandpa_api::GrandpaApi {
                grandpa_api::GrandpaApi
            }
            pub fn account_nonce_api(&self) -> account_nonce_api::AccountNonceApi {
                account_nonce_api::AccountNonceApi
            }
            pub fn transaction_payment_api(
                &self,
            ) -> transaction_payment_api::TransactionPaymentApi {
                transaction_payment_api::TransactionPaymentApi
            }
            pub fn transaction_payment_call_api(
                &self,
            ) -> transaction_payment_call_api::TransactionPaymentCallApi {
                transaction_payment_call_api::TransactionPaymentCallApi
            }
        }
        pub mod metamask_signature_runtime_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct MetamaskSignatureRuntimeApi;
            impl MetamaskSignatureRuntimeApi {
                pub fn get_eip712_sign_data(
                    &self,
                    call: types::get_eip712_sign_data::Call,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetEip712SignData,
                    types::get_eip712_sign_data::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "MetamaskSignatureRuntimeApi",
                        "get_eip712_sign_data",
                        types::GetEip712SignData { call },
                        [
                            25u8, 245u8, 181u8, 232u8, 53u8, 130u8, 137u8, 219u8, 163u8, 86u8,
                            64u8, 57u8, 226u8, 139u8, 10u8, 112u8, 241u8, 156u8, 63u8, 173u8, 57u8,
                            178u8, 15u8, 217u8, 117u8, 245u8, 31u8, 4u8, 18u8, 111u8, 120u8, 207u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod get_eip712_sign_data {
                    use super::runtime_types;
                    pub type Call =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::string::String;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetEip712SignData {
                    pub call: get_eip712_sign_data::Call,
                }
            }
        }
        pub mod rolldown_runtime_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct RolldownRuntimeApi;
            impl RolldownRuntimeApi {
                pub fn get_abi_encoded_l2_request(
                    &self,
                    chain: types::get_abi_encoded_l2_request::Chain,
                    requestId: types::get_abi_encoded_l2_request::RequestId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetAbiEncodedL2Request,
                    types::get_abi_encoded_l2_request::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "get_abi_encoded_l2_request",
                        types::GetAbiEncodedL2Request { chain, requestId },
                        [
                            163u8, 197u8, 164u8, 252u8, 184u8, 77u8, 40u8, 86u8, 26u8, 4u8, 149u8,
                            239u8, 155u8, 196u8, 145u8, 131u8, 119u8, 248u8, 190u8, 57u8, 69u8,
                            33u8, 40u8, 163u8, 192u8, 112u8, 181u8, 68u8, 84u8, 136u8, 61u8, 19u8,
                        ],
                    )
                }
                pub fn get_native_sequencer_update(
                    &self,
                    hex_payload: types::get_native_sequencer_update::HexPayload,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetNativeSequencerUpdate,
                    types::get_native_sequencer_update::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "get_native_sequencer_update",
                        types::GetNativeSequencerUpdate { hex_payload },
                        [
                            78u8, 198u8, 196u8, 243u8, 39u8, 169u8, 31u8, 213u8, 166u8, 195u8,
                            188u8, 63u8, 241u8, 65u8, 33u8, 26u8, 187u8, 179u8, 163u8, 65u8, 46u8,
                            67u8, 245u8, 230u8, 20u8, 243u8, 14u8, 127u8, 217u8, 189u8, 183u8,
                            97u8,
                        ],
                    )
                }
                pub fn verify_sequencer_update(
                    &self,
                    chain: types::verify_sequencer_update::Chain,
                    hash: types::verify_sequencer_update::Hash,
                    request_id: types::verify_sequencer_update::RequestId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::VerifySequencerUpdate,
                    types::verify_sequencer_update::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "verify_sequencer_update",
                        types::VerifySequencerUpdate {
                            chain,
                            hash,
                            request_id,
                        },
                        [
                            129u8, 233u8, 118u8, 149u8, 0u8, 100u8, 121u8, 35u8, 150u8, 188u8,
                            255u8, 62u8, 198u8, 36u8, 74u8, 161u8, 231u8, 105u8, 146u8, 244u8,
                            129u8, 168u8, 240u8, 73u8, 219u8, 81u8, 127u8, 67u8, 57u8, 38u8, 161u8,
                            127u8,
                        ],
                    )
                }
                pub fn get_last_processed_request_on_l2(
                    &self,
                    chain: types::get_last_processed_request_on_l2::Chain,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetLastProcessedRequestOnL2,
                    types::get_last_processed_request_on_l2::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "get_last_processed_request_on_l2",
                        types::GetLastProcessedRequestOnL2 { chain },
                        [
                            58u8, 204u8, 24u8, 193u8, 196u8, 81u8, 83u8, 104u8, 71u8, 106u8, 209u8,
                            60u8, 35u8, 206u8, 64u8, 65u8, 48u8, 33u8, 137u8, 206u8, 17u8, 234u8,
                            68u8, 2u8, 62u8, 186u8, 46u8, 149u8, 161u8, 237u8, 117u8, 219u8,
                        ],
                    )
                }
                pub fn get_number_of_pending_requests(
                    &self,
                    chain: types::get_number_of_pending_requests::Chain,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetNumberOfPendingRequests,
                    types::get_number_of_pending_requests::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "get_number_of_pending_requests",
                        types::GetNumberOfPendingRequests { chain },
                        [
                            5u8, 192u8, 27u8, 127u8, 82u8, 63u8, 103u8, 81u8, 35u8, 53u8, 186u8,
                            229u8, 112u8, 20u8, 12u8, 67u8, 37u8, 100u8, 107u8, 63u8, 66u8, 139u8,
                            116u8, 128u8, 113u8, 141u8, 137u8, 232u8, 0u8, 59u8, 173u8, 176u8,
                        ],
                    )
                }
                pub fn get_total_number_of_deposits(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetTotalNumberOfDeposits,
                    types::get_total_number_of_deposits::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "get_total_number_of_deposits",
                        types::GetTotalNumberOfDeposits {},
                        [
                            117u8, 134u8, 165u8, 165u8, 172u8, 192u8, 107u8, 253u8, 4u8, 89u8,
                            19u8, 183u8, 139u8, 156u8, 144u8, 38u8, 3u8, 121u8, 100u8, 160u8,
                            187u8, 91u8, 217u8, 76u8, 220u8, 43u8, 249u8, 238u8, 207u8, 245u8,
                            69u8, 31u8,
                        ],
                    )
                }
                pub fn get_total_number_of_withdrawals(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetTotalNumberOfWithdrawals,
                    types::get_total_number_of_withdrawals::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "get_total_number_of_withdrawals",
                        types::GetTotalNumberOfWithdrawals {},
                        [
                            135u8, 235u8, 159u8, 208u8, 143u8, 66u8, 142u8, 223u8, 137u8, 0u8,
                            59u8, 230u8, 77u8, 100u8, 209u8, 29u8, 171u8, 177u8, 145u8, 135u8,
                            108u8, 3u8, 255u8, 30u8, 183u8, 24u8, 197u8, 80u8, 180u8, 253u8, 110u8,
                            94u8,
                        ],
                    )
                }
                pub fn get_merkle_root(
                    &self,
                    chain: types::get_merkle_root::Chain,
                    range: types::get_merkle_root::Range,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetMerkleRoot,
                    types::get_merkle_root::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "get_merkle_root",
                        types::GetMerkleRoot { chain, range },
                        [
                            92u8, 142u8, 160u8, 221u8, 242u8, 247u8, 237u8, 64u8, 92u8, 108u8,
                            221u8, 173u8, 229u8, 80u8, 92u8, 55u8, 122u8, 121u8, 55u8, 112u8,
                            150u8, 38u8, 22u8, 28u8, 137u8, 143u8, 42u8, 25u8, 30u8, 220u8, 223u8,
                            233u8,
                        ],
                    )
                }
                pub fn get_merkle_proof_for_tx(
                    &self,
                    chain: types::get_merkle_proof_for_tx::Chain,
                    range: types::get_merkle_proof_for_tx::Range,
                    tx_id: types::get_merkle_proof_for_tx::TxId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetMerkleProofForTx,
                    types::get_merkle_proof_for_tx::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "get_merkle_proof_for_tx",
                        types::GetMerkleProofForTx {
                            chain,
                            range,
                            tx_id,
                        },
                        [
                            120u8, 22u8, 245u8, 175u8, 252u8, 222u8, 202u8, 20u8, 3u8, 175u8,
                            193u8, 100u8, 202u8, 208u8, 116u8, 102u8, 52u8, 47u8, 202u8, 83u8,
                            110u8, 32u8, 66u8, 65u8, 139u8, 205u8, 166u8, 129u8, 184u8, 211u8,
                            12u8, 169u8,
                        ],
                    )
                }
                pub fn verify_merkle_proof_for_tx(
                    &self,
                    chain: types::verify_merkle_proof_for_tx::Chain,
                    range: types::verify_merkle_proof_for_tx::Range,
                    tx_id: types::verify_merkle_proof_for_tx::TxId,
                    root: types::verify_merkle_proof_for_tx::Root,
                    proof: types::verify_merkle_proof_for_tx::Proof,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::VerifyMerkleProofForTx,
                    types::verify_merkle_proof_for_tx::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "RolldownRuntimeApi",
                        "verify_merkle_proof_for_tx",
                        types::VerifyMerkleProofForTx {
                            chain,
                            range,
                            tx_id,
                            root,
                            proof,
                        },
                        [
                            147u8, 168u8, 155u8, 29u8, 84u8, 145u8, 83u8, 138u8, 13u8, 148u8,
                            164u8, 33u8, 59u8, 200u8, 47u8, 73u8, 57u8, 40u8, 248u8, 210u8, 69u8,
                            213u8, 162u8, 242u8, 5u8, 146u8, 43u8, 209u8, 236u8, 95u8, 145u8, 69u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod get_abi_encoded_l2_request {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type RequestId = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetAbiEncodedL2Request {
                    pub chain: get_abi_encoded_l2_request::Chain,
                    pub requestId: get_abi_encoded_l2_request::RequestId,
                }
                pub mod get_native_sequencer_update {
                    use super::runtime_types;
                    pub type HexPayload =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            runtime_types::pallet_rolldown::messages::L1Update,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetNativeSequencerUpdate {
                    pub hex_payload: get_native_sequencer_update::HexPayload,
                }
                pub mod verify_sequencer_update {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Hash = ::subxt::ext::subxt_core::utils::H256;
                    pub type RequestId = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<::core::primitive::bool>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct VerifySequencerUpdate {
                    pub chain: verify_sequencer_update::Chain,
                    pub hash: verify_sequencer_update::Hash,
                    pub request_id: verify_sequencer_update::RequestId,
                }
                pub mod get_last_processed_request_on_l2 {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<::core::primitive::u128>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetLastProcessedRequestOnL2 {
                    pub chain: get_last_processed_request_on_l2::Chain,
                }
                pub mod get_number_of_pending_requests {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<::core::primitive::u128>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetNumberOfPendingRequests {
                    pub chain: get_number_of_pending_requests::Chain,
                }
                pub mod get_total_number_of_deposits {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetTotalNumberOfDeposits {}
                pub mod get_total_number_of_withdrawals {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetTotalNumberOfWithdrawals {}
                pub mod get_merkle_root {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Range = (::core::primitive::u128, ::core::primitive::u128);
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::utils::H256;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetMerkleRoot {
                    pub chain: get_merkle_root::Chain,
                    pub range: get_merkle_root::Range,
                }
                pub mod get_merkle_proof_for_tx {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Range = (::core::primitive::u128, ::core::primitive::u128);
                    pub type TxId = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::subxt::ext::subxt_core::utils::H256,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetMerkleProofForTx {
                    pub chain: get_merkle_proof_for_tx::Chain,
                    pub range: get_merkle_proof_for_tx::Range,
                    pub tx_id: get_merkle_proof_for_tx::TxId,
                }
                pub mod verify_merkle_proof_for_tx {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Range = (::core::primitive::u128, ::core::primitive::u128);
                    pub type TxId = ::core::primitive::u128;
                    pub type Root = ::subxt::ext::subxt_core::utils::H256;
                    pub type Proof = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::utils::H256,
                    >;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::bool;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct VerifyMerkleProofForTx {
                    pub chain: verify_merkle_proof_for_tx::Chain,
                    pub range: verify_merkle_proof_for_tx::Range,
                    pub tx_id: verify_merkle_proof_for_tx::TxId,
                    pub root: verify_merkle_proof_for_tx::Root,
                    pub proof: verify_merkle_proof_for_tx::Proof,
                }
            }
        }
        pub mod proof_of_stake_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct ProofOfStakeApi;
            impl ProofOfStakeApi {
                pub fn calculate_native_rewards_amount(
                    &self,
                    user: types::calculate_native_rewards_amount::User,
                    liquidity_asset_id: types::calculate_native_rewards_amount::LiquidityAssetId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CalculateNativeRewardsAmount,
                    types::calculate_native_rewards_amount::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "ProofOfStakeApi",
                        "calculate_native_rewards_amount",
                        types::CalculateNativeRewardsAmount {
                            user,
                            liquidity_asset_id,
                        },
                        [
                            31u8, 19u8, 122u8, 201u8, 93u8, 152u8, 49u8, 150u8, 237u8, 125u8, 72u8,
                            165u8, 16u8, 118u8, 204u8, 207u8, 132u8, 200u8, 26u8, 96u8, 240u8,
                            207u8, 19u8, 5u8, 163u8, 176u8, 69u8, 34u8, 144u8, 5u8, 90u8, 83u8,
                        ],
                    )
                }
                pub fn calculate_3rdparty_rewards_amount(
                    &self,
                    user: types::calculate_3rdparty_rewards_amount::User,
                    liquidity_asset_id: types::calculate_3rdparty_rewards_amount::LiquidityAssetId,
                    reward_asset_id: types::calculate_3rdparty_rewards_amount::RewardAssetId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Calculate3rdpartyRewardsAmount,
                    types::calculate_3rdparty_rewards_amount::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "ProofOfStakeApi",
                        "calculate_3rdparty_rewards_amount",
                        types::Calculate3rdpartyRewardsAmount {
                            user,
                            liquidity_asset_id,
                            reward_asset_id,
                        },
                        [
                            55u8, 121u8, 255u8, 125u8, 221u8, 56u8, 73u8, 28u8, 54u8, 219u8, 45u8,
                            122u8, 206u8, 112u8, 187u8, 233u8, 218u8, 111u8, 120u8, 0u8, 184u8,
                            95u8, 199u8, 72u8, 55u8, 177u8, 24u8, 255u8, 84u8, 247u8, 5u8, 183u8,
                        ],
                    )
                }
                pub fn calculate_3rdparty_rewards_all(
                    &self,
                    user: types::calculate_3rdparty_rewards_all::User,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Calculate3rdpartyRewardsAll,
                    types::calculate_3rdparty_rewards_all::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "ProofOfStakeApi",
                        "calculate_3rdparty_rewards_all",
                        types::Calculate3rdpartyRewardsAll { user },
                        [
                            119u8, 6u8, 149u8, 12u8, 7u8, 9u8, 141u8, 182u8, 68u8, 228u8, 236u8,
                            147u8, 185u8, 61u8, 54u8, 18u8, 84u8, 237u8, 160u8, 132u8, 235u8, 74u8,
                            20u8, 220u8, 186u8, 35u8, 65u8, 88u8, 38u8, 54u8, 238u8, 46u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod calculate_native_rewards_amount {
                    use super::runtime_types;
                    pub type User = runtime_types::sp_runtime::account::AccountId20;
                    pub type LiquidityAssetId = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CalculateNativeRewardsAmount {
                    pub user: calculate_native_rewards_amount::User,
                    pub liquidity_asset_id: calculate_native_rewards_amount::LiquidityAssetId,
                }
                pub mod calculate_3rdparty_rewards_amount {
                    use super::runtime_types;
                    pub type User = runtime_types::sp_runtime::account::AccountId20;
                    pub type LiquidityAssetId = ::core::primitive::u32;
                    pub type RewardAssetId = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Calculate3rdpartyRewardsAmount {
                    pub user: calculate_3rdparty_rewards_amount::User,
                    pub liquidity_asset_id: calculate_3rdparty_rewards_amount::LiquidityAssetId,
                    pub reward_asset_id: calculate_3rdparty_rewards_amount::RewardAssetId,
                }
                pub mod calculate_3rdparty_rewards_all {
                    use super::runtime_types;
                    pub type User = runtime_types::sp_runtime::account::AccountId20;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            ::core::primitive::u32,
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        )>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Calculate3rdpartyRewardsAll {
                    pub user: calculate_3rdparty_rewards_all::User,
                }
            }
        }
        pub mod ver_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `VerApi` api trait for fetching information about extrinsic author and"]
            #[doc = " nonce"]
            pub struct VerApi;
            impl VerApi {
                #[doc = " Provides information about extrinsic signer and nonce"]
                pub fn get_signer(
                    &self,
                    tx: types::get_signer::Tx,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetSigner,
                    types::get_signer::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "get_signer",
                        types::GetSigner { tx },
                        [
                            26u8, 234u8, 158u8, 130u8, 205u8, 255u8, 34u8, 83u8, 242u8, 10u8,
                            194u8, 245u8, 125u8, 233u8, 98u8, 118u8, 92u8, 17u8, 157u8, 22u8,
                            173u8, 170u8, 91u8, 178u8, 82u8, 98u8, 238u8, 68u8, 80u8, 78u8, 47u8,
                            107u8,
                        ],
                    )
                }
                #[doc = " Checks if storage migration is scheuled"]
                pub fn is_storage_migration_scheduled(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::IsStorageMigrationScheduled,
                    types::is_storage_migration_scheduled::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "is_storage_migration_scheduled",
                        types::IsStorageMigrationScheduled {},
                        [
                            20u8, 79u8, 111u8, 109u8, 24u8, 98u8, 236u8, 201u8, 102u8, 86u8, 180u8,
                            114u8, 32u8, 25u8, 188u8, 147u8, 238u8, 23u8, 63u8, 147u8, 66u8, 252u8,
                            74u8, 13u8, 159u8, 22u8, 4u8, 92u8, 230u8, 121u8, 245u8, 77u8,
                        ],
                    )
                }
                #[doc = " stores shuffling seed for current block & shuffles"]
                #[doc = " previous block extrinsics if any enqueued"]
                pub fn store_seed(
                    &self,
                    seed: types::store_seed::Seed,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::StoreSeed,
                    types::store_seed::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "store_seed",
                        types::StoreSeed { seed },
                        [
                            233u8, 114u8, 207u8, 77u8, 9u8, 245u8, 252u8, 137u8, 61u8, 81u8, 48u8,
                            204u8, 52u8, 196u8, 78u8, 113u8, 139u8, 137u8, 78u8, 96u8, 247u8,
                            105u8, 151u8, 98u8, 212u8, 102u8, 104u8, 160u8, 38u8, 223u8, 133u8,
                            104u8,
                        ],
                    )
                }
                pub fn pop_txs(
                    &self,
                    count: types::pop_txs::Count,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::PopTxs,
                    types::pop_txs::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "pop_txs",
                        types::PopTxs { count },
                        [
                            242u8, 176u8, 210u8, 226u8, 100u8, 186u8, 214u8, 217u8, 112u8, 157u8,
                            48u8, 109u8, 239u8, 2u8, 31u8, 167u8, 230u8, 128u8, 118u8, 217u8,
                            126u8, 177u8, 144u8, 184u8, 40u8, 11u8, 187u8, 189u8, 19u8, 57u8,
                            201u8, 115u8,
                        ],
                    )
                }
                pub fn get_previous_block_txs(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetPreviousBlockTxs,
                    types::get_previous_block_txs::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "get_previous_block_txs",
                        types::GetPreviousBlockTxs {},
                        [
                            152u8, 184u8, 194u8, 159u8, 219u8, 178u8, 150u8, 46u8, 252u8, 18u8,
                            61u8, 123u8, 100u8, 31u8, 80u8, 168u8, 151u8, 249u8, 36u8, 244u8, 10u8,
                            0u8, 61u8, 49u8, 20u8, 28u8, 49u8, 68u8, 73u8, 81u8, 47u8, 25u8,
                        ],
                    )
                }
                pub fn can_enqueue_txs(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CanEnqueueTxs,
                    types::can_enqueue_txs::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "can_enqueue_txs",
                        types::CanEnqueueTxs {},
                        [
                            43u8, 58u8, 39u8, 99u8, 73u8, 136u8, 251u8, 17u8, 91u8, 221u8, 97u8,
                            192u8, 55u8, 175u8, 30u8, 103u8, 217u8, 17u8, 66u8, 85u8, 193u8, 168u8,
                            61u8, 44u8, 37u8, 165u8, 71u8, 106u8, 48u8, 108u8, 171u8, 218u8,
                        ],
                    )
                }
                pub fn create_enqueue_txs_inherent(
                    &self,
                    txs: types::create_enqueue_txs_inherent::Txs,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CreateEnqueueTxsInherent,
                    types::create_enqueue_txs_inherent::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "create_enqueue_txs_inherent",
                        types::CreateEnqueueTxsInherent { txs },
                        [
                            143u8, 71u8, 170u8, 248u8, 44u8, 141u8, 131u8, 51u8, 99u8, 12u8, 66u8,
                            212u8, 201u8, 58u8, 50u8, 227u8, 95u8, 96u8, 22u8, 1u8, 147u8, 99u8,
                            78u8, 216u8, 247u8, 95u8, 155u8, 14u8, 142u8, 132u8, 90u8, 229u8,
                        ],
                    )
                }
                pub fn start_prevalidation(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::StartPrevalidation,
                    types::start_prevalidation::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "start_prevalidation",
                        types::StartPrevalidation {},
                        [
                            191u8, 214u8, 199u8, 64u8, 215u8, 90u8, 53u8, 207u8, 191u8, 114u8,
                            145u8, 84u8, 74u8, 95u8, 13u8, 243u8, 194u8, 135u8, 19u8, 122u8, 63u8,
                            19u8, 209u8, 131u8, 127u8, 9u8, 225u8, 214u8, 28u8, 36u8, 84u8, 76u8,
                        ],
                    )
                }
                pub fn account_extrinsic_dispatch_weight(
                    &self,
                    consumed: types::account_extrinsic_dispatch_weight::Consumed,
                    tx: types::account_extrinsic_dispatch_weight::Tx,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::AccountExtrinsicDispatchWeight,
                    types::account_extrinsic_dispatch_weight::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerApi",
                        "account_extrinsic_dispatch_weight",
                        types::AccountExtrinsicDispatchWeight { consumed, tx },
                        [
                            153u8, 142u8, 52u8, 253u8, 88u8, 53u8, 36u8, 169u8, 220u8, 121u8, 65u8,
                            57u8, 110u8, 35u8, 197u8, 222u8, 237u8, 12u8, 65u8, 11u8, 13u8, 158u8,
                            157u8, 109u8, 210u8, 243u8, 242u8, 119u8, 3u8, 114u8, 129u8, 246u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod get_signer {
                    use super::runtime_types;
                    pub type Tx = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<(
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u32,
                        )>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetSigner {
                    pub tx: get_signer::Tx,
                }
                pub mod is_storage_migration_scheduled {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::bool;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct IsStorageMigrationScheduled {}
                pub mod store_seed {
                    use super::runtime_types;
                    pub type Seed = ::subxt::ext::subxt_core::utils::H256;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct StoreSeed {
                    pub seed: store_seed::Seed,
                }
                pub mod pop_txs {
                    use super::runtime_types;
                    pub type Count = ::core::primitive::u64;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PopTxs {
                    pub count: pop_txs::Count,
                }
                pub mod get_previous_block_txs {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetPreviousBlockTxs {}
                pub mod can_enqueue_txs {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::bool;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CanEnqueueTxs {}
                pub mod create_enqueue_txs_inherent {
                    use super::runtime_types;
                    pub type Txs = :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CreateEnqueueTxsInherent {
                    pub txs: create_enqueue_txs_inherent::Txs,
                }
                pub mod start_prevalidation {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct StartPrevalidation {}
                pub mod account_extrinsic_dispatch_weight {
                    use super::runtime_types;
                    pub type Consumed = runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >;
                    pub type Tx = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::result::Result<
                            runtime_types::frame_support::dispatch::PerDispatchClass<
                                runtime_types::sp_weights::weight_v2::Weight,
                            >,
                            (),
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AccountExtrinsicDispatchWeight {
                    pub consumed: account_extrinsic_dispatch_weight::Consumed,
                    pub tx: account_extrinsic_dispatch_weight::Tx,
                }
            }
        }
        pub mod ver_nonce_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct VerNonceApi;
            impl VerNonceApi {
                #[doc = " fetch number of enqueued txs from given account"]
                pub fn enqueued_txs_count(
                    &self,
                    account: types::enqueued_txs_count::Account,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::EnqueuedTxsCount,
                    types::enqueued_txs_count::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "VerNonceApi",
                        "enqueued_txs_count",
                        types::EnqueuedTxsCount { account },
                        [
                            228u8, 68u8, 170u8, 214u8, 179u8, 166u8, 171u8, 92u8, 170u8, 130u8,
                            169u8, 95u8, 163u8, 147u8, 107u8, 184u8, 233u8, 255u8, 217u8, 83u8,
                            253u8, 117u8, 122u8, 38u8, 33u8, 45u8, 205u8, 69u8, 51u8, 82u8, 96u8,
                            217u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod enqueued_txs_count {
                    use super::runtime_types;
                    pub type Account = runtime_types::sp_runtime::account::AccountId20;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u64;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct EnqueuedTxsCount {
                    pub account: enqueued_txs_count::Account,
                }
            }
        }
        pub mod xyk_runtime_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct XykRuntimeApi;
            impl XykRuntimeApi {
                pub fn calculate_sell_price(
                    &self,
                    input_reserve: types::calculate_sell_price::InputReserve,
                    output_reserve: types::calculate_sell_price::OutputReserve,
                    sell_amount: types::calculate_sell_price::SellAmount,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CalculateSellPrice,
                    types::calculate_sell_price::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "calculate_sell_price",
                        types::CalculateSellPrice {
                            input_reserve,
                            output_reserve,
                            sell_amount,
                        },
                        [
                            13u8, 47u8, 161u8, 49u8, 246u8, 156u8, 216u8, 65u8, 121u8, 173u8, 84u8,
                            154u8, 2u8, 8u8, 108u8, 204u8, 2u8, 131u8, 202u8, 228u8, 145u8, 110u8,
                            8u8, 110u8, 226u8, 126u8, 200u8, 7u8, 255u8, 54u8, 170u8, 100u8,
                        ],
                    )
                }
                pub fn calculate_buy_price(
                    &self,
                    input_reserve: types::calculate_buy_price::InputReserve,
                    output_reserve: types::calculate_buy_price::OutputReserve,
                    buy_amount: types::calculate_buy_price::BuyAmount,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CalculateBuyPrice,
                    types::calculate_buy_price::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "calculate_buy_price",
                        types::CalculateBuyPrice {
                            input_reserve,
                            output_reserve,
                            buy_amount,
                        },
                        [
                            196u8, 131u8, 191u8, 36u8, 116u8, 235u8, 132u8, 240u8, 1u8, 219u8,
                            175u8, 139u8, 100u8, 217u8, 41u8, 98u8, 243u8, 44u8, 151u8, 114u8,
                            250u8, 128u8, 185u8, 242u8, 29u8, 18u8, 179u8, 170u8, 69u8, 244u8,
                            165u8, 233u8,
                        ],
                    )
                }
                pub fn calculate_sell_price_id(
                    &self,
                    sold_token_id: types::calculate_sell_price_id::SoldTokenId,
                    bought_token_id: types::calculate_sell_price_id::BoughtTokenId,
                    sell_amount: types::calculate_sell_price_id::SellAmount,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CalculateSellPriceId,
                    types::calculate_sell_price_id::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "calculate_sell_price_id",
                        types::CalculateSellPriceId {
                            sold_token_id,
                            bought_token_id,
                            sell_amount,
                        },
                        [
                            75u8, 124u8, 130u8, 84u8, 6u8, 79u8, 143u8, 61u8, 59u8, 49u8, 50u8,
                            124u8, 89u8, 45u8, 170u8, 211u8, 252u8, 60u8, 19u8, 215u8, 21u8, 206u8,
                            138u8, 49u8, 124u8, 244u8, 12u8, 253u8, 139u8, 199u8, 125u8, 242u8,
                        ],
                    )
                }
                pub fn calculate_buy_price_id(
                    &self,
                    sold_token_id: types::calculate_buy_price_id::SoldTokenId,
                    bought_token_id: types::calculate_buy_price_id::BoughtTokenId,
                    buy_amount: types::calculate_buy_price_id::BuyAmount,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CalculateBuyPriceId,
                    types::calculate_buy_price_id::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "calculate_buy_price_id",
                        types::CalculateBuyPriceId {
                            sold_token_id,
                            bought_token_id,
                            buy_amount,
                        },
                        [
                            24u8, 221u8, 4u8, 64u8, 201u8, 221u8, 244u8, 203u8, 72u8, 146u8, 93u8,
                            32u8, 49u8, 165u8, 119u8, 83u8, 230u8, 46u8, 144u8, 67u8, 74u8, 107u8,
                            205u8, 62u8, 25u8, 181u8, 89u8, 166u8, 133u8, 51u8, 61u8, 59u8,
                        ],
                    )
                }
                pub fn get_burn_amount(
                    &self,
                    first_asset_id: types::get_burn_amount::FirstAssetId,
                    second_asset_id: types::get_burn_amount::SecondAssetId,
                    liquidity_asset_amount: types::get_burn_amount::LiquidityAssetAmount,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetBurnAmount,
                    types::get_burn_amount::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "get_burn_amount",
                        types::GetBurnAmount {
                            first_asset_id,
                            second_asset_id,
                            liquidity_asset_amount,
                        },
                        [
                            111u8, 246u8, 244u8, 236u8, 85u8, 115u8, 2u8, 208u8, 167u8, 228u8,
                            60u8, 203u8, 7u8, 140u8, 26u8, 124u8, 179u8, 215u8, 207u8, 70u8, 138u8,
                            168u8, 206u8, 222u8, 75u8, 180u8, 151u8, 6u8, 222u8, 18u8, 117u8, 67u8,
                        ],
                    )
                }
                pub fn get_max_instant_burn_amount(
                    &self,
                    user: types::get_max_instant_burn_amount::User,
                    liquidity_asset_id: types::get_max_instant_burn_amount::LiquidityAssetId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetMaxInstantBurnAmount,
                    types::get_max_instant_burn_amount::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "get_max_instant_burn_amount",
                        types::GetMaxInstantBurnAmount {
                            user,
                            liquidity_asset_id,
                        },
                        [
                            170u8, 55u8, 185u8, 195u8, 250u8, 201u8, 190u8, 147u8, 97u8, 92u8,
                            25u8, 150u8, 77u8, 32u8, 185u8, 38u8, 150u8, 193u8, 138u8, 216u8,
                            173u8, 33u8, 175u8, 0u8, 24u8, 86u8, 60u8, 62u8, 249u8, 229u8, 151u8,
                            188u8,
                        ],
                    )
                }
                pub fn get_max_instant_unreserve_amount(
                    &self,
                    user: types::get_max_instant_unreserve_amount::User,
                    liquidity_asset_id: types::get_max_instant_unreserve_amount::LiquidityAssetId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetMaxInstantUnreserveAmount,
                    types::get_max_instant_unreserve_amount::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "get_max_instant_unreserve_amount",
                        types::GetMaxInstantUnreserveAmount {
                            user,
                            liquidity_asset_id,
                        },
                        [
                            158u8, 231u8, 165u8, 201u8, 222u8, 84u8, 110u8, 19u8, 143u8, 23u8,
                            41u8, 109u8, 52u8, 48u8, 136u8, 102u8, 99u8, 131u8, 14u8, 25u8, 167u8,
                            166u8, 218u8, 81u8, 180u8, 101u8, 195u8, 176u8, 68u8, 30u8, 198u8,
                            247u8,
                        ],
                    )
                }
                pub fn calculate_rewards_amount(
                    &self,
                    user: types::calculate_rewards_amount::User,
                    liquidity_asset_id: types::calculate_rewards_amount::LiquidityAssetId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CalculateRewardsAmount,
                    types::calculate_rewards_amount::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "calculate_rewards_amount",
                        types::CalculateRewardsAmount {
                            user,
                            liquidity_asset_id,
                        },
                        [
                            1u8, 194u8, 180u8, 239u8, 61u8, 243u8, 239u8, 214u8, 23u8, 131u8, 28u8,
                            206u8, 255u8, 7u8, 245u8, 178u8, 148u8, 9u8, 28u8, 153u8, 76u8, 28u8,
                            105u8, 161u8, 180u8, 43u8, 217u8, 52u8, 61u8, 247u8, 100u8, 34u8,
                        ],
                    )
                }
                pub fn calculate_balanced_sell_amount(
                    &self,
                    total_amount: types::calculate_balanced_sell_amount::TotalAmount,
                    reserve_amount: types::calculate_balanced_sell_amount::ReserveAmount,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CalculateBalancedSellAmount,
                    types::calculate_balanced_sell_amount::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "calculate_balanced_sell_amount",
                        types::CalculateBalancedSellAmount {
                            total_amount,
                            reserve_amount,
                        },
                        [
                            250u8, 220u8, 68u8, 166u8, 128u8, 69u8, 199u8, 74u8, 41u8, 227u8,
                            143u8, 13u8, 44u8, 240u8, 31u8, 131u8, 44u8, 134u8, 227u8, 34u8, 25u8,
                            177u8, 100u8, 95u8, 96u8, 122u8, 244u8, 103u8, 10u8, 7u8, 236u8, 53u8,
                        ],
                    )
                }
                pub fn get_liq_tokens_for_trading(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetLiqTokensForTrading,
                    types::get_liq_tokens_for_trading::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "get_liq_tokens_for_trading",
                        types::GetLiqTokensForTrading {},
                        [
                            93u8, 79u8, 144u8, 140u8, 117u8, 17u8, 161u8, 42u8, 182u8, 225u8,
                            243u8, 42u8, 209u8, 174u8, 60u8, 253u8, 25u8, 150u8, 32u8, 112u8,
                            177u8, 59u8, 57u8, 233u8, 26u8, 36u8, 229u8, 12u8, 60u8, 167u8, 36u8,
                            100u8,
                        ],
                    )
                }
                pub fn is_buy_asset_lock_free(
                    &self,
                    path: types::is_buy_asset_lock_free::Path,
                    input_amount: types::is_buy_asset_lock_free::InputAmount,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::IsBuyAssetLockFree,
                    types::is_buy_asset_lock_free::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "is_buy_asset_lock_free",
                        types::IsBuyAssetLockFree { path, input_amount },
                        [
                            239u8, 249u8, 249u8, 67u8, 193u8, 117u8, 115u8, 119u8, 191u8, 64u8,
                            44u8, 163u8, 230u8, 245u8, 168u8, 190u8, 97u8, 9u8, 190u8, 173u8,
                            111u8, 196u8, 212u8, 99u8, 56u8, 51u8, 162u8, 226u8, 235u8, 107u8,
                            110u8, 195u8,
                        ],
                    )
                }
                pub fn is_sell_asset_lock_free(
                    &self,
                    path: types::is_sell_asset_lock_free::Path,
                    input_amount: types::is_sell_asset_lock_free::InputAmount,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::IsSellAssetLockFree,
                    types::is_sell_asset_lock_free::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "is_sell_asset_lock_free",
                        types::IsSellAssetLockFree { path, input_amount },
                        [
                            111u8, 168u8, 201u8, 4u8, 224u8, 204u8, 1u8, 219u8, 22u8, 162u8, 11u8,
                            231u8, 254u8, 173u8, 194u8, 218u8, 111u8, 145u8, 6u8, 229u8, 192u8,
                            21u8, 187u8, 20u8, 58u8, 175u8, 112u8, 35u8, 172u8, 195u8, 88u8, 81u8,
                        ],
                    )
                }
                pub fn get_tradeable_tokens(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetTradeableTokens,
                    types::get_tradeable_tokens::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "get_tradeable_tokens",
                        types::GetTradeableTokens {},
                        [
                            200u8, 149u8, 94u8, 136u8, 76u8, 246u8, 213u8, 136u8, 255u8, 84u8,
                            80u8, 116u8, 101u8, 64u8, 166u8, 9u8, 217u8, 140u8, 67u8, 15u8, 183u8,
                            197u8, 81u8, 218u8, 26u8, 184u8, 138u8, 92u8, 211u8, 89u8, 11u8, 39u8,
                        ],
                    )
                }
                pub fn get_total_number_of_swaps(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GetTotalNumberOfSwaps,
                    types::get_total_number_of_swaps::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "XykRuntimeApi",
                        "get_total_number_of_swaps",
                        types::GetTotalNumberOfSwaps {},
                        [
                            95u8, 241u8, 235u8, 228u8, 129u8, 123u8, 118u8, 103u8, 139u8, 37u8,
                            124u8, 246u8, 142u8, 230u8, 227u8, 22u8, 73u8, 174u8, 73u8, 114u8,
                            12u8, 98u8, 161u8, 101u8, 136u8, 60u8, 55u8, 114u8, 137u8, 104u8, 55u8,
                            251u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod calculate_sell_price {
                    use super::runtime_types;
                    pub type InputReserve = ::core::primitive::u128;
                    pub type OutputReserve = ::core::primitive::u128;
                    pub type SellAmount = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CalculateSellPrice {
                    pub input_reserve: calculate_sell_price::InputReserve,
                    pub output_reserve: calculate_sell_price::OutputReserve,
                    pub sell_amount: calculate_sell_price::SellAmount,
                }
                pub mod calculate_buy_price {
                    use super::runtime_types;
                    pub type InputReserve = ::core::primitive::u128;
                    pub type OutputReserve = ::core::primitive::u128;
                    pub type BuyAmount = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CalculateBuyPrice {
                    pub input_reserve: calculate_buy_price::InputReserve,
                    pub output_reserve: calculate_buy_price::OutputReserve,
                    pub buy_amount: calculate_buy_price::BuyAmount,
                }
                pub mod calculate_sell_price_id {
                    use super::runtime_types;
                    pub type SoldTokenId = ::core::primitive::u32;
                    pub type BoughtTokenId = ::core::primitive::u32;
                    pub type SellAmount = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CalculateSellPriceId {
                    pub sold_token_id: calculate_sell_price_id::SoldTokenId,
                    pub bought_token_id: calculate_sell_price_id::BoughtTokenId,
                    pub sell_amount: calculate_sell_price_id::SellAmount,
                }
                pub mod calculate_buy_price_id {
                    use super::runtime_types;
                    pub type SoldTokenId = ::core::primitive::u32;
                    pub type BoughtTokenId = ::core::primitive::u32;
                    pub type BuyAmount = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CalculateBuyPriceId {
                    pub sold_token_id: calculate_buy_price_id::SoldTokenId,
                    pub bought_token_id: calculate_buy_price_id::BoughtTokenId,
                    pub buy_amount: calculate_buy_price_id::BuyAmount,
                }
                pub mod get_burn_amount {
                    use super::runtime_types;
                    pub type FirstAssetId = ::core::primitive::u32;
                    pub type SecondAssetId = ::core::primitive::u32;
                    pub type LiquidityAssetAmount = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = (::core::primitive::u128, ::core::primitive::u128);
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetBurnAmount {
                    pub first_asset_id: get_burn_amount::FirstAssetId,
                    pub second_asset_id: get_burn_amount::SecondAssetId,
                    pub liquidity_asset_amount: get_burn_amount::LiquidityAssetAmount,
                }
                pub mod get_max_instant_burn_amount {
                    use super::runtime_types;
                    pub type User = runtime_types::sp_runtime::account::AccountId20;
                    pub type LiquidityAssetId = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetMaxInstantBurnAmount {
                    pub user: get_max_instant_burn_amount::User,
                    pub liquidity_asset_id: get_max_instant_burn_amount::LiquidityAssetId,
                }
                pub mod get_max_instant_unreserve_amount {
                    use super::runtime_types;
                    pub type User = runtime_types::sp_runtime::account::AccountId20;
                    pub type LiquidityAssetId = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetMaxInstantUnreserveAmount {
                    pub user: get_max_instant_unreserve_amount::User,
                    pub liquidity_asset_id: get_max_instant_unreserve_amount::LiquidityAssetId,
                }
                pub mod calculate_rewards_amount {
                    use super::runtime_types;
                    pub type User = runtime_types::sp_runtime::account::AccountId20;
                    pub type LiquidityAssetId = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CalculateRewardsAmount {
                    pub user: calculate_rewards_amount::User,
                    pub liquidity_asset_id: calculate_rewards_amount::LiquidityAssetId,
                }
                pub mod calculate_balanced_sell_amount {
                    use super::runtime_types;
                    pub type TotalAmount = ::core::primitive::u128;
                    pub type ReserveAmount = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CalculateBalancedSellAmount {
                    pub total_amount: calculate_balanced_sell_amount::TotalAmount,
                    pub reserve_amount: calculate_balanced_sell_amount::ReserveAmount,
                }
                pub mod get_liq_tokens_for_trading {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetLiqTokensForTrading {}
                pub mod is_buy_asset_lock_free {
                    use super::runtime_types;
                    pub type Path =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                    pub type InputAmount = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<::core::primitive::bool>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct IsBuyAssetLockFree {
                    pub path: is_buy_asset_lock_free::Path,
                    pub input_amount: is_buy_asset_lock_free::InputAmount,
                }
                pub mod is_sell_asset_lock_free {
                    use super::runtime_types;
                    pub type Path =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                    pub type InputAmount = ::core::primitive::u128;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<::core::primitive::bool>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct IsSellAssetLockFree {
                    pub path: is_sell_asset_lock_free::Path,
                    pub input_amount: is_sell_asset_lock_free::InputAmount,
                }
                pub mod get_tradeable_tokens {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::xyk_runtime_api::RpcAssetMetadata<
                                ::core::primitive::u32,
                            >,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetTradeableTokens {}
                pub mod get_total_number_of_swaps {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GetTotalNumberOfSwaps {}
            }
        }
        pub mod core {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `Core` runtime api that every Substrate runtime needs to implement."]
            pub struct Core;
            impl Core {
                #[doc = " Returns the version of the runtime."]
                pub fn version(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Version,
                    types::version::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Core",
                        "version",
                        types::Version {},
                        [
                            76u8, 202u8, 17u8, 117u8, 189u8, 237u8, 239u8, 237u8, 151u8, 17u8,
                            125u8, 159u8, 218u8, 92u8, 57u8, 238u8, 64u8, 147u8, 40u8, 72u8, 157u8,
                            116u8, 37u8, 195u8, 156u8, 27u8, 123u8, 173u8, 178u8, 102u8, 136u8,
                            6u8,
                        ],
                    )
                }
                #[doc = " Execute the given block."]
                pub fn execute_block(
                    &self,
                    block: types::execute_block::Block,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::ExecuteBlock,
                    types::execute_block::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Core",
                        "execute_block",
                        types::ExecuteBlock { block },
                        [
                            107u8, 254u8, 200u8, 138u8, 158u8, 32u8, 226u8, 226u8, 159u8, 228u8,
                            18u8, 96u8, 226u8, 201u8, 198u8, 36u8, 179u8, 248u8, 23u8, 122u8, 25u8,
                            107u8, 140u8, 93u8, 44u8, 127u8, 189u8, 132u8, 22u8, 177u8, 217u8,
                            114u8,
                        ],
                    )
                }
                #[doc = " Initialize a block with the given header and return the runtime executive mode."]
                pub fn initialize_block(
                    &self,
                    header: types::initialize_block::Header,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::InitializeBlock,
                    types::initialize_block::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Core",
                        "initialize_block",
                        types::InitializeBlock { header },
                        [
                            54u8, 101u8, 51u8, 236u8, 202u8, 249u8, 212u8, 216u8, 133u8, 54u8,
                            210u8, 104u8, 254u8, 22u8, 54u8, 200u8, 119u8, 40u8, 41u8, 181u8, 6u8,
                            65u8, 80u8, 239u8, 78u8, 79u8, 91u8, 12u8, 77u8, 147u8, 77u8, 153u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod version {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_version::RuntimeVersion;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Version {}
                pub mod execute_block {
                    use super::runtime_types;
                    pub type Block = runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header_ver :: Header < :: core :: primitive :: u32 > , :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ExecuteBlock {
                    pub block: execute_block::Block,
                }
                pub mod initialize_block {
                    use super::runtime_types;
                    pub type Header = runtime_types::sp_runtime::generic::header_ver::Header<
                        ::core::primitive::u32,
                    >;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_runtime::ExtrinsicInclusionMode;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct InitializeBlock {
                    pub header: initialize_block::Header,
                }
            }
        }
        pub mod metadata {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `Metadata` api trait that returns metadata for the runtime."]
            pub struct Metadata;
            impl Metadata {
                #[doc = " Returns the metadata of a runtime."]
                pub fn metadata(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Metadata,
                    types::metadata::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Metadata",
                        "metadata",
                        types::Metadata {},
                        [
                            231u8, 24u8, 67u8, 152u8, 23u8, 26u8, 188u8, 82u8, 229u8, 6u8, 185u8,
                            27u8, 175u8, 68u8, 83u8, 122u8, 69u8, 89u8, 185u8, 74u8, 248u8, 87u8,
                            217u8, 124u8, 193u8, 252u8, 199u8, 186u8, 196u8, 179u8, 179u8, 96u8,
                        ],
                    )
                }
                #[doc = " Returns the metadata at a given version."]
                #[doc = ""]
                #[doc = " If the given `version` isn't supported, this will return `None`."]
                #[doc = " Use [`Self::metadata_versions`] to find out about supported metadata version of the runtime."]
                pub fn metadata_at_version(
                    &self,
                    version: types::metadata_at_version::Version,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::MetadataAtVersion,
                    types::metadata_at_version::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Metadata",
                        "metadata_at_version",
                        types::MetadataAtVersion { version },
                        [
                            131u8, 53u8, 212u8, 234u8, 16u8, 25u8, 120u8, 252u8, 153u8, 153u8,
                            216u8, 28u8, 54u8, 113u8, 52u8, 236u8, 146u8, 68u8, 142u8, 8u8, 10u8,
                            169u8, 131u8, 142u8, 204u8, 38u8, 48u8, 108u8, 134u8, 86u8, 226u8,
                            61u8,
                        ],
                    )
                }
                #[doc = " Returns the supported metadata versions."]
                #[doc = ""]
                #[doc = " This can be used to call `metadata_at_version`."]
                pub fn metadata_versions(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::MetadataVersions,
                    types::metadata_versions::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "Metadata",
                        "metadata_versions",
                        types::MetadataVersions {},
                        [
                            23u8, 144u8, 137u8, 91u8, 188u8, 39u8, 231u8, 208u8, 252u8, 218u8,
                            224u8, 176u8, 77u8, 32u8, 130u8, 212u8, 223u8, 76u8, 100u8, 190u8,
                            82u8, 94u8, 190u8, 8u8, 82u8, 244u8, 225u8, 179u8, 85u8, 176u8, 56u8,
                            16u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod metadata {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_core::OpaqueMetadata;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Metadata {}
                pub mod metadata_at_version {
                    use super::runtime_types;
                    pub type Version = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::core::option::Option<runtime_types::sp_core::OpaqueMetadata>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MetadataAtVersion {
                    pub version: metadata_at_version::Version,
                }
                pub mod metadata_versions {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MetadataVersions {}
            }
        }
        pub mod block_builder {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `BlockBuilder` api trait that provides the required functionality for building a block."]
            pub struct BlockBuilder;
            impl BlockBuilder {
                #[doc = " Apply the given extrinsic."]
                #[doc = ""]
                #[doc = " Returns an inclusion outcome which specifies if this extrinsic is included in"]
                #[doc = " this block or not."]
                pub fn apply_extrinsic(
                    &self,
                    extrinsic: types::apply_extrinsic::Extrinsic,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::ApplyExtrinsic,
                    types::apply_extrinsic::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "BlockBuilder",
                        "apply_extrinsic",
                        types::ApplyExtrinsic { extrinsic },
                        [
                            92u8, 154u8, 129u8, 30u8, 127u8, 231u8, 119u8, 77u8, 112u8, 139u8,
                            23u8, 229u8, 81u8, 37u8, 109u8, 160u8, 170u8, 161u8, 94u8, 168u8,
                            241u8, 159u8, 56u8, 175u8, 204u8, 80u8, 101u8, 120u8, 35u8, 248u8,
                            168u8, 66u8,
                        ],
                    )
                }
                #[doc = " Finish the current block."]
                pub fn finalize_block(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::FinalizeBlock,
                    types::finalize_block::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "BlockBuilder",
                        "finalize_block",
                        types::FinalizeBlock {},
                        [
                            117u8, 47u8, 22u8, 118u8, 148u8, 5u8, 143u8, 63u8, 6u8, 3u8, 59u8,
                            26u8, 32u8, 78u8, 149u8, 216u8, 220u8, 93u8, 59u8, 91u8, 219u8, 8u8,
                            64u8, 187u8, 230u8, 77u8, 80u8, 242u8, 62u8, 243u8, 148u8, 40u8,
                        ],
                    )
                }
                #[doc = " Generate inherent extrinsics. The inherent data will vary from chain to chain."]
                pub fn inherent_extrinsics(
                    &self,
                    inherent: types::inherent_extrinsics::Inherent,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::InherentExtrinsics,
                    types::inherent_extrinsics::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "BlockBuilder",
                        "inherent_extrinsics",
                        types::InherentExtrinsics { inherent },
                        [
                            254u8, 110u8, 245u8, 201u8, 250u8, 192u8, 27u8, 228u8, 151u8, 213u8,
                            166u8, 89u8, 94u8, 81u8, 189u8, 234u8, 64u8, 18u8, 245u8, 80u8, 29u8,
                            18u8, 140u8, 129u8, 113u8, 236u8, 135u8, 55u8, 79u8, 159u8, 175u8,
                            183u8,
                        ],
                    )
                }
                #[doc = " Check that the inherents are valid. The inherent data will vary from chain to chain."]
                pub fn check_inherents(
                    &self,
                    block: types::check_inherents::Block,
                    data: types::check_inherents::Data,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CheckInherents,
                    types::check_inherents::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "BlockBuilder",
                        "check_inherents",
                        types::CheckInherents { block, data },
                        [
                            230u8, 237u8, 127u8, 106u8, 162u8, 166u8, 76u8, 138u8, 160u8, 167u8,
                            29u8, 10u8, 61u8, 144u8, 96u8, 208u8, 60u8, 139u8, 80u8, 251u8, 51u8,
                            29u8, 237u8, 241u8, 88u8, 220u8, 166u8, 45u8, 87u8, 111u8, 108u8,
                            176u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod apply_extrinsic {
                    use super::runtime_types;
                    pub type Extrinsic = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > ;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: core :: result :: Result < :: core :: result :: Result < () , runtime_types :: sp_runtime :: DispatchError > , runtime_types :: sp_runtime :: transaction_validity :: TransactionValidityError > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ApplyExtrinsic {
                    pub extrinsic: apply_extrinsic::Extrinsic,
                }
                pub mod finalize_block {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_runtime::generic::header_ver::Header<
                            ::core::primitive::u32,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FinalizeBlock {}
                pub mod inherent_extrinsics {
                    use super::runtime_types;
                    pub type Inherent = runtime_types::sp_inherents::InherentData;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: subxt :: ext :: subxt_core :: alloc :: vec :: Vec < :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct InherentExtrinsics {
                    pub inherent: inherent_extrinsics::Inherent,
                }
                pub mod check_inherents {
                    use super::runtime_types;
                    pub type Block = runtime_types :: sp_runtime :: generic :: block :: Block < runtime_types :: sp_runtime :: generic :: header_ver :: Header < :: core :: primitive :: u32 > , :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > > ;
                    pub type Data = runtime_types::sp_inherents::InherentData;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_inherents::CheckInherentsResult;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CheckInherents {
                    pub block: check_inherents::Block,
                    pub data: check_inherents::Data,
                }
            }
        }
        pub mod tagged_transaction_queue {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The `TaggedTransactionQueue` api trait for interfering with the transaction queue."]
            pub struct TaggedTransactionQueue;
            impl TaggedTransactionQueue {
                #[doc = " Validate the transaction."]
                #[doc = ""]
                #[doc = " This method is invoked by the transaction pool to learn details about given transaction."]
                #[doc = " The implementation should make sure to verify the correctness of the transaction"]
                #[doc = " against current state. The given `block_hash` corresponds to the hash of the block"]
                #[doc = " that is used as current state."]
                #[doc = ""]
                #[doc = " Note that this call may be performed by the pool multiple times and transactions"]
                #[doc = " might be verified in any possible order."]
                pub fn validate_transaction(
                    &self,
                    source: types::validate_transaction::Source,
                    tx: types::validate_transaction::Tx,
                    block_hash: types::validate_transaction::BlockHash,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::ValidateTransaction,
                    types::validate_transaction::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TaggedTransactionQueue",
                        "validate_transaction",
                        types::ValidateTransaction {
                            source,
                            tx,
                            block_hash,
                        },
                        [
                            233u8, 250u8, 206u8, 12u8, 210u8, 44u8, 82u8, 43u8, 75u8, 165u8, 5u8,
                            180u8, 39u8, 185u8, 174u8, 47u8, 7u8, 152u8, 238u8, 2u8, 29u8, 3u8,
                            239u8, 98u8, 54u8, 164u8, 240u8, 39u8, 231u8, 160u8, 25u8, 241u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod validate_transaction {
                    use super::runtime_types;
                    pub type Source =
                        runtime_types::sp_runtime::transaction_validity::TransactionSource;
                    pub type Tx = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > ;
                    pub type BlockHash = ::subxt::ext::subxt_core::utils::H256;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = :: core :: result :: Result < runtime_types :: sp_runtime :: transaction_validity :: ValidTransaction , runtime_types :: sp_runtime :: transaction_validity :: TransactionValidityError > ;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ValidateTransaction {
                    pub source: validate_transaction::Source,
                    pub tx: validate_transaction::Tx,
                    pub block_hash: validate_transaction::BlockHash,
                }
            }
        }
        pub mod offchain_worker_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The offchain worker api."]
            pub struct OffchainWorkerApi;
            impl OffchainWorkerApi {
                #[doc = " Starts the off-chain task for given block header."]
                pub fn offchain_worker(
                    &self,
                    header: types::offchain_worker::Header,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::OffchainWorker,
                    types::offchain_worker::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "OffchainWorkerApi",
                        "offchain_worker",
                        types::OffchainWorker { header },
                        [
                            29u8, 29u8, 211u8, 110u8, 171u8, 150u8, 58u8, 192u8, 99u8, 49u8, 160u8,
                            24u8, 213u8, 83u8, 59u8, 119u8, 41u8, 237u8, 125u8, 218u8, 233u8, 66u8,
                            199u8, 252u8, 137u8, 199u8, 30u8, 102u8, 32u8, 105u8, 104u8, 121u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod offchain_worker {
                    use super::runtime_types;
                    pub type Header = runtime_types::sp_runtime::generic::header_ver::Header<
                        ::core::primitive::u32,
                    >;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ();
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct OffchainWorker {
                    pub header: offchain_worker::Header,
                }
            }
        }
        pub mod aura_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " API necessary for block authorship with aura."]
            pub struct AuraApi;
            impl AuraApi {
                #[doc = " Returns the slot duration for Aura."]
                #[doc = ""]
                #[doc = " Currently, only the value provided by this type at genesis will be used."]
                pub fn slot_duration(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::SlotDuration,
                    types::slot_duration::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "AuraApi",
                        "slot_duration",
                        types::SlotDuration {},
                        [
                            233u8, 210u8, 132u8, 172u8, 100u8, 125u8, 239u8, 92u8, 114u8, 82u8,
                            7u8, 110u8, 179u8, 196u8, 10u8, 19u8, 211u8, 15u8, 174u8, 2u8, 91u8,
                            73u8, 133u8, 100u8, 205u8, 201u8, 191u8, 60u8, 163u8, 122u8, 215u8,
                            10u8,
                        ],
                    )
                }
                #[doc = " Return the current set of authorities."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::Authorities,
                    types::authorities::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "AuraApi",
                        "authorities",
                        types::Authorities {},
                        [
                            96u8, 136u8, 226u8, 244u8, 105u8, 189u8, 8u8, 250u8, 71u8, 230u8, 37u8,
                            123u8, 218u8, 47u8, 179u8, 16u8, 170u8, 181u8, 165u8, 77u8, 102u8,
                            51u8, 43u8, 51u8, 186u8, 84u8, 49u8, 15u8, 208u8, 226u8, 129u8, 230u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod slot_duration {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = runtime_types::sp_consensus_slots::SlotDuration;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SlotDuration {}
                pub mod authorities {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Authorities {}
            }
        }
        pub mod session_keys {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " Session keys runtime api."]
            pub struct SessionKeys;
            impl SessionKeys {
                #[doc = " Generate a set of session keys with optionally using the given seed."]
                #[doc = " The keys should be stored within the keystore exposed via runtime"]
                #[doc = " externalities."]
                #[doc = ""]
                #[doc = " The seed needs to be a valid `utf8` string."]
                #[doc = ""]
                #[doc = " Returns the concatenated SCALE encoded public keys."]
                pub fn generate_session_keys(
                    &self,
                    seed: types::generate_session_keys::Seed,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GenerateSessionKeys,
                    types::generate_session_keys::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "SessionKeys",
                        "generate_session_keys",
                        types::GenerateSessionKeys { seed },
                        [
                            96u8, 171u8, 164u8, 166u8, 175u8, 102u8, 101u8, 47u8, 133u8, 95u8,
                            102u8, 202u8, 83u8, 26u8, 238u8, 47u8, 126u8, 132u8, 22u8, 11u8, 33u8,
                            190u8, 175u8, 94u8, 58u8, 245u8, 46u8, 80u8, 195u8, 184u8, 107u8, 65u8,
                        ],
                    )
                }
                #[doc = " Decode the given public session keys."]
                #[doc = ""]
                #[doc = " Returns the list of public raw public keys + key type."]
                pub fn decode_session_keys(
                    &self,
                    encoded: types::decode_session_keys::Encoded,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::DecodeSessionKeys,
                    types::decode_session_keys::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "SessionKeys",
                        "decode_session_keys",
                        types::DecodeSessionKeys { encoded },
                        [
                            57u8, 242u8, 18u8, 51u8, 132u8, 110u8, 238u8, 255u8, 39u8, 194u8, 8u8,
                            54u8, 198u8, 178u8, 75u8, 151u8, 148u8, 176u8, 144u8, 197u8, 87u8,
                            29u8, 179u8, 235u8, 176u8, 78u8, 252u8, 103u8, 72u8, 203u8, 151u8,
                            248u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod generate_session_keys {
                    use super::runtime_types;
                    pub type Seed = ::core::option::Option<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GenerateSessionKeys {
                    pub seed: generate_session_keys::Seed,
                }
                pub mod decode_session_keys {
                    use super::runtime_types;
                    pub type Encoded =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<(
                                ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                                runtime_types::sp_core::crypto::KeyTypeId,
                            )>,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct DecodeSessionKeys {
                    pub encoded: decode_session_keys::Encoded,
                }
            }
        }
        pub mod grandpa_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " APIs for integrating the GRANDPA finality gadget into runtimes."]
            #[doc = " This should be implemented on the runtime side."]
            #[doc = ""]
            #[doc = " This is primarily used for negotiating authority-set changes for the"]
            #[doc = " gadget. GRANDPA uses a signaling model of changing authority sets:"]
            #[doc = " changes should be signaled with a delay of N blocks, and then automatically"]
            #[doc = " applied in the runtime after those N blocks have passed."]
            #[doc = ""]
            #[doc = " The consensus protocol will coordinate the handoff externally."]
            pub struct GrandpaApi;
            impl GrandpaApi {
                #[doc = " Get the current GRANDPA authorities and weights. This should not change except"]
                #[doc = " for when changes are scheduled and the corresponding delay has passed."]
                #[doc = ""]
                #[doc = " When called at block B, it will return the set of authorities that should be"]
                #[doc = " used to finalize descendants of this block (B+1, B+2, ...). The block B itself"]
                #[doc = " is finalized by the authorities from block B-1."]
                pub fn grandpa_authorities(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GrandpaAuthorities,
                    types::grandpa_authorities::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "GrandpaApi",
                        "grandpa_authorities",
                        types::GrandpaAuthorities {},
                        [
                            166u8, 76u8, 160u8, 101u8, 242u8, 145u8, 213u8, 10u8, 16u8, 130u8,
                            230u8, 196u8, 125u8, 152u8, 92u8, 143u8, 119u8, 223u8, 140u8, 189u8,
                            203u8, 95u8, 52u8, 105u8, 147u8, 107u8, 135u8, 228u8, 62u8, 178u8,
                            128u8, 33u8,
                        ],
                    )
                }
                #[doc = " Submits an unsigned extrinsic to report an equivocation. The caller"]
                #[doc = " must provide the equivocation proof and a key ownership proof"]
                #[doc = " (should be obtained using `generate_key_ownership_proof`). The"]
                #[doc = " extrinsic will be unsigned and should only be accepted for local"]
                #[doc = " authorship (not to be broadcast to the network). This method returns"]
                #[doc = " `None` when creation of the extrinsic fails, e.g. if equivocation"]
                #[doc = " reporting is disabled for the given runtime (i.e. this method is"]
                #[doc = " hardcoded to return `None`). Only useful in an offchain context."]
                pub fn submit_report_equivocation_unsigned_extrinsic(
                    &self,
                    equivocation_proof : types :: submit_report_equivocation_unsigned_extrinsic :: EquivocationProof,
                    key_owner_proof : types :: submit_report_equivocation_unsigned_extrinsic :: KeyOwnerProof,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::SubmitReportEquivocationUnsignedExtrinsic,
                    types::submit_report_equivocation_unsigned_extrinsic::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "GrandpaApi",
                        "submit_report_equivocation_unsigned_extrinsic",
                        types::SubmitReportEquivocationUnsignedExtrinsic {
                            equivocation_proof,
                            key_owner_proof,
                        },
                        [
                            112u8, 94u8, 150u8, 250u8, 132u8, 127u8, 185u8, 24u8, 113u8, 62u8,
                            28u8, 171u8, 83u8, 9u8, 41u8, 228u8, 92u8, 137u8, 29u8, 190u8, 214u8,
                            232u8, 100u8, 66u8, 100u8, 168u8, 149u8, 122u8, 93u8, 17u8, 236u8,
                            104u8,
                        ],
                    )
                }
                #[doc = " Generates a proof of key ownership for the given authority in the"]
                #[doc = " given set. An example usage of this module is coupled with the"]
                #[doc = " session historical module to prove that a given authority key is"]
                #[doc = " tied to a given staking identity during a specific session. Proofs"]
                #[doc = " of key ownership are necessary for submitting equivocation reports."]
                #[doc = " NOTE: even though the API takes a `set_id` as parameter the current"]
                #[doc = " implementations ignore this parameter and instead rely on this"]
                #[doc = " method being called at the correct block height, i.e. any point at"]
                #[doc = " which the given set id is live on-chain. Future implementations will"]
                #[doc = " instead use indexed data through an offchain worker, not requiring"]
                #[doc = " older states to be available."]
                pub fn generate_key_ownership_proof(
                    &self,
                    set_id: types::generate_key_ownership_proof::SetId,
                    authority_id: types::generate_key_ownership_proof::AuthorityId,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::GenerateKeyOwnershipProof,
                    types::generate_key_ownership_proof::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "GrandpaApi",
                        "generate_key_ownership_proof",
                        types::GenerateKeyOwnershipProof {
                            set_id,
                            authority_id,
                        },
                        [
                            40u8, 126u8, 113u8, 27u8, 245u8, 45u8, 123u8, 138u8, 12u8, 3u8, 125u8,
                            186u8, 151u8, 53u8, 186u8, 93u8, 13u8, 150u8, 163u8, 176u8, 206u8,
                            89u8, 244u8, 127u8, 182u8, 85u8, 203u8, 41u8, 101u8, 183u8, 209u8,
                            179u8,
                        ],
                    )
                }
                #[doc = " Get current GRANDPA authority set id."]
                pub fn current_set_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::CurrentSetId,
                    types::current_set_id::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "GrandpaApi",
                        "current_set_id",
                        types::CurrentSetId {},
                        [
                            42u8, 230u8, 120u8, 211u8, 156u8, 245u8, 109u8, 86u8, 100u8, 146u8,
                            234u8, 205u8, 41u8, 183u8, 109u8, 42u8, 17u8, 33u8, 156u8, 25u8, 139u8,
                            84u8, 101u8, 75u8, 232u8, 198u8, 87u8, 136u8, 218u8, 233u8, 103u8,
                            156u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod grandpa_authorities {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            runtime_types::sp_consensus_grandpa::app::Public,
                            ::core::primitive::u64,
                        )>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GrandpaAuthorities {}
                pub mod submit_report_equivocation_unsigned_extrinsic {
                    use super::runtime_types;
                    pub type EquivocationProof =
                        runtime_types::sp_consensus_grandpa::EquivocationProof<
                            ::subxt::ext::subxt_core::utils::H256,
                            ::core::primitive::u32,
                        >;
                    pub type KeyOwnerProof =
                        runtime_types::sp_consensus_grandpa::OpaqueKeyOwnershipProof;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<()>;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SubmitReportEquivocationUnsignedExtrinsic {
                    pub equivocation_proof:
                        submit_report_equivocation_unsigned_extrinsic::EquivocationProof,
                    pub key_owner_proof:
                        submit_report_equivocation_unsigned_extrinsic::KeyOwnerProof,
                }
                pub mod generate_key_ownership_proof {
                    use super::runtime_types;
                    pub type SetId = ::core::primitive::u64;
                    pub type AuthorityId = runtime_types::sp_consensus_grandpa::app::Public;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::option::Option<
                            runtime_types::sp_consensus_grandpa::OpaqueKeyOwnershipProof,
                        >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct GenerateKeyOwnershipProof {
                    pub set_id: generate_key_ownership_proof::SetId,
                    pub authority_id: generate_key_ownership_proof::AuthorityId,
                }
                pub mod current_set_id {
                    use super::runtime_types;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u64;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CurrentSetId {}
            }
        }
        pub mod account_nonce_api {
            use super::root_mod;
            use super::runtime_types;
            #[doc = " The API to query account nonce."]
            pub struct AccountNonceApi;
            impl AccountNonceApi {
                #[doc = " Get current account nonce of given `AccountId`."]
                pub fn account_nonce(
                    &self,
                    account: types::account_nonce::Account,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::AccountNonce,
                    types::account_nonce::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "AccountNonceApi",
                        "account_nonce",
                        types::AccountNonce { account },
                        [
                            111u8, 252u8, 218u8, 121u8, 124u8, 180u8, 33u8, 195u8, 162u8, 67u8,
                            106u8, 103u8, 133u8, 42u8, 226u8, 23u8, 203u8, 245u8, 174u8, 232u8,
                            216u8, 10u8, 156u8, 113u8, 91u8, 218u8, 20u8, 145u8, 31u8, 207u8,
                            199u8, 49u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod account_nonce {
                    use super::runtime_types;
                    pub type Account = runtime_types::sp_runtime::account::AccountId20;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u32;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AccountNonce {
                    pub account: account_nonce::Account,
                }
            }
        }
        pub mod transaction_payment_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct TransactionPaymentApi;
            impl TransactionPaymentApi {
                pub fn query_info(
                    &self,
                    uxt: types::query_info::Uxt,
                    len: types::query_info::Len,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryInfo,
                    types::query_info::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentApi",
                        "query_info",
                        types::QueryInfo { uxt, len },
                        [
                            56u8, 30u8, 174u8, 34u8, 202u8, 24u8, 177u8, 189u8, 145u8, 36u8, 1u8,
                            156u8, 98u8, 209u8, 178u8, 49u8, 198u8, 23u8, 150u8, 173u8, 35u8,
                            205u8, 147u8, 129u8, 42u8, 22u8, 69u8, 3u8, 129u8, 8u8, 196u8, 139u8,
                        ],
                    )
                }
                pub fn query_fee_details(
                    &self,
                    uxt: types::query_fee_details::Uxt,
                    len: types::query_fee_details::Len,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryFeeDetails,
                    types::query_fee_details::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentApi",
                        "query_fee_details",
                        types::QueryFeeDetails { uxt, len },
                        [
                            117u8, 60u8, 137u8, 159u8, 237u8, 252u8, 216u8, 238u8, 232u8, 1u8,
                            100u8, 152u8, 26u8, 185u8, 145u8, 125u8, 68u8, 189u8, 4u8, 30u8, 125u8,
                            7u8, 196u8, 153u8, 235u8, 51u8, 219u8, 108u8, 185u8, 254u8, 100u8,
                            201u8,
                        ],
                    )
                }
                pub fn query_weight_to_fee(
                    &self,
                    weight: types::query_weight_to_fee::Weight,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryWeightToFee,
                    types::query_weight_to_fee::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentApi",
                        "query_weight_to_fee",
                        types::QueryWeightToFee { weight },
                        [
                            206u8, 243u8, 189u8, 83u8, 231u8, 244u8, 247u8, 52u8, 126u8, 208u8,
                            224u8, 5u8, 163u8, 108u8, 254u8, 114u8, 214u8, 156u8, 227u8, 217u8,
                            211u8, 198u8, 121u8, 164u8, 110u8, 54u8, 181u8, 146u8, 50u8, 146u8,
                            146u8, 23u8,
                        ],
                    )
                }
                pub fn query_length_to_fee(
                    &self,
                    length: types::query_length_to_fee::Length,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryLengthToFee,
                    types::query_length_to_fee::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentApi",
                        "query_length_to_fee",
                        types::QueryLengthToFee { length },
                        [
                            92u8, 132u8, 29u8, 119u8, 66u8, 11u8, 196u8, 224u8, 129u8, 23u8, 249u8,
                            12u8, 32u8, 28u8, 92u8, 50u8, 188u8, 101u8, 203u8, 229u8, 248u8, 216u8,
                            130u8, 150u8, 212u8, 161u8, 81u8, 254u8, 116u8, 89u8, 162u8, 48u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod query_info {
                    use super::runtime_types;
                    pub type Uxt = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > ;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
                                ::core::primitive::u128,
                                runtime_types::sp_weights::weight_v2::Weight,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryInfo {
                    pub uxt: query_info::Uxt,
                    pub len: query_info::Len,
                }
                pub mod query_fee_details {
                    use super::runtime_types;
                    pub type Uxt = :: subxt :: ext :: subxt_core :: utils :: UncheckedExtrinsic < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: RuntimeCall , runtime_types :: sp_runtime :: account :: EthereumSignature , (runtime_types :: frame_system :: extensions :: check_spec_version :: CheckSpecVersion , runtime_types :: frame_system :: extensions :: check_tx_version :: CheckTxVersion , runtime_types :: frame_system :: extensions :: check_genesis :: CheckGenesis , runtime_types :: frame_system :: extensions :: check_mortality :: CheckMortality , runtime_types :: frame_system :: extensions :: check_nonce :: CheckNonce , runtime_types :: frame_system :: extensions :: check_weight :: CheckWeight , runtime_types :: pallet_transaction_payment :: ChargeTransactionPayment , runtime_types :: frame_system :: extensions :: check_non_zero_sender :: CheckNonZeroSender ,) > ;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::FeeDetails<
                                ::core::primitive::u128,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryFeeDetails {
                    pub uxt: query_fee_details::Uxt,
                    pub len: query_fee_details::Len,
                }
                pub mod query_weight_to_fee {
                    use super::runtime_types;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryWeightToFee {
                    pub weight: query_weight_to_fee::Weight,
                }
                pub mod query_length_to_fee {
                    use super::runtime_types;
                    pub type Length = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryLengthToFee {
                    pub length: query_length_to_fee::Length,
                }
            }
        }
        pub mod transaction_payment_call_api {
            use super::root_mod;
            use super::runtime_types;
            pub struct TransactionPaymentCallApi;
            impl TransactionPaymentCallApi {
                #[doc = " Query information of a dispatch class, weight, and fee of a given encoded `Call`."]
                pub fn query_call_info(
                    &self,
                    call: types::query_call_info::Call,
                    len: types::query_call_info::Len,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryCallInfo,
                    types::query_call_info::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentCallApi",
                        "query_call_info",
                        types::QueryCallInfo { call, len },
                        [
                            208u8, 197u8, 186u8, 149u8, 5u8, 3u8, 106u8, 189u8, 237u8, 242u8,
                            186u8, 156u8, 141u8, 9u8, 152u8, 249u8, 248u8, 12u8, 44u8, 157u8,
                            194u8, 56u8, 72u8, 191u8, 195u8, 154u8, 63u8, 130u8, 135u8, 115u8,
                            32u8, 142u8,
                        ],
                    )
                }
                #[doc = " Query fee details of a given encoded `Call`."]
                pub fn query_call_fee_details(
                    &self,
                    call: types::query_call_fee_details::Call,
                    len: types::query_call_fee_details::Len,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryCallFeeDetails,
                    types::query_call_fee_details::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentCallApi",
                        "query_call_fee_details",
                        types::QueryCallFeeDetails { call, len },
                        [
                            14u8, 190u8, 179u8, 131u8, 76u8, 94u8, 152u8, 170u8, 19u8, 25u8, 195u8,
                            20u8, 91u8, 169u8, 32u8, 237u8, 62u8, 145u8, 203u8, 231u8, 124u8,
                            143u8, 16u8, 199u8, 8u8, 130u8, 196u8, 25u8, 188u8, 235u8, 187u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " Query the output of the current `WeightToFee` given some input."]
                pub fn query_weight_to_fee(
                    &self,
                    weight: types::query_weight_to_fee::Weight,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryWeightToFee,
                    types::query_weight_to_fee::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentCallApi",
                        "query_weight_to_fee",
                        types::QueryWeightToFee { weight },
                        [
                            117u8, 91u8, 94u8, 22u8, 248u8, 212u8, 15u8, 23u8, 97u8, 116u8, 64u8,
                            228u8, 83u8, 123u8, 87u8, 77u8, 97u8, 7u8, 98u8, 181u8, 6u8, 165u8,
                            114u8, 141u8, 164u8, 113u8, 126u8, 88u8, 174u8, 171u8, 224u8, 35u8,
                        ],
                    )
                }
                #[doc = " Query the output of the current `LengthToFee` given some input."]
                pub fn query_length_to_fee(
                    &self,
                    length: types::query_length_to_fee::Length,
                ) -> ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload<
                    types::QueryLengthToFee,
                    types::query_length_to_fee::output::Output,
                > {
                    ::subxt::ext::subxt_core::runtime_api::payload::StaticPayload::new_static(
                        "TransactionPaymentCallApi",
                        "query_length_to_fee",
                        types::QueryLengthToFee { length },
                        [
                            246u8, 40u8, 4u8, 160u8, 152u8, 94u8, 170u8, 53u8, 205u8, 122u8, 5u8,
                            69u8, 70u8, 25u8, 128u8, 156u8, 119u8, 134u8, 116u8, 147u8, 14u8,
                            164u8, 65u8, 140u8, 86u8, 13u8, 250u8, 218u8, 89u8, 95u8, 234u8, 228u8,
                        ],
                    )
                }
            }
            pub mod types {
                use super::runtime_types;
                pub mod query_call_info {
                    use super::runtime_types;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::RuntimeDispatchInfo<
                                ::core::primitive::u128,
                                runtime_types::sp_weights::weight_v2::Weight,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryCallInfo {
                    pub call: query_call_info::Call,
                    pub len: query_call_info::Len,
                }
                pub mod query_call_fee_details {
                    use super::runtime_types;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                    pub type Len = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output =
                            runtime_types::pallet_transaction_payment::types::FeeDetails<
                                ::core::primitive::u128,
                            >;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryCallFeeDetails {
                    pub call: query_call_fee_details::Call,
                    pub len: query_call_fee_details::Len,
                }
                pub mod query_weight_to_fee {
                    use super::runtime_types;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryWeightToFee {
                    pub weight: query_weight_to_fee::Weight,
                }
                pub mod query_length_to_fee {
                    use super::runtime_types;
                    pub type Length = ::core::primitive::u32;
                    pub mod output {
                        use super::runtime_types;
                        pub type Output = ::core::primitive::u128;
                    }
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct QueryLengthToFee {
                    pub length: query_length_to_fee::Length,
                }
            }
        }
    }
    pub fn custom() -> CustomValuesApi {
        CustomValuesApi
    }
    pub struct CustomValuesApi;
    impl CustomValuesApi {}
    pub struct ConstantsApi;
    impl ConstantsApi {
        pub fn system(&self) -> system::constants::ConstantsApi {
            system::constants::ConstantsApi
        }
        pub fn timestamp(&self) -> timestamp::constants::ConstantsApi {
            timestamp::constants::ConstantsApi
        }
        pub fn utility(&self) -> utility::constants::ConstantsApi {
            utility::constants::ConstantsApi
        }
        pub fn proxy(&self) -> proxy::constants::ConstantsApi {
            proxy::constants::ConstantsApi
        }
        pub fn rolldown(&self) -> rolldown::constants::ConstantsApi {
            rolldown::constants::ConstantsApi
        }
        pub fn metamask(&self) -> metamask::constants::ConstantsApi {
            metamask::constants::ConstantsApi
        }
        pub fn tokens(&self) -> tokens::constants::ConstantsApi {
            tokens::constants::ConstantsApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::constants::ConstantsApi {
            transaction_payment::constants::ConstantsApi
        }
        pub fn xyk(&self) -> xyk::constants::ConstantsApi {
            xyk::constants::ConstantsApi
        }
        pub fn proof_of_stake(&self) -> proof_of_stake::constants::ConstantsApi {
            proof_of_stake::constants::ConstantsApi
        }
        pub fn fee_lock(&self) -> fee_lock::constants::ConstantsApi {
            fee_lock::constants::ConstantsApi
        }
        pub fn vesting(&self) -> vesting::constants::ConstantsApi {
            vesting::constants::ConstantsApi
        }
        pub fn crowdloan(&self) -> crowdloan::constants::ConstantsApi {
            crowdloan::constants::ConstantsApi
        }
        pub fn issuance(&self) -> issuance::constants::ConstantsApi {
            issuance::constants::ConstantsApi
        }
        pub fn bootstrap(&self) -> bootstrap::constants::ConstantsApi {
            bootstrap::constants::ConstantsApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::constants::ConstantsApi {
            parachain_staking::constants::ConstantsApi
        }
        pub fn sequencer_staking(&self) -> sequencer_staking::constants::ConstantsApi {
            sequencer_staking::constants::ConstantsApi
        }
        pub fn grandpa(&self) -> grandpa::constants::ConstantsApi {
            grandpa::constants::ConstantsApi
        }
        pub fn asset_registry(&self) -> asset_registry::constants::ConstantsApi {
            asset_registry::constants::ConstantsApi
        }
        pub fn treasury(&self) -> treasury::constants::ConstantsApi {
            treasury::constants::ConstantsApi
        }
        pub fn council(&self) -> council::constants::ConstantsApi {
            council::constants::ConstantsApi
        }
        pub fn identity(&self) -> identity::constants::ConstantsApi {
            identity::constants::ConstantsApi
        }
    }
    pub struct StorageApi;
    impl StorageApi {
        pub fn system(&self) -> system::storage::StorageApi {
            system::storage::StorageApi
        }
        pub fn timestamp(&self) -> timestamp::storage::StorageApi {
            timestamp::storage::StorageApi
        }
        pub fn proxy(&self) -> proxy::storage::StorageApi {
            proxy::storage::StorageApi
        }
        pub fn maintenance(&self) -> maintenance::storage::StorageApi {
            maintenance::storage::StorageApi
        }
        pub fn rolldown(&self) -> rolldown::storage::StorageApi {
            rolldown::storage::StorageApi
        }
        pub fn metamask(&self) -> metamask::storage::StorageApi {
            metamask::storage::StorageApi
        }
        pub fn tokens(&self) -> tokens::storage::StorageApi {
            tokens::storage::StorageApi
        }
        pub fn transaction_payment(&self) -> transaction_payment::storage::StorageApi {
            transaction_payment::storage::StorageApi
        }
        pub fn xyk(&self) -> xyk::storage::StorageApi {
            xyk::storage::StorageApi
        }
        pub fn proof_of_stake(&self) -> proof_of_stake::storage::StorageApi {
            proof_of_stake::storage::StorageApi
        }
        pub fn fee_lock(&self) -> fee_lock::storage::StorageApi {
            fee_lock::storage::StorageApi
        }
        pub fn vesting(&self) -> vesting::storage::StorageApi {
            vesting::storage::StorageApi
        }
        pub fn crowdloan(&self) -> crowdloan::storage::StorageApi {
            crowdloan::storage::StorageApi
        }
        pub fn issuance(&self) -> issuance::storage::StorageApi {
            issuance::storage::StorageApi
        }
        pub fn multi_purpose_liquidity(&self) -> multi_purpose_liquidity::storage::StorageApi {
            multi_purpose_liquidity::storage::StorageApi
        }
        pub fn bootstrap(&self) -> bootstrap::storage::StorageApi {
            bootstrap::storage::StorageApi
        }
        pub fn authorship(&self) -> authorship::storage::StorageApi {
            authorship::storage::StorageApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::storage::StorageApi {
            parachain_staking::storage::StorageApi
        }
        pub fn sequencer_staking(&self) -> sequencer_staking::storage::StorageApi {
            sequencer_staking::storage::StorageApi
        }
        pub fn session(&self) -> session::storage::StorageApi {
            session::storage::StorageApi
        }
        pub fn aura(&self) -> aura::storage::StorageApi {
            aura::storage::StorageApi
        }
        pub fn grandpa(&self) -> grandpa::storage::StorageApi {
            grandpa::storage::StorageApi
        }
        pub fn asset_registry(&self) -> asset_registry::storage::StorageApi {
            asset_registry::storage::StorageApi
        }
        pub fn treasury(&self) -> treasury::storage::StorageApi {
            treasury::storage::StorageApi
        }
        pub fn sudo(&self) -> sudo::storage::StorageApi {
            sudo::storage::StorageApi
        }
        pub fn council(&self) -> council::storage::StorageApi {
            council::storage::StorageApi
        }
        pub fn identity(&self) -> identity::storage::StorageApi {
            identity::storage::StorageApi
        }
        pub fn foundation_members(&self) -> foundation_members::storage::StorageApi {
            foundation_members::storage::StorageApi
        }
    }
    pub struct TransactionApi;
    impl TransactionApi {
        pub fn system(&self) -> system::calls::TransactionApi {
            system::calls::TransactionApi
        }
        pub fn timestamp(&self) -> timestamp::calls::TransactionApi {
            timestamp::calls::TransactionApi
        }
        pub fn utility(&self) -> utility::calls::TransactionApi {
            utility::calls::TransactionApi
        }
        pub fn proxy(&self) -> proxy::calls::TransactionApi {
            proxy::calls::TransactionApi
        }
        pub fn maintenance(&self) -> maintenance::calls::TransactionApi {
            maintenance::calls::TransactionApi
        }
        pub fn rolldown(&self) -> rolldown::calls::TransactionApi {
            rolldown::calls::TransactionApi
        }
        pub fn metamask(&self) -> metamask::calls::TransactionApi {
            metamask::calls::TransactionApi
        }
        pub fn tokens(&self) -> tokens::calls::TransactionApi {
            tokens::calls::TransactionApi
        }
        pub fn xyk(&self) -> xyk::calls::TransactionApi {
            xyk::calls::TransactionApi
        }
        pub fn proof_of_stake(&self) -> proof_of_stake::calls::TransactionApi {
            proof_of_stake::calls::TransactionApi
        }
        pub fn fee_lock(&self) -> fee_lock::calls::TransactionApi {
            fee_lock::calls::TransactionApi
        }
        pub fn vesting(&self) -> vesting::calls::TransactionApi {
            vesting::calls::TransactionApi
        }
        pub fn crowdloan(&self) -> crowdloan::calls::TransactionApi {
            crowdloan::calls::TransactionApi
        }
        pub fn issuance(&self) -> issuance::calls::TransactionApi {
            issuance::calls::TransactionApi
        }
        pub fn multi_purpose_liquidity(&self) -> multi_purpose_liquidity::calls::TransactionApi {
            multi_purpose_liquidity::calls::TransactionApi
        }
        pub fn bootstrap(&self) -> bootstrap::calls::TransactionApi {
            bootstrap::calls::TransactionApi
        }
        pub fn parachain_staking(&self) -> parachain_staking::calls::TransactionApi {
            parachain_staking::calls::TransactionApi
        }
        pub fn sequencer_staking(&self) -> sequencer_staking::calls::TransactionApi {
            sequencer_staking::calls::TransactionApi
        }
        pub fn session(&self) -> session::calls::TransactionApi {
            session::calls::TransactionApi
        }
        pub fn grandpa(&self) -> grandpa::calls::TransactionApi {
            grandpa::calls::TransactionApi
        }
        pub fn asset_registry(&self) -> asset_registry::calls::TransactionApi {
            asset_registry::calls::TransactionApi
        }
        pub fn treasury(&self) -> treasury::calls::TransactionApi {
            treasury::calls::TransactionApi
        }
        pub fn sudo(&self) -> sudo::calls::TransactionApi {
            sudo::calls::TransactionApi
        }
        pub fn sudo_origin(&self) -> sudo_origin::calls::TransactionApi {
            sudo_origin::calls::TransactionApi
        }
        pub fn council(&self) -> council::calls::TransactionApi {
            council::calls::TransactionApi
        }
        pub fn identity(&self) -> identity::calls::TransactionApi {
            identity::calls::TransactionApi
        }
        pub fn foundation_members(&self) -> foundation_members::calls::TransactionApi {
            foundation_members::calls::TransactionApi
        }
    }
    #[doc = r" check whether the metadata provided is aligned with this statically generated code."]
    pub fn is_codegen_valid_for(metadata: &::subxt::ext::subxt_core::Metadata) -> bool {
        let runtime_metadata_hash = metadata
            .hasher()
            .only_these_pallets(&PALLETS)
            .only_these_runtime_apis(&RUNTIME_APIS)
            .hash();
        runtime_metadata_hash
            == [
                136u8, 34u8, 146u8, 4u8, 223u8, 56u8, 140u8, 160u8, 171u8, 223u8, 221u8, 202u8,
                73u8, 25u8, 37u8, 125u8, 21u8, 210u8, 161u8, 198u8, 133u8, 219u8, 5u8, 65u8, 159u8,
                78u8, 216u8, 14u8, 47u8, 253u8, 53u8, 212u8,
            ]
    }
    pub mod system {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the System pallet"]
        pub type Error = runtime_types::frame_system::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::frame_system::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Persists list of encoded txs into the storage queue. There is an dedicated"]
                #[doc = "check in [Executive](https://storage.googleapis.com/mangata-docs-node/frame_executive/struct.Executive.html) that verifies that passed binary data can be"]
                #[doc = "decoded into extrinsics."]
                pub struct EnqueueTxs {
                    pub txs: enqueue_txs::Txs,
                }
                pub mod enqueue_txs {
                    use super::runtime_types;
                    pub type Txs = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    )>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for EnqueueTxs {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "enqueue_txs";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "Can be executed by every `origin`."]
                pub struct Remark {
                    pub remark: remark::Remark,
                }
                pub mod remark {
                    use super::runtime_types;
                    pub type Remark =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Remark {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub struct SetHeapPages {
                    pub pages: set_heap_pages::Pages,
                }
                pub mod set_heap_pages {
                    use super::runtime_types;
                    pub type Pages = ::core::primitive::u64;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetHeapPages {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_heap_pages";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the new runtime code."]
                pub struct SetCode {
                    pub code: set_code::Code,
                }
                pub mod set_code {
                    use super::runtime_types;
                    pub type Code =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCode {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "Note that runtime upgrades will not run if this is called with a not-increasing spec"]
                #[doc = "version!"]
                pub struct SetCodeWithoutChecks {
                    pub code: set_code_without_checks::Code,
                }
                pub mod set_code_without_checks {
                    use super::runtime_types;
                    pub type Code =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCodeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_code_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set some items of storage."]
                pub struct SetStorage {
                    pub items: set_storage::Items,
                }
                pub mod set_storage {
                    use super::runtime_types;
                    pub type Items = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    )>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "set_storage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Kill some items from storage."]
                pub struct KillStorage {
                    pub keys: kill_storage::Keys,
                }
                pub mod kill_storage {
                    use super::runtime_types;
                    pub type Keys = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillStorage {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_storage";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub struct KillPrefix {
                    pub prefix: kill_prefix::Prefix,
                    pub subkeys: kill_prefix::Subkeys,
                }
                pub mod kill_prefix {
                    use super::runtime_types;
                    pub type Prefix =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub type Subkeys = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillPrefix {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "kill_prefix";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Make some on-chain remark and emit event."]
                pub struct RemarkWithEvent {
                    pub remark: remark_with_event::Remark,
                }
                pub mod remark_with_event {
                    use super::runtime_types;
                    pub type Remark =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemarkWithEvent {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "remark_with_event";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub struct AuthorizeUpgrade {
                    pub code_hash: authorize_upgrade::CodeHash,
                }
                pub mod authorize_upgrade {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AuthorizeUpgrade {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "authorize_upgrade";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "WARNING: This authorizes an upgrade that will take place without any safety checks, for"]
                #[doc = "example that the spec name remains the same and that the version number increases. Not"]
                #[doc = "recommended for normal use. Use `authorize_upgrade` instead."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub struct AuthorizeUpgradeWithoutChecks {
                    pub code_hash: authorize_upgrade_without_checks::CodeHash,
                }
                pub mod authorize_upgrade_without_checks {
                    use super::runtime_types;
                    pub type CodeHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AuthorizeUpgradeWithoutChecks {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "authorize_upgrade_without_checks";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
                #[doc = ""]
                #[doc = "If the authorization required a version check, this call will ensure the spec name"]
                #[doc = "remains unchanged and that the spec version has increased."]
                #[doc = ""]
                #[doc = "Depending on the runtime's `OnSetCode` configuration, this function may directly apply"]
                #[doc = "the new `code` in the same block or attempt to schedule the upgrade."]
                #[doc = ""]
                #[doc = "All origins are allowed."]
                pub struct ApplyAuthorizedUpgrade {
                    pub code: apply_authorized_upgrade::Code,
                }
                pub mod apply_authorized_upgrade {
                    use super::runtime_types;
                    pub type Code =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApplyAuthorizedUpgrade {
                    const PALLET: &'static str = "System";
                    const CALL: &'static str = "apply_authorized_upgrade";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Persists list of encoded txs into the storage queue. There is an dedicated"]
                #[doc = "check in [Executive](https://storage.googleapis.com/mangata-docs-node/frame_executive/struct.Executive.html) that verifies that passed binary data can be"]
                #[doc = "decoded into extrinsics."]
                pub fn enqueue_txs(
                    &self,
                    txs: types::enqueue_txs::Txs,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::EnqueueTxs>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "enqueue_txs",
                        types::EnqueueTxs { txs },
                        [
                            51u8, 66u8, 48u8, 255u8, 217u8, 131u8, 160u8, 197u8, 213u8, 67u8,
                            162u8, 189u8, 24u8, 192u8, 27u8, 214u8, 85u8, 187u8, 6u8, 201u8, 31u8,
                            235u8, 150u8, 60u8, 38u8, 115u8, 9u8, 23u8, 176u8, 19u8, 18u8, 7u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark."]
                #[doc = ""]
                #[doc = "Can be executed by every `origin`."]
                pub fn remark(
                    &self,
                    remark: types::remark::Remark,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Remark>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "remark",
                        types::Remark { remark },
                        [
                            43u8, 126u8, 180u8, 174u8, 141u8, 48u8, 52u8, 125u8, 166u8, 212u8,
                            216u8, 98u8, 100u8, 24u8, 132u8, 71u8, 101u8, 64u8, 246u8, 169u8, 33u8,
                            250u8, 147u8, 208u8, 2u8, 40u8, 129u8, 209u8, 232u8, 207u8, 207u8,
                            13u8,
                        ],
                    )
                }
                #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                pub fn set_heap_pages(
                    &self,
                    pages: types::set_heap_pages::Pages,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetHeapPages>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "set_heap_pages",
                        types::SetHeapPages { pages },
                        [
                            188u8, 191u8, 99u8, 216u8, 219u8, 109u8, 141u8, 50u8, 78u8, 235u8,
                            215u8, 242u8, 195u8, 24u8, 111u8, 76u8, 229u8, 64u8, 99u8, 225u8,
                            134u8, 121u8, 81u8, 209u8, 127u8, 223u8, 98u8, 215u8, 150u8, 70u8,
                            57u8, 147u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code."]
                pub fn set_code(
                    &self,
                    code: types::set_code::Code,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCode>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "set_code",
                        types::SetCode { code },
                        [
                            233u8, 248u8, 88u8, 245u8, 28u8, 65u8, 25u8, 169u8, 35u8, 237u8, 19u8,
                            203u8, 136u8, 160u8, 18u8, 3u8, 20u8, 197u8, 81u8, 169u8, 244u8, 188u8,
                            27u8, 147u8, 147u8, 236u8, 65u8, 25u8, 3u8, 143u8, 182u8, 22u8,
                        ],
                    )
                }
                #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                #[doc = ""]
                #[doc = "Note that runtime upgrades will not run if this is called with a not-increasing spec"]
                #[doc = "version!"]
                pub fn set_code_without_checks(
                    &self,
                    code: types::set_code_without_checks::Code,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetCodeWithoutChecks>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "set_code_without_checks",
                        types::SetCodeWithoutChecks { code },
                        [
                            82u8, 212u8, 157u8, 44u8, 70u8, 0u8, 143u8, 15u8, 109u8, 109u8, 107u8,
                            157u8, 141u8, 42u8, 169u8, 11u8, 15u8, 186u8, 252u8, 138u8, 10u8,
                            147u8, 15u8, 178u8, 247u8, 229u8, 213u8, 98u8, 207u8, 231u8, 119u8,
                            115u8,
                        ],
                    )
                }
                #[doc = "Set some items of storage."]
                pub fn set_storage(
                    &self,
                    items: types::set_storage::Items,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetStorage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "set_storage",
                        types::SetStorage { items },
                        [
                            141u8, 216u8, 52u8, 222u8, 223u8, 136u8, 123u8, 181u8, 19u8, 75u8,
                            163u8, 102u8, 229u8, 189u8, 158u8, 142u8, 95u8, 235u8, 240u8, 49u8,
                            150u8, 76u8, 78u8, 137u8, 126u8, 88u8, 183u8, 88u8, 231u8, 146u8,
                            234u8, 43u8,
                        ],
                    )
                }
                #[doc = "Kill some items from storage."]
                pub fn kill_storage(
                    &self,
                    keys: types::kill_storage::Keys,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillStorage>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "kill_storage",
                        types::KillStorage { keys },
                        [
                            73u8, 63u8, 196u8, 36u8, 144u8, 114u8, 34u8, 213u8, 108u8, 93u8, 209u8,
                            234u8, 153u8, 185u8, 33u8, 91u8, 187u8, 195u8, 223u8, 130u8, 58u8,
                            156u8, 63u8, 47u8, 228u8, 249u8, 216u8, 139u8, 143u8, 177u8, 41u8,
                            35u8,
                        ],
                    )
                }
                #[doc = "Kill all storage items with a key that starts with the given prefix."]
                #[doc = ""]
                #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                pub fn kill_prefix(
                    &self,
                    prefix: types::kill_prefix::Prefix,
                    subkeys: types::kill_prefix::Subkeys,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillPrefix>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "kill_prefix",
                        types::KillPrefix { prefix, subkeys },
                        [
                            184u8, 57u8, 139u8, 24u8, 208u8, 87u8, 108u8, 215u8, 198u8, 189u8,
                            175u8, 242u8, 167u8, 215u8, 97u8, 63u8, 110u8, 166u8, 238u8, 98u8,
                            67u8, 236u8, 111u8, 110u8, 234u8, 81u8, 102u8, 5u8, 182u8, 5u8, 214u8,
                            85u8,
                        ],
                    )
                }
                #[doc = "Make some on-chain remark and emit event."]
                pub fn remark_with_event(
                    &self,
                    remark: types::remark_with_event::Remark,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemarkWithEvent>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "remark_with_event",
                        types::RemarkWithEvent { remark },
                        [
                            120u8, 120u8, 153u8, 92u8, 184u8, 85u8, 34u8, 2u8, 174u8, 206u8, 105u8,
                            228u8, 233u8, 130u8, 80u8, 246u8, 228u8, 59u8, 234u8, 240u8, 4u8, 49u8,
                            147u8, 170u8, 115u8, 91u8, 149u8, 200u8, 228u8, 181u8, 8u8, 154u8,
                        ],
                    )
                }
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub fn authorize_upgrade(
                    &self,
                    code_hash: types::authorize_upgrade::CodeHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AuthorizeUpgrade>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "authorize_upgrade",
                        types::AuthorizeUpgrade { code_hash },
                        [
                            4u8, 14u8, 76u8, 107u8, 209u8, 129u8, 9u8, 39u8, 193u8, 17u8, 84u8,
                            254u8, 170u8, 214u8, 24u8, 155u8, 29u8, 184u8, 249u8, 241u8, 109u8,
                            58u8, 145u8, 131u8, 109u8, 63u8, 38u8, 165u8, 107u8, 215u8, 217u8,
                            172u8,
                        ],
                    )
                }
                #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                #[doc = "later."]
                #[doc = ""]
                #[doc = "WARNING: This authorizes an upgrade that will take place without any safety checks, for"]
                #[doc = "example that the spec name remains the same and that the version number increases. Not"]
                #[doc = "recommended for normal use. Use `authorize_upgrade` instead."]
                #[doc = ""]
                #[doc = "This call requires Root origin."]
                pub fn authorize_upgrade_without_checks(
                    &self,
                    code_hash: types::authorize_upgrade_without_checks::CodeHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::AuthorizeUpgradeWithoutChecks,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "authorize_upgrade_without_checks",
                        types::AuthorizeUpgradeWithoutChecks { code_hash },
                        [
                            126u8, 126u8, 55u8, 26u8, 47u8, 55u8, 66u8, 8u8, 167u8, 18u8, 29u8,
                            136u8, 146u8, 14u8, 189u8, 117u8, 16u8, 227u8, 162u8, 61u8, 149u8,
                            197u8, 104u8, 184u8, 185u8, 161u8, 99u8, 154u8, 80u8, 125u8, 181u8,
                            233u8,
                        ],
                    )
                }
                #[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
                #[doc = ""]
                #[doc = "If the authorization required a version check, this call will ensure the spec name"]
                #[doc = "remains unchanged and that the spec version has increased."]
                #[doc = ""]
                #[doc = "Depending on the runtime's `OnSetCode` configuration, this function may directly apply"]
                #[doc = "the new `code` in the same block or attempt to schedule the upgrade."]
                #[doc = ""]
                #[doc = "All origins are allowed."]
                pub fn apply_authorized_upgrade(
                    &self,
                    code: types::apply_authorized_upgrade::Code,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ApplyAuthorizedUpgrade,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "System",
                        "apply_authorized_upgrade",
                        types::ApplyAuthorizedUpgrade { code },
                        [
                            232u8, 107u8, 127u8, 38u8, 230u8, 29u8, 97u8, 4u8, 160u8, 191u8, 222u8,
                            156u8, 245u8, 102u8, 196u8, 141u8, 44u8, 163u8, 98u8, 68u8, 125u8,
                            32u8, 124u8, 101u8, 108u8, 93u8, 211u8, 52u8, 0u8, 231u8, 33u8, 227u8,
                        ],
                    )
                }
            }
        }
        #[doc = "Event for the System pallet."]
        pub type Event = runtime_types::frame_system::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An extrinsic completed successfully."]
            pub struct ExtrinsicSuccess {
                pub dispatch_info: extrinsic_success::DispatchInfo,
            }
            pub mod extrinsic_success {
                use super::runtime_types;
                pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExtrinsicSuccess {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicSuccess";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An extrinsic failed."]
            pub struct ExtrinsicFailed {
                pub dispatch_error: extrinsic_failed::DispatchError,
                pub dispatch_info: extrinsic_failed::DispatchInfo,
            }
            pub mod extrinsic_failed {
                use super::runtime_types;
                pub type DispatchError = runtime_types::sp_runtime::DispatchError;
                pub type DispatchInfo = runtime_types::frame_support::dispatch::DispatchInfo;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ExtrinsicFailed {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "ExtrinsicFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "`:code` was updated."]
            pub struct CodeUpdated;
            impl ::subxt::ext::subxt_core::events::StaticEvent for CodeUpdated {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "CodeUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new account was created."]
            pub struct NewAccount {
                pub account: new_account::Account,
            }
            pub mod new_account {
                use super::runtime_types;
                pub type Account = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "NewAccount";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account was reaped."]
            pub struct KilledAccount {
                pub account: killed_account::Account,
            }
            pub mod killed_account {
                use super::runtime_types;
                pub type Account = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for KilledAccount {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "KilledAccount";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "On on-chain remark happened."]
            pub struct Remarked {
                pub sender: remarked::Sender,
                pub hash: remarked::Hash,
            }
            pub mod remarked {
                use super::runtime_types;
                pub type Sender = runtime_types::sp_runtime::account::AccountId20;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Remarked {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "Remarked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "On stored txs"]
            pub struct TxsEnqueued {
                pub count: txs_enqueued::Count,
            }
            pub mod txs_enqueued {
                use super::runtime_types;
                pub type Count = ::core::primitive::u64;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TxsEnqueued {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "TxsEnqueued";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An upgrade was authorized."]
            pub struct UpgradeAuthorized {
                pub code_hash: upgrade_authorized::CodeHash,
                pub check_version: upgrade_authorized::CheckVersion,
            }
            pub mod upgrade_authorized {
                use super::runtime_types;
                pub type CodeHash = ::subxt::ext::subxt_core::utils::H256;
                pub type CheckVersion = ::core::primitive::bool;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UpgradeAuthorized {
                const PALLET: &'static str = "System";
                const EVENT: &'static str = "UpgradeAuthorized";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod account {
                    use super::runtime_types;
                    pub type Account =
                        runtime_types::frame_system::AccountInfo<::core::primitive::u32, ()>;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod extrinsic_count {
                    use super::runtime_types;
                    pub type ExtrinsicCount = ::core::primitive::u32;
                }
                pub mod inherents_applied {
                    use super::runtime_types;
                    pub type InherentsApplied = ::core::primitive::bool;
                }
                pub mod block_weight {
                    use super::runtime_types;
                    pub type BlockWeight = runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::sp_weights::weight_v2::Weight,
                    >;
                }
                pub mod all_extrinsics_len {
                    use super::runtime_types;
                    pub type AllExtrinsicsLen = ::core::primitive::u32;
                }
                pub mod block_hash {
                    use super::runtime_types;
                    pub type BlockHash = ::subxt::ext::subxt_core::utils::H256;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod block_seed {
                    use super::runtime_types;
                    pub type BlockSeed = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod storage_queue {
                    use super::runtime_types;
                    pub type StorageQueue =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                            ::core::primitive::u32,
                            ::core::option::Option<::core::primitive::u32>,
                            ::subxt::ext::subxt_core::alloc::vec::Vec<(
                                ::core::option::Option<
                                    runtime_types::sp_runtime::account::AccountId20,
                                >,
                                ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                            )>,
                        )>;
                }
                pub mod did_store_txs {
                    use super::runtime_types;
                    pub type DidStoreTxs = ::core::primitive::bool;
                }
                pub mod tx_prevalidation {
                    use super::runtime_types;
                    pub type TxPrevalidation = ::core::primitive::bool;
                }
                pub mod extrinsic_data {
                    use super::runtime_types;
                    pub type ExtrinsicData =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod number {
                    use super::runtime_types;
                    pub type Number = ::core::primitive::u32;
                }
                pub mod parent_hash {
                    use super::runtime_types;
                    pub type ParentHash = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod digest {
                    use super::runtime_types;
                    pub type Digest = runtime_types::sp_runtime::generic::digest::Digest;
                }
                pub mod events {
                    use super::runtime_types;
                    pub type Events = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::frame_system::EventRecord<
                            runtime_types::rollup_runtime::RuntimeEvent,
                            ::subxt::ext::subxt_core::utils::H256,
                        >,
                    >;
                }
                pub mod event_count {
                    use super::runtime_types;
                    pub type EventCount = ::core::primitive::u32;
                }
                pub mod event_topics {
                    use super::runtime_types;
                    pub type EventTopics = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                    )>;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod last_runtime_upgrade {
                    use super::runtime_types;
                    pub type LastRuntimeUpgrade =
                        runtime_types::frame_system::LastRuntimeUpgradeInfo;
                }
                pub mod upgraded_to_u32_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToU32RefCount = ::core::primitive::bool;
                }
                pub mod upgraded_to_triple_ref_count {
                    use super::runtime_types;
                    pub type UpgradedToTripleRefCount = ::core::primitive::bool;
                }
                pub mod execution_phase {
                    use super::runtime_types;
                    pub type ExecutionPhase = runtime_types::frame_system::Phase;
                }
                pub mod authorized_upgrade {
                    use super::runtime_types;
                    pub type AuthorizedUpgrade =
                        runtime_types::frame_system::CodeUpgradeAuthorization;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The full account information for a particular account ID."]
                pub fn account_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::account::Account,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Account",
                        (),
                        [
                            126u8, 122u8, 107u8, 102u8, 65u8, 121u8, 124u8, 207u8, 171u8, 206u8,
                            200u8, 164u8, 112u8, 26u8, 5u8, 168u8, 201u8, 121u8, 79u8, 8u8, 253u8,
                            152u8, 222u8, 43u8, 32u8, 213u8, 187u8, 199u8, 141u8, 203u8, 72u8,
                            158u8,
                        ],
                    )
                }
                #[doc = " The full account information for a particular account ID."]
                pub fn account(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::account::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::account::Param0,
                    >,
                    types::account::Account,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Account",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            126u8, 122u8, 107u8, 102u8, 65u8, 121u8, 124u8, 207u8, 171u8, 206u8,
                            200u8, 164u8, 112u8, 26u8, 5u8, 168u8, 201u8, 121u8, 79u8, 8u8, 253u8,
                            152u8, 222u8, 43u8, 32u8, 213u8, 187u8, 199u8, 141u8, 203u8, 72u8,
                            158u8,
                        ],
                    )
                }
                #[doc = " Total extrinsics count for the current block."]
                pub fn extrinsic_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::extrinsic_count::ExtrinsicCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ExtrinsicCount",
                        (),
                        [
                            102u8, 76u8, 236u8, 42u8, 40u8, 231u8, 33u8, 222u8, 123u8, 147u8,
                            153u8, 148u8, 234u8, 203u8, 181u8, 119u8, 6u8, 187u8, 177u8, 199u8,
                            120u8, 47u8, 137u8, 254u8, 96u8, 100u8, 165u8, 182u8, 249u8, 230u8,
                            159u8, 79u8,
                        ],
                    )
                }
                #[doc = " Whether all inherents have been applied."]
                pub fn inherents_applied(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::inherents_applied::InherentsApplied,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "InherentsApplied",
                        (),
                        [
                            132u8, 249u8, 142u8, 252u8, 8u8, 103u8, 80u8, 120u8, 50u8, 6u8, 188u8,
                            223u8, 101u8, 55u8, 165u8, 189u8, 172u8, 249u8, 165u8, 230u8, 183u8,
                            109u8, 34u8, 65u8, 185u8, 150u8, 29u8, 8u8, 186u8, 129u8, 135u8, 239u8,
                        ],
                    )
                }
                #[doc = " The current weight for the block."]
                pub fn block_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::block_weight::BlockWeight,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "BlockWeight",
                        (),
                        [
                            158u8, 46u8, 228u8, 89u8, 210u8, 214u8, 84u8, 154u8, 50u8, 68u8, 63u8,
                            62u8, 43u8, 42u8, 99u8, 27u8, 54u8, 42u8, 146u8, 44u8, 241u8, 216u8,
                            229u8, 30u8, 216u8, 255u8, 165u8, 238u8, 181u8, 130u8, 36u8, 102u8,
                        ],
                    )
                }
                #[doc = " Total length (in bytes) for all extrinsics put together, for the current block."]
                pub fn all_extrinsics_len(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::all_extrinsics_len::AllExtrinsicsLen,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "AllExtrinsicsLen",
                        (),
                        [
                            117u8, 86u8, 61u8, 243u8, 41u8, 51u8, 102u8, 214u8, 137u8, 100u8,
                            243u8, 185u8, 122u8, 174u8, 187u8, 117u8, 86u8, 189u8, 63u8, 135u8,
                            101u8, 218u8, 203u8, 201u8, 237u8, 254u8, 128u8, 183u8, 169u8, 221u8,
                            242u8, 65u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::block_hash::BlockHash,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "BlockHash",
                        (),
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block hashes."]
                pub fn block_hash(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::block_hash::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::block_hash::Param0,
                    >,
                    types::block_hash::BlockHash,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "BlockHash",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            217u8, 32u8, 215u8, 253u8, 24u8, 182u8, 207u8, 178u8, 157u8, 24u8,
                            103u8, 100u8, 195u8, 165u8, 69u8, 152u8, 112u8, 181u8, 56u8, 192u8,
                            164u8, 16u8, 20u8, 222u8, 28u8, 214u8, 144u8, 142u8, 146u8, 69u8,
                            202u8, 118u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block shuffling seeds"]
                pub fn block_seed(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::block_seed::BlockSeed,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "BlockSeed",
                        (),
                        [
                            228u8, 242u8, 40u8, 82u8, 214u8, 208u8, 246u8, 239u8, 146u8, 24u8, 0u8,
                            169u8, 177u8, 236u8, 235u8, 181u8, 3u8, 240u8, 21u8, 89u8, 198u8,
                            100u8, 68u8, 252u8, 100u8, 120u8, 54u8, 33u8, 245u8, 5u8, 144u8, 227u8,
                        ],
                    )
                }
                #[doc = " Storage queue is used for storing transactions in blockchain itself."]
                #[doc = " Main reason for that storage entry is fact that upon VER block `N` execution it is"]
                #[doc = " required to fetch & executed transactions from previous block (`N-1`) but due to origin"]
                #[doc = " substrate design blocks & extrinsics are stored in rocksDB database that is not accessible"]
                #[doc = " from runtime part of the node (see [Substrate architecture](https://storage.googleapis.com/mangata-docs-node/frame_executive/struct.Executive.html)) what makes it impossible to properly implement block"]
                #[doc = " execution logic. As an solution blockchain runtime storage was selected as buffer for txs"]
                #[doc = " waiting for execution. Main advantage of such approach is fact that storage state is public"]
                #[doc = " so its impossible to manipulate data stored in there. Storage queue is implemented as double"]
                #[doc = " buffered queue - to solve problem of rare occasions where due to different reasons some txs"]
                #[doc = " that were included in block `N` are not able to be executed in a following block `N+1` (good"]
                #[doc = " example is new session hook/event that by design consumes whole block capacity)."]
                #[doc = ""]
                #[doc = ""]
                #[doc = " # Overhead"]
                #[doc = " Its worth to notice that storage queue adds only single storage write, as list of all txs"]
                #[doc = " is stored as single value (encoded list of txs) maped to single key (block number)"]
                #[doc = ""]
                #[doc = " # Storage Qeueue interaction"]
                #[doc = " There are two ways to interact with storage queue:"]
                #[doc = " - enqueuing new txs using [`Pallet::enqueue_txs`] inherent"]
                #[doc = " - poping txs from the queue using [`Pallet::pop_txs`] that is exposed throught RuntimeApi"]
                #[doc = "   call"]
                pub fn storage_queue(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::storage_queue::StorageQueue,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "StorageQueue",
                        (),
                        [
                            106u8, 210u8, 117u8, 221u8, 111u8, 246u8, 58u8, 245u8, 255u8, 101u8,
                            105u8, 213u8, 199u8, 116u8, 104u8, 201u8, 100u8, 159u8, 24u8, 148u8,
                            108u8, 27u8, 44u8, 13u8, 196u8, 123u8, 233u8, 137u8, 91u8, 172u8,
                            189u8, 229u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block shuffling seeds"]
                pub fn did_store_txs(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::did_store_txs::DidStoreTxs,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "DidStoreTxs",
                        (),
                        [
                            214u8, 228u8, 172u8, 221u8, 78u8, 233u8, 241u8, 79u8, 171u8, 213u8,
                            165u8, 85u8, 129u8, 138u8, 227u8, 1u8, 159u8, 93u8, 129u8, 212u8, 53u8,
                            56u8, 177u8, 10u8, 102u8, 93u8, 198u8, 203u8, 119u8, 243u8, 37u8,
                            119u8,
                        ],
                    )
                }
                #[doc = " Map of block numbers to block shuffling seeds"]
                pub fn tx_prevalidation(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::tx_prevalidation::TxPrevalidation,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "TxPrevalidation",
                        (),
                        [
                            154u8, 25u8, 175u8, 178u8, 3u8, 136u8, 233u8, 52u8, 163u8, 218u8, 55u8,
                            68u8, 16u8, 21u8, 197u8, 48u8, 132u8, 0u8, 192u8, 147u8, 152u8, 89u8,
                            68u8, 232u8, 124u8, 93u8, 82u8, 4u8, 140u8, 243u8, 251u8, 163u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::extrinsic_data::ExtrinsicData,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ExtrinsicData",
                        (),
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " Extrinsics data for the current block (maps an extrinsic's index to its data)."]
                pub fn extrinsic_data(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::extrinsic_data::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::extrinsic_data::Param0,
                    >,
                    types::extrinsic_data::ExtrinsicData,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ExtrinsicData",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            160u8, 180u8, 122u8, 18u8, 196u8, 26u8, 2u8, 37u8, 115u8, 232u8, 133u8,
                            220u8, 106u8, 245u8, 4u8, 129u8, 42u8, 84u8, 241u8, 45u8, 199u8, 179u8,
                            128u8, 61u8, 170u8, 137u8, 231u8, 156u8, 247u8, 57u8, 47u8, 38u8,
                        ],
                    )
                }
                #[doc = " The current block number being processed. Set by `execute_block`."]
                pub fn number(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::number::Number,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Number",
                        (),
                        [
                            30u8, 194u8, 177u8, 90u8, 194u8, 232u8, 46u8, 180u8, 85u8, 129u8, 14u8,
                            9u8, 8u8, 8u8, 23u8, 95u8, 230u8, 5u8, 13u8, 105u8, 125u8, 2u8, 22u8,
                            200u8, 78u8, 93u8, 115u8, 28u8, 150u8, 113u8, 48u8, 53u8,
                        ],
                    )
                }
                #[doc = " Hash of the previous block."]
                pub fn parent_hash(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::parent_hash::ParentHash,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ParentHash",
                        (),
                        [
                            26u8, 130u8, 11u8, 216u8, 155u8, 71u8, 128u8, 170u8, 30u8, 153u8, 21u8,
                            192u8, 62u8, 93u8, 137u8, 80u8, 120u8, 81u8, 202u8, 94u8, 248u8, 125u8,
                            71u8, 82u8, 141u8, 229u8, 32u8, 56u8, 73u8, 50u8, 101u8, 78u8,
                        ],
                    )
                }
                #[doc = " Digest of the current block, also part of the block header."]
                pub fn digest(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::digest::Digest,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Digest",
                        (),
                        [
                            61u8, 64u8, 237u8, 91u8, 145u8, 232u8, 17u8, 254u8, 181u8, 16u8, 234u8,
                            91u8, 51u8, 140u8, 254u8, 131u8, 98u8, 135u8, 21u8, 37u8, 251u8, 20u8,
                            58u8, 92u8, 123u8, 141u8, 14u8, 227u8, 146u8, 46u8, 222u8, 117u8,
                        ],
                    )
                }
                #[doc = " Events deposited for the current block."]
                #[doc = ""]
                #[doc = " NOTE: The item is unbound and should therefore never be read on chain."]
                #[doc = " It could otherwise inflate the PoV size of a block."]
                #[doc = ""]
                #[doc = " Events have a large in-memory size. Box the events to not go out-of-memory"]
                #[doc = " just in case someone still reads them from within the runtime."]
                pub fn events(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::events::Events,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "Events",
                        (),
                        [
                            119u8, 166u8, 175u8, 45u8, 27u8, 54u8, 176u8, 93u8, 129u8, 240u8, 30u8,
                            254u8, 165u8, 177u8, 99u8, 72u8, 198u8, 222u8, 18u8, 134u8, 255u8,
                            97u8, 94u8, 157u8, 105u8, 28u8, 119u8, 38u8, 174u8, 234u8, 213u8,
                            245u8,
                        ],
                    )
                }
                #[doc = " The number of events in the `Events<T>` list."]
                pub fn event_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::event_count::EventCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "EventCount",
                        (),
                        [
                            175u8, 24u8, 252u8, 184u8, 210u8, 167u8, 146u8, 143u8, 164u8, 80u8,
                            151u8, 205u8, 189u8, 189u8, 55u8, 220u8, 47u8, 101u8, 181u8, 33u8,
                            254u8, 131u8, 13u8, 143u8, 3u8, 244u8, 245u8, 45u8, 2u8, 210u8, 79u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::event_topics::EventTopics,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "EventTopics",
                        (),
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Mapping between a topic (represented by T::Hash) and a vector of indexes"]
                #[doc = " of events in the `<Events<T>>` list."]
                #[doc = ""]
                #[doc = " All topic vectors have deterministic storage locations depending on the topic. This"]
                #[doc = " allows light-clients to leverage the changes trie storage tracking mechanism and"]
                #[doc = " in case of changes fetch the list of events of interest."]
                #[doc = ""]
                #[doc = " The value has the type `(BlockNumberFor<T>, EventIndex)` because if we used only just"]
                #[doc = " the `EventIndex` then in case if the topic has the same contents on the next block"]
                #[doc = " no notification will be triggered thus the event might be lost."]
                pub fn event_topics(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::event_topics::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::event_topics::Param0,
                    >,
                    types::event_topics::EventTopics,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "EventTopics",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            40u8, 225u8, 14u8, 75u8, 44u8, 176u8, 76u8, 34u8, 143u8, 107u8, 69u8,
                            133u8, 114u8, 13u8, 172u8, 250u8, 141u8, 73u8, 12u8, 65u8, 217u8, 63u8,
                            120u8, 241u8, 48u8, 106u8, 143u8, 161u8, 128u8, 100u8, 166u8, 59u8,
                        ],
                    )
                }
                #[doc = " Stores the `spec_version` and `spec_name` of when the last runtime upgrade happened."]
                pub fn last_runtime_upgrade(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_runtime_upgrade::LastRuntimeUpgrade,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "LastRuntimeUpgrade",
                        (),
                        [
                            137u8, 29u8, 175u8, 75u8, 197u8, 208u8, 91u8, 207u8, 156u8, 87u8,
                            148u8, 68u8, 91u8, 140u8, 22u8, 233u8, 1u8, 229u8, 56u8, 34u8, 40u8,
                            194u8, 253u8, 30u8, 163u8, 39u8, 54u8, 209u8, 13u8, 27u8, 139u8, 184u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that `type RefCount` is `u32`. False (default) if not."]
                pub fn upgraded_to_u32_ref_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::upgraded_to_u32_ref_count::UpgradedToU32RefCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "UpgradedToU32RefCount",
                        (),
                        [
                            229u8, 73u8, 9u8, 132u8, 186u8, 116u8, 151u8, 171u8, 145u8, 29u8, 34u8,
                            130u8, 52u8, 146u8, 124u8, 175u8, 79u8, 189u8, 147u8, 230u8, 234u8,
                            107u8, 124u8, 31u8, 2u8, 22u8, 86u8, 190u8, 4u8, 147u8, 50u8, 245u8,
                        ],
                    )
                }
                #[doc = " True if we have upgraded so that AccountInfo contains three types of `RefCount`. False"]
                #[doc = " (default) if not."]
                pub fn upgraded_to_triple_ref_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::upgraded_to_triple_ref_count::UpgradedToTripleRefCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "UpgradedToTripleRefCount",
                        (),
                        [
                            97u8, 66u8, 124u8, 243u8, 27u8, 167u8, 147u8, 81u8, 254u8, 201u8,
                            101u8, 24u8, 40u8, 231u8, 14u8, 179u8, 154u8, 163u8, 71u8, 81u8, 185u8,
                            167u8, 82u8, 254u8, 189u8, 3u8, 101u8, 207u8, 206u8, 194u8, 155u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " The execution phase of the block."]
                pub fn execution_phase(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::execution_phase::ExecutionPhase,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "ExecutionPhase",
                        (),
                        [
                            191u8, 129u8, 100u8, 134u8, 126u8, 116u8, 154u8, 203u8, 220u8, 200u8,
                            0u8, 26u8, 161u8, 250u8, 133u8, 205u8, 146u8, 24u8, 5u8, 156u8, 158u8,
                            35u8, 36u8, 253u8, 52u8, 235u8, 86u8, 167u8, 35u8, 100u8, 119u8, 27u8,
                        ],
                    )
                }
                #[doc = " `Some` if a code upgrade has been authorized."]
                pub fn authorized_upgrade(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::authorized_upgrade::AuthorizedUpgrade,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "System",
                        "AuthorizedUpgrade",
                        (),
                        [
                            165u8, 97u8, 27u8, 138u8, 2u8, 28u8, 55u8, 92u8, 96u8, 96u8, 168u8,
                            169u8, 55u8, 178u8, 44u8, 127u8, 58u8, 140u8, 206u8, 178u8, 1u8, 37u8,
                            214u8, 213u8, 251u8, 123u8, 5u8, 111u8, 90u8, 148u8, 217u8, 135u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Block & extrinsics weights: base values and limits."]
                pub fn block_weights(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_system::limits::BlockWeights,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "BlockWeights",
                        [
                            176u8, 124u8, 225u8, 136u8, 25u8, 73u8, 247u8, 33u8, 82u8, 206u8, 85u8,
                            190u8, 127u8, 102u8, 71u8, 11u8, 185u8, 8u8, 58u8, 0u8, 94u8, 55u8,
                            163u8, 177u8, 104u8, 59u8, 60u8, 136u8, 246u8, 116u8, 0u8, 239u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a block (in bytes)."]
                pub fn block_length(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_system::limits::BlockLength,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "BlockLength",
                        [
                            23u8, 242u8, 225u8, 39u8, 225u8, 67u8, 152u8, 41u8, 155u8, 104u8, 68u8,
                            229u8, 185u8, 133u8, 10u8, 143u8, 184u8, 152u8, 234u8, 44u8, 140u8,
                            96u8, 166u8, 235u8, 162u8, 160u8, 72u8, 7u8, 35u8, 194u8, 3u8, 37u8,
                        ],
                    )
                }
                #[doc = " Maximum number of block number to block hash mappings to keep (oldest pruned first)."]
                pub fn block_hash_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "BlockHashCount",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The weight of runtime database operations the runtime can invoke."]
                pub fn db_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_weights::RuntimeDbWeight,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "DbWeight",
                        [
                            42u8, 43u8, 178u8, 142u8, 243u8, 203u8, 60u8, 173u8, 118u8, 111u8,
                            200u8, 170u8, 102u8, 70u8, 237u8, 187u8, 198u8, 120u8, 153u8, 232u8,
                            183u8, 76u8, 74u8, 10u8, 70u8, 243u8, 14u8, 218u8, 213u8, 126u8, 29u8,
                            177u8,
                        ],
                    )
                }
                #[doc = " Get the chain's in-code version."]
                pub fn version(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_version::RuntimeVersion,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "Version",
                        [
                            219u8, 45u8, 162u8, 245u8, 177u8, 246u8, 48u8, 126u8, 191u8, 157u8,
                            228u8, 83u8, 111u8, 133u8, 183u8, 13u8, 148u8, 108u8, 92u8, 102u8,
                            72u8, 205u8, 74u8, 242u8, 233u8, 79u8, 20u8, 170u8, 72u8, 202u8, 158u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " The designated SS58 prefix of this chain."]
                #[doc = ""]
                #[doc = " This replaces the \"ss58Format\" property declared in the chain spec. Reason is"]
                #[doc = " that the runtime should know about the prefix in order to make use of it as"]
                #[doc = " an identifier of the chain."]
                pub fn ss58_prefix(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u16,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "System",
                        "SS58Prefix",
                        [
                            116u8, 33u8, 2u8, 170u8, 181u8, 147u8, 171u8, 169u8, 167u8, 227u8,
                            41u8, 144u8, 11u8, 236u8, 82u8, 100u8, 74u8, 60u8, 184u8, 72u8, 169u8,
                            90u8, 208u8, 135u8, 15u8, 117u8, 10u8, 123u8, 128u8, 193u8, 29u8, 70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod timestamp {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_timestamp::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "[`Config::MinimumPeriod`]."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _None_."]
                #[doc = ""]
                #[doc = "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware"]
                #[doc = "that changing the complexity of this call could result exhausting the resources in a"]
                #[doc = "block to execute any other calls."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                pub struct Set {
                    #[codec(compact)]
                    pub now: set::Now,
                }
                pub mod set {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Set {
                    const PALLET: &'static str = "Timestamp";
                    const CALL: &'static str = "set";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the current time."]
                #[doc = ""]
                #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                #[doc = "phase, if this call hasn't been invoked by that time."]
                #[doc = ""]
                #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                #[doc = "[`Config::MinimumPeriod`]."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _None_."]
                #[doc = ""]
                #[doc = "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware"]
                #[doc = "that changing the complexity of this call could result exhausting the resources in a"]
                #[doc = "block to execute any other calls."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in"]
                #[doc = "  `on_finalize`)"]
                #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                pub fn set(
                    &self,
                    now: types::set::Now,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Set>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Timestamp",
                        "set",
                        types::Set { now },
                        [
                            37u8, 95u8, 49u8, 218u8, 24u8, 22u8, 0u8, 95u8, 72u8, 35u8, 155u8,
                            199u8, 213u8, 54u8, 207u8, 22u8, 185u8, 193u8, 221u8, 70u8, 18u8,
                            200u8, 4u8, 231u8, 195u8, 173u8, 6u8, 122u8, 11u8, 203u8, 231u8, 227u8,
                        ],
                    )
                }
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod now {
                    use super::runtime_types;
                    pub type Now = ::core::primitive::u64;
                }
                pub mod did_update {
                    use super::runtime_types;
                    pub type DidUpdate = ::core::primitive::bool;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current time for the current block."]
                pub fn now(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::now::Now,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Timestamp",
                        "Now",
                        (),
                        [
                            44u8, 50u8, 80u8, 30u8, 195u8, 146u8, 123u8, 238u8, 8u8, 163u8, 187u8,
                            92u8, 61u8, 39u8, 51u8, 29u8, 173u8, 169u8, 217u8, 158u8, 85u8, 187u8,
                            141u8, 26u8, 12u8, 115u8, 51u8, 11u8, 200u8, 244u8, 138u8, 152u8,
                        ],
                    )
                }
                #[doc = " Whether the timestamp has been updated in this block."]
                #[doc = ""]
                #[doc = " This value is updated to `true` upon successful submission of a timestamp by a node."]
                #[doc = " It is then checked at the end of each block execution in the `on_finalize` hook."]
                pub fn did_update(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::did_update::DidUpdate,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Timestamp",
                        "DidUpdate",
                        (),
                        [
                            229u8, 175u8, 246u8, 102u8, 237u8, 158u8, 212u8, 229u8, 238u8, 214u8,
                            205u8, 160u8, 164u8, 252u8, 195u8, 75u8, 139u8, 110u8, 22u8, 34u8,
                            248u8, 204u8, 107u8, 46u8, 20u8, 200u8, 238u8, 167u8, 71u8, 41u8,
                            214u8, 140u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum period between blocks."]
                #[doc = ""]
                #[doc = " Be aware that this is different to the *expected* period that the block production"]
                #[doc = " apparatus provides. Your chosen consensus system will generally work with this to"]
                #[doc = " determine a sensible block time. For example, in the Aura pallet it will be double this"]
                #[doc = " period on default settings."]
                pub fn minimum_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u64,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Timestamp",
                        "MinimumPeriod",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod utility {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_utility_mangata::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_utility_mangata::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub struct Batch {
                    pub calls: batch::Calls,
                }
                pub mod batch {
                    use super::runtime_types;
                    pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::rollup_runtime::RuntimeCall,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Batch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub struct AsDerivative {
                    pub index: as_derivative::Index,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<as_derivative::Call>,
                }
                pub mod as_derivative {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u16;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AsDerivative {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "as_derivative";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub struct BatchAll {
                    pub calls: batch_all::Calls,
                }
                pub mod batch_all {
                    use super::runtime_types;
                    pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::rollup_runtime::RuntimeCall,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BatchAll {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "batch_all";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct DispatchAs {
                    pub as_origin:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<dispatch_as::AsOrigin>,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<dispatch_as::Call>,
                }
                pub mod dispatch_as {
                    use super::runtime_types;
                    pub type AsOrigin = runtime_types::rollup_runtime::OriginCaller;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DispatchAs {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "dispatch_as";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub struct ForceBatch {
                    pub calls: force_batch::Calls,
                }
                pub mod force_batch {
                    use super::runtime_types;
                    pub type Calls = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::rollup_runtime::RuntimeCall,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceBatch {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "force_batch";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatch a function call with a specified weight."]
                #[doc = ""]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Root origin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                pub struct WithWeight {
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<with_weight::Call>,
                    pub weight: with_weight::Weight,
                }
                pub mod with_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for WithWeight {
                    const PALLET: &'static str = "Utility";
                    const CALL: &'static str = "with_weight";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Send a batch of dispatch calls."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                #[doc = ""]
                #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                #[doc = "event is deposited."]
                pub fn batch(
                    &self,
                    calls: types::batch::Calls,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Batch>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "batch",
                        types::Batch { calls },
                        [
                            112u8, 170u8, 80u8, 248u8, 146u8, 54u8, 248u8, 41u8, 221u8, 156u8,
                            50u8, 48u8, 11u8, 210u8, 65u8, 87u8, 254u8, 129u8, 209u8, 157u8, 53u8,
                            77u8, 171u8, 73u8, 242u8, 145u8, 44u8, 75u8, 119u8, 235u8, 141u8,
                            224u8,
                        ],
                    )
                }
                #[doc = "Send a call through an indexed pseudonym of the sender."]
                #[doc = ""]
                #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                #[doc = "use the same filter as the origin of this call."]
                #[doc = ""]
                #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                #[doc = "in the Multisig pallet instead."]
                #[doc = ""]
                #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn as_derivative(
                    &self,
                    index: types::as_derivative::Index,
                    call: types::as_derivative::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AsDerivative>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "as_derivative",
                        types::AsDerivative {
                            index,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            133u8, 3u8, 229u8, 12u8, 76u8, 157u8, 141u8, 227u8, 14u8, 16u8, 105u8,
                            54u8, 175u8, 151u8, 193u8, 176u8, 195u8, 25u8, 12u8, 20u8, 64u8, 222u8,
                            157u8, 60u8, 184u8, 113u8, 150u8, 76u8, 124u8, 247u8, 245u8, 150u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls and atomically execute them."]
                #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub fn batch_all(
                    &self,
                    calls: types::batch_all::Calls,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BatchAll>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "batch_all",
                        types::BatchAll { calls },
                        [
                            229u8, 135u8, 134u8, 224u8, 118u8, 237u8, 59u8, 109u8, 242u8, 154u8,
                            207u8, 41u8, 232u8, 71u8, 228u8, 40u8, 152u8, 204u8, 176u8, 244u8,
                            62u8, 2u8, 9u8, 127u8, 67u8, 16u8, 237u8, 85u8, 75u8, 16u8, 246u8, 0u8,
                        ],
                    )
                }
                #[doc = "Dispatches a function call with a provided origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn dispatch_as(
                    &self,
                    as_origin: types::dispatch_as::AsOrigin,
                    call: types::dispatch_as::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DispatchAs>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "dispatch_as",
                        types::DispatchAs {
                            as_origin: ::subxt::ext::subxt_core::alloc::boxed::Box::new(as_origin),
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            95u8, 79u8, 128u8, 35u8, 135u8, 155u8, 255u8, 163u8, 41u8, 198u8,
                            168u8, 140u8, 106u8, 77u8, 125u8, 57u8, 105u8, 165u8, 202u8, 34u8,
                            231u8, 212u8, 99u8, 191u8, 57u8, 200u8, 25u8, 74u8, 223u8, 36u8, 161u8,
                            125u8,
                        ],
                    )
                }
                #[doc = "Send a batch of dispatch calls."]
                #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                #[doc = ""]
                #[doc = "May be called from any origin except `None`."]
                #[doc = ""]
                #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                #[doc = ""]
                #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(C) where C is the number of calls to be batched."]
                pub fn force_batch(
                    &self,
                    calls: types::force_batch::Calls,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceBatch>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "force_batch",
                        types::ForceBatch { calls },
                        [
                            64u8, 137u8, 125u8, 183u8, 124u8, 206u8, 212u8, 47u8, 71u8, 131u8,
                            135u8, 27u8, 138u8, 189u8, 94u8, 214u8, 155u8, 30u8, 6u8, 174u8, 58u8,
                            182u8, 123u8, 84u8, 70u8, 91u8, 160u8, 29u8, 56u8, 8u8, 102u8, 9u8,
                        ],
                    )
                }
                #[doc = "Dispatch a function call with a specified weight."]
                #[doc = ""]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Root origin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                pub fn with_weight(
                    &self,
                    call: types::with_weight::Call,
                    weight: types::with_weight::Weight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::WithWeight>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Utility",
                        "with_weight",
                        types::WithWeight {
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                            weight,
                        },
                        [
                            151u8, 137u8, 21u8, 231u8, 179u8, 185u8, 197u8, 36u8, 114u8, 168u8,
                            35u8, 75u8, 55u8, 188u8, 240u8, 147u8, 72u8, 105u8, 194u8, 22u8, 17u8,
                            6u8, 146u8, 230u8, 57u8, 225u8, 115u8, 203u8, 133u8, 48u8, 41u8, 36u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_utility_mangata::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
            #[doc = "well as the error."]
            pub struct BatchInterrupted {
                pub index: batch_interrupted::Index,
                pub error: batch_interrupted::Error,
            }
            pub mod batch_interrupted {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for BatchInterrupted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchInterrupted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed fully with no error."]
            pub struct BatchCompleted;
            impl ::subxt::ext::subxt_core::events::StaticEvent for BatchCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompleted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Batch of dispatches completed but has errors."]
            pub struct BatchCompletedWithErrors;
            impl ::subxt::ext::subxt_core::events::StaticEvent for BatchCompletedWithErrors {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "BatchCompletedWithErrors";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with no error."]
            pub struct ItemCompleted;
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemCompleted {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemCompleted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A single item within a Batch of dispatches has completed with error."]
            pub struct ItemFailed {
                pub error: item_failed::Error,
            }
            pub mod item_failed {
                use super::runtime_types;
                pub type Error = runtime_types::sp_runtime::DispatchError;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ItemFailed {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "ItemFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A call was dispatched."]
            pub struct DispatchedAs {
                pub result: dispatched_as::Result,
            }
            pub mod dispatched_as {
                use super::runtime_types;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DispatchedAs {
                const PALLET: &'static str = "Utility";
                const EVENT: &'static str = "DispatchedAs";
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The limit on the number of batched calls."]
                pub fn batched_calls_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Utility",
                        "batched_calls_limit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proxy {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_proxy::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_proxy::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub struct Proxy {
                    pub real: proxy::Real,
                    pub force_proxy_type: proxy::ForceProxyType,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<proxy::Call>,
                }
                pub mod proxy {
                    use super::runtime_types;
                    pub type Real = runtime_types::sp_runtime::account::AccountId20;
                    pub type ForceProxyType = :: core :: option :: Option < runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType > ;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Proxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                pub struct AddProxy {
                    pub delegate: add_proxy::Delegate,
                    pub proxy_type: add_proxy::ProxyType,
                    pub delay: add_proxy::Delay,
                }
                pub mod add_proxy {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::sp_runtime::account::AccountId20;
                    pub type ProxyType = runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType ;
                    pub type Delay = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddProxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "add_proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unregister a proxy account for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                pub struct RemoveProxy {
                    pub delegate: remove_proxy::Delegate,
                    pub proxy_type: remove_proxy::ProxyType,
                    pub delay: remove_proxy::Delay,
                }
                pub mod remove_proxy {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::sp_runtime::account::AccountId20;
                    pub type ProxyType = runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType ;
                    pub type Delay = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveProxy {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_proxy";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unregister all proxy accounts for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
                #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                pub struct RemoveProxies;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveProxies {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_proxies";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin."]
                #[doc = ""]
                #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                #[doc = "allow for maximum flexibility."]
                #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                #[doc = "want to use `0`."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                #[doc = "same sender, with the same parameters."]
                #[doc = ""]
                #[doc = "Fails if there are insufficient funds to pay for deposit."]
                pub struct CreatePure {
                    pub proxy_type: create_pure::ProxyType,
                    pub delay: create_pure::Delay,
                    pub index: create_pure::Index,
                }
                pub mod create_pure {
                    use super::runtime_types;
                    pub type ProxyType = runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType ;
                    pub type Delay = ::core::primitive::u32;
                    pub type Index = ::core::primitive::u16;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CreatePure {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "create_pure";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes a previously spawned pure proxy."]
                #[doc = ""]
                #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                #[doc = "inaccessible."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                #[doc = "`pure` with corresponding parameters."]
                #[doc = ""]
                #[doc = "- `spawner`: The account that originally called `pure` to create this account."]
                #[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
                #[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
                #[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
                #[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
                #[doc = ""]
                #[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
                #[doc = "account whose `pure` call has corresponding parameters."]
                pub struct KillPure {
                    pub spawner: kill_pure::Spawner,
                    pub proxy_type: kill_pure::ProxyType,
                    pub index: kill_pure::Index,
                    #[codec(compact)]
                    pub height: kill_pure::Height,
                    #[codec(compact)]
                    pub ext_index: kill_pure::ExtIndex,
                }
                pub mod kill_pure {
                    use super::runtime_types;
                    pub type Spawner = runtime_types::sp_runtime::account::AccountId20;
                    pub type ProxyType = runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType ;
                    pub type Index = ::core::primitive::u16;
                    pub type Height = ::core::primitive::u32;
                    pub type ExtIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillPure {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "kill_pure";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                #[doc = ""]
                #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                #[doc = ""]
                #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                #[doc = ""]
                #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub struct Announce {
                    pub real: announce::Real,
                    pub call_hash: announce::CallHash,
                }
                pub mod announce {
                    use super::runtime_types;
                    pub type Real = runtime_types::sp_runtime::account::AccountId20;
                    pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Announce {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "announce";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a given announcement."]
                #[doc = ""]
                #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                #[doc = "the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub struct RemoveAnnouncement {
                    pub real: remove_announcement::Real,
                    pub call_hash: remove_announcement::CallHash,
                }
                pub mod remove_announcement {
                    use super::runtime_types;
                    pub type Real = runtime_types::sp_runtime::account::AccountId20;
                    pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveAnnouncement {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "remove_announcement";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove the given announcement of a delegate."]
                #[doc = ""]
                #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `delegate`: The account that previously announced the call."]
                #[doc = "- `call_hash`: The hash of the call to be made."]
                pub struct RejectAnnouncement {
                    pub delegate: reject_announcement::Delegate,
                    pub call_hash: reject_announcement::CallHash,
                }
                pub mod reject_announcement {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::sp_runtime::account::AccountId20;
                    pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RejectAnnouncement {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "reject_announcement";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub struct ProxyAnnounced {
                    pub delegate: proxy_announced::Delegate,
                    pub real: proxy_announced::Real,
                    pub force_proxy_type: proxy_announced::ForceProxyType,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<proxy_announced::Call>,
                }
                pub mod proxy_announced {
                    use super::runtime_types;
                    pub type Delegate = runtime_types::sp_runtime::account::AccountId20;
                    pub type Real = runtime_types::sp_runtime::account::AccountId20;
                    pub type ForceProxyType = :: core :: option :: Option < runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType > ;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ProxyAnnounced {
                    const PALLET: &'static str = "Proxy";
                    const CALL: &'static str = "proxy_announced";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Dispatch the given `call` from an account that the sender is authorised for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub fn proxy(
                    &self,
                    real: types::proxy::Real,
                    force_proxy_type: types::proxy::ForceProxyType,
                    call: types::proxy::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Proxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "proxy",
                        types::Proxy {
                            real,
                            force_proxy_type,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            49u8, 10u8, 176u8, 229u8, 206u8, 15u8, 12u8, 71u8, 180u8, 182u8, 211u8,
                            184u8, 21u8, 248u8, 220u8, 249u8, 82u8, 120u8, 81u8, 78u8, 234u8,
                            181u8, 49u8, 131u8, 22u8, 146u8, 94u8, 150u8, 210u8, 126u8, 34u8,
                            131u8,
                        ],
                    )
                }
                #[doc = "Register a proxy account for the sender that is able to make calls on its behalf."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to make a proxy."]
                #[doc = "- `proxy_type`: The permissions allowed for this proxy account."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                pub fn add_proxy(
                    &self,
                    delegate: types::add_proxy::Delegate,
                    proxy_type: types::add_proxy::ProxyType,
                    delay: types::add_proxy::Delay,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddProxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "add_proxy",
                        types::AddProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            46u8, 231u8, 175u8, 250u8, 231u8, 246u8, 182u8, 96u8, 28u8, 254u8,
                            124u8, 234u8, 224u8, 66u8, 249u8, 53u8, 196u8, 151u8, 244u8, 25u8,
                            124u8, 100u8, 14u8, 123u8, 120u8, 244u8, 206u8, 128u8, 239u8, 2u8,
                            230u8, 247u8,
                        ],
                    )
                }
                #[doc = "Unregister a proxy account for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."]
                #[doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."]
                pub fn remove_proxy(
                    &self,
                    delegate: types::remove_proxy::Delegate,
                    proxy_type: types::remove_proxy::ProxyType,
                    delay: types::remove_proxy::Delay,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveProxy>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "remove_proxy",
                        types::RemoveProxy {
                            delegate,
                            proxy_type,
                            delay,
                        },
                        [
                            127u8, 81u8, 130u8, 71u8, 88u8, 75u8, 40u8, 181u8, 209u8, 228u8, 12u8,
                            230u8, 255u8, 118u8, 85u8, 137u8, 254u8, 88u8, 149u8, 205u8, 24u8,
                            85u8, 9u8, 90u8, 241u8, 231u8, 190u8, 87u8, 59u8, 99u8, 103u8, 209u8,
                        ],
                    )
                }
                #[doc = "Unregister all proxy accounts for the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"]
                #[doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"]
                pub fn remove_proxies(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveProxies>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "remove_proxies",
                        types::RemoveProxies {},
                        [
                            1u8, 126u8, 36u8, 227u8, 185u8, 34u8, 218u8, 236u8, 125u8, 231u8, 68u8,
                            185u8, 145u8, 63u8, 250u8, 225u8, 103u8, 3u8, 189u8, 37u8, 172u8,
                            195u8, 197u8, 216u8, 99u8, 210u8, 240u8, 162u8, 158u8, 132u8, 24u8,
                            6u8,
                        ],
                    )
                }
                #[doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"]
                #[doc = "initialize it with a proxy of `proxy_type` for `origin` sender."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin."]
                #[doc = ""]
                #[doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"]
                #[doc = "new account. This will almost always be the most permissive `ProxyType` possible to"]
                #[doc = "allow for maximum flexibility."]
                #[doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"]
                #[doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"]
                #[doc = "want to use `0`."]
                #[doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"]
                #[doc = "zero."]
                #[doc = ""]
                #[doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"]
                #[doc = "same sender, with the same parameters."]
                #[doc = ""]
                #[doc = "Fails if there are insufficient funds to pay for deposit."]
                pub fn create_pure(
                    &self,
                    proxy_type: types::create_pure::ProxyType,
                    delay: types::create_pure::Delay,
                    index: types::create_pure::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CreatePure>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "create_pure",
                        types::CreatePure {
                            proxy_type,
                            delay,
                            index,
                        },
                        [
                            75u8, 7u8, 131u8, 243u8, 99u8, 136u8, 98u8, 226u8, 97u8, 253u8, 125u8,
                            177u8, 192u8, 150u8, 1u8, 108u8, 175u8, 186u8, 60u8, 238u8, 186u8,
                            84u8, 199u8, 85u8, 221u8, 13u8, 20u8, 104u8, 150u8, 132u8, 203u8, 3u8,
                        ],
                    )
                }
                #[doc = "Removes a previously spawned pure proxy."]
                #[doc = ""]
                #[doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"]
                #[doc = "inaccessible."]
                #[doc = ""]
                #[doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"]
                #[doc = "`pure` with corresponding parameters."]
                #[doc = ""]
                #[doc = "- `spawner`: The account that originally called `pure` to create this account."]
                #[doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."]
                #[doc = "- `proxy_type`: The proxy type originally passed to `pure`."]
                #[doc = "- `height`: The height of the chain when the call to `pure` was processed."]
                #[doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."]
                #[doc = ""]
                #[doc = "Fails with `NoPermission` in case the caller is not a previously created pure"]
                #[doc = "account whose `pure` call has corresponding parameters."]
                pub fn kill_pure(
                    &self,
                    spawner: types::kill_pure::Spawner,
                    proxy_type: types::kill_pure::ProxyType,
                    index: types::kill_pure::Index,
                    height: types::kill_pure::Height,
                    ext_index: types::kill_pure::ExtIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillPure>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "kill_pure",
                        types::KillPure {
                            spawner,
                            proxy_type,
                            index,
                            height,
                            ext_index,
                        },
                        [
                            2u8, 245u8, 144u8, 73u8, 175u8, 50u8, 190u8, 121u8, 18u8, 51u8, 44u8,
                            163u8, 174u8, 21u8, 67u8, 145u8, 205u8, 152u8, 207u8, 12u8, 50u8,
                            135u8, 122u8, 194u8, 155u8, 250u8, 34u8, 1u8, 82u8, 130u8, 63u8, 72u8,
                        ],
                    )
                }
                #[doc = "Publish the hash of a proxy-call that will be made in the future."]
                #[doc = ""]
                #[doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"]
                #[doc = "if the delay associated with the proxy relationship is greater than zero."]
                #[doc = ""]
                #[doc = "No more than `MaxPending` announcements may be made at any one time."]
                #[doc = ""]
                #[doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"]
                #[doc = "`AnnouncementDepositBase` if there are no other pending announcements."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub fn announce(
                    &self,
                    real: types::announce::Real,
                    call_hash: types::announce::CallHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Announce>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "announce",
                        types::Announce { real, call_hash },
                        [
                            73u8, 72u8, 93u8, 59u8, 122u8, 139u8, 93u8, 78u8, 107u8, 54u8, 114u8,
                            238u8, 16u8, 191u8, 252u8, 94u8, 29u8, 152u8, 198u8, 129u8, 43u8,
                            221u8, 145u8, 167u8, 203u8, 48u8, 151u8, 249u8, 88u8, 51u8, 40u8, 61u8,
                        ],
                    )
                }
                #[doc = "Remove a given announcement."]
                #[doc = ""]
                #[doc = "May be called by a proxy account to remove a call they previously announced and return"]
                #[doc = "the deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `call_hash`: The hash of the call to be made by the `real` account."]
                pub fn remove_announcement(
                    &self,
                    real: types::remove_announcement::Real,
                    call_hash: types::remove_announcement::CallHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveAnnouncement>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "remove_announcement",
                        types::RemoveAnnouncement { real, call_hash },
                        [
                            86u8, 6u8, 95u8, 195u8, 132u8, 136u8, 60u8, 248u8, 18u8, 27u8, 134u8,
                            14u8, 100u8, 143u8, 16u8, 81u8, 143u8, 95u8, 133u8, 84u8, 228u8, 31u8,
                            34u8, 195u8, 54u8, 209u8, 228u8, 120u8, 240u8, 195u8, 113u8, 29u8,
                        ],
                    )
                }
                #[doc = "Remove the given announcement of a delegate."]
                #[doc = ""]
                #[doc = "May be called by a target (proxied) account to remove a call that one of their delegates"]
                #[doc = "(`delegate`) has announced they want to execute. The deposit is returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `delegate`: The account that previously announced the call."]
                #[doc = "- `call_hash`: The hash of the call to be made."]
                pub fn reject_announcement(
                    &self,
                    delegate: types::reject_announcement::Delegate,
                    call_hash: types::reject_announcement::CallHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RejectAnnouncement>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "reject_announcement",
                        types::RejectAnnouncement {
                            delegate,
                            call_hash,
                        },
                        [
                            147u8, 84u8, 126u8, 36u8, 113u8, 100u8, 227u8, 241u8, 2u8, 107u8,
                            197u8, 139u8, 1u8, 132u8, 4u8, 243u8, 180u8, 198u8, 72u8, 112u8, 20u8,
                            175u8, 240u8, 109u8, 186u8, 65u8, 39u8, 91u8, 238u8, 59u8, 199u8,
                            197u8,
                        ],
                    )
                }
                #[doc = "Dispatch the given `call` from an account that the sender is authorized for through"]
                #[doc = "`add_proxy`."]
                #[doc = ""]
                #[doc = "Removes any corresponding announcement(s)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- `real`: The account that the proxy will make a call on behalf of."]
                #[doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."]
                #[doc = "- `call`: The call to be made by the `real` account."]
                pub fn proxy_announced(
                    &self,
                    delegate: types::proxy_announced::Delegate,
                    real: types::proxy_announced::Real,
                    force_proxy_type: types::proxy_announced::ForceProxyType,
                    call: types::proxy_announced::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ProxyAnnounced>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Proxy",
                        "proxy_announced",
                        types::ProxyAnnounced {
                            delegate,
                            real,
                            force_proxy_type,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            202u8, 23u8, 178u8, 163u8, 111u8, 226u8, 227u8, 21u8, 123u8, 172u8,
                            87u8, 207u8, 227u8, 203u8, 81u8, 246u8, 50u8, 93u8, 124u8, 25u8, 184u8,
                            89u8, 87u8, 22u8, 254u8, 152u8, 74u8, 29u8, 51u8, 220u8, 113u8, 47u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_proxy::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proxy was executed correctly, with the given."]
            pub struct ProxyExecuted {
                pub result: proxy_executed::Result,
            }
            pub mod proxy_executed {
                use super::runtime_types;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyExecuted {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyExecuted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A pure account has been created by new proxy with given"]
            #[doc = "disambiguation index and proxy type."]
            pub struct PureCreated {
                pub pure: pure_created::Pure,
                pub who: pure_created::Who,
                pub proxy_type: pure_created::ProxyType,
                pub disambiguation_index: pure_created::DisambiguationIndex,
            }
            pub mod pure_created {
                use super::runtime_types;
                pub type Pure = runtime_types::sp_runtime::account::AccountId20;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type ProxyType =
                    runtime_types::rollup_runtime::runtime_config::config::pallet_proxy::ProxyType;
                pub type DisambiguationIndex = ::core::primitive::u16;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PureCreated {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "PureCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An announcement was placed to make a call in the future."]
            pub struct Announced {
                pub real: announced::Real,
                pub proxy: announced::Proxy,
                pub call_hash: announced::CallHash,
            }
            pub mod announced {
                use super::runtime_types;
                pub type Real = runtime_types::sp_runtime::account::AccountId20;
                pub type Proxy = runtime_types::sp_runtime::account::AccountId20;
                pub type CallHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Announced {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "Announced";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proxy was added."]
            pub struct ProxyAdded {
                pub delegator: proxy_added::Delegator,
                pub delegatee: proxy_added::Delegatee,
                pub proxy_type: proxy_added::ProxyType,
                pub delay: proxy_added::Delay,
            }
            pub mod proxy_added {
                use super::runtime_types;
                pub type Delegator = runtime_types::sp_runtime::account::AccountId20;
                pub type Delegatee = runtime_types::sp_runtime::account::AccountId20;
                pub type ProxyType =
                    runtime_types::rollup_runtime::runtime_config::config::pallet_proxy::ProxyType;
                pub type Delay = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyAdded {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proxy was removed."]
            pub struct ProxyRemoved {
                pub delegator: proxy_removed::Delegator,
                pub delegatee: proxy_removed::Delegatee,
                pub proxy_type: proxy_removed::ProxyType,
                pub delay: proxy_removed::Delay,
            }
            pub mod proxy_removed {
                use super::runtime_types;
                pub type Delegator = runtime_types::sp_runtime::account::AccountId20;
                pub type Delegatee = runtime_types::sp_runtime::account::AccountId20;
                pub type ProxyType =
                    runtime_types::rollup_runtime::runtime_config::config::pallet_proxy::ProxyType;
                pub type Delay = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ProxyRemoved {
                const PALLET: &'static str = "Proxy";
                const EVENT: &'static str = "ProxyRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proxies {
                    use super::runtime_types;
                    pub type Proxies = (runtime_types :: bounded_collections :: bounded_vec :: BoundedVec < runtime_types :: pallet_proxy :: ProxyDefinition < runtime_types :: sp_runtime :: account :: AccountId20 , runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType , :: core :: primitive :: u32 > > , :: core :: primitive :: u128 ,) ;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod announcements {
                    use super::runtime_types;
                    pub type Announcements = (
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_proxy::Announcement<
                                runtime_types::sp_runtime::account::AccountId20,
                                ::subxt::ext::subxt_core::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        ::core::primitive::u128,
                    );
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proxies::Proxies,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Proxy",
                        "Proxies",
                        (),
                        [
                            254u8, 20u8, 202u8, 8u8, 45u8, 127u8, 148u8, 233u8, 124u8, 74u8, 37u8,
                            87u8, 42u8, 179u8, 50u8, 197u8, 160u8, 161u8, 131u8, 88u8, 95u8, 202u8,
                            167u8, 62u8, 243u8, 181u8, 66u8, 129u8, 141u8, 25u8, 59u8, 39u8,
                        ],
                    )
                }
                #[doc = " The set of account proxies. Maps the account which has delegated to the accounts"]
                #[doc = " which are being delegated to, together with the amount held on deposit."]
                pub fn proxies(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proxies::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::proxies::Param0,
                    >,
                    types::proxies::Proxies,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Proxy",
                        "Proxies",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            254u8, 20u8, 202u8, 8u8, 45u8, 127u8, 148u8, 233u8, 124u8, 74u8, 37u8,
                            87u8, 42u8, 179u8, 50u8, 197u8, 160u8, 161u8, 131u8, 88u8, 95u8, 202u8,
                            167u8, 62u8, 243u8, 181u8, 66u8, 129u8, 141u8, 25u8, 59u8, 39u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::announcements::Announcements,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Proxy",
                        "Announcements",
                        (),
                        [
                            31u8, 69u8, 246u8, 143u8, 186u8, 163u8, 89u8, 134u8, 137u8, 213u8,
                            32u8, 37u8, 226u8, 81u8, 6u8, 69u8, 232u8, 180u8, 2u8, 237u8, 205u8,
                            55u8, 80u8, 248u8, 171u8, 255u8, 66u8, 159u8, 35u8, 231u8, 239u8, 23u8,
                        ],
                    )
                }
                #[doc = " The announcements made by the proxy (key)."]
                pub fn announcements(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::announcements::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::announcements::Param0,
                    >,
                    types::announcements::Announcements,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Proxy",
                        "Announcements",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            31u8, 69u8, 246u8, 143u8, 186u8, 163u8, 89u8, 134u8, 137u8, 213u8,
                            32u8, 37u8, 226u8, 81u8, 6u8, 69u8, 232u8, 180u8, 2u8, 237u8, 205u8,
                            55u8, 80u8, 248u8, 171u8, 255u8, 66u8, 159u8, 35u8, 231u8, 239u8, 23u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The base amount of currency needed to reserve for creating a proxy."]
                #[doc = ""]
                #[doc = " This is held for an additional storage item whose value size is"]
                #[doc = " `sizeof(Balance)` bytes and whose key size is `sizeof(AccountId)` bytes."]
                pub fn proxy_deposit_base(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "ProxyDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per proxy added."]
                #[doc = ""]
                #[doc = " This is held for adding 32 bytes plus an instance of `ProxyType` more into a"]
                #[doc = " pre-existing storage value. Thus, when configuring `ProxyDepositFactor` one should take"]
                #[doc = " into account `32 + proxy_type.encode().len()` bytes of data."]
                pub fn proxy_deposit_factor(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "ProxyDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of proxies allowed for a single account."]
                pub fn max_proxies(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "MaxProxies",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of time-delayed announcements that are allowed to be pending."]
                pub fn max_pending(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "MaxPending",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The base amount of currency needed to reserve for creating an announcement."]
                #[doc = ""]
                #[doc = " This is held when a new storage item holding a `Balance` is created (typically 16"]
                #[doc = " bytes)."]
                pub fn announcement_deposit_base(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "AnnouncementDepositBase",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount of currency needed per announcement made."]
                #[doc = ""]
                #[doc = " This is held for adding an `AccountId`, `Hash` and `BlockNumber` (typically 68 bytes)"]
                #[doc = " into a pre-existing storage value."]
                pub fn announcement_deposit_factor(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Proxy",
                        "AnnouncementDepositFactor",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod maintenance {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_maintenance::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_maintenance::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SwitchMaintenanceModeOn;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SwitchMaintenanceModeOn {
                    const PALLET: &'static str = "Maintenance";
                    const CALL: &'static str = "switch_maintenance_mode_on";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SwitchMaintenanceModeOff;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SwitchMaintenanceModeOff {
                    const PALLET: &'static str = "Maintenance";
                    const CALL: &'static str = "switch_maintenance_mode_off";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SwitchUpgradabilityInMaintenanceModeOn;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SwitchUpgradabilityInMaintenanceModeOn {
                    const PALLET: &'static str = "Maintenance";
                    const CALL: &'static str = "switch_upgradability_in_maintenance_mode_on";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SwitchUpgradabilityInMaintenanceModeOff;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SwitchUpgradabilityInMaintenanceModeOff {
                    const PALLET: &'static str = "Maintenance";
                    const CALL: &'static str = "switch_upgradability_in_maintenance_mode_off";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn switch_maintenance_mode_on(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SwitchMaintenanceModeOn,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Maintenance",
                        "switch_maintenance_mode_on",
                        types::SwitchMaintenanceModeOn {},
                        [
                            126u8, 167u8, 234u8, 112u8, 181u8, 100u8, 73u8, 214u8, 81u8, 68u8,
                            205u8, 41u8, 168u8, 205u8, 79u8, 177u8, 195u8, 199u8, 33u8, 222u8,
                            233u8, 238u8, 57u8, 106u8, 34u8, 241u8, 91u8, 51u8, 127u8, 91u8, 241u8,
                            144u8,
                        ],
                    )
                }
                pub fn switch_maintenance_mode_off(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SwitchMaintenanceModeOff,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Maintenance",
                        "switch_maintenance_mode_off",
                        types::SwitchMaintenanceModeOff {},
                        [
                            170u8, 190u8, 153u8, 196u8, 41u8, 11u8, 65u8, 184u8, 2u8, 195u8, 30u8,
                            6u8, 21u8, 177u8, 19u8, 191u8, 147u8, 90u8, 136u8, 196u8, 218u8, 22u8,
                            175u8, 162u8, 185u8, 206u8, 156u8, 16u8, 205u8, 63u8, 171u8, 220u8,
                        ],
                    )
                }
                pub fn switch_upgradability_in_maintenance_mode_on(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SwitchUpgradabilityInMaintenanceModeOn,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Maintenance",
                        "switch_upgradability_in_maintenance_mode_on",
                        types::SwitchUpgradabilityInMaintenanceModeOn {},
                        [
                            68u8, 227u8, 98u8, 211u8, 55u8, 57u8, 234u8, 22u8, 53u8, 67u8, 217u8,
                            253u8, 165u8, 112u8, 17u8, 220u8, 78u8, 84u8, 147u8, 13u8, 189u8,
                            179u8, 126u8, 109u8, 165u8, 144u8, 220u8, 121u8, 105u8, 73u8, 71u8,
                            39u8,
                        ],
                    )
                }
                pub fn switch_upgradability_in_maintenance_mode_off(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SwitchUpgradabilityInMaintenanceModeOff,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Maintenance",
                        "switch_upgradability_in_maintenance_mode_off",
                        types::SwitchUpgradabilityInMaintenanceModeOff {},
                        [
                            152u8, 134u8, 47u8, 181u8, 9u8, 120u8, 148u8, 151u8, 213u8, 101u8,
                            70u8, 239u8, 38u8, 241u8, 209u8, 187u8, 62u8, 145u8, 140u8, 214u8,
                            84u8, 132u8, 6u8, 198u8, 133u8, 227u8, 35u8, 10u8, 37u8, 196u8, 91u8,
                            156u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_maintenance::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Maintenance mode has been switched on"]
            pub struct MaintenanceModeSwitchedOn(pub maintenance_mode_switched_on::Field0);
            pub mod maintenance_mode_switched_on {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MaintenanceModeSwitchedOn {
                const PALLET: &'static str = "Maintenance";
                const EVENT: &'static str = "MaintenanceModeSwitchedOn";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Maintenance mode has been switched off"]
            pub struct MaintenanceModeSwitchedOff(pub maintenance_mode_switched_off::Field0);
            pub mod maintenance_mode_switched_off {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MaintenanceModeSwitchedOff {
                const PALLET: &'static str = "Maintenance";
                const EVENT: &'static str = "MaintenanceModeSwitchedOff";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Upgradablilty in maintenance mode has been switched on"]
            pub struct UpgradabilityInMaintenanceModeSwitchedOn(
                pub upgradability_in_maintenance_mode_switched_on::Field0,
            );
            pub mod upgradability_in_maintenance_mode_switched_on {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UpgradabilityInMaintenanceModeSwitchedOn {
                const PALLET: &'static str = "Maintenance";
                const EVENT: &'static str = "UpgradabilityInMaintenanceModeSwitchedOn";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Upgradablilty in maintenance mode has been switched off"]
            pub struct UpgradabilityInMaintenanceModeSwitchedOff(
                pub upgradability_in_maintenance_mode_switched_off::Field0,
            );
            pub mod upgradability_in_maintenance_mode_switched_off {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UpgradabilityInMaintenanceModeSwitchedOff {
                const PALLET: &'static str = "Maintenance";
                const EVENT: &'static str = "UpgradabilityInMaintenanceModeSwitchedOff";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Maintenance mode has been switched on externally"]
            pub struct MaintenanceModeSwitchedOnExternally;
            impl ::subxt::ext::subxt_core::events::StaticEvent for MaintenanceModeSwitchedOnExternally {
                const PALLET: &'static str = "Maintenance";
                const EVENT: &'static str = "MaintenanceModeSwitchedOnExternally";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod maintenance_status {
                    use super::runtime_types;
                    pub type MaintenanceStatus =
                        runtime_types::pallet_maintenance::pallet::MaintenanceStatusInfo;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn maintenance_status(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::maintenance_status::MaintenanceStatus,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Maintenance",
                        "MaintenanceStatus",
                        (),
                        [
                            237u8, 207u8, 42u8, 26u8, 30u8, 32u8, 157u8, 93u8, 210u8, 181u8, 41u8,
                            251u8, 196u8, 176u8, 31u8, 124u8, 54u8, 155u8, 236u8, 43u8, 98u8,
                            228u8, 14u8, 223u8, 142u8, 19u8, 128u8, 34u8, 81u8, 35u8, 69u8, 73u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod rolldown {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_rolldown::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_rolldown::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UpdateL2FromL1 {
                    pub requests: update_l2_from_l1::Requests,
                    pub update_hash: update_l2_from_l1::UpdateHash,
                }
                pub mod update_l2_from_l1 {
                    use super::runtime_types;
                    pub type Requests = runtime_types::pallet_rolldown::messages::L1Update;
                    pub type UpdateHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateL2FromL1 {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "update_l2_from_l1";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ForceUpdateL2FromL1 {
                    pub update: force_update_l2_from_l1::Update,
                }
                pub mod force_update_l2_from_l1 {
                    use super::runtime_types;
                    pub type Update = runtime_types::pallet_rolldown::messages::L1Update;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceUpdateL2FromL1 {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "force_update_l2_from_l1";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CancelRequestsFromL1 {
                    pub chain: cancel_requests_from_l1::Chain,
                    pub requests_to_cancel: cancel_requests_from_l1::RequestsToCancel,
                }
                pub mod cancel_requests_from_l1 {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type RequestsToCancel = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelRequestsFromL1 {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "cancel_requests_from_l1";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Withdraw {
                    pub chain: withdraw::Chain,
                    pub recipient: withdraw::Recipient,
                    pub token_address: withdraw::TokenAddress,
                    pub amount: withdraw::Amount,
                    pub ferry_tip: withdraw::FerryTip,
                }
                pub mod withdraw {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Recipient = [::core::primitive::u8; 20usize];
                    pub type TokenAddress = [::core::primitive::u8; 20usize];
                    pub type Amount = ::core::primitive::u128;
                    pub type FerryTip = ::core::option::Option<::core::primitive::u128>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Withdraw {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "withdraw";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ForceCancelRequestsFromL1 {
                    pub chain: force_cancel_requests_from_l1::Chain,
                    pub requests_to_cancel: force_cancel_requests_from_l1::RequestsToCancel,
                }
                pub mod force_cancel_requests_from_l1 {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type RequestsToCancel = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceCancelRequestsFromL1 {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "force_cancel_requests_from_l1";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CreateBatch {
                    pub chain: create_batch::Chain,
                    pub sequencer_account: create_batch::SequencerAccount,
                }
                pub mod create_batch {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type SequencerAccount =
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CreateBatch {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "create_batch";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SetManualBatchExtraFee {
                    pub balance: set_manual_batch_extra_fee::Balance,
                }
                pub mod set_manual_batch_extra_fee {
                    use super::runtime_types;
                    pub type Balance = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetManualBatchExtraFee {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "set_manual_batch_extra_fee";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "only deposit recipient can initiate refund failed deposit"]
                pub struct RefundFailedDeposit {
                    pub chain: refund_failed_deposit::Chain,
                    pub request_id: refund_failed_deposit::RequestId,
                }
                pub mod refund_failed_deposit {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type RequestId = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RefundFailedDeposit {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "refund_failed_deposit";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Froce create batch and assigns it to provided sequencer"]
                #[doc = "provided requests range must exists - otherwise `[Error::InvalidRange]` error will be returned"]
                pub struct ForceCreateBatch {
                    pub chain: force_create_batch::Chain,
                    pub range: force_create_batch::Range,
                    pub sequencer_account: force_create_batch::SequencerAccount,
                }
                pub mod force_create_batch {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Range = (::core::primitive::u128, ::core::primitive::u128);
                    pub type SequencerAccount = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceCreateBatch {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "force_create_batch";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FerryDeposit {
                    pub chain: ferry_deposit::Chain,
                    pub request_id: ferry_deposit::RequestId,
                    pub deposit_recipient: ferry_deposit::DepositRecipient,
                    pub token_address: ferry_deposit::TokenAddress,
                    pub amount: ferry_deposit::Amount,
                    pub timestamp: ferry_deposit::Timestamp,
                    pub ferry_tip: ferry_deposit::FerryTip,
                    pub deposit_hash: ferry_deposit::DepositHash,
                }
                pub mod ferry_deposit {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type RequestId = runtime_types::pallet_rolldown::messages::RequestId;
                    pub type DepositRecipient = [::core::primitive::u8; 20usize];
                    pub type TokenAddress = [::core::primitive::u8; 20usize];
                    pub type Amount = ::core::primitive::u128;
                    pub type Timestamp = ::core::primitive::u128;
                    pub type FerryTip = ::core::primitive::u128;
                    pub type DepositHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for FerryDeposit {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "ferry_deposit";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FerryDepositUnsafe {
                    pub chain: ferry_deposit_unsafe::Chain,
                    pub request_id: ferry_deposit_unsafe::RequestId,
                    pub deposit_recipient: ferry_deposit_unsafe::DepositRecipient,
                    pub token_address: ferry_deposit_unsafe::TokenAddress,
                    pub amount: ferry_deposit_unsafe::Amount,
                    pub timestamp: ferry_deposit_unsafe::Timestamp,
                    pub ferry_tip: ferry_deposit_unsafe::FerryTip,
                }
                pub mod ferry_deposit_unsafe {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type RequestId = runtime_types::pallet_rolldown::messages::RequestId;
                    pub type DepositRecipient = [::core::primitive::u8; 20usize];
                    pub type TokenAddress = [::core::primitive::u8; 20usize];
                    pub type Amount = ::core::primitive::u128;
                    pub type Timestamp = ::core::primitive::u128;
                    pub type FerryTip = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for FerryDepositUnsafe {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "ferry_deposit_unsafe";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UpdateL2FromL1Unsafe {
                    pub requests: update_l2_from_l1_unsafe::Requests,
                }
                pub mod update_l2_from_l1_unsafe {
                    use super::runtime_types;
                    pub type Requests = runtime_types::pallet_rolldown::messages::L1Update;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateL2FromL1Unsafe {
                    const PALLET: &'static str = "Rolldown";
                    const CALL: &'static str = "update_l2_from_l1_unsafe";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn update_l2_from_l1(
                    &self,
                    requests: types::update_l2_from_l1::Requests,
                    update_hash: types::update_l2_from_l1::UpdateHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateL2FromL1>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "update_l2_from_l1",
                        types::UpdateL2FromL1 {
                            requests,
                            update_hash,
                        },
                        [
                            247u8, 110u8, 50u8, 145u8, 84u8, 103u8, 30u8, 49u8, 169u8, 1u8, 183u8,
                            240u8, 52u8, 48u8, 238u8, 190u8, 198u8, 151u8, 111u8, 130u8, 7u8,
                            194u8, 226u8, 224u8, 160u8, 38u8, 107u8, 45u8, 19u8, 180u8, 102u8,
                            215u8,
                        ],
                    )
                }
                pub fn force_update_l2_from_l1(
                    &self,
                    update: types::force_update_l2_from_l1::Update,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceUpdateL2FromL1>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "force_update_l2_from_l1",
                        types::ForceUpdateL2FromL1 { update },
                        [
                            227u8, 113u8, 122u8, 175u8, 154u8, 45u8, 230u8, 40u8, 112u8, 56u8,
                            70u8, 30u8, 120u8, 69u8, 254u8, 226u8, 203u8, 12u8, 62u8, 38u8, 36u8,
                            173u8, 107u8, 181u8, 6u8, 38u8, 218u8, 207u8, 234u8, 101u8, 45u8,
                            142u8,
                        ],
                    )
                }
                pub fn cancel_requests_from_l1(
                    &self,
                    chain: types::cancel_requests_from_l1::Chain,
                    requests_to_cancel: types::cancel_requests_from_l1::RequestsToCancel,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelRequestsFromL1>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "cancel_requests_from_l1",
                        types::CancelRequestsFromL1 {
                            chain,
                            requests_to_cancel,
                        },
                        [
                            152u8, 171u8, 225u8, 79u8, 34u8, 230u8, 45u8, 119u8, 168u8, 239u8,
                            210u8, 131u8, 98u8, 68u8, 156u8, 111u8, 62u8, 19u8, 15u8, 81u8, 53u8,
                            147u8, 76u8, 220u8, 33u8, 51u8, 151u8, 163u8, 83u8, 246u8, 70u8, 20u8,
                        ],
                    )
                }
                pub fn withdraw(
                    &self,
                    chain: types::withdraw::Chain,
                    recipient: types::withdraw::Recipient,
                    token_address: types::withdraw::TokenAddress,
                    amount: types::withdraw::Amount,
                    ferry_tip: types::withdraw::FerryTip,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Withdraw>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "withdraw",
                        types::Withdraw {
                            chain,
                            recipient,
                            token_address,
                            amount,
                            ferry_tip,
                        },
                        [
                            7u8, 24u8, 30u8, 48u8, 238u8, 189u8, 141u8, 135u8, 11u8, 137u8, 31u8,
                            2u8, 203u8, 68u8, 127u8, 174u8, 213u8, 152u8, 49u8, 221u8, 190u8,
                            159u8, 153u8, 137u8, 145u8, 238u8, 246u8, 55u8, 159u8, 17u8, 22u8,
                            185u8,
                        ],
                    )
                }
                pub fn force_cancel_requests_from_l1(
                    &self,
                    chain: types::force_cancel_requests_from_l1::Chain,
                    requests_to_cancel: types::force_cancel_requests_from_l1::RequestsToCancel,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ForceCancelRequestsFromL1,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "force_cancel_requests_from_l1",
                        types::ForceCancelRequestsFromL1 {
                            chain,
                            requests_to_cancel,
                        },
                        [
                            174u8, 150u8, 249u8, 182u8, 0u8, 186u8, 93u8, 123u8, 224u8, 127u8,
                            133u8, 243u8, 83u8, 140u8, 15u8, 107u8, 230u8, 144u8, 177u8, 76u8,
                            78u8, 114u8, 187u8, 160u8, 32u8, 159u8, 146u8, 163u8, 172u8, 177u8,
                            236u8, 179u8,
                        ],
                    )
                }
                pub fn create_batch(
                    &self,
                    chain: types::create_batch::Chain,
                    sequencer_account: types::create_batch::SequencerAccount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CreateBatch>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "create_batch",
                        types::CreateBatch {
                            chain,
                            sequencer_account,
                        },
                        [
                            177u8, 181u8, 160u8, 173u8, 209u8, 177u8, 18u8, 64u8, 129u8, 132u8,
                            161u8, 121u8, 222u8, 4u8, 249u8, 226u8, 69u8, 224u8, 253u8, 106u8,
                            68u8, 118u8, 18u8, 129u8, 253u8, 140u8, 17u8, 80u8, 139u8, 115u8, 27u8,
                            239u8,
                        ],
                    )
                }
                pub fn set_manual_batch_extra_fee(
                    &self,
                    balance: types::set_manual_batch_extra_fee::Balance,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetManualBatchExtraFee,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "set_manual_batch_extra_fee",
                        types::SetManualBatchExtraFee { balance },
                        [
                            142u8, 174u8, 85u8, 255u8, 142u8, 125u8, 178u8, 55u8, 70u8, 239u8,
                            54u8, 81u8, 93u8, 172u8, 183u8, 8u8, 35u8, 55u8, 199u8, 215u8, 255u8,
                            81u8, 171u8, 202u8, 22u8, 92u8, 173u8, 125u8, 203u8, 9u8, 98u8, 185u8,
                        ],
                    )
                }
                #[doc = "only deposit recipient can initiate refund failed deposit"]
                pub fn refund_failed_deposit(
                    &self,
                    chain: types::refund_failed_deposit::Chain,
                    request_id: types::refund_failed_deposit::RequestId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RefundFailedDeposit>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "refund_failed_deposit",
                        types::RefundFailedDeposit { chain, request_id },
                        [
                            17u8, 77u8, 88u8, 132u8, 22u8, 133u8, 215u8, 100u8, 245u8, 5u8, 20u8,
                            76u8, 35u8, 166u8, 120u8, 50u8, 130u8, 61u8, 126u8, 15u8, 65u8, 173u8,
                            216u8, 100u8, 98u8, 106u8, 47u8, 16u8, 44u8, 237u8, 246u8, 40u8,
                        ],
                    )
                }
                #[doc = "Froce create batch and assigns it to provided sequencer"]
                #[doc = "provided requests range must exists - otherwise `[Error::InvalidRange]` error will be returned"]
                pub fn force_create_batch(
                    &self,
                    chain: types::force_create_batch::Chain,
                    range: types::force_create_batch::Range,
                    sequencer_account: types::force_create_batch::SequencerAccount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceCreateBatch>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "force_create_batch",
                        types::ForceCreateBatch {
                            chain,
                            range,
                            sequencer_account,
                        },
                        [
                            246u8, 119u8, 20u8, 217u8, 253u8, 81u8, 218u8, 114u8, 206u8, 234u8,
                            219u8, 11u8, 137u8, 84u8, 123u8, 204u8, 81u8, 71u8, 220u8, 36u8, 54u8,
                            244u8, 61u8, 14u8, 146u8, 86u8, 195u8, 230u8, 120u8, 89u8, 253u8,
                            163u8,
                        ],
                    )
                }
                pub fn ferry_deposit(
                    &self,
                    chain: types::ferry_deposit::Chain,
                    request_id: types::ferry_deposit::RequestId,
                    deposit_recipient: types::ferry_deposit::DepositRecipient,
                    token_address: types::ferry_deposit::TokenAddress,
                    amount: types::ferry_deposit::Amount,
                    timestamp: types::ferry_deposit::Timestamp,
                    ferry_tip: types::ferry_deposit::FerryTip,
                    deposit_hash: types::ferry_deposit::DepositHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::FerryDeposit>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "ferry_deposit",
                        types::FerryDeposit {
                            chain,
                            request_id,
                            deposit_recipient,
                            token_address,
                            amount,
                            timestamp,
                            ferry_tip,
                            deposit_hash,
                        },
                        [
                            26u8, 172u8, 203u8, 128u8, 198u8, 127u8, 198u8, 110u8, 39u8, 124u8,
                            191u8, 227u8, 251u8, 55u8, 253u8, 173u8, 228u8, 98u8, 212u8, 241u8,
                            56u8, 115u8, 62u8, 27u8, 255u8, 105u8, 47u8, 202u8, 247u8, 74u8, 19u8,
                            37u8,
                        ],
                    )
                }
                pub fn ferry_deposit_unsafe(
                    &self,
                    chain: types::ferry_deposit_unsafe::Chain,
                    request_id: types::ferry_deposit_unsafe::RequestId,
                    deposit_recipient: types::ferry_deposit_unsafe::DepositRecipient,
                    token_address: types::ferry_deposit_unsafe::TokenAddress,
                    amount: types::ferry_deposit_unsafe::Amount,
                    timestamp: types::ferry_deposit_unsafe::Timestamp,
                    ferry_tip: types::ferry_deposit_unsafe::FerryTip,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::FerryDepositUnsafe>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "ferry_deposit_unsafe",
                        types::FerryDepositUnsafe {
                            chain,
                            request_id,
                            deposit_recipient,
                            token_address,
                            amount,
                            timestamp,
                            ferry_tip,
                        },
                        [
                            231u8, 48u8, 113u8, 204u8, 76u8, 216u8, 112u8, 150u8, 146u8, 174u8,
                            161u8, 191u8, 235u8, 191u8, 136u8, 43u8, 182u8, 153u8, 61u8, 1u8,
                            142u8, 94u8, 177u8, 46u8, 192u8, 14u8, 21u8, 81u8, 82u8, 234u8, 218u8,
                            239u8,
                        ],
                    )
                }
                pub fn update_l2_from_l1_unsafe(
                    &self,
                    requests: types::update_l2_from_l1_unsafe::Requests,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateL2FromL1Unsafe>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Rolldown",
                        "update_l2_from_l1_unsafe",
                        types::UpdateL2FromL1Unsafe { requests },
                        [
                            189u8, 33u8, 103u8, 246u8, 205u8, 63u8, 181u8, 233u8, 218u8, 213u8,
                            13u8, 54u8, 145u8, 23u8, 217u8, 127u8, 103u8, 63u8, 27u8, 144u8, 4u8,
                            111u8, 192u8, 78u8, 53u8, 54u8, 141u8, 37u8, 56u8, 251u8, 175u8, 209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_rolldown::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct L1ReadStored {
                pub chain: l1_read_stored::Chain,
                pub sequencer: l1_read_stored::Sequencer,
                pub dispute_period_end: l1_read_stored::DisputePeriodEnd,
                pub range: l1_read_stored::Range,
                pub hash: l1_read_stored::Hash,
            }
            pub mod l1_read_stored {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type Sequencer = runtime_types::sp_runtime::account::AccountId20;
                pub type DisputePeriodEnd = ::core::primitive::u128;
                pub type Range = runtime_types::pallet_rolldown::messages::Range;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for L1ReadStored {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "L1ReadStored";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RequestProcessedOnL2 {
                pub chain: request_processed_on_l2::Chain,
                pub request_id: request_processed_on_l2::RequestId,
                pub status: request_processed_on_l2::Status,
            }
            pub mod request_processed_on_l2 {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type RequestId = ::core::primitive::u128;
                pub type Status = ::core::result::Result<
                    (),
                    runtime_types::pallet_rolldown::L1RequestProcessingError,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RequestProcessedOnL2 {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "RequestProcessedOnL2";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct L1ReadCanceled {
                pub chain: l1_read_canceled::Chain,
                pub canceled_sequencer_update: l1_read_canceled::CanceledSequencerUpdate,
                pub assigned_id: l1_read_canceled::AssignedId,
            }
            pub mod l1_read_canceled {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type CanceledSequencerUpdate = ::core::primitive::u128;
                pub type AssignedId = runtime_types::pallet_rolldown::messages::RequestId;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for L1ReadCanceled {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "L1ReadCanceled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct TxBatchCreated {
                pub chain: tx_batch_created::Chain,
                pub source: tx_batch_created::Source,
                pub assignee: tx_batch_created::Assignee,
                pub batch_id: tx_batch_created::BatchId,
                pub range: tx_batch_created::Range,
            }
            pub mod tx_batch_created {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type Source = runtime_types::pallet_rolldown::pallet::BatchSource;
                pub type Assignee = runtime_types::sp_runtime::account::AccountId20;
                pub type BatchId = ::core::primitive::u128;
                pub type Range = (::core::primitive::u128, ::core::primitive::u128);
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TxBatchCreated {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "TxBatchCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct WithdrawalRequestCreated {
                pub chain: withdrawal_request_created::Chain,
                pub request_id: withdrawal_request_created::RequestId,
                pub recipient: withdrawal_request_created::Recipient,
                pub token_address: withdrawal_request_created::TokenAddress,
                pub amount: withdrawal_request_created::Amount,
                pub hash: withdrawal_request_created::Hash,
                pub ferry_tip: withdrawal_request_created::FerryTip,
            }
            pub mod withdrawal_request_created {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type RequestId = runtime_types::pallet_rolldown::messages::RequestId;
                pub type Recipient = [::core::primitive::u8; 20usize];
                pub type TokenAddress = [::core::primitive::u8; 20usize];
                pub type Amount = ::core::primitive::u128;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
                pub type FerryTip = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for WithdrawalRequestCreated {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "WithdrawalRequestCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ManualBatchExtraFeeSet(pub manual_batch_extra_fee_set::Field0);
            pub mod manual_batch_extra_fee_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ManualBatchExtraFeeSet {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "ManualBatchExtraFeeSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct DepositRefundCreated {
                pub chain: deposit_refund_created::Chain,
                pub refunded_request_id: deposit_refund_created::RefundedRequestId,
                pub ferry: deposit_refund_created::Ferry,
            }
            pub mod deposit_refund_created {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type RefundedRequestId = runtime_types::pallet_rolldown::messages::RequestId;
                pub type Ferry =
                    ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DepositRefundCreated {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "DepositRefundCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct L1ReadScheduledForExecution {
                pub chain: l1_read_scheduled_for_execution::Chain,
                pub hash: l1_read_scheduled_for_execution::Hash,
            }
            pub mod l1_read_scheduled_for_execution {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for L1ReadScheduledForExecution {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "L1ReadScheduledForExecution";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct L1ReadIgnoredBecauseOfMaintenanceMode {
                pub chain: l1_read_ignored_because_of_maintenance_mode::Chain,
                pub hash: l1_read_ignored_because_of_maintenance_mode::Hash,
            }
            pub mod l1_read_ignored_because_of_maintenance_mode {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type Hash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for L1ReadIgnoredBecauseOfMaintenanceMode {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "L1ReadIgnoredBecauseOfMaintenanceMode";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct DepositFerried {
                pub chain: deposit_ferried::Chain,
                pub deposit: deposit_ferried::Deposit,
                pub deposit_hash: deposit_ferried::DepositHash,
            }
            pub mod deposit_ferried {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type Deposit = runtime_types::pallet_rolldown::messages::Deposit;
                pub type DepositHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DepositFerried {
                const PALLET: &'static str = "Rolldown";
                const EVENT: &'static str = "DepositFerried";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod ferried_deposits {
                    use super::runtime_types;
                    pub type FerriedDeposits = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Param1 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod failed_l1_deposits {
                    use super::runtime_types;
                    pub type FailedL1Deposits = (
                        runtime_types::sp_runtime::account::AccountId20,
                        ::subxt::ext::subxt_core::utils::H256,
                    );
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod last_processed_request_on_l2 {
                    use super::runtime_types;
                    pub type LastProcessedRequestOnL2 = ::core::primitive::u128;
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                }
                pub mod l2_origin_request_id {
                    use super::runtime_types;
                    pub type L2OriginRequestId = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::pallet_rolldown::messages::Chain,
                        ::core::primitive::u128,
                    >;
                }
                pub mod manual_batch_extra_fee {
                    use super::runtime_types;
                    pub type ManualBatchExtraFee = ::core::primitive::u128;
                }
                pub mod pending_sequencer_updates {
                    use super::runtime_types;
                    pub type PendingSequencerUpdates = (
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::pallet_rolldown::messages::L1Update,
                        ::subxt::ext::subxt_core::utils::H256,
                    );
                    pub type Param0 = ::core::primitive::u128;
                    pub type Param1 = runtime_types::pallet_rolldown::messages::Chain;
                }
                pub mod updates_execution_queue {
                    use super::runtime_types;
                    pub type UpdatesExecutionQueue = (
                        ::core::primitive::u32,
                        runtime_types::pallet_rolldown::messages::Chain,
                        runtime_types::pallet_rolldown::messages::L1Update,
                    );
                    pub type Param0 = ::core::primitive::u128;
                }
                pub mod last_maintanance_mode {
                    use super::runtime_types;
                    pub type LastMaintananceMode = ::core::primitive::u128;
                }
                pub mod updates_execution_queue_next_id {
                    use super::runtime_types;
                    pub type UpdatesExecutionQueueNextId = ::core::primitive::u128;
                }
                pub mod last_scheduled_update_id_in_execution_queue {
                    use super::runtime_types;
                    pub type LastScheduledUpdateIdInExecutionQueue = ::core::primitive::u128;
                }
                pub mod sequencers_rights {
                    use super::runtime_types;
                    pub type SequencersRights = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::pallet_rolldown::pallet::SequencerRights,
                    >;
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                }
                pub mod l2_requests {
                    use super::runtime_types;
                    pub type L2Requests = (
                        runtime_types::pallet_rolldown::pallet::L2Request<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                        ::subxt::ext::subxt_core::utils::H256,
                    );
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Param1 = runtime_types::pallet_rolldown::messages::RequestId;
                }
                pub mod awaiting_cancel_resolution {
                    use super::runtime_types;
                    pub type AwaitingCancelResolution =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                            runtime_types::pallet_rolldown::pallet::DisputeRole,
                        )>;
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                }
                pub mod last_update_by_sequencer {
                    use super::runtime_types;
                    pub type LastUpdateBySequencer = ::core::primitive::u128;
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Param1 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod max_accepted_request_id_onl2 {
                    use super::runtime_types;
                    pub type MaxAcceptedRequestIdOnl2 = ::core::primitive::u128;
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                }
                pub mod total_number_of_deposits {
                    use super::runtime_types;
                    pub type TotalNumberOfDeposits = ::core::primitive::u128;
                }
                pub mod total_number_of_withdrawals {
                    use super::runtime_types;
                    pub type TotalNumberOfWithdrawals = ::core::primitive::u128;
                }
                pub mod l2_requests_batch {
                    use super::runtime_types;
                    pub type L2RequestsBatch = (
                        ::core::primitive::u32,
                        (::core::primitive::u128, ::core::primitive::u128),
                        runtime_types::sp_runtime::account::AccountId20,
                    );
                    pub type Param0 = runtime_types::pallet_rolldown::messages::Chain;
                    pub type Param1 = ::core::primitive::u128;
                }
                pub mod l2_requests_batch_last {
                    use super::runtime_types;
                    pub type L2RequestsBatchLast = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::pallet_rolldown::messages::Chain,
                        (
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                            (::core::primitive::u128, ::core::primitive::u128),
                        ),
                    >;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn ferried_deposits_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::ferried_deposits::FerriedDeposits,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "FerriedDeposits",
                        (),
                        [
                            75u8, 25u8, 165u8, 61u8, 83u8, 27u8, 68u8, 154u8, 48u8, 94u8, 149u8,
                            216u8, 227u8, 224u8, 225u8, 46u8, 119u8, 13u8, 110u8, 97u8, 111u8,
                            55u8, 8u8, 233u8, 249u8, 99u8, 65u8, 162u8, 43u8, 26u8, 174u8, 232u8,
                        ],
                    )
                }
                pub fn ferried_deposits_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::ferried_deposits::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::ferried_deposits::Param0,
                    >,
                    types::ferried_deposits::FerriedDeposits,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "FerriedDeposits",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            75u8, 25u8, 165u8, 61u8, 83u8, 27u8, 68u8, 154u8, 48u8, 94u8, 149u8,
                            216u8, 227u8, 224u8, 225u8, 46u8, 119u8, 13u8, 110u8, 97u8, 111u8,
                            55u8, 8u8, 233u8, 249u8, 99u8, 65u8, 162u8, 43u8, 26u8, 174u8, 232u8,
                        ],
                    )
                }
                pub fn ferried_deposits(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::ferried_deposits::Param0>,
                    _1: impl ::core::borrow::Borrow<types::ferried_deposits::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::ferried_deposits::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::ferried_deposits::Param1,
                        >,
                    ),
                    types::ferried_deposits::FerriedDeposits,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "FerriedDeposits",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            75u8, 25u8, 165u8, 61u8, 83u8, 27u8, 68u8, 154u8, 48u8, 94u8, 149u8,
                            216u8, 227u8, 224u8, 225u8, 46u8, 119u8, 13u8, 110u8, 97u8, 111u8,
                            55u8, 8u8, 233u8, 249u8, 99u8, 65u8, 162u8, 43u8, 26u8, 174u8, 232u8,
                        ],
                    )
                }
                #[doc = " stores id of the failed depoisit, so it can be  refunded using [`Pallet::refund_failed_deposit`]"]
                pub fn failed_l1_deposits_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::failed_l1_deposits::FailedL1Deposits,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "FailedL1Deposits",
                        (),
                        [
                            15u8, 172u8, 112u8, 99u8, 248u8, 59u8, 138u8, 195u8, 107u8, 226u8,
                            159u8, 11u8, 70u8, 166u8, 83u8, 228u8, 165u8, 104u8, 236u8, 149u8,
                            218u8, 196u8, 55u8, 209u8, 163u8, 202u8, 41u8, 133u8, 53u8, 253u8,
                            190u8, 76u8,
                        ],
                    )
                }
                #[doc = " stores id of the failed depoisit, so it can be  refunded using [`Pallet::refund_failed_deposit`]"]
                pub fn failed_l1_deposits_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::failed_l1_deposits::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::failed_l1_deposits::Param0,
                    >,
                    types::failed_l1_deposits::FailedL1Deposits,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "FailedL1Deposits",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            15u8, 172u8, 112u8, 99u8, 248u8, 59u8, 138u8, 195u8, 107u8, 226u8,
                            159u8, 11u8, 70u8, 166u8, 83u8, 228u8, 165u8, 104u8, 236u8, 149u8,
                            218u8, 196u8, 55u8, 209u8, 163u8, 202u8, 41u8, 133u8, 53u8, 253u8,
                            190u8, 76u8,
                        ],
                    )
                }
                #[doc = " stores id of the failed depoisit, so it can be  refunded using [`Pallet::refund_failed_deposit`]"]
                pub fn failed_l1_deposits(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::failed_l1_deposits::Param0>,
                    _1: impl ::core::borrow::Borrow<types::failed_l1_deposits::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::failed_l1_deposits::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::failed_l1_deposits::Param1,
                        >,
                    ),
                    types::failed_l1_deposits::FailedL1Deposits,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "FailedL1Deposits",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            15u8, 172u8, 112u8, 99u8, 248u8, 59u8, 138u8, 195u8, 107u8, 226u8,
                            159u8, 11u8, 70u8, 166u8, 83u8, 228u8, 165u8, 104u8, 236u8, 149u8,
                            218u8, 196u8, 55u8, 209u8, 163u8, 202u8, 41u8, 133u8, 53u8, 253u8,
                            190u8, 76u8,
                        ],
                    )
                }
                pub fn last_processed_request_on_l2_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_processed_request_on_l2::LastProcessedRequestOnL2,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "LastProcessedRequestOnL2",
                        (),
                        [
                            209u8, 82u8, 64u8, 69u8, 94u8, 225u8, 240u8, 36u8, 154u8, 219u8, 58u8,
                            174u8, 138u8, 205u8, 171u8, 104u8, 19u8, 112u8, 190u8, 228u8, 204u8,
                            53u8, 199u8, 84u8, 184u8, 40u8, 202u8, 79u8, 12u8, 12u8, 98u8, 124u8,
                        ],
                    )
                }
                pub fn last_processed_request_on_l2(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::last_processed_request_on_l2::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::last_processed_request_on_l2::Param0,
                    >,
                    types::last_processed_request_on_l2::LastProcessedRequestOnL2,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "LastProcessedRequestOnL2",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            209u8, 82u8, 64u8, 69u8, 94u8, 225u8, 240u8, 36u8, 154u8, 219u8, 58u8,
                            174u8, 138u8, 205u8, 171u8, 104u8, 19u8, 112u8, 190u8, 228u8, 204u8,
                            53u8, 199u8, 84u8, 184u8, 40u8, 202u8, 79u8, 12u8, 12u8, 98u8, 124u8,
                        ],
                    )
                }
                pub fn l2_origin_request_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::l2_origin_request_id::L2OriginRequestId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "L2OriginRequestId",
                        (),
                        [
                            105u8, 3u8, 158u8, 224u8, 187u8, 243u8, 125u8, 229u8, 2u8, 160u8,
                            223u8, 82u8, 174u8, 230u8, 5u8, 209u8, 254u8, 91u8, 135u8, 226u8,
                            239u8, 108u8, 15u8, 240u8, 162u8, 251u8, 155u8, 170u8, 75u8, 234u8,
                            242u8, 118u8,
                        ],
                    )
                }
                pub fn manual_batch_extra_fee(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::manual_batch_extra_fee::ManualBatchExtraFee,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "ManualBatchExtraFee",
                        (),
                        [
                            164u8, 206u8, 242u8, 51u8, 149u8, 226u8, 135u8, 238u8, 125u8, 165u8,
                            170u8, 2u8, 95u8, 86u8, 69u8, 137u8, 242u8, 74u8, 167u8, 120u8, 201u8,
                            52u8, 93u8, 158u8, 46u8, 36u8, 179u8, 224u8, 89u8, 220u8, 151u8, 134u8,
                        ],
                    )
                }
                pub fn pending_sequencer_updates_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::pending_sequencer_updates::PendingSequencerUpdates,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "PendingSequencerUpdates",
                        (),
                        [
                            148u8, 160u8, 86u8, 111u8, 181u8, 22u8, 240u8, 190u8, 227u8, 206u8,
                            86u8, 29u8, 60u8, 236u8, 102u8, 32u8, 198u8, 39u8, 172u8, 231u8, 86u8,
                            172u8, 172u8, 45u8, 19u8, 69u8, 192u8, 211u8, 139u8, 239u8, 10u8, 4u8,
                        ],
                    )
                }
                pub fn pending_sequencer_updates_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pending_sequencer_updates::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::pending_sequencer_updates::Param0,
                    >,
                    types::pending_sequencer_updates::PendingSequencerUpdates,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "PendingSequencerUpdates",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            148u8, 160u8, 86u8, 111u8, 181u8, 22u8, 240u8, 190u8, 227u8, 206u8,
                            86u8, 29u8, 60u8, 236u8, 102u8, 32u8, 198u8, 39u8, 172u8, 231u8, 86u8,
                            172u8, 172u8, 45u8, 19u8, 69u8, 192u8, 211u8, 139u8, 239u8, 10u8, 4u8,
                        ],
                    )
                }
                pub fn pending_sequencer_updates(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pending_sequencer_updates::Param0>,
                    _1: impl ::core::borrow::Borrow<types::pending_sequencer_updates::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::pending_sequencer_updates::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::pending_sequencer_updates::Param1,
                        >,
                    ),
                    types::pending_sequencer_updates::PendingSequencerUpdates,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "PendingSequencerUpdates",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            148u8, 160u8, 86u8, 111u8, 181u8, 22u8, 240u8, 190u8, 227u8, 206u8,
                            86u8, 29u8, 60u8, 236u8, 102u8, 32u8, 198u8, 39u8, 172u8, 231u8, 86u8,
                            172u8, 172u8, 45u8, 19u8, 69u8, 192u8, 211u8, 139u8, 239u8, 10u8, 4u8,
                        ],
                    )
                }
                pub fn updates_execution_queue_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::updates_execution_queue::UpdatesExecutionQueue,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "UpdatesExecutionQueue",
                        (),
                        [
                            198u8, 5u8, 83u8, 81u8, 73u8, 120u8, 72u8, 30u8, 10u8, 169u8, 94u8,
                            166u8, 25u8, 7u8, 230u8, 63u8, 120u8, 81u8, 89u8, 14u8, 81u8, 89u8,
                            205u8, 155u8, 10u8, 81u8, 127u8, 108u8, 192u8, 123u8, 52u8, 112u8,
                        ],
                    )
                }
                pub fn updates_execution_queue(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::updates_execution_queue::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::updates_execution_queue::Param0,
                    >,
                    types::updates_execution_queue::UpdatesExecutionQueue,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "UpdatesExecutionQueue",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            198u8, 5u8, 83u8, 81u8, 73u8, 120u8, 72u8, 30u8, 10u8, 169u8, 94u8,
                            166u8, 25u8, 7u8, 230u8, 63u8, 120u8, 81u8, 89u8, 14u8, 81u8, 89u8,
                            205u8, 155u8, 10u8, 81u8, 127u8, 108u8, 192u8, 123u8, 52u8, 112u8,
                        ],
                    )
                }
                pub fn last_maintanance_mode(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_maintanance_mode::LastMaintananceMode,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "LastMaintananceMode",
                        (),
                        [
                            60u8, 180u8, 13u8, 110u8, 161u8, 47u8, 16u8, 109u8, 99u8, 33u8, 42u8,
                            45u8, 202u8, 37u8, 49u8, 22u8, 67u8, 85u8, 240u8, 129u8, 36u8, 50u8,
                            254u8, 64u8, 20u8, 3u8, 229u8, 181u8, 149u8, 33u8, 70u8, 7u8,
                        ],
                    )
                }
                pub fn updates_execution_queue_next_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::updates_execution_queue_next_id::UpdatesExecutionQueueNextId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "UpdatesExecutionQueueNextId",
                        (),
                        [
                            208u8, 226u8, 245u8, 241u8, 82u8, 106u8, 131u8, 96u8, 78u8, 24u8,
                            173u8, 199u8, 251u8, 53u8, 203u8, 100u8, 125u8, 60u8, 86u8, 124u8,
                            40u8, 95u8, 136u8, 119u8, 22u8, 198u8, 41u8, 252u8, 28u8, 114u8, 213u8,
                            168u8,
                        ],
                    )
                }                pub fn last_scheduled_update_id_in_execution_queue (& self ,) -> :: subxt :: ext :: subxt_core :: storage :: address :: StaticAddress :: < () , types :: last_scheduled_update_id_in_execution_queue :: LastScheduledUpdateIdInExecutionQueue , :: subxt :: ext :: subxt_core :: utils :: Yes , :: subxt :: ext :: subxt_core :: utils :: Yes , () >{
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "LastScheduledUpdateIdInExecutionQueue",
                        (),
                        [
                            110u8, 113u8, 159u8, 65u8, 49u8, 233u8, 107u8, 255u8, 66u8, 27u8,
                            177u8, 24u8, 23u8, 153u8, 202u8, 125u8, 190u8, 58u8, 199u8, 118u8,
                            38u8, 184u8, 44u8, 39u8, 41u8, 156u8, 221u8, 236u8, 183u8, 250u8, 88u8,
                            177u8,
                        ],
                    )
                }
                pub fn sequencers_rights_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::sequencers_rights::SequencersRights,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "SequencersRights",
                        (),
                        [
                            124u8, 29u8, 207u8, 204u8, 183u8, 144u8, 245u8, 127u8, 158u8, 254u8,
                            231u8, 90u8, 164u8, 19u8, 178u8, 138u8, 36u8, 90u8, 33u8, 172u8, 35u8,
                            1u8, 27u8, 252u8, 137u8, 15u8, 247u8, 203u8, 71u8, 250u8, 77u8, 164u8,
                        ],
                    )
                }
                pub fn sequencers_rights(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::sequencers_rights::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::sequencers_rights::Param0,
                    >,
                    types::sequencers_rights::SequencersRights,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "SequencersRights",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            124u8, 29u8, 207u8, 204u8, 183u8, 144u8, 245u8, 127u8, 158u8, 254u8,
                            231u8, 90u8, 164u8, 19u8, 178u8, 138u8, 36u8, 90u8, 33u8, 172u8, 35u8,
                            1u8, 27u8, 252u8, 137u8, 15u8, 247u8, 203u8, 71u8, 250u8, 77u8, 164u8,
                        ],
                    )
                }
                pub fn l2_requests_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::l2_requests::L2Requests,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "L2Requests",
                        (),
                        [
                            226u8, 19u8, 228u8, 121u8, 21u8, 104u8, 103u8, 27u8, 8u8, 115u8, 99u8,
                            197u8, 113u8, 207u8, 69u8, 248u8, 187u8, 190u8, 15u8, 177u8, 223u8,
                            18u8, 96u8, 103u8, 81u8, 18u8, 180u8, 143u8, 37u8, 51u8, 113u8, 206u8,
                        ],
                    )
                }
                pub fn l2_requests_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::l2_requests::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::l2_requests::Param0,
                    >,
                    types::l2_requests::L2Requests,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "L2Requests",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            226u8, 19u8, 228u8, 121u8, 21u8, 104u8, 103u8, 27u8, 8u8, 115u8, 99u8,
                            197u8, 113u8, 207u8, 69u8, 248u8, 187u8, 190u8, 15u8, 177u8, 223u8,
                            18u8, 96u8, 103u8, 81u8, 18u8, 180u8, 143u8, 37u8, 51u8, 113u8, 206u8,
                        ],
                    )
                }
                pub fn l2_requests(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::l2_requests::Param0>,
                    _1: impl ::core::borrow::Borrow<types::l2_requests::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::l2_requests::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::l2_requests::Param1,
                        >,
                    ),
                    types::l2_requests::L2Requests,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "L2Requests",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            226u8, 19u8, 228u8, 121u8, 21u8, 104u8, 103u8, 27u8, 8u8, 115u8, 99u8,
                            197u8, 113u8, 207u8, 69u8, 248u8, 187u8, 190u8, 15u8, 177u8, 223u8,
                            18u8, 96u8, 103u8, 81u8, 18u8, 180u8, 143u8, 37u8, 51u8, 113u8, 206u8,
                        ],
                    )
                }
                pub fn awaiting_cancel_resolution_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::awaiting_cancel_resolution::AwaitingCancelResolution,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "AwaitingCancelResolution",
                        (),
                        [
                            22u8, 130u8, 42u8, 98u8, 88u8, 131u8, 118u8, 172u8, 33u8, 63u8, 132u8,
                            189u8, 100u8, 254u8, 125u8, 19u8, 141u8, 90u8, 177u8, 248u8, 183u8,
                            16u8, 203u8, 147u8, 47u8, 219u8, 221u8, 61u8, 149u8, 201u8, 181u8,
                            51u8,
                        ],
                    )
                }
                pub fn awaiting_cancel_resolution(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::awaiting_cancel_resolution::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::awaiting_cancel_resolution::Param0,
                    >,
                    types::awaiting_cancel_resolution::AwaitingCancelResolution,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "AwaitingCancelResolution",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            22u8, 130u8, 42u8, 98u8, 88u8, 131u8, 118u8, 172u8, 33u8, 63u8, 132u8,
                            189u8, 100u8, 254u8, 125u8, 19u8, 141u8, 90u8, 177u8, 248u8, 183u8,
                            16u8, 203u8, 147u8, 47u8, 219u8, 221u8, 61u8, 149u8, 201u8, 181u8,
                            51u8,
                        ],
                    )
                }
                pub fn last_update_by_sequencer_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::last_update_by_sequencer::LastUpdateBySequencer,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "LastUpdateBySequencer",
                        (),
                        [
                            137u8, 17u8, 193u8, 214u8, 37u8, 163u8, 212u8, 81u8, 54u8, 164u8,
                            230u8, 92u8, 5u8, 213u8, 35u8, 176u8, 213u8, 237u8, 120u8, 236u8,
                            204u8, 236u8, 113u8, 141u8, 169u8, 178u8, 80u8, 197u8, 12u8, 171u8,
                            238u8, 6u8,
                        ],
                    )
                }
                pub fn last_update_by_sequencer_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::last_update_by_sequencer::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::last_update_by_sequencer::Param0,
                    >,
                    types::last_update_by_sequencer::LastUpdateBySequencer,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "LastUpdateBySequencer",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            137u8, 17u8, 193u8, 214u8, 37u8, 163u8, 212u8, 81u8, 54u8, 164u8,
                            230u8, 92u8, 5u8, 213u8, 35u8, 176u8, 213u8, 237u8, 120u8, 236u8,
                            204u8, 236u8, 113u8, 141u8, 169u8, 178u8, 80u8, 197u8, 12u8, 171u8,
                            238u8, 6u8,
                        ],
                    )
                }
                pub fn last_update_by_sequencer(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::last_update_by_sequencer::Param0>,
                    _1: impl ::core::borrow::Borrow<types::last_update_by_sequencer::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::last_update_by_sequencer::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::last_update_by_sequencer::Param1,
                        >,
                    ),
                    types::last_update_by_sequencer::LastUpdateBySequencer,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "LastUpdateBySequencer",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            137u8, 17u8, 193u8, 214u8, 37u8, 163u8, 212u8, 81u8, 54u8, 164u8,
                            230u8, 92u8, 5u8, 213u8, 35u8, 176u8, 213u8, 237u8, 120u8, 236u8,
                            204u8, 236u8, 113u8, 141u8, 169u8, 178u8, 80u8, 197u8, 12u8, 171u8,
                            238u8, 6u8,
                        ],
                    )
                }
                pub fn max_accepted_request_id_onl2_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::max_accepted_request_id_onl2::MaxAcceptedRequestIdOnl2,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "MaxAcceptedRequestIdOnl2",
                        (),
                        [
                            11u8, 229u8, 85u8, 158u8, 241u8, 40u8, 241u8, 15u8, 5u8, 211u8, 66u8,
                            72u8, 211u8, 37u8, 26u8, 132u8, 95u8, 153u8, 21u8, 196u8, 10u8, 89u8,
                            227u8, 196u8, 240u8, 245u8, 167u8, 101u8, 173u8, 173u8, 172u8, 72u8,
                        ],
                    )
                }
                pub fn max_accepted_request_id_onl2(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::max_accepted_request_id_onl2::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::max_accepted_request_id_onl2::Param0,
                    >,
                    types::max_accepted_request_id_onl2::MaxAcceptedRequestIdOnl2,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "MaxAcceptedRequestIdOnl2",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            11u8, 229u8, 85u8, 158u8, 241u8, 40u8, 241u8, 15u8, 5u8, 211u8, 66u8,
                            72u8, 211u8, 37u8, 26u8, 132u8, 95u8, 153u8, 21u8, 196u8, 10u8, 89u8,
                            227u8, 196u8, 240u8, 245u8, 167u8, 101u8, 173u8, 173u8, 172u8, 72u8,
                        ],
                    )
                }
                pub fn total_number_of_deposits(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_number_of_deposits::TotalNumberOfDeposits,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "TotalNumberOfDeposits",
                        (),
                        [
                            232u8, 214u8, 45u8, 202u8, 195u8, 193u8, 161u8, 10u8, 154u8, 62u8,
                            175u8, 71u8, 4u8, 220u8, 160u8, 187u8, 72u8, 175u8, 131u8, 189u8, 63u8,
                            228u8, 122u8, 57u8, 30u8, 243u8, 1u8, 223u8, 60u8, 238u8, 242u8, 88u8,
                        ],
                    )
                }
                pub fn total_number_of_withdrawals(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_number_of_withdrawals::TotalNumberOfWithdrawals,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "TotalNumberOfWithdrawals",
                        (),
                        [
                            222u8, 203u8, 178u8, 31u8, 111u8, 228u8, 33u8, 86u8, 102u8, 44u8,
                            245u8, 226u8, 194u8, 141u8, 142u8, 127u8, 1u8, 161u8, 64u8, 179u8,
                            126u8, 86u8, 111u8, 236u8, 75u8, 234u8, 22u8, 167u8, 61u8, 20u8, 79u8,
                            217u8,
                        ],
                    )
                }
                pub fn l2_requests_batch_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::l2_requests_batch::L2RequestsBatch,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "L2RequestsBatch",
                        (),
                        [
                            254u8, 112u8, 78u8, 88u8, 246u8, 204u8, 156u8, 77u8, 9u8, 141u8, 213u8,
                            36u8, 253u8, 124u8, 239u8, 176u8, 98u8, 159u8, 58u8, 232u8, 54u8,
                            246u8, 109u8, 213u8, 150u8, 193u8, 165u8, 54u8, 170u8, 24u8, 84u8,
                            40u8,
                        ],
                    )
                }
                pub fn l2_requests_batch_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::l2_requests_batch::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::l2_requests_batch::Param0,
                    >,
                    types::l2_requests_batch::L2RequestsBatch,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "L2RequestsBatch",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            254u8, 112u8, 78u8, 88u8, 246u8, 204u8, 156u8, 77u8, 9u8, 141u8, 213u8,
                            36u8, 253u8, 124u8, 239u8, 176u8, 98u8, 159u8, 58u8, 232u8, 54u8,
                            246u8, 109u8, 213u8, 150u8, 193u8, 165u8, 54u8, 170u8, 24u8, 84u8,
                            40u8,
                        ],
                    )
                }
                pub fn l2_requests_batch(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::l2_requests_batch::Param0>,
                    _1: impl ::core::borrow::Borrow<types::l2_requests_batch::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::l2_requests_batch::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::l2_requests_batch::Param1,
                        >,
                    ),
                    types::l2_requests_batch::L2RequestsBatch,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "L2RequestsBatch",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            254u8, 112u8, 78u8, 88u8, 246u8, 204u8, 156u8, 77u8, 9u8, 141u8, 213u8,
                            36u8, 253u8, 124u8, 239u8, 176u8, 98u8, 159u8, 58u8, 232u8, 54u8,
                            246u8, 109u8, 213u8, 150u8, 193u8, 165u8, 54u8, 170u8, 24u8, 84u8,
                            40u8,
                        ],
                    )
                }
                #[doc = " For each supported chain stores:"]
                #[doc = " - last batch id"]
                #[doc = " - range of the reqeusts in last batch"]
                pub fn l2_requests_batch_last(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::l2_requests_batch_last::L2RequestsBatchLast,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Rolldown",
                        "L2RequestsBatchLast",
                        (),
                        [
                            127u8, 24u8, 128u8, 58u8, 222u8, 161u8, 242u8, 138u8, 167u8, 134u8,
                            96u8, 130u8, 31u8, 238u8, 109u8, 129u8, 193u8, 105u8, 248u8, 81u8,
                            198u8, 141u8, 208u8, 242u8, 189u8, 121u8, 28u8, 228u8, 60u8, 151u8,
                            33u8, 142u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn dispute_period_length(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Rolldown",
                        "DisputePeriodLength",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn rights_multiplier(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Rolldown",
                        "RightsMultiplier",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn requests_per_block(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Rolldown",
                        "RequestsPerBlock",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn merkle_root_automatic_batch_size(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Rolldown",
                        "MerkleRootAutomaticBatchSize",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn merkle_root_automatic_batch_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Rolldown",
                        "MerkleRootAutomaticBatchPeriod",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod metamask {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_metamask_signature::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_metamask_signature::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Update {
                    pub name: update::Name,
                    pub version: update::Version,
                    pub chain_id: update::ChainId,
                    pub decode_url: update::DecodeUrl,
                }
                pub mod update {
                    use super::runtime_types;
                    pub type Name = ::core::option::Option<
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >;
                    pub type Version = ::core::option::Option<
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >;
                    pub type ChainId = ::core::option::Option<::core::primitive::u64>;
                    pub type DecodeUrl = ::core::option::Option<
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Update {
                    const PALLET: &'static str = "Metamask";
                    const CALL: &'static str = "update";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn update(
                    &self,
                    name: types::update::Name,
                    version: types::update::Version,
                    chain_id: types::update::ChainId,
                    decode_url: types::update::DecodeUrl,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Update>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Metamask",
                        "update",
                        types::Update {
                            name,
                            version,
                            chain_id,
                            decode_url,
                        },
                        [
                            197u8, 153u8, 105u8, 145u8, 73u8, 28u8, 28u8, 166u8, 145u8, 184u8,
                            191u8, 22u8, 183u8, 197u8, 206u8, 166u8, 24u8, 194u8, 21u8, 165u8,
                            241u8, 199u8, 74u8, 133u8, 36u8, 0u8, 94u8, 135u8, 11u8, 1u8, 119u8,
                            119u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_metamask_signature::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct MetadataUpdated {
                pub name: metadata_updated::Name,
                pub version: metadata_updated::Version,
                pub chain_id: metadata_updated::ChainId,
                pub decode_url: metadata_updated::DecodeUrl,
            }
            pub mod metadata_updated {
                use super::runtime_types;
                pub type Name = ::core::option::Option<
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                >;
                pub type Version = ::core::option::Option<
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                >;
                pub type ChainId = ::core::option::Option<::core::primitive::u64>;
                pub type DecodeUrl = ::core::option::Option<
                    runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MetadataUpdated {
                const PALLET: &'static str = "Metamask";
                const EVENT: &'static str = "MetadataUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod name {
                    use super::runtime_types;
                    pub type Name = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                pub mod version {
                    use super::runtime_types;
                    pub type Version = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                pub mod chain_id {
                    use super::runtime_types;
                    pub type ChainId = ::core::primitive::u64;
                }
                pub mod decode_url {
                    use super::runtime_types;
                    pub type DecodeUrl =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn name(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::name::Name,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Metamask",
                        "Name",
                        (),
                        [
                            88u8, 137u8, 123u8, 135u8, 218u8, 246u8, 163u8, 27u8, 227u8, 98u8,
                            107u8, 95u8, 84u8, 180u8, 110u8, 117u8, 95u8, 160u8, 107u8, 184u8,
                            175u8, 247u8, 123u8, 155u8, 165u8, 137u8, 131u8, 146u8, 62u8, 240u8,
                            223u8, 104u8,
                        ],
                    )
                }
                pub fn version(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::version::Version,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Metamask",
                        "Version",
                        (),
                        [
                            144u8, 131u8, 60u8, 32u8, 104u8, 110u8, 124u8, 198u8, 49u8, 252u8,
                            26u8, 108u8, 202u8, 158u8, 132u8, 99u8, 148u8, 18u8, 96u8, 185u8,
                            221u8, 216u8, 22u8, 38u8, 250u8, 125u8, 59u8, 121u8, 64u8, 224u8,
                            110u8, 97u8,
                        ],
                    )
                }
                pub fn chain_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::chain_id::ChainId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Metamask",
                        "ChainId",
                        (),
                        [
                            250u8, 158u8, 90u8, 220u8, 184u8, 126u8, 207u8, 222u8, 62u8, 226u8,
                            144u8, 204u8, 19u8, 136u8, 127u8, 5u8, 135u8, 48u8, 234u8, 138u8,
                            216u8, 103u8, 28u8, 140u8, 193u8, 197u8, 142u8, 22u8, 159u8, 16u8,
                            225u8, 255u8,
                        ],
                    )
                }
                pub fn decode_url(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::decode_url::DecodeUrl,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Metamask",
                        "DecodeUrl",
                        (),
                        [
                            6u8, 241u8, 169u8, 239u8, 203u8, 17u8, 242u8, 97u8, 107u8, 178u8,
                            229u8, 138u8, 95u8, 102u8, 83u8, 255u8, 192u8, 73u8, 20u8, 41u8, 201u8,
                            98u8, 23u8, 102u8, 212u8, 138u8, 251u8, 30u8, 67u8, 52u8, 150u8, 129u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn string_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Metamask",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn url_string_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Metamask",
                        "UrlStringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod tokens {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::orml_tokens::module::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::orml_tokens::module::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "It will decrease the total issuance of the system by the"]
                #[doc = "`TransferFee`. If the sender's account is below the existential"]
                #[doc = "deposit as a result of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub struct Transfer {
                    pub dest: transfer::Dest,
                    pub currency_id: transfer::CurrencyId,
                    #[codec(compact)]
                    pub amount: transfer::Amount,
                }
                pub mod transfer {
                    use super::runtime_types;
                    pub type Dest = runtime_types::sp_runtime::account::AccountId20;
                    pub type CurrencyId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Transfer {
                    const PALLET: &'static str = "Tokens";
                    const CALL: &'static str = "transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Transfer all remaining balance to the given account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_"]
                #[doc = "balances. This means that any locked, reserved, or existential"]
                #[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
                #[doc = "this function. To ensure that this function results in a killed"]
                #[doc = "account, you might need to prepare the account by removing any"]
                #[doc = "reference counters, storage deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
                #[doc = "  operation should send all of the funds the account has, causing"]
                #[doc = "  the sender account to be killed (false), or transfer everything"]
                #[doc = "  except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true)."]
                pub struct TransferAll {
                    pub dest: transfer_all::Dest,
                    pub currency_id: transfer_all::CurrencyId,
                    pub keep_alive: transfer_all::KeepAlive,
                }
                pub mod transfer_all {
                    use super::runtime_types;
                    pub type Dest = runtime_types::sp_runtime::account::AccountId20;
                    pub type CurrencyId = ::core::primitive::u32;
                    pub type KeepAlive = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferAll {
                    const PALLET: &'static str = "Tokens";
                    const CALL: &'static str = "transfer_all";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
                #[doc = "will not kill the origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub struct TransferKeepAlive {
                    pub dest: transfer_keep_alive::Dest,
                    pub currency_id: transfer_keep_alive::CurrencyId,
                    #[codec(compact)]
                    pub amount: transfer_keep_alive::Amount,
                }
                pub mod transfer_keep_alive {
                    use super::runtime_types;
                    pub type Dest = runtime_types::sp_runtime::account::AccountId20;
                    pub type CurrencyId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for TransferKeepAlive {
                    const PALLET: &'static str = "Tokens";
                    const CALL: &'static str = "transfer_keep_alive";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Exactly as `transfer`, except the origin must be root and the source"]
                #[doc = "account may be specified."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `source`: The sender of the transfer."]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub struct ForceTransfer {
                    pub source: force_transfer::Source,
                    pub dest: force_transfer::Dest,
                    pub currency_id: force_transfer::CurrencyId,
                    #[codec(compact)]
                    pub amount: force_transfer::Amount,
                }
                pub mod force_transfer {
                    use super::runtime_types;
                    pub type Source = runtime_types::sp_runtime::account::AccountId20;
                    pub type Dest = runtime_types::sp_runtime::account::AccountId20;
                    pub type CurrencyId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceTransfer {
                    const PALLET: &'static str = "Tokens";
                    const CALL: &'static str = "force_transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
                #[doc = "will also decrease the total issuance of the system"]
                #[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
                #[doc = "existential deposit, it will reap the `AccountInfo`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub struct SetBalance {
                    pub who: set_balance::Who,
                    pub currency_id: set_balance::CurrencyId,
                    #[codec(compact)]
                    pub new_free: set_balance::NewFree,
                    #[codec(compact)]
                    pub new_reserved: set_balance::NewReserved,
                }
                pub mod set_balance {
                    use super::runtime_types;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                    pub type CurrencyId = ::core::primitive::u32;
                    pub type NewFree = ::core::primitive::u128;
                    pub type NewReserved = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetBalance {
                    const PALLET: &'static str = "Tokens";
                    const CALL: &'static str = "set_balance";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Create {
                    pub who: create::Who,
                    #[codec(compact)]
                    pub amount: create::Amount,
                }
                pub mod create {
                    use super::runtime_types;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Create {
                    const PALLET: &'static str = "Tokens";
                    const CALL: &'static str = "create";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Mint {
                    pub currency_id: mint::CurrencyId,
                    pub who: mint::Who,
                    #[codec(compact)]
                    pub amount: mint::Amount,
                }
                pub mod mint {
                    use super::runtime_types;
                    pub type CurrencyId = ::core::primitive::u32;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Mint {
                    const PALLET: &'static str = "Tokens";
                    const CALL: &'static str = "mint";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Transfer some liquid free balance to another account."]
                #[doc = ""]
                #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                #[doc = "It will decrease the total issuance of the system by the"]
                #[doc = "`TransferFee`. If the sender's account is below the existential"]
                #[doc = "deposit as a result of the transfer, the account will be reaped."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn transfer(
                    &self,
                    dest: types::transfer::Dest,
                    currency_id: types::transfer::CurrencyId,
                    amount: types::transfer::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Transfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Tokens",
                        "transfer",
                        types::Transfer {
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            92u8, 46u8, 76u8, 39u8, 124u8, 13u8, 145u8, 3u8, 42u8, 189u8, 30u8,
                            233u8, 254u8, 121u8, 117u8, 112u8, 78u8, 254u8, 110u8, 138u8, 27u8,
                            183u8, 217u8, 175u8, 222u8, 135u8, 39u8, 78u8, 65u8, 211u8, 80u8,
                            135u8,
                        ],
                    )
                }
                #[doc = "Transfer all remaining balance to the given account."]
                #[doc = ""]
                #[doc = "NOTE: This function only attempts to transfer _transferable_"]
                #[doc = "balances. This means that any locked, reserved, or existential"]
                #[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
                #[doc = "this function. To ensure that this function results in a killed"]
                #[doc = "account, you might need to prepare the account by removing any"]
                #[doc = "reference counters, storage deposits, etc..."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
                #[doc = "  operation should send all of the funds the account has, causing"]
                #[doc = "  the sender account to be killed (false), or transfer everything"]
                #[doc = "  except at least the existential deposit, which will guarantee to"]
                #[doc = "  keep the sender account alive (true)."]
                pub fn transfer_all(
                    &self,
                    dest: types::transfer_all::Dest,
                    currency_id: types::transfer_all::CurrencyId,
                    keep_alive: types::transfer_all::KeepAlive,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferAll>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Tokens",
                        "transfer_all",
                        types::TransferAll {
                            dest,
                            currency_id,
                            keep_alive,
                        },
                        [
                            205u8, 132u8, 64u8, 21u8, 97u8, 75u8, 55u8, 255u8, 187u8, 140u8, 238u8,
                            81u8, 186u8, 118u8, 42u8, 135u8, 231u8, 91u8, 95u8, 1u8, 115u8, 206u8,
                            96u8, 145u8, 233u8, 94u8, 30u8, 249u8, 34u8, 148u8, 148u8, 125u8,
                        ],
                    )
                }
                #[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
                #[doc = "will not kill the origin account."]
                #[doc = ""]
                #[doc = "99% of the time you want [`transfer`] instead."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `Signed` by the"]
                #[doc = "transactor."]
                #[doc = ""]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn transfer_keep_alive(
                    &self,
                    dest: types::transfer_keep_alive::Dest,
                    currency_id: types::transfer_keep_alive::CurrencyId,
                    amount: types::transfer_keep_alive::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::TransferKeepAlive>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Tokens",
                        "transfer_keep_alive",
                        types::TransferKeepAlive {
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            89u8, 133u8, 150u8, 163u8, 101u8, 98u8, 242u8, 81u8, 238u8, 160u8,
                            15u8, 224u8, 92u8, 39u8, 71u8, 226u8, 61u8, 22u8, 28u8, 204u8, 206u8,
                            114u8, 246u8, 39u8, 12u8, 148u8, 117u8, 155u8, 176u8, 97u8, 245u8,
                            84u8,
                        ],
                    )
                }
                #[doc = "Exactly as `transfer`, except the origin must be root and the source"]
                #[doc = "account may be specified."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `source`: The sender of the transfer."]
                #[doc = "- `dest`: The recipient of the transfer."]
                #[doc = "- `currency_id`: currency type."]
                #[doc = "- `amount`: free balance amount to tranfer."]
                pub fn force_transfer(
                    &self,
                    source: types::force_transfer::Source,
                    dest: types::force_transfer::Dest,
                    currency_id: types::force_transfer::CurrencyId,
                    amount: types::force_transfer::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceTransfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Tokens",
                        "force_transfer",
                        types::ForceTransfer {
                            source,
                            dest,
                            currency_id,
                            amount,
                        },
                        [
                            55u8, 187u8, 89u8, 249u8, 44u8, 248u8, 53u8, 189u8, 104u8, 80u8, 209u8,
                            10u8, 225u8, 38u8, 179u8, 12u8, 138u8, 193u8, 233u8, 42u8, 154u8,
                            109u8, 107u8, 133u8, 207u8, 181u8, 138u8, 215u8, 15u8, 119u8, 3u8,
                            26u8,
                        ],
                    )
                }
                #[doc = "Set the balances of a given account."]
                #[doc = ""]
                #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
                #[doc = "will also decrease the total issuance of the system"]
                #[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
                #[doc = "existential deposit, it will reap the `AccountInfo`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call is `root`."]
                pub fn set_balance(
                    &self,
                    who: types::set_balance::Who,
                    currency_id: types::set_balance::CurrencyId,
                    new_free: types::set_balance::NewFree,
                    new_reserved: types::set_balance::NewReserved,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetBalance>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Tokens",
                        "set_balance",
                        types::SetBalance {
                            who,
                            currency_id,
                            new_free,
                            new_reserved,
                        },
                        [
                            4u8, 149u8, 126u8, 35u8, 220u8, 102u8, 66u8, 169u8, 114u8, 145u8, 87u8,
                            110u8, 162u8, 234u8, 222u8, 212u8, 239u8, 207u8, 191u8, 228u8, 196u8,
                            49u8, 79u8, 42u8, 49u8, 168u8, 184u8, 209u8, 211u8, 247u8, 123u8,
                            236u8,
                        ],
                    )
                }
                pub fn create(
                    &self,
                    who: types::create::Who,
                    amount: types::create::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Create>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Tokens",
                        "create",
                        types::Create { who, amount },
                        [
                            26u8, 95u8, 191u8, 250u8, 143u8, 93u8, 12u8, 205u8, 160u8, 26u8, 21u8,
                            192u8, 77u8, 227u8, 104u8, 134u8, 217u8, 64u8, 204u8, 168u8, 52u8,
                            29u8, 85u8, 100u8, 195u8, 229u8, 18u8, 59u8, 176u8, 88u8, 84u8, 35u8,
                        ],
                    )
                }
                pub fn mint(
                    &self,
                    currency_id: types::mint::CurrencyId,
                    who: types::mint::Who,
                    amount: types::mint::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Mint>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Tokens",
                        "mint",
                        types::Mint {
                            currency_id,
                            who,
                            amount,
                        },
                        [
                            233u8, 98u8, 68u8, 20u8, 154u8, 39u8, 154u8, 155u8, 188u8, 26u8, 97u8,
                            203u8, 61u8, 67u8, 243u8, 46u8, 11u8, 158u8, 38u8, 48u8, 41u8, 165u8,
                            111u8, 175u8, 14u8, 196u8, 138u8, 4u8, 134u8, 212u8, 9u8, 229u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::orml_tokens::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account was created with some free balance."]
            pub struct Endowed {
                pub currency_id: endowed::CurrencyId,
                pub who: endowed::Who,
                pub amount: endowed::Amount,
            }
            pub mod endowed {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Endowed {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Endowed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An account was removed whose balance was non-zero but below"]
            #[doc = "ExistentialDeposit, resulting in an outright loss."]
            pub struct DustLost {
                pub currency_id: dust_lost::CurrencyId,
                pub who: dust_lost::Who,
                pub amount: dust_lost::Amount,
            }
            pub mod dust_lost {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DustLost {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "DustLost";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Transfer succeeded."]
            pub struct Transfer {
                pub currency_id: transfer::CurrencyId,
                pub from: transfer::From,
                pub to: transfer::To,
                pub amount: transfer::Amount,
            }
            pub mod transfer {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type From = runtime_types::sp_runtime::account::AccountId20;
                pub type To = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Transfer {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Transfer";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was reserved (moved from free to reserved)."]
            pub struct Reserved {
                pub currency_id: reserved::CurrencyId,
                pub who: reserved::Who,
                pub amount: reserved::Amount,
            }
            pub mod reserved {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Reserved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Reserved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balance was unreserved (moved from reserved to free)."]
            pub struct Unreserved {
                pub currency_id: unreserved::CurrencyId,
                pub who: unreserved::Who,
                pub amount: unreserved::Amount,
            }
            pub mod unreserved {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Unreserved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Unreserved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some reserved balance was repatriated (moved from reserved to"]
            #[doc = "another account)."]
            pub struct ReserveRepatriated {
                pub currency_id: reserve_repatriated::CurrencyId,
                pub from: reserve_repatriated::From,
                pub to: reserve_repatriated::To,
                pub amount: reserve_repatriated::Amount,
                pub status: reserve_repatriated::Status,
            }
            pub mod reserve_repatriated {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type From = runtime_types::sp_runtime::account::AccountId20;
                pub type To = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
                pub type Status = runtime_types::frame_support::traits::tokens::misc::BalanceStatus;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ReserveRepatriated {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "ReserveRepatriated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A balance was set by root."]
            pub struct BalanceSet {
                pub currency_id: balance_set::CurrencyId,
                pub who: balance_set::Who,
                pub free: balance_set::Free,
                pub reserved: balance_set::Reserved,
            }
            pub mod balance_set {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Free = ::core::primitive::u128;
                pub type Reserved = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for BalanceSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "BalanceSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The total issuance of an currency has been set"]
            pub struct TotalIssuanceSet {
                pub currency_id: total_issuance_set::CurrencyId,
                pub amount: total_issuance_set::Amount,
            }
            pub mod total_issuance_set {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TotalIssuanceSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "TotalIssuanceSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
            pub struct Withdrawn {
                pub currency_id: withdrawn::CurrencyId,
                pub who: withdrawn::Who,
                pub amount: withdrawn::Amount,
            }
            pub mod withdrawn {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Withdrawn {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Withdrawn";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
            pub struct Slashed {
                pub currency_id: slashed::CurrencyId,
                pub who: slashed::Who,
                pub free_amount: slashed::FreeAmount,
                pub reserved_amount: slashed::ReservedAmount,
            }
            pub mod slashed {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type FreeAmount = ::core::primitive::u128;
                pub type ReservedAmount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Slashed {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Slashed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Deposited some balance into an account"]
            pub struct Deposited {
                pub currency_id: deposited::CurrencyId,
                pub who: deposited::Who,
                pub amount: deposited::Amount,
            }
            pub mod deposited {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Deposited {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Deposited";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some funds are locked"]
            pub struct LockSet {
                pub lock_id: lock_set::LockId,
                pub currency_id: lock_set::CurrencyId,
                pub who: lock_set::Who,
                pub amount: lock_set::Amount,
            }
            pub mod lock_set {
                use super::runtime_types;
                pub type LockId = [::core::primitive::u8; 8usize];
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LockSet {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "LockSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some locked funds were unlocked"]
            pub struct LockRemoved {
                pub lock_id: lock_removed::LockId,
                pub currency_id: lock_removed::CurrencyId,
                pub who: lock_removed::Who,
            }
            pub mod lock_removed {
                use super::runtime_types;
                pub type LockId = [::core::primitive::u8; 8usize];
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LockRemoved {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "LockRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A token was issued."]
            pub struct Created(
                pub created::Field0,
                pub created::Field1,
                pub created::Field2,
            );
            pub mod created {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Created {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Created";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A token was minted."]
            pub struct Minted(pub minted::Field0, pub minted::Field1, pub minted::Field2);
            pub mod minted {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Minted {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Minted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some free balance was locked."]
            pub struct Locked {
                pub currency_id: locked::CurrencyId,
                pub who: locked::Who,
                pub amount: locked::Amount,
            }
            pub mod locked {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Locked {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Locked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some locked balance was freed."]
            pub struct Unlocked {
                pub currency_id: unlocked::CurrencyId,
                pub who: unlocked::Who,
                pub amount: unlocked::Amount,
            }
            pub mod unlocked {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Unlocked {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Unlocked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Issued {
                pub currency_id: issued::CurrencyId,
                pub amount: issued::Amount,
            }
            pub mod issued {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Issued {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Issued";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Rescinded {
                pub currency_id: rescinded::CurrencyId,
                pub amount: rescinded::Amount,
            }
            pub mod rescinded {
                use super::runtime_types;
                pub type CurrencyId = ::core::primitive::u32;
                pub type Amount = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Rescinded {
                const PALLET: &'static str = "Tokens";
                const EVENT: &'static str = "Rescinded";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod total_issuance {
                    use super::runtime_types;
                    pub type TotalIssuance = ::core::primitive::u128;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod next_currency_id {
                    use super::runtime_types;
                    pub type NextCurrencyId = ::core::primitive::u32;
                }
                pub mod locks {
                    use super::runtime_types;
                    pub type Locks = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::orml_tokens::BalanceLock<::core::primitive::u128>,
                    >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod accounts {
                    use super::runtime_types;
                    pub type Accounts =
                        runtime_types::orml_tokens::AccountData<::core::primitive::u128>;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod reserves {
                    use super::runtime_types;
                    pub type Reserves = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::orml_tokens::ReserveData<
                            [::core::primitive::u8; 8usize],
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The total issuance of a token type."]
                pub fn total_issuance_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_issuance::TotalIssuance,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "TotalIssuance",
                        (),
                        [
                            204u8, 143u8, 132u8, 49u8, 241u8, 103u8, 107u8, 113u8, 52u8, 147u8,
                            202u8, 81u8, 69u8, 69u8, 82u8, 243u8, 29u8, 243u8, 160u8, 42u8, 85u8,
                            169u8, 124u8, 163u8, 198u8, 154u8, 87u8, 69u8, 164u8, 123u8, 151u8,
                            231u8,
                        ],
                    )
                }
                #[doc = " The total issuance of a token type."]
                pub fn total_issuance(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::total_issuance::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::total_issuance::Param0,
                    >,
                    types::total_issuance::TotalIssuance,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "TotalIssuance",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            204u8, 143u8, 132u8, 49u8, 241u8, 103u8, 107u8, 113u8, 52u8, 147u8,
                            202u8, 81u8, 69u8, 69u8, 82u8, 243u8, 29u8, 243u8, 160u8, 42u8, 85u8,
                            169u8, 124u8, 163u8, 198u8, 154u8, 87u8, 69u8, 164u8, 123u8, 151u8,
                            231u8,
                        ],
                    )
                }
                pub fn next_currency_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_currency_id::NextCurrencyId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "NextCurrencyId",
                        (),
                        [
                            45u8, 4u8, 41u8, 251u8, 93u8, 218u8, 176u8, 12u8, 170u8, 113u8, 254u8,
                            114u8, 192u8, 14u8, 33u8, 240u8, 176u8, 27u8, 92u8, 239u8, 92u8, 110u8,
                            34u8, 134u8, 90u8, 15u8, 17u8, 114u8, 145u8, 92u8, 131u8, 80u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks of a token type under an account."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::locks::Locks,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Locks",
                        (),
                        [
                            116u8, 78u8, 106u8, 248u8, 227u8, 132u8, 198u8, 208u8, 245u8, 75u8,
                            144u8, 213u8, 238u8, 30u8, 148u8, 216u8, 188u8, 246u8, 68u8, 164u8,
                            90u8, 113u8, 137u8, 85u8, 22u8, 140u8, 184u8, 60u8, 222u8, 223u8,
                            253u8, 220u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks of a token type under an account."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::locks::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::locks::Param0,
                    >,
                    types::locks::Locks,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Locks",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            116u8, 78u8, 106u8, 248u8, 227u8, 132u8, 198u8, 208u8, 245u8, 75u8,
                            144u8, 213u8, 238u8, 30u8, 148u8, 216u8, 188u8, 246u8, 68u8, 164u8,
                            90u8, 113u8, 137u8, 85u8, 22u8, 140u8, 184u8, 60u8, 222u8, 223u8,
                            253u8, 220u8,
                        ],
                    )
                }
                #[doc = " Any liquidity locks of a token type under an account."]
                #[doc = " NOTE: Should only be accessed when setting, changing and freeing a lock."]
                pub fn locks(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::locks::Param0>,
                    _1: impl ::core::borrow::Borrow<types::locks::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::locks::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::locks::Param1,
                        >,
                    ),
                    types::locks::Locks,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Locks",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            116u8, 78u8, 106u8, 248u8, 227u8, 132u8, 198u8, 208u8, 245u8, 75u8,
                            144u8, 213u8, 238u8, 30u8, 148u8, 216u8, 188u8, 246u8, 68u8, 164u8,
                            90u8, 113u8, 137u8, 85u8, 22u8, 140u8, 184u8, 60u8, 222u8, 223u8,
                            253u8, 220u8,
                        ],
                    )
                }
                #[doc = " The balance of a token type under an account."]
                #[doc = ""]
                #[doc = " NOTE: If the total is ever zero, decrease account ref account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this module is used to store"]
                #[doc = " balances."]
                pub fn accounts_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::accounts::Accounts,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Accounts",
                        (),
                        [
                            114u8, 77u8, 84u8, 65u8, 25u8, 225u8, 41u8, 12u8, 142u8, 122u8, 157u8,
                            66u8, 239u8, 8u8, 145u8, 142u8, 17u8, 72u8, 148u8, 14u8, 104u8, 65u8,
                            95u8, 60u8, 41u8, 1u8, 183u8, 197u8, 178u8, 30u8, 251u8, 55u8,
                        ],
                    )
                }
                #[doc = " The balance of a token type under an account."]
                #[doc = ""]
                #[doc = " NOTE: If the total is ever zero, decrease account ref account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this module is used to store"]
                #[doc = " balances."]
                pub fn accounts_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::accounts::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::accounts::Param0,
                    >,
                    types::accounts::Accounts,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Accounts",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            114u8, 77u8, 84u8, 65u8, 25u8, 225u8, 41u8, 12u8, 142u8, 122u8, 157u8,
                            66u8, 239u8, 8u8, 145u8, 142u8, 17u8, 72u8, 148u8, 14u8, 104u8, 65u8,
                            95u8, 60u8, 41u8, 1u8, 183u8, 197u8, 178u8, 30u8, 251u8, 55u8,
                        ],
                    )
                }
                #[doc = " The balance of a token type under an account."]
                #[doc = ""]
                #[doc = " NOTE: If the total is ever zero, decrease account ref account."]
                #[doc = ""]
                #[doc = " NOTE: This is only used in the case that this module is used to store"]
                #[doc = " balances."]
                pub fn accounts(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::accounts::Param0>,
                    _1: impl ::core::borrow::Borrow<types::accounts::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::accounts::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::accounts::Param1,
                        >,
                    ),
                    types::accounts::Accounts,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Accounts",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            114u8, 77u8, 84u8, 65u8, 25u8, 225u8, 41u8, 12u8, 142u8, 122u8, 157u8,
                            66u8, 239u8, 8u8, 145u8, 142u8, 17u8, 72u8, 148u8, 14u8, 104u8, 65u8,
                            95u8, 60u8, 41u8, 1u8, 183u8, 197u8, 178u8, 30u8, 251u8, 55u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::reserves::Reserves,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Reserves",
                        (),
                        [
                            8u8, 209u8, 7u8, 206u8, 115u8, 220u8, 49u8, 156u8, 46u8, 212u8, 1u8,
                            115u8, 57u8, 139u8, 24u8, 181u8, 33u8, 245u8, 16u8, 151u8, 184u8,
                            227u8, 94u8, 206u8, 47u8, 7u8, 45u8, 134u8, 156u8, 116u8, 12u8, 243u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::reserves::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::reserves::Param0,
                    >,
                    types::reserves::Reserves,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Reserves",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            8u8, 209u8, 7u8, 206u8, 115u8, 220u8, 49u8, 156u8, 46u8, 212u8, 1u8,
                            115u8, 57u8, 139u8, 24u8, 181u8, 33u8, 245u8, 16u8, 151u8, 184u8,
                            227u8, 94u8, 206u8, 47u8, 7u8, 45u8, 134u8, 156u8, 116u8, 12u8, 243u8,
                        ],
                    )
                }
                #[doc = " Named reserves on some account balances."]
                pub fn reserves(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::reserves::Param0>,
                    _1: impl ::core::borrow::Borrow<types::reserves::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::reserves::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::reserves::Param1,
                        >,
                    ),
                    types::reserves::Reserves,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Tokens",
                        "Reserves",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            8u8, 209u8, 7u8, 206u8, 115u8, 220u8, 49u8, 156u8, 46u8, 212u8, 1u8,
                            115u8, 57u8, 139u8, 24u8, 181u8, 33u8, 245u8, 16u8, 151u8, 184u8,
                            227u8, 94u8, 206u8, 47u8, 7u8, 45u8, 134u8, 156u8, 116u8, 12u8, 243u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_locks(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Tokens",
                        "MaxLocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of named reserves that can exist on an account."]
                pub fn max_reserves(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Tokens",
                        "MaxReserves",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod transaction_payment {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_transaction_payment::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
            #[doc = "has been paid by `who`."]
            pub struct TransactionFeePaid {
                pub who: transaction_fee_paid::Who,
                pub token_id: transaction_fee_paid::TokenId,
                pub actual_fee: transaction_fee_paid::ActualFee,
                pub tip: transaction_fee_paid::Tip,
            }
            pub mod transaction_fee_paid {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type TokenId = ::core::primitive::u32;
                pub type ActualFee = ::core::primitive::u128;
                pub type Tip = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TransactionFeePaid {
                const PALLET: &'static str = "TransactionPayment";
                const EVENT: &'static str = "TransactionFeePaid";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod next_fee_multiplier {
                    use super::runtime_types;
                    pub type NextFeeMultiplier =
                        runtime_types::sp_arithmetic::fixed_point::FixedU128;
                }
                pub mod storage_version {
                    use super::runtime_types;
                    pub type StorageVersion = runtime_types::pallet_transaction_payment::Releases;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn next_fee_multiplier(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_fee_multiplier::NextFeeMultiplier,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "TransactionPayment",
                        "NextFeeMultiplier",
                        (),
                        [
                            247u8, 39u8, 81u8, 170u8, 225u8, 226u8, 82u8, 147u8, 34u8, 113u8,
                            147u8, 213u8, 59u8, 80u8, 139u8, 35u8, 36u8, 196u8, 152u8, 19u8, 9u8,
                            159u8, 176u8, 79u8, 249u8, 201u8, 170u8, 1u8, 129u8, 79u8, 146u8,
                            197u8,
                        ],
                    )
                }
                pub fn storage_version(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::storage_version::StorageVersion,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "TransactionPayment",
                        "StorageVersion",
                        (),
                        [
                            105u8, 243u8, 158u8, 241u8, 159u8, 231u8, 253u8, 6u8, 4u8, 32u8, 85u8,
                            178u8, 126u8, 31u8, 203u8, 134u8, 154u8, 38u8, 122u8, 155u8, 150u8,
                            251u8, 174u8, 15u8, 74u8, 134u8, 216u8, 244u8, 168u8, 175u8, 158u8,
                            144u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " A fee multiplier for `Operational` extrinsics to compute \"virtual tip\" to boost their"]
                #[doc = " `priority`"]
                #[doc = ""]
                #[doc = " This value is multiplied by the `final_fee` to obtain a \"virtual tip\" that is later"]
                #[doc = " added to a tip component in regular `priority` calculations."]
                #[doc = " It means that a `Normal` transaction can front-run a similarly-sized `Operational`"]
                #[doc = " extrinsic (with no tip), by including a tip value greater than the virtual tip."]
                #[doc = ""]
                #[doc = " ```rust,ignore"]
                #[doc = " // For `Normal`"]
                #[doc = " let priority = priority_calc(tip);"]
                #[doc = ""]
                #[doc = " // For `Operational`"]
                #[doc = " let virtual_tip = (inclusion_fee + tip) * OperationalFeeMultiplier;"]
                #[doc = " let priority = priority_calc(tip + virtual_tip);"]
                #[doc = " ```"]
                #[doc = ""]
                #[doc = " Note that since we use `final_fee` the multiplier applies also to the regular `tip`"]
                #[doc = " sent with the transaction. So, not only does the transaction get a priority bump based"]
                #[doc = " on the `inclusion_fee`, but we also amplify the impact of tips applied to `Operational`"]
                #[doc = " transactions."]
                pub fn operational_fee_multiplier(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u8,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "TransactionPayment",
                        "OperationalFeeMultiplier",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod xyk {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_xyk::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_xyk::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CreatePool {
                    pub first_asset_id: create_pool::FirstAssetId,
                    pub first_asset_amount: create_pool::FirstAssetAmount,
                    pub second_asset_id: create_pool::SecondAssetId,
                    pub second_asset_amount: create_pool::SecondAssetAmount,
                }
                pub mod create_pool {
                    use super::runtime_types;
                    pub type FirstAssetId = ::core::primitive::u32;
                    pub type FirstAssetAmount = ::core::primitive::u128;
                    pub type SecondAssetId = ::core::primitive::u32;
                    pub type SecondAssetAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CreatePool {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "create_pool";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Executes sell_asset swap."]
                #[doc = "First the swap is prevalidated, if it is successful then the extrinsic is accepted. Beyond this point the exchange commission will be charged."]
                #[doc = "The sold amount of the sold asset is used to determine the bought asset amount."]
                #[doc = "If the bought asset amount is lower than the min_amount_out then it will fail on slippage."]
                #[doc = "The percentage exchange commission is still charged even if the swap fails on slippage. Though the swap itself will be a no-op."]
                #[doc = "The slippage is calculated based upon the sold_asset_amount."]
                #[doc = "Upon slippage failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                #[doc = ""]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `sold_asset_id` - The token being sold"]
                #[doc = "- `bought_asset_id` - The token being bought"]
                #[doc = "- `sold_asset_amount`: The amount of the sold token being sold"]
                #[doc = "- `min_amount_out` - The minimum amount of bought asset that must be bought in order to not fail on slippage. Slippage failures still charge exchange commission."]
                pub struct SellAsset {
                    pub sold_asset_id: sell_asset::SoldAssetId,
                    pub bought_asset_id: sell_asset::BoughtAssetId,
                    pub sold_asset_amount: sell_asset::SoldAssetAmount,
                    pub min_amount_out: sell_asset::MinAmountOut,
                }
                pub mod sell_asset {
                    use super::runtime_types;
                    pub type SoldAssetId = ::core::primitive::u32;
                    pub type BoughtAssetId = ::core::primitive::u32;
                    pub type SoldAssetAmount = ::core::primitive::u128;
                    pub type MinAmountOut = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SellAsset {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "sell_asset";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Executes a multiswap sell asset in a series of sell asset atomic swaps."]
                #[doc = ""]
                #[doc = "Multiswaps must fee lock instead of paying transaction fees."]
                #[doc = ""]
                #[doc = "First the multiswap is prevalidated, if it is successful then the extrinsic is accepted"]
                #[doc = "and the exchange commission will be charged upon execution on the **first** swap using **sold_asset_amount**."]
                #[doc = ""]
                #[doc = "Upon failure of an atomic swap or bad slippage, all the atomic swaps are reverted and the exchange commission is charged."]
                #[doc = "Upon such a failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `swap_token_list` - This list of tokens is the route of the atomic swaps, starting with the asset sold and ends with the asset finally bought"]
                #[doc = "- `sold_asset_amount`: The amount of the first asset sold"]
                #[doc = "- `min_amount_out` - The minimum amount of last asset that must be bought in order to not fail on slippage. Slippage failures still charge exchange commission."]
                pub struct MultiswapSellAsset {
                    pub swap_token_list: multiswap_sell_asset::SwapTokenList,
                    pub sold_asset_amount: multiswap_sell_asset::SoldAssetAmount,
                    pub min_amount_out: multiswap_sell_asset::MinAmountOut,
                }
                pub mod multiswap_sell_asset {
                    use super::runtime_types;
                    pub type SwapTokenList =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                    pub type SoldAssetAmount = ::core::primitive::u128;
                    pub type MinAmountOut = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MultiswapSellAsset {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "multiswap_sell_asset";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Executes buy_asset swap."]
                #[doc = "First the swap is prevalidated, if it is successful then the extrinsic is accepted. Beyond this point the exchange commission will be charged."]
                #[doc = "The bought of the bought asset is used to determine the sold asset amount."]
                #[doc = "If the sold asset amount is higher than the max_amount_in then it will fail on slippage."]
                #[doc = "The percentage exchange commission is still charged even if the swap fails on slippage. Though the swap itself will be a no-op."]
                #[doc = "The slippage is calculated based upon the sold asset amount."]
                #[doc = "Upon slippage failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                #[doc = ""]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `sold_asset_id` - The token being sold"]
                #[doc = "- `bought_asset_id` - The token being bought"]
                #[doc = "- `bought_asset_amount`: The amount of the bought token being bought"]
                #[doc = "- `max_amount_in` - The maximum amount of sold asset that must be sold in order to not fail on slippage. Slippage failures still charge exchange commission."]
                pub struct BuyAsset {
                    pub sold_asset_id: buy_asset::SoldAssetId,
                    pub bought_asset_id: buy_asset::BoughtAssetId,
                    pub bought_asset_amount: buy_asset::BoughtAssetAmount,
                    pub max_amount_in: buy_asset::MaxAmountIn,
                }
                pub mod buy_asset {
                    use super::runtime_types;
                    pub type SoldAssetId = ::core::primitive::u32;
                    pub type BoughtAssetId = ::core::primitive::u32;
                    pub type BoughtAssetAmount = ::core::primitive::u128;
                    pub type MaxAmountIn = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BuyAsset {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "buy_asset";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Executes a multiswap buy asset in a series of buy asset atomic swaps."]
                #[doc = ""]
                #[doc = "Multiswaps must fee lock instead of paying transaction fees."]
                #[doc = ""]
                #[doc = "First the multiswap is prevalidated, if it is successful then the extrinsic is accepted"]
                #[doc = "and the exchange commission will be charged upon execution on the *first* swap using *max_amount_in*."]
                #[doc = "multiswap_buy_asset cannot have two (or more) atomic swaps on the same pool."]
                #[doc = "multiswap_buy_asset prevaildation only checks for whether there are enough funds to pay for the exchange commission."]
                #[doc = "Failure to have the required amount of first asset funds will result in failure (and charging of the exchange commission)."]
                #[doc = ""]
                #[doc = "Upon failure of an atomic swap or bad slippage, all the atomic swaps are reverted and the exchange commission is charged."]
                #[doc = "Upon such a failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `swap_token_list` - This list of tokens is the route of the atomic swaps, starting with the asset sold and ends with the asset finally bought"]
                #[doc = "- `bought_asset_amount`: The amount of the last asset bought"]
                #[doc = "- `max_amount_in` - The maximum amount of first asset that can be sold in order to not fail on slippage. Slippage failures still charge exchange commission."]
                pub struct MultiswapBuyAsset {
                    pub swap_token_list: multiswap_buy_asset::SwapTokenList,
                    pub bought_asset_amount: multiswap_buy_asset::BoughtAssetAmount,
                    pub max_amount_in: multiswap_buy_asset::MaxAmountIn,
                }
                pub mod multiswap_buy_asset {
                    use super::runtime_types;
                    pub type SwapTokenList =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                    pub type BoughtAssetAmount = ::core::primitive::u128;
                    pub type MaxAmountIn = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MultiswapBuyAsset {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "multiswap_buy_asset";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MintLiquidityUsingVestingNativeTokensByVestingIndex { pub native_asset_vesting_index : mint_liquidity_using_vesting_native_tokens_by_vesting_index :: NativeAssetVestingIndex , pub vesting_native_asset_unlock_some_amount_or_all : mint_liquidity_using_vesting_native_tokens_by_vesting_index :: VestingNativeAssetUnlockSomeAmountOrAll , pub second_asset_id : mint_liquidity_using_vesting_native_tokens_by_vesting_index :: SecondAssetId , pub expected_second_asset_amount : mint_liquidity_using_vesting_native_tokens_by_vesting_index :: ExpectedSecondAssetAmount , }
                pub mod mint_liquidity_using_vesting_native_tokens_by_vesting_index {
                    use super::runtime_types;
                    pub type NativeAssetVestingIndex = ::core::primitive::u32;
                    pub type VestingNativeAssetUnlockSomeAmountOrAll =
                        ::core::option::Option<::core::primitive::u128>;
                    pub type SecondAssetId = ::core::primitive::u32;
                    pub type ExpectedSecondAssetAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic
                    for MintLiquidityUsingVestingNativeTokensByVestingIndex
                {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str =
                        "mint_liquidity_using_vesting_native_tokens_by_vesting_index";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MintLiquidityUsingVestingNativeTokens {
                    pub vesting_native_asset_amount:
                        mint_liquidity_using_vesting_native_tokens::VestingNativeAssetAmount,
                    pub second_asset_id: mint_liquidity_using_vesting_native_tokens::SecondAssetId,
                    pub expected_second_asset_amount:
                        mint_liquidity_using_vesting_native_tokens::ExpectedSecondAssetAmount,
                }
                pub mod mint_liquidity_using_vesting_native_tokens {
                    use super::runtime_types;
                    pub type VestingNativeAssetAmount = ::core::primitive::u128;
                    pub type SecondAssetId = ::core::primitive::u32;
                    pub type ExpectedSecondAssetAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MintLiquidityUsingVestingNativeTokens {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "mint_liquidity_using_vesting_native_tokens";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MintLiquidity {
                    pub first_asset_id: mint_liquidity::FirstAssetId,
                    pub second_asset_id: mint_liquidity::SecondAssetId,
                    pub first_asset_amount: mint_liquidity::FirstAssetAmount,
                    pub expected_second_asset_amount: mint_liquidity::ExpectedSecondAssetAmount,
                }
                pub mod mint_liquidity {
                    use super::runtime_types;
                    pub type FirstAssetId = ::core::primitive::u32;
                    pub type SecondAssetId = ::core::primitive::u32;
                    pub type FirstAssetAmount = ::core::primitive::u128;
                    pub type ExpectedSecondAssetAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MintLiquidity {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "mint_liquidity";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CompoundRewards {
                    pub liquidity_asset_id: compound_rewards::LiquidityAssetId,
                    pub amount_permille: compound_rewards::AmountPermille,
                }
                pub mod compound_rewards {
                    use super::runtime_types;
                    pub type LiquidityAssetId = ::core::primitive::u32;
                    pub type AmountPermille = runtime_types::sp_arithmetic::per_things::Permill;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CompoundRewards {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "compound_rewards";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ProvideLiquidityWithConversion {
                    pub liquidity_asset_id: provide_liquidity_with_conversion::LiquidityAssetId,
                    pub provided_asset_id: provide_liquidity_with_conversion::ProvidedAssetId,
                    pub provided_asset_amount:
                        provide_liquidity_with_conversion::ProvidedAssetAmount,
                }
                pub mod provide_liquidity_with_conversion {
                    use super::runtime_types;
                    pub type LiquidityAssetId = ::core::primitive::u32;
                    pub type ProvidedAssetId = ::core::primitive::u32;
                    pub type ProvidedAssetAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ProvideLiquidityWithConversion {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "provide_liquidity_with_conversion";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BurnLiquidity {
                    pub first_asset_id: burn_liquidity::FirstAssetId,
                    pub second_asset_id: burn_liquidity::SecondAssetId,
                    pub liquidity_asset_amount: burn_liquidity::LiquidityAssetAmount,
                }
                pub mod burn_liquidity {
                    use super::runtime_types;
                    pub type FirstAssetId = ::core::primitive::u32;
                    pub type SecondAssetId = ::core::primitive::u32;
                    pub type LiquidityAssetAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for BurnLiquidity {
                    const PALLET: &'static str = "Xyk";
                    const CALL: &'static str = "burn_liquidity";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn create_pool(
                    &self,
                    first_asset_id: types::create_pool::FirstAssetId,
                    first_asset_amount: types::create_pool::FirstAssetAmount,
                    second_asset_id: types::create_pool::SecondAssetId,
                    second_asset_amount: types::create_pool::SecondAssetAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CreatePool>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "create_pool",
                        types::CreatePool {
                            first_asset_id,
                            first_asset_amount,
                            second_asset_id,
                            second_asset_amount,
                        },
                        [
                            188u8, 47u8, 27u8, 221u8, 102u8, 106u8, 56u8, 121u8, 231u8, 60u8,
                            113u8, 164u8, 72u8, 57u8, 170u8, 77u8, 50u8, 97u8, 188u8, 74u8, 168u8,
                            99u8, 170u8, 41u8, 98u8, 214u8, 171u8, 106u8, 153u8, 106u8, 106u8,
                            207u8,
                        ],
                    )
                }
                #[doc = "Executes sell_asset swap."]
                #[doc = "First the swap is prevalidated, if it is successful then the extrinsic is accepted. Beyond this point the exchange commission will be charged."]
                #[doc = "The sold amount of the sold asset is used to determine the bought asset amount."]
                #[doc = "If the bought asset amount is lower than the min_amount_out then it will fail on slippage."]
                #[doc = "The percentage exchange commission is still charged even if the swap fails on slippage. Though the swap itself will be a no-op."]
                #[doc = "The slippage is calculated based upon the sold_asset_amount."]
                #[doc = "Upon slippage failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                #[doc = ""]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `sold_asset_id` - The token being sold"]
                #[doc = "- `bought_asset_id` - The token being bought"]
                #[doc = "- `sold_asset_amount`: The amount of the sold token being sold"]
                #[doc = "- `min_amount_out` - The minimum amount of bought asset that must be bought in order to not fail on slippage. Slippage failures still charge exchange commission."]
                pub fn sell_asset(
                    &self,
                    sold_asset_id: types::sell_asset::SoldAssetId,
                    bought_asset_id: types::sell_asset::BoughtAssetId,
                    sold_asset_amount: types::sell_asset::SoldAssetAmount,
                    min_amount_out: types::sell_asset::MinAmountOut,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SellAsset>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "sell_asset",
                        types::SellAsset {
                            sold_asset_id,
                            bought_asset_id,
                            sold_asset_amount,
                            min_amount_out,
                        },
                        [
                            192u8, 6u8, 95u8, 109u8, 153u8, 20u8, 195u8, 222u8, 24u8, 188u8, 254u8,
                            140u8, 163u8, 170u8, 78u8, 33u8, 187u8, 226u8, 77u8, 145u8, 180u8,
                            136u8, 238u8, 56u8, 18u8, 164u8, 253u8, 11u8, 0u8, 222u8, 137u8, 124u8,
                        ],
                    )
                }
                #[doc = "Executes a multiswap sell asset in a series of sell asset atomic swaps."]
                #[doc = ""]
                #[doc = "Multiswaps must fee lock instead of paying transaction fees."]
                #[doc = ""]
                #[doc = "First the multiswap is prevalidated, if it is successful then the extrinsic is accepted"]
                #[doc = "and the exchange commission will be charged upon execution on the **first** swap using **sold_asset_amount**."]
                #[doc = ""]
                #[doc = "Upon failure of an atomic swap or bad slippage, all the atomic swaps are reverted and the exchange commission is charged."]
                #[doc = "Upon such a failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `swap_token_list` - This list of tokens is the route of the atomic swaps, starting with the asset sold and ends with the asset finally bought"]
                #[doc = "- `sold_asset_amount`: The amount of the first asset sold"]
                #[doc = "- `min_amount_out` - The minimum amount of last asset that must be bought in order to not fail on slippage. Slippage failures still charge exchange commission."]
                pub fn multiswap_sell_asset(
                    &self,
                    swap_token_list: types::multiswap_sell_asset::SwapTokenList,
                    sold_asset_amount: types::multiswap_sell_asset::SoldAssetAmount,
                    min_amount_out: types::multiswap_sell_asset::MinAmountOut,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::MultiswapSellAsset>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "multiswap_sell_asset",
                        types::MultiswapSellAsset {
                            swap_token_list,
                            sold_asset_amount,
                            min_amount_out,
                        },
                        [
                            219u8, 112u8, 107u8, 89u8, 188u8, 174u8, 52u8, 131u8, 51u8, 110u8,
                            173u8, 138u8, 11u8, 213u8, 90u8, 252u8, 66u8, 182u8, 212u8, 227u8,
                            103u8, 9u8, 172u8, 100u8, 97u8, 123u8, 220u8, 109u8, 23u8, 69u8, 32u8,
                            236u8,
                        ],
                    )
                }
                #[doc = "Executes buy_asset swap."]
                #[doc = "First the swap is prevalidated, if it is successful then the extrinsic is accepted. Beyond this point the exchange commission will be charged."]
                #[doc = "The bought of the bought asset is used to determine the sold asset amount."]
                #[doc = "If the sold asset amount is higher than the max_amount_in then it will fail on slippage."]
                #[doc = "The percentage exchange commission is still charged even if the swap fails on slippage. Though the swap itself will be a no-op."]
                #[doc = "The slippage is calculated based upon the sold asset amount."]
                #[doc = "Upon slippage failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                #[doc = ""]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `sold_asset_id` - The token being sold"]
                #[doc = "- `bought_asset_id` - The token being bought"]
                #[doc = "- `bought_asset_amount`: The amount of the bought token being bought"]
                #[doc = "- `max_amount_in` - The maximum amount of sold asset that must be sold in order to not fail on slippage. Slippage failures still charge exchange commission."]
                pub fn buy_asset(
                    &self,
                    sold_asset_id: types::buy_asset::SoldAssetId,
                    bought_asset_id: types::buy_asset::BoughtAssetId,
                    bought_asset_amount: types::buy_asset::BoughtAssetAmount,
                    max_amount_in: types::buy_asset::MaxAmountIn,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BuyAsset>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "buy_asset",
                        types::BuyAsset {
                            sold_asset_id,
                            bought_asset_id,
                            bought_asset_amount,
                            max_amount_in,
                        },
                        [
                            39u8, 163u8, 21u8, 37u8, 36u8, 158u8, 59u8, 173u8, 200u8, 232u8, 189u8,
                            124u8, 145u8, 59u8, 214u8, 244u8, 154u8, 246u8, 202u8, 206u8, 108u8,
                            177u8, 229u8, 99u8, 212u8, 1u8, 63u8, 82u8, 219u8, 87u8, 87u8, 197u8,
                        ],
                    )
                }
                #[doc = "Executes a multiswap buy asset in a series of buy asset atomic swaps."]
                #[doc = ""]
                #[doc = "Multiswaps must fee lock instead of paying transaction fees."]
                #[doc = ""]
                #[doc = "First the multiswap is prevalidated, if it is successful then the extrinsic is accepted"]
                #[doc = "and the exchange commission will be charged upon execution on the *first* swap using *max_amount_in*."]
                #[doc = "multiswap_buy_asset cannot have two (or more) atomic swaps on the same pool."]
                #[doc = "multiswap_buy_asset prevaildation only checks for whether there are enough funds to pay for the exchange commission."]
                #[doc = "Failure to have the required amount of first asset funds will result in failure (and charging of the exchange commission)."]
                #[doc = ""]
                #[doc = "Upon failure of an atomic swap or bad slippage, all the atomic swaps are reverted and the exchange commission is charged."]
                #[doc = "Upon such a failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `swap_token_list` - This list of tokens is the route of the atomic swaps, starting with the asset sold and ends with the asset finally bought"]
                #[doc = "- `bought_asset_amount`: The amount of the last asset bought"]
                #[doc = "- `max_amount_in` - The maximum amount of first asset that can be sold in order to not fail on slippage. Slippage failures still charge exchange commission."]
                pub fn multiswap_buy_asset(
                    &self,
                    swap_token_list: types::multiswap_buy_asset::SwapTokenList,
                    bought_asset_amount: types::multiswap_buy_asset::BoughtAssetAmount,
                    max_amount_in: types::multiswap_buy_asset::MaxAmountIn,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::MultiswapBuyAsset>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "multiswap_buy_asset",
                        types::MultiswapBuyAsset {
                            swap_token_list,
                            bought_asset_amount,
                            max_amount_in,
                        },
                        [
                            144u8, 0u8, 211u8, 62u8, 176u8, 154u8, 100u8, 140u8, 29u8, 66u8, 201u8,
                            119u8, 182u8, 128u8, 79u8, 114u8, 30u8, 27u8, 84u8, 243u8, 123u8,
                            194u8, 206u8, 199u8, 4u8, 79u8, 234u8, 208u8, 168u8, 198u8, 180u8,
                            225u8,
                        ],
                    )
                }
                pub fn mint_liquidity_using_vesting_native_tokens_by_vesting_index(
                    &self,
                    native_asset_vesting_index : types :: mint_liquidity_using_vesting_native_tokens_by_vesting_index :: NativeAssetVestingIndex,
                    vesting_native_asset_unlock_some_amount_or_all : types :: mint_liquidity_using_vesting_native_tokens_by_vesting_index :: VestingNativeAssetUnlockSomeAmountOrAll,
                    second_asset_id : types :: mint_liquidity_using_vesting_native_tokens_by_vesting_index :: SecondAssetId,
                    expected_second_asset_amount : types :: mint_liquidity_using_vesting_native_tokens_by_vesting_index :: ExpectedSecondAssetAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::MintLiquidityUsingVestingNativeTokensByVestingIndex,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "mint_liquidity_using_vesting_native_tokens_by_vesting_index",
                        types::MintLiquidityUsingVestingNativeTokensByVestingIndex {
                            native_asset_vesting_index,
                            vesting_native_asset_unlock_some_amount_or_all,
                            second_asset_id,
                            expected_second_asset_amount,
                        },
                        [
                            84u8, 236u8, 127u8, 219u8, 189u8, 240u8, 169u8, 76u8, 21u8, 96u8,
                            134u8, 9u8, 150u8, 25u8, 247u8, 153u8, 93u8, 162u8, 19u8, 232u8, 41u8,
                            1u8, 139u8, 17u8, 176u8, 250u8, 66u8, 137u8, 11u8, 231u8, 92u8, 9u8,
                        ],
                    )
                }
                pub fn mint_liquidity_using_vesting_native_tokens(
                    &self,
                    vesting_native_asset_amount : types :: mint_liquidity_using_vesting_native_tokens :: VestingNativeAssetAmount,
                    second_asset_id : types :: mint_liquidity_using_vesting_native_tokens :: SecondAssetId,
                    expected_second_asset_amount : types :: mint_liquidity_using_vesting_native_tokens :: ExpectedSecondAssetAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::MintLiquidityUsingVestingNativeTokens,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "mint_liquidity_using_vesting_native_tokens",
                        types::MintLiquidityUsingVestingNativeTokens {
                            vesting_native_asset_amount,
                            second_asset_id,
                            expected_second_asset_amount,
                        },
                        [
                            129u8, 184u8, 252u8, 252u8, 215u8, 34u8, 127u8, 207u8, 220u8, 183u8,
                            95u8, 95u8, 230u8, 252u8, 2u8, 94u8, 238u8, 157u8, 197u8, 70u8, 196u8,
                            42u8, 214u8, 51u8, 184u8, 29u8, 199u8, 62u8, 120u8, 127u8, 48u8, 116u8,
                        ],
                    )
                }
                pub fn mint_liquidity(
                    &self,
                    first_asset_id: types::mint_liquidity::FirstAssetId,
                    second_asset_id: types::mint_liquidity::SecondAssetId,
                    first_asset_amount: types::mint_liquidity::FirstAssetAmount,
                    expected_second_asset_amount: types::mint_liquidity::ExpectedSecondAssetAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::MintLiquidity>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "mint_liquidity",
                        types::MintLiquidity {
                            first_asset_id,
                            second_asset_id,
                            first_asset_amount,
                            expected_second_asset_amount,
                        },
                        [
                            159u8, 82u8, 156u8, 56u8, 170u8, 240u8, 190u8, 30u8, 181u8, 96u8, 67u8,
                            19u8, 201u8, 242u8, 101u8, 146u8, 52u8, 20u8, 228u8, 249u8, 144u8,
                            82u8, 43u8, 143u8, 145u8, 203u8, 205u8, 3u8, 58u8, 252u8, 23u8, 198u8,
                        ],
                    )
                }
                pub fn compound_rewards(
                    &self,
                    liquidity_asset_id: types::compound_rewards::LiquidityAssetId,
                    amount_permille: types::compound_rewards::AmountPermille,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CompoundRewards>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "compound_rewards",
                        types::CompoundRewards {
                            liquidity_asset_id,
                            amount_permille,
                        },
                        [
                            38u8, 249u8, 146u8, 237u8, 27u8, 41u8, 94u8, 76u8, 61u8, 107u8, 215u8,
                            110u8, 23u8, 213u8, 43u8, 64u8, 246u8, 238u8, 86u8, 151u8, 244u8,
                            184u8, 150u8, 169u8, 58u8, 142u8, 192u8, 129u8, 163u8, 64u8, 202u8,
                            121u8,
                        ],
                    )
                }
                pub fn provide_liquidity_with_conversion(
                    &self,
                    liquidity_asset_id: types::provide_liquidity_with_conversion::LiquidityAssetId,
                    provided_asset_id: types::provide_liquidity_with_conversion::ProvidedAssetId,
                    provided_asset_amount : types :: provide_liquidity_with_conversion :: ProvidedAssetAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ProvideLiquidityWithConversion,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "provide_liquidity_with_conversion",
                        types::ProvideLiquidityWithConversion {
                            liquidity_asset_id,
                            provided_asset_id,
                            provided_asset_amount,
                        },
                        [
                            20u8, 129u8, 199u8, 132u8, 27u8, 72u8, 33u8, 68u8, 248u8, 143u8, 39u8,
                            254u8, 34u8, 8u8, 11u8, 2u8, 105u8, 60u8, 244u8, 245u8, 249u8, 132u8,
                            109u8, 108u8, 245u8, 129u8, 159u8, 97u8, 118u8, 13u8, 250u8, 225u8,
                        ],
                    )
                }
                pub fn burn_liquidity(
                    &self,
                    first_asset_id: types::burn_liquidity::FirstAssetId,
                    second_asset_id: types::burn_liquidity::SecondAssetId,
                    liquidity_asset_amount: types::burn_liquidity::LiquidityAssetAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::BurnLiquidity>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Xyk",
                        "burn_liquidity",
                        types::BurnLiquidity {
                            first_asset_id,
                            second_asset_id,
                            liquidity_asset_amount,
                        },
                        [
                            254u8, 13u8, 20u8, 241u8, 170u8, 112u8, 37u8, 41u8, 139u8, 168u8,
                            190u8, 251u8, 219u8, 222u8, 199u8, 241u8, 233u8, 133u8, 35u8, 169u8,
                            86u8, 188u8, 60u8, 21u8, 160u8, 213u8, 30u8, 210u8, 51u8, 177u8, 124u8,
                            119u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_xyk::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct PoolCreated(
                pub pool_created::Field0,
                pub pool_created::Field1,
                pub pool_created::Field2,
                pub pool_created::Field3,
                pub pool_created::Field4,
            );
            pub mod pool_created {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u32;
                pub type Field4 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PoolCreated {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "PoolCreated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct AssetsSwapped(
                pub assets_swapped::Field0,
                pub assets_swapped::Field1,
                pub assets_swapped::Field2,
                pub assets_swapped::Field3,
            );
            pub mod assets_swapped {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AssetsSwapped {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "AssetsSwapped";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SellAssetFailedDueToSlippage(
                pub sell_asset_failed_due_to_slippage::Field0,
                pub sell_asset_failed_due_to_slippage::Field1,
                pub sell_asset_failed_due_to_slippage::Field2,
                pub sell_asset_failed_due_to_slippage::Field3,
                pub sell_asset_failed_due_to_slippage::Field4,
                pub sell_asset_failed_due_to_slippage::Field5,
            );
            pub mod sell_asset_failed_due_to_slippage {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u32;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SellAssetFailedDueToSlippage {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "SellAssetFailedDueToSlippage";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct BuyAssetFailedDueToSlippage(
                pub buy_asset_failed_due_to_slippage::Field0,
                pub buy_asset_failed_due_to_slippage::Field1,
                pub buy_asset_failed_due_to_slippage::Field2,
                pub buy_asset_failed_due_to_slippage::Field3,
                pub buy_asset_failed_due_to_slippage::Field4,
                pub buy_asset_failed_due_to_slippage::Field5,
            );
            pub mod buy_asset_failed_due_to_slippage {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u32;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for BuyAssetFailedDueToSlippage {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "BuyAssetFailedDueToSlippage";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct LiquidityMinted(
                pub liquidity_minted::Field0,
                pub liquidity_minted::Field1,
                pub liquidity_minted::Field2,
                pub liquidity_minted::Field3,
                pub liquidity_minted::Field4,
                pub liquidity_minted::Field5,
                pub liquidity_minted::Field6,
            );
            pub mod liquidity_minted {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u32;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u32;
                pub type Field6 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LiquidityMinted {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "LiquidityMinted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct LiquidityBurned(
                pub liquidity_burned::Field0,
                pub liquidity_burned::Field1,
                pub liquidity_burned::Field2,
                pub liquidity_burned::Field3,
                pub liquidity_burned::Field4,
                pub liquidity_burned::Field5,
                pub liquidity_burned::Field6,
            );
            pub mod liquidity_burned {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u32;
                pub type Field4 = ::core::primitive::u128;
                pub type Field5 = ::core::primitive::u32;
                pub type Field6 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LiquidityBurned {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "LiquidityBurned";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct PoolPromotionUpdated(
                pub pool_promotion_updated::Field0,
                pub pool_promotion_updated::Field1,
            );
            pub mod pool_promotion_updated {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::option::Option<::core::primitive::u8>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PoolPromotionUpdated {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "PoolPromotionUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct LiquidityActivated(
                pub liquidity_activated::Field0,
                pub liquidity_activated::Field1,
                pub liquidity_activated::Field2,
            );
            pub mod liquidity_activated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LiquidityActivated {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "LiquidityActivated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct LiquidityDeactivated(
                pub liquidity_deactivated::Field0,
                pub liquidity_deactivated::Field1,
                pub liquidity_deactivated::Field2,
            );
            pub mod liquidity_deactivated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LiquidityDeactivated {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "LiquidityDeactivated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RewardsClaimed(
                pub rewards_claimed::Field0,
                pub rewards_claimed::Field1,
                pub rewards_claimed::Field2,
            );
            pub mod rewards_claimed {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RewardsClaimed {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "RewardsClaimed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct MultiSwapAssetFailedOnAtomicSwap(
                pub multi_swap_asset_failed_on_atomic_swap::Field0,
                pub multi_swap_asset_failed_on_atomic_swap::Field1,
                pub multi_swap_asset_failed_on_atomic_swap::Field2,
                pub multi_swap_asset_failed_on_atomic_swap::Field3,
            );
            pub mod multi_swap_asset_failed_on_atomic_swap {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = runtime_types::sp_runtime::ModuleError;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MultiSwapAssetFailedOnAtomicSwap {
                const PALLET: &'static str = "Xyk";
                const EVENT: &'static str = "MultiSwapAssetFailedOnAtomicSwap";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod pools {
                    use super::runtime_types;
                    pub type Pools = (::core::primitive::u128, ::core::primitive::u128);
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod liquidity_assets {
                    use super::runtime_types;
                    pub type LiquidityAssets = ::core::option::Option<::core::primitive::u32>;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod liquidity_pools {
                    use super::runtime_types;
                    pub type LiquidityPools =
                        ::core::option::Option<(::core::primitive::u32, ::core::primitive::u32)>;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod total_number_of_swaps {
                    use super::runtime_types;
                    pub type TotalNumberOfSwaps = ::core::primitive::u128;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn pools_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::pools::Pools,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "Pools",
                        (),
                        [
                            119u8, 206u8, 161u8, 66u8, 101u8, 109u8, 179u8, 89u8, 7u8, 152u8,
                            168u8, 94u8, 78u8, 161u8, 143u8, 156u8, 179u8, 137u8, 127u8, 142u8,
                            7u8, 243u8, 126u8, 184u8, 103u8, 115u8, 203u8, 99u8, 18u8, 138u8, 51u8,
                            231u8,
                        ],
                    )
                }
                pub fn pools_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pools::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::pools::Param0,
                    >,
                    types::pools::Pools,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "Pools",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            119u8, 206u8, 161u8, 66u8, 101u8, 109u8, 179u8, 89u8, 7u8, 152u8,
                            168u8, 94u8, 78u8, 161u8, 143u8, 156u8, 179u8, 137u8, 127u8, 142u8,
                            7u8, 243u8, 126u8, 184u8, 103u8, 115u8, 203u8, 99u8, 18u8, 138u8, 51u8,
                            231u8,
                        ],
                    )
                }
                pub fn pools(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pools::Param0>,
                    _1: impl ::core::borrow::Borrow<types::pools::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::pools::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::pools::Param1,
                        >,
                    ),
                    types::pools::Pools,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "Pools",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            119u8, 206u8, 161u8, 66u8, 101u8, 109u8, 179u8, 89u8, 7u8, 152u8,
                            168u8, 94u8, 78u8, 161u8, 143u8, 156u8, 179u8, 137u8, 127u8, 142u8,
                            7u8, 243u8, 126u8, 184u8, 103u8, 115u8, 203u8, 99u8, 18u8, 138u8, 51u8,
                            231u8,
                        ],
                    )
                }
                pub fn liquidity_assets_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::liquidity_assets::LiquidityAssets,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "LiquidityAssets",
                        (),
                        [
                            139u8, 116u8, 151u8, 225u8, 77u8, 243u8, 228u8, 65u8, 97u8, 192u8,
                            128u8, 53u8, 142u8, 222u8, 64u8, 148u8, 128u8, 58u8, 217u8, 249u8,
                            91u8, 219u8, 97u8, 174u8, 174u8, 33u8, 133u8, 238u8, 69u8, 123u8, 75u8,
                            189u8,
                        ],
                    )
                }
                pub fn liquidity_assets_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::liquidity_assets::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::liquidity_assets::Param0,
                    >,
                    types::liquidity_assets::LiquidityAssets,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "LiquidityAssets",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            139u8, 116u8, 151u8, 225u8, 77u8, 243u8, 228u8, 65u8, 97u8, 192u8,
                            128u8, 53u8, 142u8, 222u8, 64u8, 148u8, 128u8, 58u8, 217u8, 249u8,
                            91u8, 219u8, 97u8, 174u8, 174u8, 33u8, 133u8, 238u8, 69u8, 123u8, 75u8,
                            189u8,
                        ],
                    )
                }
                pub fn liquidity_assets(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::liquidity_assets::Param0>,
                    _1: impl ::core::borrow::Borrow<types::liquidity_assets::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::liquidity_assets::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::liquidity_assets::Param1,
                        >,
                    ),
                    types::liquidity_assets::LiquidityAssets,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "LiquidityAssets",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            139u8, 116u8, 151u8, 225u8, 77u8, 243u8, 228u8, 65u8, 97u8, 192u8,
                            128u8, 53u8, 142u8, 222u8, 64u8, 148u8, 128u8, 58u8, 217u8, 249u8,
                            91u8, 219u8, 97u8, 174u8, 174u8, 33u8, 133u8, 238u8, 69u8, 123u8, 75u8,
                            189u8,
                        ],
                    )
                }
                pub fn liquidity_pools_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::liquidity_pools::LiquidityPools,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "LiquidityPools",
                        (),
                        [
                            49u8, 24u8, 40u8, 91u8, 172u8, 155u8, 124u8, 253u8, 64u8, 141u8, 76u8,
                            227u8, 242u8, 40u8, 126u8, 45u8, 177u8, 249u8, 148u8, 24u8, 192u8,
                            32u8, 147u8, 250u8, 88u8, 203u8, 176u8, 170u8, 237u8, 67u8, 112u8,
                            98u8,
                        ],
                    )
                }
                pub fn liquidity_pools(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::liquidity_pools::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::liquidity_pools::Param0,
                    >,
                    types::liquidity_pools::LiquidityPools,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "LiquidityPools",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            49u8, 24u8, 40u8, 91u8, 172u8, 155u8, 124u8, 253u8, 64u8, 141u8, 76u8,
                            227u8, 242u8, 40u8, 126u8, 45u8, 177u8, 249u8, 148u8, 24u8, 192u8,
                            32u8, 147u8, 250u8, 88u8, 203u8, 176u8, 170u8, 237u8, 67u8, 112u8,
                            98u8,
                        ],
                    )
                }
                pub fn total_number_of_swaps(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_number_of_swaps::TotalNumberOfSwaps,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Xyk",
                        "TotalNumberOfSwaps",
                        (),
                        [
                            6u8, 32u8, 14u8, 122u8, 200u8, 8u8, 99u8, 220u8, 123u8, 42u8, 199u8,
                            143u8, 13u8, 101u8, 11u8, 115u8, 123u8, 205u8, 2u8, 21u8, 122u8, 191u8,
                            59u8, 72u8, 200u8, 148u8, 182u8, 88u8, 160u8, 92u8, 70u8, 217u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn pool_fee_percentage(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Xyk",
                        "PoolFeePercentage",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn treasury_fee_percentage(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Xyk",
                        "TreasuryFeePercentage",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn buy_and_burn_fee_percentage(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Xyk",
                        "BuyAndBurnFeePercentage",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod proof_of_stake {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_proof_of_stake::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_proof_of_stake::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Claims liquidity mining rewards"]
                pub struct ClaimRewardsAll {
                    pub liquidity_token_id: claim_rewards_all::LiquidityTokenId,
                }
                pub mod claim_rewards_all {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimRewardsAll {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "claim_rewards_all";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Enables/disables pool for liquidity mining rewards"]
                pub struct UpdatePoolPromotion {
                    pub liquidity_token_id: update_pool_promotion::LiquidityTokenId,
                    pub liquidity_mining_issuance_weight:
                        update_pool_promotion::LiquidityMiningIssuanceWeight,
                }
                pub mod update_pool_promotion {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type LiquidityMiningIssuanceWeight = ::core::primitive::u8;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdatePoolPromotion {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "update_pool_promotion";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Increases number of tokens used for liquidity mining purposes."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- liquidity_token_id - id of the token"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- use_balance_from - where from tokens should be used"]
                pub struct ActivateLiquidity {
                    pub liquidity_token_id: activate_liquidity::LiquidityTokenId,
                    pub amount: activate_liquidity::Amount,
                    pub use_balance_from: activate_liquidity::UseBalanceFrom,
                }
                pub mod activate_liquidity {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::ActivateKind,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ActivateLiquidity {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "activate_liquidity";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Decreases number of tokens used for liquidity mining purposes"]
                pub struct DeactivateLiquidity {
                    pub liquidity_token_id: deactivate_liquidity::LiquidityTokenId,
                    pub amount: deactivate_liquidity::Amount,
                }
                pub mod deactivate_liquidity {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DeactivateLiquidity {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "deactivate_liquidity";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Schedules rewards for selected liquidity token"]
                #[doc = "- tokens - pair of tokens"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- schedule_end - id of the last rewarded seession. Rewards will be distributedd equally between sessions in range (now .."]
                #[doc = "schedule_end). Distribution starts from the *next* session till `schedule_end`."]
                pub struct RewardPool {
                    pub pool: reward_pool::Pool,
                    pub token_id: reward_pool::TokenId,
                    pub amount: reward_pool::Amount,
                    pub schedule_end: reward_pool::ScheduleEnd,
                }
                pub mod reward_pool {
                    use super::runtime_types;
                    pub type Pool = (::core::primitive::u32, ::core::primitive::u32);
                    pub type TokenId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                    pub type ScheduleEnd = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RewardPool {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "reward_pool";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Increases number of tokens used for liquidity mining purposes."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- liquidity_token_id - id of the token"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- use_balance_from - where from tokens should be used. If set to `None` then tokens will"]
                #[doc = "be taken from available balance"]
                pub struct ActivateLiquidityFor3rdpartyRewards {
                    pub liquidity_token_id:
                        activate_liquidity_for3rdparty_rewards::LiquidityTokenId,
                    pub amount: activate_liquidity_for3rdparty_rewards::Amount,
                    pub reward_token: activate_liquidity_for3rdparty_rewards::RewardToken,
                    pub use_balance_from: activate_liquidity_for3rdparty_rewards::UseBalanceFrom,
                }
                pub mod activate_liquidity_for3rdparty_rewards {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                    pub type RewardToken = ::core::primitive::u32;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::pallet_proof_of_stake::ThirdPartyActivationKind<
                            ::core::primitive::u32,
                        >,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ActivateLiquidityFor3rdpartyRewards {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "activate_liquidity_for_3rdparty_rewards";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Decreases number of tokens used for liquidity mining purposes."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- liquidity_token_id - id of the token"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- use_balance_from - where from tokens should be used"]
                pub struct DeactivateLiquidityFor3rdpartyRewards {
                    pub liquidity_token_id:
                        deactivate_liquidity_for3rdparty_rewards::LiquidityTokenId,
                    pub amount: deactivate_liquidity_for3rdparty_rewards::Amount,
                    pub reward_token: deactivate_liquidity_for3rdparty_rewards::RewardToken,
                }
                pub mod deactivate_liquidity_for3rdparty_rewards {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                    pub type RewardToken = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DeactivateLiquidityFor3rdpartyRewards {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "deactivate_liquidity_for_3rdparty_rewards";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Claims liquidity mining rewards"]
                #[doc = "- tokens - pair of tokens"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- reward_token - id of the token that is rewarded"]
                pub struct Claim3rdpartyRewards {
                    pub liquidity_token_id: claim3rdparty_rewards::LiquidityTokenId,
                    pub reward_token: claim3rdparty_rewards::RewardToken,
                }
                pub mod claim3rdparty_rewards {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type RewardToken = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Claim3rdpartyRewards {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "claim_3rdparty_rewards";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Increases number of tokens used for liquidity mining purposes."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- liquidity_token_id - id of the token"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- use_balance_from - where from tokens should be used"]
                pub struct ActivateLiquidityForNativeRewards {
                    pub liquidity_token_id: activate_liquidity_for_native_rewards::LiquidityTokenId,
                    pub amount: activate_liquidity_for_native_rewards::Amount,
                    pub use_balance_from: activate_liquidity_for_native_rewards::UseBalanceFrom,
                }
                pub mod activate_liquidity_for_native_rewards {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::ActivateKind,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ActivateLiquidityForNativeRewards {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "activate_liquidity_for_native_rewards";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Decreases number of tokens used for liquidity mining purposes"]
                pub struct DeactivateLiquidityForNativeRewards {
                    pub liquidity_token_id:
                        deactivate_liquidity_for_native_rewards::LiquidityTokenId,
                    pub amount: deactivate_liquidity_for_native_rewards::Amount,
                }
                pub mod deactivate_liquidity_for_native_rewards {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DeactivateLiquidityForNativeRewards {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "deactivate_liquidity_for_native_rewards";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ClaimNativeRewards {
                    pub liquidity_token_id: claim_native_rewards::LiquidityTokenId,
                }
                pub mod claim_native_rewards {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimNativeRewards {
                    const PALLET: &'static str = "ProofOfStake";
                    const CALL: &'static str = "claim_native_rewards";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Claims liquidity mining rewards"]
                pub fn claim_rewards_all(
                    &self,
                    liquidity_token_id: types::claim_rewards_all::LiquidityTokenId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClaimRewardsAll>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "claim_rewards_all",
                        types::ClaimRewardsAll { liquidity_token_id },
                        [
                            68u8, 9u8, 219u8, 86u8, 108u8, 83u8, 158u8, 101u8, 79u8, 149u8, 228u8,
                            105u8, 180u8, 43u8, 249u8, 83u8, 154u8, 77u8, 187u8, 159u8, 167u8,
                            67u8, 215u8, 66u8, 166u8, 122u8, 227u8, 44u8, 92u8, 129u8, 69u8, 163u8,
                        ],
                    )
                }
                #[doc = "Enables/disables pool for liquidity mining rewards"]
                pub fn update_pool_promotion(
                    &self,
                    liquidity_token_id: types::update_pool_promotion::LiquidityTokenId,
                    liquidity_mining_issuance_weight : types :: update_pool_promotion :: LiquidityMiningIssuanceWeight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdatePoolPromotion>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "update_pool_promotion",
                        types::UpdatePoolPromotion {
                            liquidity_token_id,
                            liquidity_mining_issuance_weight,
                        },
                        [
                            126u8, 41u8, 93u8, 239u8, 244u8, 30u8, 233u8, 110u8, 99u8, 191u8,
                            139u8, 84u8, 36u8, 0u8, 75u8, 129u8, 87u8, 40u8, 16u8, 17u8, 79u8,
                            148u8, 246u8, 106u8, 193u8, 38u8, 35u8, 244u8, 53u8, 1u8, 180u8, 135u8,
                        ],
                    )
                }
                #[doc = "Increases number of tokens used for liquidity mining purposes."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- liquidity_token_id - id of the token"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- use_balance_from - where from tokens should be used"]
                pub fn activate_liquidity(
                    &self,
                    liquidity_token_id: types::activate_liquidity::LiquidityTokenId,
                    amount: types::activate_liquidity::Amount,
                    use_balance_from: types::activate_liquidity::UseBalanceFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ActivateLiquidity>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "activate_liquidity",
                        types::ActivateLiquidity {
                            liquidity_token_id,
                            amount,
                            use_balance_from,
                        },
                        [
                            88u8, 29u8, 52u8, 191u8, 90u8, 143u8, 91u8, 32u8, 34u8, 72u8, 96u8,
                            202u8, 13u8, 197u8, 138u8, 21u8, 193u8, 128u8, 62u8, 82u8, 86u8, 140u8,
                            213u8, 75u8, 219u8, 135u8, 89u8, 188u8, 101u8, 129u8, 164u8, 82u8,
                        ],
                    )
                }
                #[doc = "Decreases number of tokens used for liquidity mining purposes"]
                pub fn deactivate_liquidity(
                    &self,
                    liquidity_token_id: types::deactivate_liquidity::LiquidityTokenId,
                    amount: types::deactivate_liquidity::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DeactivateLiquidity>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "deactivate_liquidity",
                        types::DeactivateLiquidity {
                            liquidity_token_id,
                            amount,
                        },
                        [
                            43u8, 201u8, 148u8, 219u8, 4u8, 254u8, 38u8, 27u8, 239u8, 147u8, 130u8,
                            40u8, 183u8, 98u8, 201u8, 100u8, 69u8, 242u8, 2u8, 181u8, 119u8, 204u8,
                            115u8, 239u8, 92u8, 208u8, 253u8, 91u8, 229u8, 201u8, 66u8, 28u8,
                        ],
                    )
                }
                #[doc = "Schedules rewards for selected liquidity token"]
                #[doc = "- tokens - pair of tokens"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- schedule_end - id of the last rewarded seession. Rewards will be distributedd equally between sessions in range (now .."]
                #[doc = "schedule_end). Distribution starts from the *next* session till `schedule_end`."]
                pub fn reward_pool(
                    &self,
                    pool: types::reward_pool::Pool,
                    token_id: types::reward_pool::TokenId,
                    amount: types::reward_pool::Amount,
                    schedule_end: types::reward_pool::ScheduleEnd,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RewardPool>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "reward_pool",
                        types::RewardPool {
                            pool,
                            token_id,
                            amount,
                            schedule_end,
                        },
                        [
                            116u8, 86u8, 184u8, 59u8, 239u8, 115u8, 231u8, 209u8, 89u8, 150u8,
                            54u8, 19u8, 145u8, 182u8, 166u8, 232u8, 0u8, 72u8, 178u8, 85u8, 197u8,
                            119u8, 35u8, 165u8, 195u8, 140u8, 101u8, 254u8, 94u8, 148u8, 34u8,
                            57u8,
                        ],
                    )
                }
                #[doc = "Increases number of tokens used for liquidity mining purposes."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- liquidity_token_id - id of the token"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- use_balance_from - where from tokens should be used. If set to `None` then tokens will"]
                #[doc = "be taken from available balance"]
                pub fn activate_liquidity_for_3rdparty_rewards(
                    &self,
                    liquidity_token_id : types :: activate_liquidity_for3rdparty_rewards :: LiquidityTokenId,
                    amount: types::activate_liquidity_for3rdparty_rewards::Amount,
                    reward_token: types::activate_liquidity_for3rdparty_rewards::RewardToken,
                    use_balance_from: types::activate_liquidity_for3rdparty_rewards::UseBalanceFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ActivateLiquidityFor3rdpartyRewards,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "activate_liquidity_for_3rdparty_rewards",
                        types::ActivateLiquidityFor3rdpartyRewards {
                            liquidity_token_id,
                            amount,
                            reward_token,
                            use_balance_from,
                        },
                        [
                            62u8, 112u8, 60u8, 41u8, 89u8, 231u8, 201u8, 113u8, 160u8, 186u8, 76u8,
                            9u8, 115u8, 72u8, 237u8, 176u8, 233u8, 199u8, 5u8, 238u8, 59u8, 206u8,
                            6u8, 38u8, 217u8, 122u8, 20u8, 99u8, 200u8, 94u8, 240u8, 29u8,
                        ],
                    )
                }
                #[doc = "Decreases number of tokens used for liquidity mining purposes."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- liquidity_token_id - id of the token"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- use_balance_from - where from tokens should be used"]
                pub fn deactivate_liquidity_for_3rdparty_rewards(
                    &self,
                    liquidity_token_id : types :: deactivate_liquidity_for3rdparty_rewards :: LiquidityTokenId,
                    amount: types::deactivate_liquidity_for3rdparty_rewards::Amount,
                    reward_token: types::deactivate_liquidity_for3rdparty_rewards::RewardToken,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::DeactivateLiquidityFor3rdpartyRewards,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "deactivate_liquidity_for_3rdparty_rewards",
                        types::DeactivateLiquidityFor3rdpartyRewards {
                            liquidity_token_id,
                            amount,
                            reward_token,
                        },
                        [
                            96u8, 241u8, 10u8, 68u8, 21u8, 165u8, 131u8, 252u8, 196u8, 209u8,
                            181u8, 239u8, 229u8, 185u8, 146u8, 221u8, 178u8, 203u8, 46u8, 186u8,
                            62u8, 144u8, 46u8, 75u8, 61u8, 93u8, 125u8, 175u8, 177u8, 20u8, 167u8,
                            42u8,
                        ],
                    )
                }
                #[doc = "Claims liquidity mining rewards"]
                #[doc = "- tokens - pair of tokens"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- reward_token - id of the token that is rewarded"]
                pub fn claim_3rdparty_rewards(
                    &self,
                    liquidity_token_id: types::claim3rdparty_rewards::LiquidityTokenId,
                    reward_token: types::claim3rdparty_rewards::RewardToken,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Claim3rdpartyRewards>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "claim_3rdparty_rewards",
                        types::Claim3rdpartyRewards {
                            liquidity_token_id,
                            reward_token,
                        },
                        [
                            255u8, 160u8, 212u8, 243u8, 188u8, 53u8, 170u8, 138u8, 129u8, 216u8,
                            174u8, 250u8, 77u8, 177u8, 5u8, 169u8, 40u8, 190u8, 11u8, 194u8, 123u8,
                            220u8, 253u8, 225u8, 233u8, 253u8, 136u8, 101u8, 5u8, 112u8, 171u8,
                            169u8,
                        ],
                    )
                }
                #[doc = "Increases number of tokens used for liquidity mining purposes."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "- liquidity_token_id - id of the token"]
                #[doc = "- amount - amount of the token"]
                #[doc = "- use_balance_from - where from tokens should be used"]
                pub fn activate_liquidity_for_native_rewards(
                    &self,
                    liquidity_token_id : types :: activate_liquidity_for_native_rewards :: LiquidityTokenId,
                    amount: types::activate_liquidity_for_native_rewards::Amount,
                    use_balance_from: types::activate_liquidity_for_native_rewards::UseBalanceFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ActivateLiquidityForNativeRewards,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "activate_liquidity_for_native_rewards",
                        types::ActivateLiquidityForNativeRewards {
                            liquidity_token_id,
                            amount,
                            use_balance_from,
                        },
                        [
                            61u8, 216u8, 51u8, 225u8, 232u8, 159u8, 88u8, 81u8, 146u8, 100u8, 1u8,
                            203u8, 195u8, 187u8, 58u8, 91u8, 83u8, 173u8, 154u8, 207u8, 181u8,
                            39u8, 204u8, 117u8, 127u8, 217u8, 67u8, 62u8, 173u8, 237u8, 114u8,
                            104u8,
                        ],
                    )
                }
                #[doc = "Decreases number of tokens used for liquidity mining purposes"]
                pub fn deactivate_liquidity_for_native_rewards(
                    &self,
                    liquidity_token_id : types :: deactivate_liquidity_for_native_rewards :: LiquidityTokenId,
                    amount: types::deactivate_liquidity_for_native_rewards::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::DeactivateLiquidityForNativeRewards,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "deactivate_liquidity_for_native_rewards",
                        types::DeactivateLiquidityForNativeRewards {
                            liquidity_token_id,
                            amount,
                        },
                        [
                            76u8, 224u8, 169u8, 153u8, 70u8, 62u8, 155u8, 143u8, 239u8, 112u8,
                            255u8, 202u8, 192u8, 9u8, 130u8, 90u8, 251u8, 5u8, 147u8, 95u8, 222u8,
                            169u8, 184u8, 215u8, 80u8, 98u8, 123u8, 124u8, 143u8, 86u8, 195u8,
                            181u8,
                        ],
                    )
                }
                pub fn claim_native_rewards(
                    &self,
                    liquidity_token_id: types::claim_native_rewards::LiquidityTokenId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClaimNativeRewards>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ProofOfStake",
                        "claim_native_rewards",
                        types::ClaimNativeRewards { liquidity_token_id },
                        [
                            237u8, 119u8, 167u8, 123u8, 75u8, 173u8, 4u8, 33u8, 126u8, 153u8,
                            254u8, 176u8, 38u8, 33u8, 88u8, 74u8, 166u8, 211u8, 80u8, 155u8, 140u8,
                            180u8, 254u8, 216u8, 8u8, 198u8, 254u8, 46u8, 125u8, 220u8, 169u8,
                            36u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_proof_of_stake::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct PoolPromotionUpdated(
                pub pool_promotion_updated::Field0,
                pub pool_promotion_updated::Field1,
            );
            pub mod pool_promotion_updated {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::option::Option<::core::primitive::u8>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PoolPromotionUpdated {
                const PALLET: &'static str = "ProofOfStake";
                const EVENT: &'static str = "PoolPromotionUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct LiquidityActivated(
                pub liquidity_activated::Field0,
                pub liquidity_activated::Field1,
                pub liquidity_activated::Field2,
            );
            pub mod liquidity_activated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LiquidityActivated {
                const PALLET: &'static str = "ProofOfStake";
                const EVENT: &'static str = "LiquidityActivated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct LiquidityDeactivated(
                pub liquidity_deactivated::Field0,
                pub liquidity_deactivated::Field1,
                pub liquidity_deactivated::Field2,
            );
            pub mod liquidity_deactivated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for LiquidityDeactivated {
                const PALLET: &'static str = "ProofOfStake";
                const EVENT: &'static str = "LiquidityDeactivated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RewardsClaimed(
                pub rewards_claimed::Field0,
                pub rewards_claimed::Field1,
                pub rewards_claimed::Field2,
            );
            pub mod rewards_claimed {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RewardsClaimed {
                const PALLET: &'static str = "ProofOfStake";
                const EVENT: &'static str = "RewardsClaimed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ThirdPartyRewardsClaimed(
                pub third_party_rewards_claimed::Field0,
                pub third_party_rewards_claimed::Field1,
                pub third_party_rewards_claimed::Field2,
                pub third_party_rewards_claimed::Field3,
            );
            pub mod third_party_rewards_claimed {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u32;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ThirdPartyRewardsClaimed {
                const PALLET: &'static str = "ProofOfStake";
                const EVENT: &'static str = "ThirdPartyRewardsClaimed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ThirdPartyLiquidityActivated(
                pub third_party_liquidity_activated::Field0,
                pub third_party_liquidity_activated::Field1,
                pub third_party_liquidity_activated::Field2,
                pub third_party_liquidity_activated::Field3,
            );
            pub mod third_party_liquidity_activated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u32;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ThirdPartyLiquidityActivated {
                const PALLET: &'static str = "ProofOfStake";
                const EVENT: &'static str = "ThirdPartyLiquidityActivated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ThirdPartyLiquidityDeactivated(
                pub third_party_liquidity_deactivated::Field0,
                pub third_party_liquidity_deactivated::Field1,
                pub third_party_liquidity_deactivated::Field2,
                pub third_party_liquidity_deactivated::Field3,
            );
            pub mod third_party_liquidity_deactivated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u32;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ThirdPartyLiquidityDeactivated {
                const PALLET: &'static str = "ProofOfStake";
                const EVENT: &'static str = "ThirdPartyLiquidityDeactivated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ThirdPartySuccessfulPoolPromotion(
                pub third_party_successful_pool_promotion::Field0,
                pub third_party_successful_pool_promotion::Field1,
                pub third_party_successful_pool_promotion::Field2,
                pub third_party_successful_pool_promotion::Field3,
            );
            pub mod third_party_successful_pool_promotion {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u32;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for ThirdPartySuccessfulPoolPromotion {
                const PALLET: &'static str = "ProofOfStake";
                const EVENT: &'static str = "ThirdPartySuccessfulPoolPromotion";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod rewards_info {
                    use super::runtime_types;
                    pub type RewardsInfo =
                        runtime_types::pallet_proof_of_stake::reward_info::RewardInfo<
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod promoted_pool_rewards {
                    use super::runtime_types;
                    pub type PromotedPoolRewards = ::subxt::ext::subxt_core::utils::KeyedVec<
                        ::core::primitive::u32,
                        runtime_types::pallet_proof_of_stake::pallet::PromotedPools,
                    >;
                }
                pub mod total_activated_liquidity {
                    use super::runtime_types;
                    pub type TotalActivatedLiquidity = ::core::primitive::u128;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod rewards_info_for_schedule_rewards {
                    use super::runtime_types;
                    pub type RewardsInfoForScheduleRewards =
                        runtime_types::pallet_proof_of_stake::reward_info::RewardInfo<
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = (::core::primitive::u32, ::core::primitive::u32);
                }
                pub mod schedule_rewards_total {
                    use super::runtime_types;
                    pub type ScheduleRewardsTotal = runtime_types :: pallet_proof_of_stake :: schedule_rewards_calculator :: ScheduleRewards < :: core :: primitive :: u128 > ;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod schedule_rewards_per_liquidity {
                    use super::runtime_types;
                    pub type ScheduleRewardsPerLiquidity =
                        (runtime_types::primitive_types::U256, ::core::primitive::u64);
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod rewards_schedules {
                    use super::runtime_types;
                    pub type RewardsSchedules =
                        runtime_types::bounded_collections::bounded_btree_map::BoundedBTreeMap<
                            (
                                ::core::primitive::u32,
                                ::core::primitive::u32,
                                ::core::primitive::u32,
                                ::core::primitive::u128,
                                ::core::primitive::u64,
                            ),
                            (),
                        >;
                }
                pub mod schedules_list_metadata {
                    use super::runtime_types;
                    pub type SchedulesListMetadata =
                        runtime_types::pallet_proof_of_stake::SchedulesList;
                }
                pub mod rewards_schedules_list {
                    use super::runtime_types;
                    pub type RewardsSchedulesList = (
                        runtime_types::pallet_proof_of_stake::Schedule,
                        ::core::option::Option<::core::primitive::u64>,
                    );
                    pub type Param0 = ::core::primitive::u64;
                }
                pub mod reward_tokens_per_pool {
                    use super::runtime_types;
                    pub type RewardTokensPerPool = ();
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod total_activated_liquidity_for_schedules {
                    use super::runtime_types;
                    pub type TotalActivatedLiquidityForSchedules = runtime_types :: pallet_proof_of_stake :: schedule_rewards_calculator :: ActivatedLiquidityPerSchedule < :: core :: primitive :: u128 > ;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod activated_liquidity_for_schedules {
                    use super::runtime_types;
                    pub type ActivatedLiquidityForSchedules = ::core::primitive::u128;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                    pub type Param2 = ::core::primitive::u32;
                }
                pub mod activated_locked_liquidity_for_schedules {
                    use super::runtime_types;
                    pub type ActivatedLockedLiquidityForSchedules = ::core::primitive::u128;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod activated_native_rewards_liq {
                    use super::runtime_types;
                    pub type ActivatedNativeRewardsLiq = ::core::primitive::u128;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn rewards_info_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::rewards_info::RewardsInfo,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsInfo",
                        (),
                        [
                            140u8, 21u8, 114u8, 18u8, 223u8, 254u8, 80u8, 184u8, 240u8, 61u8, 43u8,
                            253u8, 87u8, 9u8, 80u8, 60u8, 230u8, 188u8, 163u8, 25u8, 138u8, 162u8,
                            67u8, 69u8, 41u8, 228u8, 99u8, 205u8, 226u8, 138u8, 255u8, 94u8,
                        ],
                    )
                }
                pub fn rewards_info_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::rewards_info::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::rewards_info::Param0,
                    >,
                    types::rewards_info::RewardsInfo,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsInfo",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            140u8, 21u8, 114u8, 18u8, 223u8, 254u8, 80u8, 184u8, 240u8, 61u8, 43u8,
                            253u8, 87u8, 9u8, 80u8, 60u8, 230u8, 188u8, 163u8, 25u8, 138u8, 162u8,
                            67u8, 69u8, 41u8, 228u8, 99u8, 205u8, 226u8, 138u8, 255u8, 94u8,
                        ],
                    )
                }
                pub fn rewards_info(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::rewards_info::Param0>,
                    _1: impl ::core::borrow::Borrow<types::rewards_info::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::rewards_info::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::rewards_info::Param1,
                        >,
                    ),
                    types::rewards_info::RewardsInfo,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsInfo",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            140u8, 21u8, 114u8, 18u8, 223u8, 254u8, 80u8, 184u8, 240u8, 61u8, 43u8,
                            253u8, 87u8, 9u8, 80u8, 60u8, 230u8, 188u8, 163u8, 25u8, 138u8, 162u8,
                            67u8, 69u8, 41u8, 228u8, 99u8, 205u8, 226u8, 138u8, 255u8, 94u8,
                        ],
                    )
                }
                #[doc = " Stores information about pool weight and accumulated rewards. The accumulated"]
                #[doc = " rewards amount is the number of rewards that can be claimed per liquidity"]
                #[doc = " token. Here is tracked the number of rewards per liquidity token relationship."]
                #[doc = " Expect larger values when the number of liquidity tokens are smaller."]
                pub fn promoted_pool_rewards(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::promoted_pool_rewards::PromotedPoolRewards,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "PromotedPoolRewards",
                        (),
                        [
                            97u8, 242u8, 24u8, 211u8, 134u8, 79u8, 93u8, 11u8, 77u8, 189u8, 225u8,
                            244u8, 26u8, 62u8, 108u8, 158u8, 196u8, 122u8, 115u8, 206u8, 170u8,
                            113u8, 211u8, 214u8, 137u8, 142u8, 219u8, 78u8, 202u8, 106u8, 175u8,
                            116u8,
                        ],
                    )
                }
                pub fn total_activated_liquidity_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_activated_liquidity::TotalActivatedLiquidity,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "TotalActivatedLiquidity",
                        (),
                        [
                            140u8, 39u8, 103u8, 105u8, 218u8, 217u8, 134u8, 152u8, 79u8, 100u8,
                            152u8, 46u8, 102u8, 119u8, 172u8, 190u8, 76u8, 206u8, 141u8, 66u8,
                            112u8, 29u8, 223u8, 156u8, 218u8, 226u8, 94u8, 23u8, 27u8, 44u8, 132u8,
                            83u8,
                        ],
                    )
                }
                pub fn total_activated_liquidity(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::total_activated_liquidity::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::total_activated_liquidity::Param0,
                    >,
                    types::total_activated_liquidity::TotalActivatedLiquidity,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "TotalActivatedLiquidity",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            140u8, 39u8, 103u8, 105u8, 218u8, 217u8, 134u8, 152u8, 79u8, 100u8,
                            152u8, 46u8, 102u8, 119u8, 172u8, 190u8, 76u8, 206u8, 141u8, 66u8,
                            112u8, 29u8, 223u8, 156u8, 218u8, 226u8, 94u8, 23u8, 27u8, 44u8, 132u8,
                            83u8,
                        ],
                    )
                }
                #[doc = " Stores information about pool weight and accumulated rewards"]
                pub fn rewards_info_for_schedule_rewards_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::rewards_info_for_schedule_rewards::RewardsInfoForScheduleRewards,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsInfoForScheduleRewards",
                        (),
                        [
                            141u8, 57u8, 139u8, 79u8, 27u8, 216u8, 139u8, 181u8, 121u8, 30u8,
                            182u8, 234u8, 165u8, 45u8, 107u8, 85u8, 120u8, 224u8, 123u8, 207u8,
                            159u8, 86u8, 94u8, 214u8, 214u8, 87u8, 251u8, 151u8, 103u8, 22u8, 85u8,
                            176u8,
                        ],
                    )
                }
                #[doc = " Stores information about pool weight and accumulated rewards"]
                pub fn rewards_info_for_schedule_rewards_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::rewards_info_for_schedule_rewards::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::rewards_info_for_schedule_rewards::Param0,
                    >,
                    types::rewards_info_for_schedule_rewards::RewardsInfoForScheduleRewards,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsInfoForScheduleRewards",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            141u8, 57u8, 139u8, 79u8, 27u8, 216u8, 139u8, 181u8, 121u8, 30u8,
                            182u8, 234u8, 165u8, 45u8, 107u8, 85u8, 120u8, 224u8, 123u8, 207u8,
                            159u8, 86u8, 94u8, 214u8, 214u8, 87u8, 251u8, 151u8, 103u8, 22u8, 85u8,
                            176u8,
                        ],
                    )
                }
                #[doc = " Stores information about pool weight and accumulated rewards"]
                pub fn rewards_info_for_schedule_rewards(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::rewards_info_for_schedule_rewards::Param0>,
                    _1: impl ::core::borrow::Borrow<types::rewards_info_for_schedule_rewards::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::rewards_info_for_schedule_rewards::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::rewards_info_for_schedule_rewards::Param1,
                        >,
                    ),
                    types::rewards_info_for_schedule_rewards::RewardsInfoForScheduleRewards,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsInfoForScheduleRewards",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            141u8, 57u8, 139u8, 79u8, 27u8, 216u8, 139u8, 181u8, 121u8, 30u8,
                            182u8, 234u8, 165u8, 45u8, 107u8, 85u8, 120u8, 224u8, 123u8, 207u8,
                            159u8, 86u8, 94u8, 214u8, 214u8, 87u8, 251u8, 151u8, 103u8, 22u8, 85u8,
                            176u8,
                        ],
                    )
                }
                #[doc = " How much scheduled rewards per single liquidty_token should be distribute_rewards"]
                #[doc = " the **value is multiplied by u128::MAX** to avoid floating point arithmetic"]
                pub fn schedule_rewards_total_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::schedule_rewards_total::ScheduleRewardsTotal,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ScheduleRewardsTotal",
                        (),
                        [
                            109u8, 16u8, 104u8, 101u8, 251u8, 87u8, 89u8, 20u8, 110u8, 204u8, 63u8,
                            66u8, 71u8, 232u8, 182u8, 235u8, 190u8, 234u8, 131u8, 197u8, 164u8,
                            76u8, 204u8, 23u8, 192u8, 141u8, 234u8, 125u8, 103u8, 222u8, 32u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " How much scheduled rewards per single liquidty_token should be distribute_rewards"]
                #[doc = " the **value is multiplied by u128::MAX** to avoid floating point arithmetic"]
                pub fn schedule_rewards_total_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::schedule_rewards_total::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::schedule_rewards_total::Param0,
                    >,
                    types::schedule_rewards_total::ScheduleRewardsTotal,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ScheduleRewardsTotal",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            109u8, 16u8, 104u8, 101u8, 251u8, 87u8, 89u8, 20u8, 110u8, 204u8, 63u8,
                            66u8, 71u8, 232u8, 182u8, 235u8, 190u8, 234u8, 131u8, 197u8, 164u8,
                            76u8, 204u8, 23u8, 192u8, 141u8, 234u8, 125u8, 103u8, 222u8, 32u8,
                            133u8,
                        ],
                    )
                }
                #[doc = " How much scheduled rewards per single liquidty_token should be distribute_rewards"]
                #[doc = " the **value is multiplied by u128::MAX** to avoid floating point arithmetic"]
                pub fn schedule_rewards_total(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::schedule_rewards_total::Param0>,
                    _1: impl ::core::borrow::Borrow<types::schedule_rewards_total::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::schedule_rewards_total::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::schedule_rewards_total::Param1,
                        >,
                    ),
                    types::schedule_rewards_total::ScheduleRewardsTotal,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ScheduleRewardsTotal",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            109u8, 16u8, 104u8, 101u8, 251u8, 87u8, 89u8, 20u8, 110u8, 204u8, 63u8,
                            66u8, 71u8, 232u8, 182u8, 235u8, 190u8, 234u8, 131u8, 197u8, 164u8,
                            76u8, 204u8, 23u8, 192u8, 141u8, 234u8, 125u8, 103u8, 222u8, 32u8,
                            133u8,
                        ],
                    )
                }
                pub fn schedule_rewards_per_liquidity_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::schedule_rewards_per_liquidity::ScheduleRewardsPerLiquidity,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ScheduleRewardsPerLiquidity",
                        (),
                        [
                            194u8, 128u8, 236u8, 158u8, 1u8, 23u8, 19u8, 69u8, 162u8, 101u8, 248u8,
                            38u8, 218u8, 30u8, 105u8, 166u8, 35u8, 219u8, 113u8, 143u8, 181u8,
                            253u8, 234u8, 204u8, 211u8, 79u8, 240u8, 36u8, 243u8, 19u8, 152u8,
                            225u8,
                        ],
                    )
                }
                pub fn schedule_rewards_per_liquidity_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::schedule_rewards_per_liquidity::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::schedule_rewards_per_liquidity::Param0,
                    >,
                    types::schedule_rewards_per_liquidity::ScheduleRewardsPerLiquidity,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ScheduleRewardsPerLiquidity",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            194u8, 128u8, 236u8, 158u8, 1u8, 23u8, 19u8, 69u8, 162u8, 101u8, 248u8,
                            38u8, 218u8, 30u8, 105u8, 166u8, 35u8, 219u8, 113u8, 143u8, 181u8,
                            253u8, 234u8, 204u8, 211u8, 79u8, 240u8, 36u8, 243u8, 19u8, 152u8,
                            225u8,
                        ],
                    )
                }
                pub fn schedule_rewards_per_liquidity(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::schedule_rewards_per_liquidity::Param0>,
                    _1: impl ::core::borrow::Borrow<types::schedule_rewards_per_liquidity::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::schedule_rewards_per_liquidity::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::schedule_rewards_per_liquidity::Param1,
                        >,
                    ),
                    types::schedule_rewards_per_liquidity::ScheduleRewardsPerLiquidity,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ScheduleRewardsPerLiquidity",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            194u8, 128u8, 236u8, 158u8, 1u8, 23u8, 19u8, 69u8, 162u8, 101u8, 248u8,
                            38u8, 218u8, 30u8, 105u8, 166u8, 35u8, 219u8, 113u8, 143u8, 181u8,
                            253u8, 234u8, 204u8, 211u8, 79u8, 240u8, 36u8, 243u8, 19u8, 152u8,
                            225u8,
                        ],
                    )
                }
                #[doc = " List of activated schedules sorted by expiry date"]
                pub fn rewards_schedules(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::rewards_schedules::RewardsSchedules,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsSchedules",
                        (),
                        [
                            253u8, 236u8, 90u8, 141u8, 38u8, 192u8, 27u8, 253u8, 240u8, 102u8,
                            205u8, 211u8, 63u8, 36u8, 160u8, 122u8, 14u8, 29u8, 46u8, 11u8, 171u8,
                            8u8, 61u8, 26u8, 240u8, 235u8, 253u8, 111u8, 175u8, 28u8, 135u8, 232u8,
                        ],
                    )
                }
                pub fn schedules_list_metadata(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::schedules_list_metadata::SchedulesListMetadata,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "SchedulesListMetadata",
                        (),
                        [
                            32u8, 82u8, 238u8, 209u8, 205u8, 41u8, 88u8, 34u8, 9u8, 141u8, 163u8,
                            71u8, 167u8, 27u8, 33u8, 80u8, 167u8, 42u8, 1u8, 205u8, 9u8, 157u8,
                            104u8, 250u8, 85u8, 61u8, 114u8, 156u8, 27u8, 87u8, 222u8, 199u8,
                        ],
                    )
                }
                pub fn rewards_schedules_list_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::rewards_schedules_list::RewardsSchedulesList,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsSchedulesList",
                        (),
                        [
                            68u8, 49u8, 148u8, 160u8, 197u8, 14u8, 239u8, 79u8, 144u8, 40u8, 232u8,
                            33u8, 5u8, 216u8, 121u8, 202u8, 217u8, 198u8, 105u8, 93u8, 138u8, 44u8,
                            249u8, 197u8, 12u8, 177u8, 152u8, 31u8, 239u8, 51u8, 74u8, 220u8,
                        ],
                    )
                }
                pub fn rewards_schedules_list(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::rewards_schedules_list::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::rewards_schedules_list::Param0,
                    >,
                    types::rewards_schedules_list::RewardsSchedulesList,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsSchedulesList",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            68u8, 49u8, 148u8, 160u8, 197u8, 14u8, 239u8, 79u8, 144u8, 40u8, 232u8,
                            33u8, 5u8, 216u8, 121u8, 202u8, 217u8, 198u8, 105u8, 93u8, 138u8, 44u8,
                            249u8, 197u8, 12u8, 177u8, 152u8, 31u8, 239u8, 51u8, 74u8, 220u8,
                        ],
                    )
                }
                #[doc = " Maps liquidity token to list of tokens that it ever was rewarded with"]
                pub fn reward_tokens_per_pool_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::reward_tokens_per_pool::RewardTokensPerPool,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardTokensPerPool",
                        (),
                        [
                            122u8, 182u8, 134u8, 243u8, 68u8, 154u8, 46u8, 158u8, 141u8, 47u8,
                            43u8, 1u8, 40u8, 94u8, 250u8, 85u8, 21u8, 180u8, 167u8, 4u8, 235u8,
                            23u8, 161u8, 206u8, 223u8, 216u8, 38u8, 55u8, 224u8, 240u8, 186u8,
                            109u8,
                        ],
                    )
                }
                #[doc = " Maps liquidity token to list of tokens that it ever was rewarded with"]
                pub fn reward_tokens_per_pool_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::reward_tokens_per_pool::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::reward_tokens_per_pool::Param0,
                    >,
                    types::reward_tokens_per_pool::RewardTokensPerPool,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardTokensPerPool",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            122u8, 182u8, 134u8, 243u8, 68u8, 154u8, 46u8, 158u8, 141u8, 47u8,
                            43u8, 1u8, 40u8, 94u8, 250u8, 85u8, 21u8, 180u8, 167u8, 4u8, 235u8,
                            23u8, 161u8, 206u8, 223u8, 216u8, 38u8, 55u8, 224u8, 240u8, 186u8,
                            109u8,
                        ],
                    )
                }
                #[doc = " Maps liquidity token to list of tokens that it ever was rewarded with"]
                pub fn reward_tokens_per_pool(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::reward_tokens_per_pool::Param0>,
                    _1: impl ::core::borrow::Borrow<types::reward_tokens_per_pool::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::reward_tokens_per_pool::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::reward_tokens_per_pool::Param1,
                        >,
                    ),
                    types::reward_tokens_per_pool::RewardTokensPerPool,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardTokensPerPool",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            122u8, 182u8, 134u8, 243u8, 68u8, 154u8, 46u8, 158u8, 141u8, 47u8,
                            43u8, 1u8, 40u8, 94u8, 250u8, 85u8, 21u8, 180u8, 167u8, 4u8, 235u8,
                            23u8, 161u8, 206u8, 223u8, 216u8, 38u8, 55u8, 224u8, 240u8, 186u8,
                            109u8,
                        ],
                    )
                }
                #[doc = " Tracks number of activated liquidity per schedule. It is used for calculation of"]
                #[doc = " \"cumulative rewrds amount\" per 1 liquidity token. Therefore activation/deactivation needs"]
                #[doc = " to be deffered same way as schedule rewards are delayed."]                pub fn total_activated_liquidity_for_schedules_iter (& self ,) -> :: subxt :: ext :: subxt_core :: storage :: address :: StaticAddress :: < () , types :: total_activated_liquidity_for_schedules :: TotalActivatedLiquidityForSchedules , () , :: subxt :: ext :: subxt_core :: utils :: Yes , :: subxt :: ext :: subxt_core :: utils :: Yes >{
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "TotalActivatedLiquidityForSchedules",
                        (),
                        [
                            209u8, 45u8, 18u8, 53u8, 147u8, 117u8, 179u8, 78u8, 144u8, 91u8, 93u8,
                            168u8, 5u8, 156u8, 2u8, 83u8, 219u8, 223u8, 142u8, 245u8, 26u8, 156u8,
                            8u8, 112u8, 162u8, 112u8, 252u8, 254u8, 170u8, 71u8, 214u8, 246u8,
                        ],
                    )
                }
                #[doc = " Tracks number of activated liquidity per schedule. It is used for calculation of"]
                #[doc = " \"cumulative rewrds amount\" per 1 liquidity token. Therefore activation/deactivation needs"]
                #[doc = " to be deffered same way as schedule rewards are delayed."]                pub fn total_activated_liquidity_for_schedules_iter1 (& self , _0 : impl :: core :: borrow :: Borrow < types :: total_activated_liquidity_for_schedules :: Param0 > ,) -> :: subxt :: ext :: subxt_core :: storage :: address :: StaticAddress :: < :: subxt :: ext :: subxt_core :: storage :: address :: StaticStorageKey < types :: total_activated_liquidity_for_schedules :: Param0 > , types :: total_activated_liquidity_for_schedules :: TotalActivatedLiquidityForSchedules , () , :: subxt :: ext :: subxt_core :: utils :: Yes , :: subxt :: ext :: subxt_core :: utils :: Yes >{
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "TotalActivatedLiquidityForSchedules",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            209u8, 45u8, 18u8, 53u8, 147u8, 117u8, 179u8, 78u8, 144u8, 91u8, 93u8,
                            168u8, 5u8, 156u8, 2u8, 83u8, 219u8, 223u8, 142u8, 245u8, 26u8, 156u8,
                            8u8, 112u8, 162u8, 112u8, 252u8, 254u8, 170u8, 71u8, 214u8, 246u8,
                        ],
                    )
                }
                #[doc = " Tracks number of activated liquidity per schedule. It is used for calculation of"]
                #[doc = " \"cumulative rewrds amount\" per 1 liquidity token. Therefore activation/deactivation needs"]
                #[doc = " to be deffered same way as schedule rewards are delayed."]                pub fn total_activated_liquidity_for_schedules (& self , _0 : impl :: core :: borrow :: Borrow < types :: total_activated_liquidity_for_schedules :: Param0 > , _1 : impl :: core :: borrow :: Borrow < types :: total_activated_liquidity_for_schedules :: Param1 > ,) -> :: subxt :: ext :: subxt_core :: storage :: address :: StaticAddress :: < (:: subxt :: ext :: subxt_core :: storage :: address :: StaticStorageKey < types :: total_activated_liquidity_for_schedules :: Param0 > , :: subxt :: ext :: subxt_core :: storage :: address :: StaticStorageKey < types :: total_activated_liquidity_for_schedules :: Param1 > ,) , types :: total_activated_liquidity_for_schedules :: TotalActivatedLiquidityForSchedules , :: subxt :: ext :: subxt_core :: utils :: Yes , :: subxt :: ext :: subxt_core :: utils :: Yes , () >{
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "TotalActivatedLiquidityForSchedules",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            209u8, 45u8, 18u8, 53u8, 147u8, 117u8, 179u8, 78u8, 144u8, 91u8, 93u8,
                            168u8, 5u8, 156u8, 2u8, 83u8, 219u8, 223u8, 142u8, 245u8, 26u8, 156u8,
                            8u8, 112u8, 162u8, 112u8, 252u8, 254u8, 170u8, 71u8, 214u8, 246u8,
                        ],
                    )
                }
                #[doc = " Tracks how much liquidity user activated for particular (liq token, reward token) pair"]
                #[doc = " StorageNMap was used because it only require single read to know if user deactivated all"]
                #[doc = " liquidity associated with particular liquidity_token that is rewarded. If so part of the"]
                #[doc = " liquididty tokens can be unlocked."]
                pub fn activated_liquidity_for_schedules_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::activated_liquidity_for_schedules::ActivatedLiquidityForSchedules,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedLiquidityForSchedules",
                        (),
                        [
                            173u8, 205u8, 128u8, 50u8, 239u8, 9u8, 207u8, 66u8, 112u8, 216u8,
                            160u8, 103u8, 95u8, 201u8, 58u8, 129u8, 255u8, 86u8, 101u8, 179u8,
                            188u8, 101u8, 101u8, 14u8, 159u8, 52u8, 55u8, 30u8, 79u8, 226u8, 131u8,
                            72u8,
                        ],
                    )
                }
                #[doc = " Tracks how much liquidity user activated for particular (liq token, reward token) pair"]
                #[doc = " StorageNMap was used because it only require single read to know if user deactivated all"]
                #[doc = " liquidity associated with particular liquidity_token that is rewarded. If so part of the"]
                #[doc = " liquididty tokens can be unlocked."]
                pub fn activated_liquidity_for_schedules_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::activated_liquidity_for_schedules::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::activated_liquidity_for_schedules::Param0,
                    >,
                    types::activated_liquidity_for_schedules::ActivatedLiquidityForSchedules,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedLiquidityForSchedules",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            173u8, 205u8, 128u8, 50u8, 239u8, 9u8, 207u8, 66u8, 112u8, 216u8,
                            160u8, 103u8, 95u8, 201u8, 58u8, 129u8, 255u8, 86u8, 101u8, 179u8,
                            188u8, 101u8, 101u8, 14u8, 159u8, 52u8, 55u8, 30u8, 79u8, 226u8, 131u8,
                            72u8,
                        ],
                    )
                }
                #[doc = " Tracks how much liquidity user activated for particular (liq token, reward token) pair"]
                #[doc = " StorageNMap was used because it only require single read to know if user deactivated all"]
                #[doc = " liquidity associated with particular liquidity_token that is rewarded. If so part of the"]
                #[doc = " liquididty tokens can be unlocked."]
                pub fn activated_liquidity_for_schedules_iter2(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::activated_liquidity_for_schedules::Param0>,
                    _1: impl ::core::borrow::Borrow<types::activated_liquidity_for_schedules::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::activated_liquidity_for_schedules::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::activated_liquidity_for_schedules::Param1,
                        >,
                    ),
                    types::activated_liquidity_for_schedules::ActivatedLiquidityForSchedules,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedLiquidityForSchedules",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            173u8, 205u8, 128u8, 50u8, 239u8, 9u8, 207u8, 66u8, 112u8, 216u8,
                            160u8, 103u8, 95u8, 201u8, 58u8, 129u8, 255u8, 86u8, 101u8, 179u8,
                            188u8, 101u8, 101u8, 14u8, 159u8, 52u8, 55u8, 30u8, 79u8, 226u8, 131u8,
                            72u8,
                        ],
                    )
                }
                #[doc = " Tracks how much liquidity user activated for particular (liq token, reward token) pair"]
                #[doc = " StorageNMap was used because it only require single read to know if user deactivated all"]
                #[doc = " liquidity associated with particular liquidity_token that is rewarded. If so part of the"]
                #[doc = " liquididty tokens can be unlocked."]
                pub fn activated_liquidity_for_schedules(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::activated_liquidity_for_schedules::Param0>,
                    _1: impl ::core::borrow::Borrow<types::activated_liquidity_for_schedules::Param1>,
                    _2: impl ::core::borrow::Borrow<types::activated_liquidity_for_schedules::Param2>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::activated_liquidity_for_schedules::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::activated_liquidity_for_schedules::Param1,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::activated_liquidity_for_schedules::Param2,
                        >,
                    ),
                    types::activated_liquidity_for_schedules::ActivatedLiquidityForSchedules,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedLiquidityForSchedules",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _2.borrow(),
                            ),
                        ),
                        [
                            173u8, 205u8, 128u8, 50u8, 239u8, 9u8, 207u8, 66u8, 112u8, 216u8,
                            160u8, 103u8, 95u8, 201u8, 58u8, 129u8, 255u8, 86u8, 101u8, 179u8,
                            188u8, 101u8, 101u8, 14u8, 159u8, 52u8, 55u8, 30u8, 79u8, 226u8, 131u8,
                            72u8,
                        ],
                    )
                }
                #[doc = " Tracks how much of the liquidity was activated for schedule rewards and not yet"]
                #[doc = " liquidity mining rewards. That information is essential to properly handle token unlcocks"]
                #[doc = " when liquidity is deactivated."]                pub fn activated_locked_liquidity_for_schedules_iter (& self ,) -> :: subxt :: ext :: subxt_core :: storage :: address :: StaticAddress :: < () , types :: activated_locked_liquidity_for_schedules :: ActivatedLockedLiquidityForSchedules , () , :: subxt :: ext :: subxt_core :: utils :: Yes , :: subxt :: ext :: subxt_core :: utils :: Yes >{
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedLockedLiquidityForSchedules",
                        (),
                        [
                            109u8, 141u8, 92u8, 3u8, 217u8, 31u8, 59u8, 143u8, 236u8, 141u8, 248u8,
                            36u8, 21u8, 13u8, 109u8, 246u8, 73u8, 141u8, 91u8, 120u8, 92u8, 209u8,
                            45u8, 237u8, 70u8, 113u8, 104u8, 110u8, 2u8, 36u8, 220u8, 47u8,
                        ],
                    )
                }
                #[doc = " Tracks how much of the liquidity was activated for schedule rewards and not yet"]
                #[doc = " liquidity mining rewards. That information is essential to properly handle token unlcocks"]
                #[doc = " when liquidity is deactivated."]                pub fn activated_locked_liquidity_for_schedules_iter1 (& self , _0 : impl :: core :: borrow :: Borrow < types :: activated_locked_liquidity_for_schedules :: Param0 > ,) -> :: subxt :: ext :: subxt_core :: storage :: address :: StaticAddress :: < :: subxt :: ext :: subxt_core :: storage :: address :: StaticStorageKey < types :: activated_locked_liquidity_for_schedules :: Param0 > , types :: activated_locked_liquidity_for_schedules :: ActivatedLockedLiquidityForSchedules , () , :: subxt :: ext :: subxt_core :: utils :: Yes , :: subxt :: ext :: subxt_core :: utils :: Yes >{
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedLockedLiquidityForSchedules",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            109u8, 141u8, 92u8, 3u8, 217u8, 31u8, 59u8, 143u8, 236u8, 141u8, 248u8,
                            36u8, 21u8, 13u8, 109u8, 246u8, 73u8, 141u8, 91u8, 120u8, 92u8, 209u8,
                            45u8, 237u8, 70u8, 113u8, 104u8, 110u8, 2u8, 36u8, 220u8, 47u8,
                        ],
                    )
                }
                #[doc = " Tracks how much of the liquidity was activated for schedule rewards and not yet"]
                #[doc = " liquidity mining rewards. That information is essential to properly handle token unlcocks"]
                #[doc = " when liquidity is deactivated."]                pub fn activated_locked_liquidity_for_schedules (& self , _0 : impl :: core :: borrow :: Borrow < types :: activated_locked_liquidity_for_schedules :: Param0 > , _1 : impl :: core :: borrow :: Borrow < types :: activated_locked_liquidity_for_schedules :: Param1 > ,) -> :: subxt :: ext :: subxt_core :: storage :: address :: StaticAddress :: < (:: subxt :: ext :: subxt_core :: storage :: address :: StaticStorageKey < types :: activated_locked_liquidity_for_schedules :: Param0 > , :: subxt :: ext :: subxt_core :: storage :: address :: StaticStorageKey < types :: activated_locked_liquidity_for_schedules :: Param1 > ,) , types :: activated_locked_liquidity_for_schedules :: ActivatedLockedLiquidityForSchedules , :: subxt :: ext :: subxt_core :: utils :: Yes , :: subxt :: ext :: subxt_core :: utils :: Yes , () >{
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedLockedLiquidityForSchedules",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            109u8, 141u8, 92u8, 3u8, 217u8, 31u8, 59u8, 143u8, 236u8, 141u8, 248u8,
                            36u8, 21u8, 13u8, 109u8, 246u8, 73u8, 141u8, 91u8, 120u8, 92u8, 209u8,
                            45u8, 237u8, 70u8, 113u8, 104u8, 110u8, 2u8, 36u8, 220u8, 47u8,
                        ],
                    )
                }
                #[doc = " Tracks how much of the liquidity was activated for schedule rewards and not yet"]
                #[doc = " liquidity mining rewards. That information is essential to properly handle token unlcocks"]
                #[doc = " when liquidity is deactivated."]
                pub fn activated_native_rewards_liq_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::activated_native_rewards_liq::ActivatedNativeRewardsLiq,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedNativeRewardsLiq",
                        (),
                        [
                            181u8, 241u8, 250u8, 203u8, 106u8, 230u8, 253u8, 9u8, 62u8, 145u8,
                            231u8, 156u8, 24u8, 237u8, 138u8, 67u8, 112u8, 214u8, 53u8, 150u8,
                            152u8, 203u8, 217u8, 117u8, 92u8, 120u8, 66u8, 80u8, 12u8, 255u8, 1u8,
                            185u8,
                        ],
                    )
                }
                #[doc = " Tracks how much of the liquidity was activated for schedule rewards and not yet"]
                #[doc = " liquidity mining rewards. That information is essential to properly handle token unlcocks"]
                #[doc = " when liquidity is deactivated."]
                pub fn activated_native_rewards_liq_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::activated_native_rewards_liq::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::activated_native_rewards_liq::Param0,
                    >,
                    types::activated_native_rewards_liq::ActivatedNativeRewardsLiq,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedNativeRewardsLiq",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            181u8, 241u8, 250u8, 203u8, 106u8, 230u8, 253u8, 9u8, 62u8, 145u8,
                            231u8, 156u8, 24u8, 237u8, 138u8, 67u8, 112u8, 214u8, 53u8, 150u8,
                            152u8, 203u8, 217u8, 117u8, 92u8, 120u8, 66u8, 80u8, 12u8, 255u8, 1u8,
                            185u8,
                        ],
                    )
                }
                #[doc = " Tracks how much of the liquidity was activated for schedule rewards and not yet"]
                #[doc = " liquidity mining rewards. That information is essential to properly handle token unlcocks"]
                #[doc = " when liquidity is deactivated."]
                pub fn activated_native_rewards_liq(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::activated_native_rewards_liq::Param0>,
                    _1: impl ::core::borrow::Borrow<types::activated_native_rewards_liq::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::activated_native_rewards_liq::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::activated_native_rewards_liq::Param1,
                        >,
                    ),
                    types::activated_native_rewards_liq::ActivatedNativeRewardsLiq,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "ActivatedNativeRewardsLiq",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            181u8, 241u8, 250u8, 203u8, 106u8, 230u8, 253u8, 9u8, 62u8, 145u8,
                            231u8, 156u8, 24u8, 237u8, 138u8, 67u8, 112u8, 214u8, 53u8, 150u8,
                            152u8, 203u8, 217u8, 117u8, 92u8, 120u8, 66u8, 80u8, 12u8, 255u8, 1u8,
                            185u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The account id that holds the liquidity mining issuance"]
                pub fn liquidity_mining_issuance_vault(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_runtime::account::AccountId20,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "LiquidityMiningIssuanceVault",
                        [
                            184u8, 103u8, 76u8, 37u8, 218u8, 155u8, 125u8, 78u8, 138u8, 122u8,
                            255u8, 132u8, 124u8, 68u8, 65u8, 163u8, 97u8, 77u8, 80u8, 33u8, 69u8,
                            55u8, 69u8, 230u8, 83u8, 135u8, 254u8, 221u8, 222u8, 177u8, 10u8,
                            189u8,
                        ],
                    )
                }
                pub fn rewards_distribution_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ProofOfStake",
                        "RewardsDistributionPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod fee_lock {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_fee_lock::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_fee_lock::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UpdateFeeLockMetadata {
                    pub period_length: update_fee_lock_metadata::PeriodLength,
                    pub fee_lock_amount: update_fee_lock_metadata::FeeLockAmount,
                    pub swap_value_threshold: update_fee_lock_metadata::SwapValueThreshold,
                    pub should_be_whitelisted: update_fee_lock_metadata::ShouldBeWhitelisted,
                }
                pub mod update_fee_lock_metadata {
                    use super::runtime_types;
                    pub type PeriodLength = ::core::option::Option<::core::primitive::u32>;
                    pub type FeeLockAmount = ::core::option::Option<::core::primitive::u128>;
                    pub type SwapValueThreshold = ::core::option::Option<::core::primitive::u128>;
                    pub type ShouldBeWhitelisted = ::core::option::Option<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            ::core::primitive::u32,
                            ::core::primitive::bool,
                        )>,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateFeeLockMetadata {
                    const PALLET: &'static str = "FeeLock";
                    const CALL: &'static str = "update_fee_lock_metadata";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UnlockFee;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnlockFee {
                    const PALLET: &'static str = "FeeLock";
                    const CALL: &'static str = "unlock_fee";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn update_fee_lock_metadata(
                    &self,
                    period_length: types::update_fee_lock_metadata::PeriodLength,
                    fee_lock_amount: types::update_fee_lock_metadata::FeeLockAmount,
                    swap_value_threshold: types::update_fee_lock_metadata::SwapValueThreshold,
                    should_be_whitelisted: types::update_fee_lock_metadata::ShouldBeWhitelisted,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::UpdateFeeLockMetadata,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FeeLock",
                        "update_fee_lock_metadata",
                        types::UpdateFeeLockMetadata {
                            period_length,
                            fee_lock_amount,
                            swap_value_threshold,
                            should_be_whitelisted,
                        },
                        [
                            182u8, 245u8, 165u8, 126u8, 94u8, 114u8, 245u8, 221u8, 170u8, 161u8,
                            47u8, 116u8, 123u8, 91u8, 168u8, 102u8, 126u8, 222u8, 111u8, 22u8,
                            177u8, 90u8, 36u8, 6u8, 121u8, 135u8, 74u8, 96u8, 158u8, 187u8, 194u8,
                            106u8,
                        ],
                    )
                }
                pub fn unlock_fee(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UnlockFee>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FeeLock",
                        "unlock_fee",
                        types::UnlockFee {},
                        [
                            219u8, 18u8, 12u8, 189u8, 129u8, 226u8, 238u8, 159u8, 180u8, 87u8,
                            226u8, 53u8, 176u8, 192u8, 45u8, 84u8, 8u8, 105u8, 213u8, 131u8, 17u8,
                            31u8, 91u8, 51u8, 47u8, 217u8, 31u8, 207u8, 107u8, 188u8, 135u8, 117u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_fee_lock::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct FeeLockMetadataUpdated;
            impl ::subxt::ext::subxt_core::events::StaticEvent for FeeLockMetadataUpdated {
                const PALLET: &'static str = "FeeLock";
                const EVENT: &'static str = "FeeLockMetadataUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct FeeLockUnlocked(
                pub fee_lock_unlocked::Field0,
                pub fee_lock_unlocked::Field1,
            );
            pub mod fee_lock_unlocked {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for FeeLockUnlocked {
                const PALLET: &'static str = "FeeLock";
                const EVENT: &'static str = "FeeLockUnlocked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct FeeLocked {
                pub who: fee_locked::Who,
                pub lock_amount: fee_locked::LockAmount,
                pub total_locked: fee_locked::TotalLocked,
            }
            pub mod fee_locked {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type LockAmount = ::core::primitive::u128;
                pub type TotalLocked = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for FeeLocked {
                const PALLET: &'static str = "FeeLock";
                const EVENT: &'static str = "FeeLocked";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod fee_lock_metadata {
                    use super::runtime_types;
                    pub type FeeLockMetadata =
                        runtime_types::pallet_fee_lock::pallet::FeeLockMetadataInfo;
                }
                pub mod fee_lock_metadata_qeueue_position {
                    use super::runtime_types;
                    pub type FeeLockMetadataQeueuePosition = ::core::primitive::u128;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod unlock_queue {
                    use super::runtime_types;
                    pub type UnlockQueue = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param0 = ::core::primitive::u128;
                }
                pub mod unlock_queue_begin {
                    use super::runtime_types;
                    pub type UnlockQueueBegin = ::core::primitive::u128;
                }
                pub mod unlock_queue_end {
                    use super::runtime_types;
                    pub type UnlockQueueEnd = ::core::primitive::u128;
                }
                pub mod account_fee_lock_data {
                    use super::runtime_types;
                    pub type AccountFeeLockData =
                        runtime_types::pallet_fee_lock::pallet::AccountFeeLockDataInfo<
                            ::core::primitive::u32,
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn fee_lock_metadata(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::fee_lock_metadata::FeeLockMetadata,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "FeeLockMetadata",
                        (),
                        [
                            137u8, 58u8, 108u8, 251u8, 163u8, 241u8, 183u8, 18u8, 173u8, 121u8,
                            76u8, 143u8, 226u8, 79u8, 9u8, 192u8, 205u8, 85u8, 102u8, 243u8, 51u8,
                            28u8, 19u8, 139u8, 61u8, 139u8, 0u8, 26u8, 229u8, 189u8, 174u8, 0u8,
                        ],
                    )
                }
                pub fn fee_lock_metadata_qeueue_position_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::fee_lock_metadata_qeueue_position::FeeLockMetadataQeueuePosition,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "FeeLockMetadataQeueuePosition",
                        (),
                        [
                            107u8, 222u8, 116u8, 107u8, 80u8, 134u8, 102u8, 116u8, 51u8, 210u8,
                            100u8, 91u8, 128u8, 234u8, 44u8, 151u8, 70u8, 80u8, 38u8, 39u8, 63u8,
                            171u8, 112u8, 98u8, 12u8, 43u8, 239u8, 251u8, 241u8, 240u8, 45u8,
                            127u8,
                        ],
                    )
                }
                pub fn fee_lock_metadata_qeueue_position(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::fee_lock_metadata_qeueue_position::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::fee_lock_metadata_qeueue_position::Param0,
                    >,
                    types::fee_lock_metadata_qeueue_position::FeeLockMetadataQeueuePosition,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "FeeLockMetadataQeueuePosition",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            107u8, 222u8, 116u8, 107u8, 80u8, 134u8, 102u8, 116u8, 51u8, 210u8,
                            100u8, 91u8, 128u8, 234u8, 44u8, 151u8, 70u8, 80u8, 38u8, 39u8, 63u8,
                            171u8, 112u8, 98u8, 12u8, 43u8, 239u8, 251u8, 241u8, 240u8, 45u8,
                            127u8,
                        ],
                    )
                }
                pub fn unlock_queue_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::unlock_queue::UnlockQueue,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "UnlockQueue",
                        (),
                        [
                            34u8, 81u8, 78u8, 195u8, 83u8, 108u8, 125u8, 168u8, 26u8, 43u8, 95u8,
                            56u8, 44u8, 117u8, 223u8, 172u8, 241u8, 4u8, 231u8, 109u8, 67u8, 95u8,
                            228u8, 231u8, 200u8, 177u8, 233u8, 118u8, 16u8, 134u8, 91u8, 87u8,
                        ],
                    )
                }
                pub fn unlock_queue(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::unlock_queue::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::unlock_queue::Param0,
                    >,
                    types::unlock_queue::UnlockQueue,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "UnlockQueue",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            34u8, 81u8, 78u8, 195u8, 83u8, 108u8, 125u8, 168u8, 26u8, 43u8, 95u8,
                            56u8, 44u8, 117u8, 223u8, 172u8, 241u8, 4u8, 231u8, 109u8, 67u8, 95u8,
                            228u8, 231u8, 200u8, 177u8, 233u8, 118u8, 16u8, 134u8, 91u8, 87u8,
                        ],
                    )
                }
                pub fn unlock_queue_begin(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::unlock_queue_begin::UnlockQueueBegin,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "UnlockQueueBegin",
                        (),
                        [
                            174u8, 123u8, 122u8, 216u8, 11u8, 250u8, 38u8, 188u8, 125u8, 223u8,
                            184u8, 228u8, 104u8, 77u8, 248u8, 102u8, 14u8, 40u8, 238u8, 228u8,
                            139u8, 216u8, 124u8, 153u8, 138u8, 5u8, 204u8, 84u8, 88u8, 234u8,
                            102u8, 131u8,
                        ],
                    )
                }
                pub fn unlock_queue_end(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::unlock_queue_end::UnlockQueueEnd,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "UnlockQueueEnd",
                        (),
                        [
                            40u8, 97u8, 4u8, 11u8, 8u8, 149u8, 233u8, 59u8, 243u8, 14u8, 229u8,
                            39u8, 60u8, 42u8, 195u8, 43u8, 26u8, 190u8, 205u8, 27u8, 247u8, 24u8,
                            229u8, 29u8, 147u8, 59u8, 190u8, 195u8, 37u8, 198u8, 89u8, 252u8,
                        ],
                    )
                }
                pub fn account_fee_lock_data_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::account_fee_lock_data::AccountFeeLockData,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "AccountFeeLockData",
                        (),
                        [
                            58u8, 42u8, 128u8, 10u8, 226u8, 18u8, 77u8, 209u8, 65u8, 165u8, 176u8,
                            118u8, 166u8, 225u8, 95u8, 6u8, 209u8, 82u8, 156u8, 150u8, 17u8, 154u8,
                            115u8, 27u8, 29u8, 136u8, 216u8, 211u8, 60u8, 179u8, 206u8, 92u8,
                        ],
                    )
                }
                pub fn account_fee_lock_data(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::account_fee_lock_data::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::account_fee_lock_data::Param0,
                    >,
                    types::account_fee_lock_data::AccountFeeLockData,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FeeLock",
                        "AccountFeeLockData",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            58u8, 42u8, 128u8, 10u8, 226u8, 18u8, 77u8, 209u8, 65u8, 165u8, 176u8,
                            118u8, 166u8, 225u8, 95u8, 6u8, 209u8, 82u8, 156u8, 150u8, 17u8, 154u8,
                            115u8, 27u8, 29u8, 136u8, 216u8, 211u8, 60u8, 179u8, 206u8, 92u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn max_curated_tokens(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "FeeLock",
                        "MaxCuratedTokens",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn native_token_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "FeeLock",
                        "NativeTokenId",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod vesting {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the vesting pallet."]
        pub type Error = runtime_types::pallet_vesting_mangata::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_vesting_mangata::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unlock any vested funds of the sender account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub struct Vest {
                    pub token_id: vest::TokenId,
                }
                pub mod vest {
                    use super::runtime_types;
                    pub type TokenId = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vest {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vest";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Unlock any vested funds of a `target` account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account whose vested funds should be unlocked. Must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub struct VestOther {
                    pub token_id: vest_other::TokenId,
                    pub target: vest_other::Target,
                }
                pub mod vest_other {
                    use super::runtime_types;
                    pub type TokenId = ::core::primitive::u32;
                    pub type Target = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for VestOther {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "vest_other";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Force a vested transfer."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `source`: The account whose funds should be transferred."]
                #[doc = "- `target`: The account that should be transferred the vested funds."]
                #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                #[doc = ""]
                #[doc = "Emits `VestingCreated`."]
                #[doc = ""]
                #[doc = "NOTE: This will unlock all schedules through the current block."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub struct ForceVestedTransfer {
                    pub token_id: force_vested_transfer::TokenId,
                    pub source: force_vested_transfer::Source,
                    pub target: force_vested_transfer::Target,
                    pub schedule: force_vested_transfer::Schedule,
                }
                pub mod force_vested_transfer {
                    use super::runtime_types;
                    pub type TokenId = ::core::primitive::u32;
                    pub type Source = runtime_types::sp_runtime::account::AccountId20;
                    pub type Target = runtime_types::sp_runtime::account::AccountId20;
                    pub type Schedule =
                        runtime_types::pallet_vesting_mangata::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceVestedTransfer {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "force_vested_transfer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Merge two vesting schedules together, creating a new vesting schedule that unlocks over"]
                #[doc = "the highest possible start and end blocks. If both schedules have already started the"]
                #[doc = "current block will be used as the schedule start; with the caveat that if one schedule"]
                #[doc = "is finished by the current block, the other will be treated as the new merged schedule,"]
                #[doc = "unmodified."]
                #[doc = ""]
                #[doc = "NOTE: If `schedule1_index == schedule2_index` this is a no-op."]
                #[doc = "NOTE: This will unlock all schedules through the current block prior to merging."]
                #[doc = "NOTE: If both schedules have ended by the current block, no new schedule will be created"]
                #[doc = "and both will be removed."]
                #[doc = ""]
                #[doc = "Merged schedule attributes:"]
                #[doc = "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,"]
                #[doc = "  current_block)`."]
                #[doc = "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`."]
                #[doc = "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `schedule1_index`: index of the first schedule to merge."]
                #[doc = "- `schedule2_index`: index of the second schedule to merge."]
                pub struct MergeSchedules {
                    pub token_id: merge_schedules::TokenId,
                    pub schedule1_index: merge_schedules::Schedule1Index,
                    pub schedule2_index: merge_schedules::Schedule2Index,
                }
                pub mod merge_schedules {
                    use super::runtime_types;
                    pub type TokenId = ::core::primitive::u32;
                    pub type Schedule1Index = ::core::primitive::u32;
                    pub type Schedule2Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for MergeSchedules {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "merge_schedules";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SudoUnlockAllVestingTokens {
                    pub target: sudo_unlock_all_vesting_tokens::Target,
                    pub token_id: sudo_unlock_all_vesting_tokens::TokenId,
                }
                pub mod sudo_unlock_all_vesting_tokens {
                    use super::runtime_types;
                    pub type Target = runtime_types::sp_runtime::account::AccountId20;
                    pub type TokenId = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoUnlockAllVestingTokens {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "sudo_unlock_all_vesting_tokens";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Force remove a vesting schedule"]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `target`: An account that has a vesting schedule"]
                #[doc = "- `schedule_index`: The vesting schedule index that should be removed"]
                pub struct ForceRemoveVestingSchedule {
                    pub token_id: force_remove_vesting_schedule::TokenId,
                    pub target: force_remove_vesting_schedule::Target,
                    pub schedule_index: force_remove_vesting_schedule::ScheduleIndex,
                }
                pub mod force_remove_vesting_schedule {
                    use super::runtime_types;
                    pub type TokenId = ::core::primitive::u32;
                    pub type Target = runtime_types::sp_runtime::account::AccountId20;
                    pub type ScheduleIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ForceRemoveVestingSchedule {
                    const PALLET: &'static str = "Vesting";
                    const CALL: &'static str = "force_remove_vesting_schedule";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Unlock any vested funds of the sender account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub fn vest(
                    &self,
                    token_id: types::vest::TokenId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vest>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "vest",
                        types::Vest { token_id },
                        [
                            235u8, 155u8, 56u8, 113u8, 83u8, 98u8, 84u8, 133u8, 68u8, 208u8, 42u8,
                            255u8, 114u8, 102u8, 12u8, 118u8, 163u8, 3u8, 181u8, 247u8, 247u8, 3u8,
                            65u8, 212u8, 51u8, 155u8, 251u8, 0u8, 98u8, 138u8, 121u8, 74u8,
                        ],
                    )
                }
                #[doc = "Unlock any vested funds of a `target` account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `target`: The account whose vested funds should be unlocked. Must have funds still"]
                #[doc = "locked under this pallet."]
                #[doc = ""]
                #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub fn vest_other(
                    &self,
                    token_id: types::vest_other::TokenId,
                    target: types::vest_other::Target,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::VestOther>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "vest_other",
                        types::VestOther { token_id, target },
                        [
                            55u8, 53u8, 94u8, 19u8, 109u8, 229u8, 206u8, 203u8, 111u8, 150u8, 24u8,
                            12u8, 20u8, 40u8, 84u8, 182u8, 129u8, 22u8, 111u8, 148u8, 37u8, 222u8,
                            36u8, 68u8, 224u8, 131u8, 70u8, 25u8, 95u8, 254u8, 79u8, 7u8,
                        ],
                    )
                }
                #[doc = "Force a vested transfer."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `source`: The account whose funds should be transferred."]
                #[doc = "- `target`: The account that should be transferred the vested funds."]
                #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                #[doc = ""]
                #[doc = "Emits `VestingCreated`."]
                #[doc = ""]
                #[doc = "NOTE: This will unlock all schedules through the current block."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`."]
                pub fn force_vested_transfer(
                    &self,
                    token_id: types::force_vested_transfer::TokenId,
                    source: types::force_vested_transfer::Source,
                    target: types::force_vested_transfer::Target,
                    schedule: types::force_vested_transfer::Schedule,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ForceVestedTransfer>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "force_vested_transfer",
                        types::ForceVestedTransfer {
                            token_id,
                            source,
                            target,
                            schedule,
                        },
                        [
                            119u8, 8u8, 50u8, 213u8, 74u8, 120u8, 139u8, 62u8, 213u8, 191u8, 241u8,
                            208u8, 135u8, 125u8, 154u8, 134u8, 201u8, 24u8, 205u8, 53u8, 3u8,
                            101u8, 29u8, 125u8, 145u8, 183u8, 32u8, 78u8, 121u8, 56u8, 76u8, 45u8,
                        ],
                    )
                }
                #[doc = "Merge two vesting schedules together, creating a new vesting schedule that unlocks over"]
                #[doc = "the highest possible start and end blocks. If both schedules have already started the"]
                #[doc = "current block will be used as the schedule start; with the caveat that if one schedule"]
                #[doc = "is finished by the current block, the other will be treated as the new merged schedule,"]
                #[doc = "unmodified."]
                #[doc = ""]
                #[doc = "NOTE: If `schedule1_index == schedule2_index` this is a no-op."]
                #[doc = "NOTE: This will unlock all schedules through the current block prior to merging."]
                #[doc = "NOTE: If both schedules have ended by the current block, no new schedule will be created"]
                #[doc = "and both will be removed."]
                #[doc = ""]
                #[doc = "Merged schedule attributes:"]
                #[doc = "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,"]
                #[doc = "  current_block)`."]
                #[doc = "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`."]
                #[doc = "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `schedule1_index`: index of the first schedule to merge."]
                #[doc = "- `schedule2_index`: index of the second schedule to merge."]
                pub fn merge_schedules(
                    &self,
                    token_id: types::merge_schedules::TokenId,
                    schedule1_index: types::merge_schedules::Schedule1Index,
                    schedule2_index: types::merge_schedules::Schedule2Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::MergeSchedules>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "merge_schedules",
                        types::MergeSchedules {
                            token_id,
                            schedule1_index,
                            schedule2_index,
                        },
                        [
                            194u8, 243u8, 220u8, 196u8, 114u8, 36u8, 93u8, 114u8, 150u8, 184u8,
                            58u8, 56u8, 172u8, 205u8, 115u8, 9u8, 23u8, 169u8, 233u8, 138u8, 63u8,
                            23u8, 92u8, 31u8, 99u8, 164u8, 84u8, 164u8, 144u8, 49u8, 20u8, 216u8,
                        ],
                    )
                }
                pub fn sudo_unlock_all_vesting_tokens(
                    &self,
                    target: types::sudo_unlock_all_vesting_tokens::Target,
                    token_id: types::sudo_unlock_all_vesting_tokens::TokenId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SudoUnlockAllVestingTokens,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "sudo_unlock_all_vesting_tokens",
                        types::SudoUnlockAllVestingTokens { target, token_id },
                        [
                            226u8, 48u8, 22u8, 125u8, 112u8, 240u8, 225u8, 38u8, 72u8, 174u8,
                            251u8, 246u8, 238u8, 14u8, 241u8, 86u8, 107u8, 11u8, 206u8, 146u8,
                            23u8, 41u8, 156u8, 84u8, 59u8, 21u8, 75u8, 0u8, 206u8, 193u8, 156u8,
                            169u8,
                        ],
                    )
                }
                #[doc = "Force remove a vesting schedule"]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Root_."]
                #[doc = ""]
                #[doc = "- `target`: An account that has a vesting schedule"]
                #[doc = "- `schedule_index`: The vesting schedule index that should be removed"]
                pub fn force_remove_vesting_schedule(
                    &self,
                    token_id: types::force_remove_vesting_schedule::TokenId,
                    target: types::force_remove_vesting_schedule::Target,
                    schedule_index: types::force_remove_vesting_schedule::ScheduleIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ForceRemoveVestingSchedule,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Vesting",
                        "force_remove_vesting_schedule",
                        types::ForceRemoveVestingSchedule {
                            token_id,
                            target,
                            schedule_index,
                        },
                        [
                            127u8, 240u8, 213u8, 134u8, 115u8, 232u8, 143u8, 150u8, 59u8, 114u8,
                            245u8, 81u8, 99u8, 130u8, 70u8, 69u8, 33u8, 181u8, 143u8, 167u8, 120u8,
                            150u8, 35u8, 117u8, 38u8, 88u8, 16u8, 236u8, 205u8, 64u8, 5u8, 36u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_vesting_mangata::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The amount vested has been updated. This could indicate a change in funds available."]
            #[doc = "The balance given is the amount which is left unvested (and thus locked)."]
            pub struct VestingUpdated {
                pub account: vesting_updated::Account,
                pub token_id: vesting_updated::TokenId,
                pub unvested: vesting_updated::Unvested,
            }
            pub mod vesting_updated {
                use super::runtime_types;
                pub type Account = runtime_types::sp_runtime::account::AccountId20;
                pub type TokenId = ::core::primitive::u32;
                pub type Unvested = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VestingUpdated {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An \\[account\\] has become fully vested."]
            pub struct VestingCompleted {
                pub account: vesting_completed::Account,
                pub token_id: vesting_completed::TokenId,
            }
            pub mod vesting_completed {
                use super::runtime_types;
                pub type Account = runtime_types::sp_runtime::account::AccountId20;
                pub type TokenId = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VestingCompleted {
                const PALLET: &'static str = "Vesting";
                const EVENT: &'static str = "VestingCompleted";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod vesting {
                    use super::runtime_types;
                    pub type Vesting = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::pallet_vesting_mangata::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod storage_version {
                    use super::runtime_types;
                    pub type StorageVersion = runtime_types::pallet_vesting_mangata::Releases;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Information regarding the vesting of a given account."]
                pub fn vesting_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::vesting::Vesting,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Vesting",
                        "Vesting",
                        (),
                        [
                            5u8, 215u8, 122u8, 169u8, 115u8, 39u8, 161u8, 168u8, 96u8, 206u8,
                            209u8, 128u8, 12u8, 50u8, 3u8, 81u8, 255u8, 211u8, 134u8, 98u8, 138u8,
                            98u8, 97u8, 9u8, 184u8, 108u8, 62u8, 212u8, 3u8, 241u8, 228u8, 199u8,
                        ],
                    )
                }
                #[doc = " Information regarding the vesting of a given account."]
                pub fn vesting_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::vesting::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::vesting::Param0,
                    >,
                    types::vesting::Vesting,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Vesting",
                        "Vesting",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            5u8, 215u8, 122u8, 169u8, 115u8, 39u8, 161u8, 168u8, 96u8, 206u8,
                            209u8, 128u8, 12u8, 50u8, 3u8, 81u8, 255u8, 211u8, 134u8, 98u8, 138u8,
                            98u8, 97u8, 9u8, 184u8, 108u8, 62u8, 212u8, 3u8, 241u8, 228u8, 199u8,
                        ],
                    )
                }
                #[doc = " Information regarding the vesting of a given account."]
                pub fn vesting(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::vesting::Param0>,
                    _1: impl ::core::borrow::Borrow<types::vesting::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::vesting::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::vesting::Param1,
                        >,
                    ),
                    types::vesting::Vesting,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Vesting",
                        "Vesting",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            5u8, 215u8, 122u8, 169u8, 115u8, 39u8, 161u8, 168u8, 96u8, 206u8,
                            209u8, 128u8, 12u8, 50u8, 3u8, 81u8, 255u8, 211u8, 134u8, 98u8, 138u8,
                            98u8, 97u8, 9u8, 184u8, 108u8, 62u8, 212u8, 3u8, 241u8, 228u8, 199u8,
                        ],
                    )
                }
                #[doc = " Storage version of the pallet."]
                #[doc = ""]
                #[doc = " New networks start with latest version, as determined by the genesis build."]
                pub fn storage_version(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::storage_version::StorageVersion,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Vesting",
                        "StorageVersion",
                        (),
                        [
                            230u8, 137u8, 180u8, 133u8, 142u8, 124u8, 231u8, 234u8, 223u8, 10u8,
                            154u8, 98u8, 158u8, 253u8, 228u8, 80u8, 5u8, 9u8, 91u8, 210u8, 252u8,
                            9u8, 13u8, 195u8, 193u8, 164u8, 129u8, 113u8, 128u8, 218u8, 8u8, 40u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The minimum amount transferred to call `vested_transfer`."]
                pub fn min_vested_transfer(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Vesting",
                        "MinVestedTransfer",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                pub fn max_vesting_schedules(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Vesting",
                        "MaxVestingSchedules",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod crowdloan {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_crowdloan_rewards::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_crowdloan_rewards::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Associate a native rewards_destination identity with a crowdloan contribution."]
                #[doc = ""]
                #[doc = "The caller needs to provide the unassociated relay account and a proof to succeed"]
                #[doc = "with the association"]
                #[doc = "The proof is nothing but a signature over the reward_address using the relay keys"]
                pub struct AssociateNativeIdentity {
                    pub reward_account: associate_native_identity::RewardAccount,
                    pub relay_account: associate_native_identity::RelayAccount,
                    pub proof: associate_native_identity::Proof,
                }
                pub mod associate_native_identity {
                    use super::runtime_types;
                    pub type RewardAccount = runtime_types::sp_runtime::account::AccountId20;
                    pub type RelayAccount = runtime_types::sp_runtime::account::AccountId20;
                    pub type Proof = runtime_types::sp_runtime::account::EthereumSignature;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AssociateNativeIdentity {
                    const PALLET: &'static str = "Crowdloan";
                    const CALL: &'static str = "associate_native_identity";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Change reward account by submitting proofs from relay accounts"]
                #[doc = ""]
                #[doc = "The number of valid proofs needs to be bigger than 'RewardAddressRelayVoteThreshold'"]
                #[doc = "The account to be changed needs to be submitted as 'previous_account'"]
                #[doc = "Origin must be RewardAddressChangeOrigin"]
                pub struct ChangeAssociationWithRelayKeys {
                    pub reward_account: change_association_with_relay_keys::RewardAccount,
                    pub previous_account: change_association_with_relay_keys::PreviousAccount,
                    pub proofs: change_association_with_relay_keys::Proofs,
                }
                pub mod change_association_with_relay_keys {
                    use super::runtime_types;
                    pub type RewardAccount = runtime_types::sp_runtime::account::AccountId20;
                    pub type PreviousAccount = runtime_types::sp_runtime::account::AccountId20;
                    pub type Proofs = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::EthereumSignature,
                    )>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ChangeAssociationWithRelayKeys {
                    const PALLET: &'static str = "Crowdloan";
                    const CALL: &'static str = "change_association_with_relay_keys";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Collect rewards from particular crowdloan."]
                #[doc = "If crowdloan_id is not set current [`CrowdloanId`] id will be used."]
                #[doc = "Caller is instantly rewarded with [`InitializationPayment`] % of available rewards,"]
                #[doc = "remaining funds are locked according to schedule(using `pallet_mangata_vesting` configured"]
                #[doc = "by [`Pallet::<T>::complete_initialization`] call."]
                pub struct Claim {
                    pub crowdloan_id: claim::CrowdloanId,
                }
                pub mod claim {
                    use super::runtime_types;
                    pub type CrowdloanId = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Claim {
                    const PALLET: &'static str = "Crowdloan";
                    const CALL: &'static str = "claim";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Update reward address, proving that the caller owns the current native key"]
                pub struct UpdateRewardAddress {
                    pub new_reward_account: update_reward_address::NewRewardAccount,
                    pub crowdloan_id: update_reward_address::CrowdloanId,
                }
                pub mod update_reward_address {
                    use super::runtime_types;
                    pub type NewRewardAccount = runtime_types::sp_runtime::account::AccountId20;
                    pub type CrowdloanId = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateRewardAddress {
                    const PALLET: &'static str = "Crowdloan";
                    const CALL: &'static str = "update_reward_address";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "This extrinsic completes the initialization if some checks are fullfiled. These checks are:"]
                #[doc = " -The reward contribution money matches the crowdloan pot"]
                #[doc = " -The end vesting block is higher than the init vesting block"]
                #[doc = " -The initialization has not complete yet"]
                pub struct CompleteInitialization {
                    pub lease_start_block: complete_initialization::LeaseStartBlock,
                    pub lease_ending_block: complete_initialization::LeaseEndingBlock,
                }
                pub mod complete_initialization {
                    use super::runtime_types;
                    pub type LeaseStartBlock = ::core::primitive::u32;
                    pub type LeaseEndingBlock = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CompleteInitialization {
                    const PALLET: &'static str = "Crowdloan";
                    const CALL: &'static str = "complete_initialization";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Initialize the reward distribution storage. It shortcuts whenever an error is found"]
                #[doc = "Sets crowdloan allocation for:"]
                #[doc = "- current round of crowdloan - if it has not been completed (`[Pallet::<T>::complete_initialization]`)"]
                #[doc = "- following round of crowdloan rewards payment if previous one has been already"]
                #[doc = "completed"]
                pub struct SetCrowdloanAllocation {
                    pub crowdloan_allocation_amount:
                        set_crowdloan_allocation::CrowdloanAllocationAmount,
                }
                pub mod set_crowdloan_allocation {
                    use super::runtime_types;
                    pub type CrowdloanAllocationAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCrowdloanAllocation {
                    const PALLET: &'static str = "Crowdloan";
                    const CALL: &'static str = "set_crowdloan_allocation";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Initialize the reward distribution storage. It shortcuts whenever an error is found"]
                #[doc = "This does not enforce any checks other than making sure we dont go over funds"]
                #[doc = "complete_initialization should perform any additional"]
                pub struct InitializeRewardVec {
                    pub rewards: initialize_reward_vec::Rewards,
                }
                pub mod initialize_reward_vec {
                    use super::runtime_types;
                    pub type Rewards = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                        ::core::primitive::u128,
                    )>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for InitializeRewardVec {
                    const PALLET: &'static str = "Crowdloan";
                    const CALL: &'static str = "initialize_reward_vec";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Associate a native rewards_destination identity with a crowdloan contribution."]
                #[doc = ""]
                #[doc = "The caller needs to provide the unassociated relay account and a proof to succeed"]
                #[doc = "with the association"]
                #[doc = "The proof is nothing but a signature over the reward_address using the relay keys"]
                pub fn associate_native_identity(
                    &self,
                    reward_account: types::associate_native_identity::RewardAccount,
                    relay_account: types::associate_native_identity::RelayAccount,
                    proof: types::associate_native_identity::Proof,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::AssociateNativeIdentity,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Crowdloan",
                        "associate_native_identity",
                        types::AssociateNativeIdentity {
                            reward_account,
                            relay_account,
                            proof,
                        },
                        [
                            165u8, 11u8, 5u8, 65u8, 244u8, 51u8, 189u8, 145u8, 59u8, 79u8, 102u8,
                            127u8, 224u8, 51u8, 187u8, 180u8, 208u8, 215u8, 241u8, 86u8, 18u8,
                            106u8, 46u8, 2u8, 122u8, 93u8, 84u8, 52u8, 46u8, 226u8, 139u8, 10u8,
                        ],
                    )
                }
                #[doc = "Change reward account by submitting proofs from relay accounts"]
                #[doc = ""]
                #[doc = "The number of valid proofs needs to be bigger than 'RewardAddressRelayVoteThreshold'"]
                #[doc = "The account to be changed needs to be submitted as 'previous_account'"]
                #[doc = "Origin must be RewardAddressChangeOrigin"]
                pub fn change_association_with_relay_keys(
                    &self,
                    reward_account: types::change_association_with_relay_keys::RewardAccount,
                    previous_account: types::change_association_with_relay_keys::PreviousAccount,
                    proofs: types::change_association_with_relay_keys::Proofs,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ChangeAssociationWithRelayKeys,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Crowdloan",
                        "change_association_with_relay_keys",
                        types::ChangeAssociationWithRelayKeys {
                            reward_account,
                            previous_account,
                            proofs,
                        },
                        [
                            170u8, 61u8, 204u8, 137u8, 217u8, 49u8, 96u8, 174u8, 68u8, 183u8, 60u8,
                            210u8, 116u8, 1u8, 131u8, 82u8, 39u8, 61u8, 131u8, 204u8, 212u8, 2u8,
                            88u8, 126u8, 132u8, 16u8, 115u8, 140u8, 63u8, 43u8, 64u8, 126u8,
                        ],
                    )
                }
                #[doc = "Collect rewards from particular crowdloan."]
                #[doc = "If crowdloan_id is not set current [`CrowdloanId`] id will be used."]
                #[doc = "Caller is instantly rewarded with [`InitializationPayment`] % of available rewards,"]
                #[doc = "remaining funds are locked according to schedule(using `pallet_mangata_vesting` configured"]
                #[doc = "by [`Pallet::<T>::complete_initialization`] call."]
                pub fn claim(
                    &self,
                    crowdloan_id: types::claim::CrowdloanId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Claim>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Crowdloan",
                        "claim",
                        types::Claim { crowdloan_id },
                        [
                            51u8, 158u8, 122u8, 75u8, 50u8, 170u8, 110u8, 101u8, 194u8, 77u8, 52u8,
                            74u8, 124u8, 222u8, 96u8, 238u8, 209u8, 253u8, 132u8, 136u8, 183u8,
                            165u8, 29u8, 132u8, 212u8, 246u8, 166u8, 177u8, 220u8, 217u8, 194u8,
                            16u8,
                        ],
                    )
                }
                #[doc = "Update reward address, proving that the caller owns the current native key"]
                pub fn update_reward_address(
                    &self,
                    new_reward_account: types::update_reward_address::NewRewardAccount,
                    crowdloan_id: types::update_reward_address::CrowdloanId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateRewardAddress>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Crowdloan",
                        "update_reward_address",
                        types::UpdateRewardAddress {
                            new_reward_account,
                            crowdloan_id,
                        },
                        [
                            119u8, 208u8, 2u8, 23u8, 126u8, 212u8, 144u8, 184u8, 92u8, 164u8,
                            206u8, 56u8, 116u8, 180u8, 105u8, 134u8, 246u8, 150u8, 249u8, 94u8,
                            73u8, 114u8, 198u8, 81u8, 90u8, 50u8, 66u8, 63u8, 89u8, 158u8, 68u8,
                            168u8,
                        ],
                    )
                }
                #[doc = "This extrinsic completes the initialization if some checks are fullfiled. These checks are:"]
                #[doc = " -The reward contribution money matches the crowdloan pot"]
                #[doc = " -The end vesting block is higher than the init vesting block"]
                #[doc = " -The initialization has not complete yet"]
                pub fn complete_initialization(
                    &self,
                    lease_start_block: types::complete_initialization::LeaseStartBlock,
                    lease_ending_block: types::complete_initialization::LeaseEndingBlock,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::CompleteInitialization,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Crowdloan",
                        "complete_initialization",
                        types::CompleteInitialization {
                            lease_start_block,
                            lease_ending_block,
                        },
                        [
                            209u8, 255u8, 85u8, 53u8, 211u8, 35u8, 224u8, 124u8, 109u8, 208u8,
                            138u8, 223u8, 254u8, 32u8, 213u8, 67u8, 91u8, 168u8, 121u8, 107u8,
                            170u8, 99u8, 158u8, 225u8, 185u8, 120u8, 57u8, 176u8, 161u8, 239u8,
                            30u8, 202u8,
                        ],
                    )
                }
                #[doc = "Initialize the reward distribution storage. It shortcuts whenever an error is found"]
                #[doc = "Sets crowdloan allocation for:"]
                #[doc = "- current round of crowdloan - if it has not been completed (`[Pallet::<T>::complete_initialization]`)"]
                #[doc = "- following round of crowdloan rewards payment if previous one has been already"]
                #[doc = "completed"]
                pub fn set_crowdloan_allocation(
                    &self,
                    crowdloan_allocation_amount : types :: set_crowdloan_allocation :: CrowdloanAllocationAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetCrowdloanAllocation,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Crowdloan",
                        "set_crowdloan_allocation",
                        types::SetCrowdloanAllocation {
                            crowdloan_allocation_amount,
                        },
                        [
                            226u8, 80u8, 89u8, 69u8, 51u8, 120u8, 34u8, 94u8, 63u8, 71u8, 47u8,
                            29u8, 169u8, 66u8, 42u8, 3u8, 213u8, 231u8, 200u8, 105u8, 83u8, 7u8,
                            234u8, 14u8, 97u8, 28u8, 144u8, 164u8, 27u8, 167u8, 77u8, 152u8,
                        ],
                    )
                }
                #[doc = "Initialize the reward distribution storage. It shortcuts whenever an error is found"]
                #[doc = "This does not enforce any checks other than making sure we dont go over funds"]
                #[doc = "complete_initialization should perform any additional"]
                pub fn initialize_reward_vec(
                    &self,
                    rewards: types::initialize_reward_vec::Rewards,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::InitializeRewardVec>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Crowdloan",
                        "initialize_reward_vec",
                        types::InitializeRewardVec { rewards },
                        [
                            16u8, 98u8, 174u8, 207u8, 154u8, 107u8, 25u8, 83u8, 177u8, 129u8,
                            243u8, 17u8, 86u8, 240u8, 67u8, 94u8, 212u8, 7u8, 29u8, 222u8, 10u8,
                            32u8, 45u8, 132u8, 118u8, 190u8, 45u8, 240u8, 248u8, 72u8, 142u8, 62u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_crowdloan_rewards::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The initial payment of InitializationPayment % was paid"]
            pub struct InitialPaymentMade(
                pub initial_payment_made::Field0,
                pub initial_payment_made::Field1,
            );
            pub mod initial_payment_made {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InitialPaymentMade {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "InitialPaymentMade";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Someone has proven they made a contribution and associated a native identity with it."]
            #[doc = "Data is the relay account,  native account and the total amount of _rewards_ that will be paid"]
            pub struct NativeIdentityAssociated(
                pub native_identity_associated::Field0,
                pub native_identity_associated::Field1,
                pub native_identity_associated::Field2,
            );
            pub mod native_identity_associated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NativeIdentityAssociated {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "NativeIdentityAssociated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A contributor has claimed some rewards."]
            #[doc = "Data is the account getting paid and the amount of rewards paid."]
            pub struct RewardsPaid(pub rewards_paid::Field0, pub rewards_paid::Field1);
            pub mod rewards_paid {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RewardsPaid {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "RewardsPaid";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A contributor has updated the reward address."]
            pub struct RewardAddressUpdated(
                pub reward_address_updated::Field0,
                pub reward_address_updated::Field1,
            );
            pub mod reward_address_updated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RewardAddressUpdated {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "RewardAddressUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "When initializing the reward vec an already initialized account was found"]
            pub struct InitializedAlreadyInitializedAccount(
                pub initialized_already_initialized_account::Field0,
                pub initialized_already_initialized_account::Field1,
                pub initialized_already_initialized_account::Field2,
            );
            pub mod initialized_already_initialized_account {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 =
                    ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InitializedAlreadyInitializedAccount {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "InitializedAlreadyInitializedAccount";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "When initializing the reward vec an already initialized account was found"]
            pub struct InitializedAccountWithNotEnoughContribution(
                pub initialized_account_with_not_enough_contribution::Field0,
                pub initialized_account_with_not_enough_contribution::Field1,
                pub initialized_account_with_not_enough_contribution::Field2,
            );
            pub mod initialized_account_with_not_enough_contribution {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 =
                    ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for InitializedAccountWithNotEnoughContribution {
                const PALLET: &'static str = "Crowdloan";
                const EVENT: &'static str = "InitializedAccountWithNotEnoughContribution";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod crowdloan_allocation {
                    use super::runtime_types;
                    pub type CrowdloanAllocation = ::core::primitive::u128;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod crowdloan_id {
                    use super::runtime_types;
                    pub type CrowdloanId = ::core::primitive::u32;
                }
                pub mod accounts_payable {
                    use super::runtime_types;
                    pub type AccountsPayable =
                        runtime_types::pallet_crowdloan_rewards::pallet::RewardInfo;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod crowdloan_period {
                    use super::runtime_types;
                    pub type CrowdloanPeriod = (::core::primitive::u32, ::core::primitive::u32);
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod claimed_relay_chain_ids {
                    use super::runtime_types;
                    pub type ClaimedRelayChainIds = ();
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod unassociated_contributions {
                    use super::runtime_types;
                    pub type UnassociatedContributions =
                        runtime_types::pallet_crowdloan_rewards::pallet::RewardInfo;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod initialized {
                    use super::runtime_types;
                    pub type Initialized = ::core::primitive::bool;
                }
                pub mod initialized_reward_amount {
                    use super::runtime_types;
                    pub type InitializedRewardAmount = ::core::primitive::u128;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod total_contributors {
                    use super::runtime_types;
                    pub type TotalContributors = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn crowdloan_allocation_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::crowdloan_allocation::CrowdloanAllocation,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "CrowdloanAllocation",
                        (),
                        [
                            52u8, 93u8, 8u8, 8u8, 0u8, 239u8, 161u8, 8u8, 36u8, 65u8, 123u8, 225u8,
                            121u8, 108u8, 102u8, 109u8, 82u8, 152u8, 216u8, 207u8, 64u8, 192u8,
                            150u8, 128u8, 251u8, 60u8, 59u8, 227u8, 112u8, 49u8, 158u8, 151u8,
                        ],
                    )
                }
                pub fn crowdloan_allocation(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::crowdloan_allocation::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::crowdloan_allocation::Param0,
                    >,
                    types::crowdloan_allocation::CrowdloanAllocation,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "CrowdloanAllocation",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            52u8, 93u8, 8u8, 8u8, 0u8, 239u8, 161u8, 8u8, 36u8, 65u8, 123u8, 225u8,
                            121u8, 108u8, 102u8, 109u8, 82u8, 152u8, 216u8, 207u8, 64u8, 192u8,
                            150u8, 128u8, 251u8, 60u8, 59u8, 227u8, 112u8, 49u8, 158u8, 151u8,
                        ],
                    )
                }
                #[doc = " Id of current crowdloan rewards distribution, automatically incremented by"]
                #[doc = " [`Pallet::<T>::complete_initialization`]"]
                pub fn crowdloan_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::crowdloan_id::CrowdloanId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "CrowdloanId",
                        (),
                        [
                            11u8, 154u8, 155u8, 202u8, 49u8, 62u8, 11u8, 105u8, 91u8, 161u8, 189u8,
                            170u8, 55u8, 152u8, 43u8, 140u8, 103u8, 124u8, 68u8, 37u8, 252u8,
                            119u8, 121u8, 231u8, 200u8, 198u8, 157u8, 243u8, 147u8, 103u8, 68u8,
                            203u8,
                        ],
                    )
                }
                pub fn accounts_payable_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::accounts_payable::AccountsPayable,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "AccountsPayable",
                        (),
                        [
                            58u8, 57u8, 72u8, 25u8, 81u8, 30u8, 218u8, 247u8, 124u8, 186u8, 140u8,
                            237u8, 137u8, 70u8, 206u8, 245u8, 63u8, 111u8, 96u8, 9u8, 199u8, 69u8,
                            208u8, 92u8, 238u8, 71u8, 21u8, 247u8, 12u8, 29u8, 19u8, 64u8,
                        ],
                    )
                }
                pub fn accounts_payable_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::accounts_payable::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::accounts_payable::Param0,
                    >,
                    types::accounts_payable::AccountsPayable,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "AccountsPayable",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            58u8, 57u8, 72u8, 25u8, 81u8, 30u8, 218u8, 247u8, 124u8, 186u8, 140u8,
                            237u8, 137u8, 70u8, 206u8, 245u8, 63u8, 111u8, 96u8, 9u8, 199u8, 69u8,
                            208u8, 92u8, 238u8, 71u8, 21u8, 247u8, 12u8, 29u8, 19u8, 64u8,
                        ],
                    )
                }
                pub fn accounts_payable(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::accounts_payable::Param0>,
                    _1: impl ::core::borrow::Borrow<types::accounts_payable::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::accounts_payable::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::accounts_payable::Param1,
                        >,
                    ),
                    types::accounts_payable::AccountsPayable,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "AccountsPayable",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            58u8, 57u8, 72u8, 25u8, 81u8, 30u8, 218u8, 247u8, 124u8, 186u8, 140u8,
                            237u8, 137u8, 70u8, 206u8, 245u8, 63u8, 111u8, 96u8, 9u8, 199u8, 69u8,
                            208u8, 92u8, 238u8, 71u8, 21u8, 247u8, 12u8, 29u8, 19u8, 64u8,
                        ],
                    )
                }
                pub fn crowdloan_period_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::crowdloan_period::CrowdloanPeriod,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "CrowdloanPeriod",
                        (),
                        [
                            125u8, 140u8, 136u8, 124u8, 181u8, 89u8, 129u8, 60u8, 71u8, 177u8,
                            116u8, 70u8, 39u8, 93u8, 42u8, 61u8, 227u8, 67u8, 63u8, 186u8, 136u8,
                            85u8, 80u8, 2u8, 95u8, 29u8, 191u8, 211u8, 181u8, 31u8, 61u8, 110u8,
                        ],
                    )
                }
                pub fn crowdloan_period(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::crowdloan_period::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::crowdloan_period::Param0,
                    >,
                    types::crowdloan_period::CrowdloanPeriod,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "CrowdloanPeriod",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            125u8, 140u8, 136u8, 124u8, 181u8, 89u8, 129u8, 60u8, 71u8, 177u8,
                            116u8, 70u8, 39u8, 93u8, 42u8, 61u8, 227u8, 67u8, 63u8, 186u8, 136u8,
                            85u8, 80u8, 2u8, 95u8, 29u8, 191u8, 211u8, 181u8, 31u8, 61u8, 110u8,
                        ],
                    )
                }
                pub fn claimed_relay_chain_ids_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::claimed_relay_chain_ids::ClaimedRelayChainIds,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "ClaimedRelayChainIds",
                        (),
                        [
                            243u8, 224u8, 135u8, 63u8, 51u8, 89u8, 246u8, 0u8, 35u8, 178u8, 182u8,
                            243u8, 118u8, 113u8, 53u8, 107u8, 4u8, 244u8, 243u8, 252u8, 242u8,
                            228u8, 149u8, 194u8, 52u8, 138u8, 248u8, 164u8, 177u8, 169u8, 6u8,
                            151u8,
                        ],
                    )
                }
                pub fn claimed_relay_chain_ids_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::claimed_relay_chain_ids::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::claimed_relay_chain_ids::Param0,
                    >,
                    types::claimed_relay_chain_ids::ClaimedRelayChainIds,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "ClaimedRelayChainIds",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            243u8, 224u8, 135u8, 63u8, 51u8, 89u8, 246u8, 0u8, 35u8, 178u8, 182u8,
                            243u8, 118u8, 113u8, 53u8, 107u8, 4u8, 244u8, 243u8, 252u8, 242u8,
                            228u8, 149u8, 194u8, 52u8, 138u8, 248u8, 164u8, 177u8, 169u8, 6u8,
                            151u8,
                        ],
                    )
                }
                pub fn claimed_relay_chain_ids(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::claimed_relay_chain_ids::Param0>,
                    _1: impl ::core::borrow::Borrow<types::claimed_relay_chain_ids::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::claimed_relay_chain_ids::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::claimed_relay_chain_ids::Param1,
                        >,
                    ),
                    types::claimed_relay_chain_ids::ClaimedRelayChainIds,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "ClaimedRelayChainIds",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            243u8, 224u8, 135u8, 63u8, 51u8, 89u8, 246u8, 0u8, 35u8, 178u8, 182u8,
                            243u8, 118u8, 113u8, 53u8, 107u8, 4u8, 244u8, 243u8, 252u8, 242u8,
                            228u8, 149u8, 194u8, 52u8, 138u8, 248u8, 164u8, 177u8, 169u8, 6u8,
                            151u8,
                        ],
                    )
                }
                pub fn unassociated_contributions_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::unassociated_contributions::UnassociatedContributions,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "UnassociatedContributions",
                        (),
                        [
                            222u8, 158u8, 203u8, 180u8, 225u8, 67u8, 225u8, 100u8, 6u8, 48u8,
                            225u8, 123u8, 235u8, 195u8, 196u8, 131u8, 64u8, 28u8, 245u8, 113u8,
                            22u8, 252u8, 104u8, 196u8, 107u8, 213u8, 239u8, 252u8, 74u8, 134u8,
                            11u8, 177u8,
                        ],
                    )
                }
                pub fn unassociated_contributions_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::unassociated_contributions::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::unassociated_contributions::Param0,
                    >,
                    types::unassociated_contributions::UnassociatedContributions,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "UnassociatedContributions",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            222u8, 158u8, 203u8, 180u8, 225u8, 67u8, 225u8, 100u8, 6u8, 48u8,
                            225u8, 123u8, 235u8, 195u8, 196u8, 131u8, 64u8, 28u8, 245u8, 113u8,
                            22u8, 252u8, 104u8, 196u8, 107u8, 213u8, 239u8, 252u8, 74u8, 134u8,
                            11u8, 177u8,
                        ],
                    )
                }
                pub fn unassociated_contributions(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::unassociated_contributions::Param0>,
                    _1: impl ::core::borrow::Borrow<types::unassociated_contributions::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::unassociated_contributions::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::unassociated_contributions::Param1,
                        >,
                    ),
                    types::unassociated_contributions::UnassociatedContributions,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "UnassociatedContributions",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            222u8, 158u8, 203u8, 180u8, 225u8, 67u8, 225u8, 100u8, 6u8, 48u8,
                            225u8, 123u8, 235u8, 195u8, 196u8, 131u8, 64u8, 28u8, 245u8, 113u8,
                            22u8, 252u8, 104u8, 196u8, 107u8, 213u8, 239u8, 252u8, 74u8, 134u8,
                            11u8, 177u8,
                        ],
                    )
                }
                pub fn initialized(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::initialized::Initialized,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "Initialized",
                        (),
                        [
                            113u8, 248u8, 192u8, 99u8, 251u8, 135u8, 33u8, 245u8, 102u8, 117u8,
                            5u8, 231u8, 111u8, 153u8, 197u8, 250u8, 144u8, 110u8, 49u8, 205u8,
                            112u8, 23u8, 210u8, 167u8, 172u8, 43u8, 65u8, 117u8, 230u8, 153u8,
                            58u8, 138u8,
                        ],
                    )
                }
                #[doc = " Total initialized amount so far. We store this to make pallet funds == contributors reward"]
                #[doc = " check easier and more efficient"]
                pub fn initialized_reward_amount_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::initialized_reward_amount::InitializedRewardAmount,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "InitializedRewardAmount",
                        (),
                        [
                            166u8, 80u8, 147u8, 50u8, 218u8, 54u8, 175u8, 249u8, 253u8, 170u8,
                            159u8, 179u8, 220u8, 152u8, 198u8, 65u8, 151u8, 174u8, 94u8, 234u8,
                            91u8, 235u8, 18u8, 81u8, 207u8, 224u8, 204u8, 74u8, 139u8, 213u8, 65u8,
                            215u8,
                        ],
                    )
                }
                #[doc = " Total initialized amount so far. We store this to make pallet funds == contributors reward"]
                #[doc = " check easier and more efficient"]
                pub fn initialized_reward_amount(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::initialized_reward_amount::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::initialized_reward_amount::Param0,
                    >,
                    types::initialized_reward_amount::InitializedRewardAmount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "InitializedRewardAmount",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            166u8, 80u8, 147u8, 50u8, 218u8, 54u8, 175u8, 249u8, 253u8, 170u8,
                            159u8, 179u8, 220u8, 152u8, 198u8, 65u8, 151u8, 174u8, 94u8, 234u8,
                            91u8, 235u8, 18u8, 81u8, 207u8, 224u8, 204u8, 74u8, 139u8, 213u8, 65u8,
                            215u8,
                        ],
                    )
                }
                #[doc = " Total number of contributors to aid hinting benchmarking"]
                pub fn total_contributors_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_contributors::TotalContributors,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "TotalContributors",
                        (),
                        [
                            208u8, 234u8, 32u8, 183u8, 164u8, 197u8, 176u8, 213u8, 78u8, 115u8,
                            138u8, 10u8, 215u8, 40u8, 79u8, 188u8, 216u8, 71u8, 33u8, 118u8, 153u8,
                            160u8, 113u8, 45u8, 186u8, 176u8, 143u8, 115u8, 15u8, 127u8, 140u8,
                            135u8,
                        ],
                    )
                }
                #[doc = " Total number of contributors to aid hinting benchmarking"]
                pub fn total_contributors(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::total_contributors::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::total_contributors::Param0,
                    >,
                    types::total_contributors::TotalContributors,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Crowdloan",
                        "TotalContributors",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            208u8, 234u8, 32u8, 183u8, 164u8, 197u8, 176u8, 213u8, 78u8, 115u8,
                            138u8, 10u8, 215u8, 40u8, 79u8, 188u8, 216u8, 71u8, 33u8, 118u8, 153u8,
                            160u8, 113u8, 45u8, 186u8, 176u8, 143u8, 115u8, 15u8, 127u8, 140u8,
                            135u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Percentage to be payed at initialization"]
                pub fn initialization_payment(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Perbill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Crowdloan",
                        "InitializationPayment",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                pub fn max_init_contributors(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Crowdloan",
                        "MaxInitContributors",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " A fraction representing the percentage of proofs"]
                #[doc = " that need to be presented to change a reward address through the relay keys"]
                pub fn reward_address_relay_vote_threshold(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Perbill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Crowdloan",
                        "RewardAddressRelayVoteThreshold",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " MGA token Id"]
                pub fn native_token_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Crowdloan",
                        "NativeTokenId",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Network Identifier to be appended into the signatures for reward address change/association"]
                #[doc = " Prevents replay attacks from one network to the other"]
                pub fn signature_network_identifier(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Crowdloan",
                        "SignatureNetworkIdentifier",
                        [
                            64u8, 190u8, 244u8, 122u8, 87u8, 182u8, 217u8, 16u8, 55u8, 223u8,
                            128u8, 6u8, 112u8, 30u8, 236u8, 222u8, 153u8, 53u8, 247u8, 102u8,
                            196u8, 31u8, 6u8, 186u8, 251u8, 209u8, 114u8, 125u8, 213u8, 222u8,
                            240u8, 8u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod issuance {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_issuance::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_issuance::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct InitIssuanceConfig;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for InitIssuanceConfig {
                    const PALLET: &'static str = "Issuance";
                    const CALL: &'static str = "init_issuance_config";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FinalizeTge;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for FinalizeTge {
                    const PALLET: &'static str = "Issuance";
                    const CALL: &'static str = "finalize_tge";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ExecuteTge {
                    pub tge_infos: execute_tge::TgeInfos,
                }
                pub mod execute_tge {
                    use super::runtime_types;
                    pub type TgeInfos = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::pallet_issuance::TgeInfo<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                        >,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExecuteTge {
                    const PALLET: &'static str = "Issuance";
                    const CALL: &'static str = "execute_tge";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn init_issuance_config(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::InitIssuanceConfig>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Issuance",
                        "init_issuance_config",
                        types::InitIssuanceConfig {},
                        [
                            114u8, 254u8, 12u8, 177u8, 110u8, 157u8, 66u8, 46u8, 186u8, 249u8,
                            129u8, 54u8, 205u8, 161u8, 150u8, 144u8, 96u8, 209u8, 96u8, 162u8,
                            125u8, 191u8, 3u8, 160u8, 75u8, 126u8, 38u8, 54u8, 79u8, 57u8, 7u8,
                            128u8,
                        ],
                    )
                }
                pub fn finalize_tge(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::FinalizeTge>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Issuance",
                        "finalize_tge",
                        types::FinalizeTge {},
                        [
                            71u8, 78u8, 122u8, 57u8, 33u8, 63u8, 52u8, 144u8, 157u8, 208u8, 186u8,
                            72u8, 175u8, 131u8, 111u8, 149u8, 254u8, 191u8, 39u8, 79u8, 12u8,
                            103u8, 234u8, 216u8, 33u8, 39u8, 225u8, 234u8, 36u8, 123u8, 231u8,
                            74u8,
                        ],
                    )
                }
                pub fn execute_tge(
                    &self,
                    tge_infos: types::execute_tge::TgeInfos,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ExecuteTge>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Issuance",
                        "execute_tge",
                        types::ExecuteTge { tge_infos },
                        [
                            197u8, 28u8, 181u8, 228u8, 41u8, 85u8, 77u8, 216u8, 94u8, 201u8, 241u8,
                            93u8, 233u8, 126u8, 238u8, 99u8, 217u8, 134u8, 88u8, 210u8, 197u8,
                            125u8, 120u8, 218u8, 227u8, 51u8, 130u8, 177u8, 170u8, 233u8, 220u8,
                            61u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_issuance::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Issuance for upcoming session issued"]
            pub struct SessionIssuanceIssued(
                pub session_issuance_issued::Field0,
                pub session_issuance_issued::Field1,
                pub session_issuance_issued::Field2,
                pub session_issuance_issued::Field3,
            );
            pub mod session_issuance_issued {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SessionIssuanceIssued {
                const PALLET: &'static str = "Issuance";
                const EVENT: &'static str = "SessionIssuanceIssued";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Issuance for upcoming session calculated and recorded"]
            pub struct SessionIssuanceRecorded(
                pub session_issuance_recorded::Field0,
                pub session_issuance_recorded::Field1,
                pub session_issuance_recorded::Field2,
                pub session_issuance_recorded::Field3,
            );
            pub mod session_issuance_recorded {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SessionIssuanceRecorded {
                const PALLET: &'static str = "Issuance";
                const EVENT: &'static str = "SessionIssuanceRecorded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Issuance configuration has been finalized"]
            pub struct IssuanceConfigInitialized(pub issuance_config_initialized::Field0);
            pub mod issuance_config_initialized {
                use super::runtime_types;
                pub type Field0 =
                    runtime_types::pallet_issuance::IssuanceInfo<::core::primitive::u128>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for IssuanceConfigInitialized {
                const PALLET: &'static str = "Issuance";
                const EVENT: &'static str = "IssuanceConfigInitialized";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "TGE has been finalized"]
            pub struct TGEFinalized;
            impl ::subxt::ext::subxt_core::events::StaticEvent for TGEFinalized {
                const PALLET: &'static str = "Issuance";
                const EVENT: &'static str = "TGEFinalized";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A TGE instance has failed"]
            pub struct TGEInstanceFailed(pub tge_instance_failed::Field0);
            pub mod tge_instance_failed {
                use super::runtime_types;
                pub type Field0 = runtime_types::pallet_issuance::TgeInfo<
                    runtime_types::sp_runtime::account::AccountId20,
                    ::core::primitive::u128,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TGEInstanceFailed {
                const PALLET: &'static str = "Issuance";
                const EVENT: &'static str = "TGEInstanceFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A TGE instance has succeeded"]
            pub struct TGEInstanceSucceeded(pub tge_instance_succeeded::Field0);
            pub mod tge_instance_succeeded {
                use super::runtime_types;
                pub type Field0 = runtime_types::pallet_issuance::TgeInfo<
                    runtime_types::sp_runtime::account::AccountId20,
                    ::core::primitive::u128,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TGEInstanceSucceeded {
                const PALLET: &'static str = "Issuance";
                const EVENT: &'static str = "TGEInstanceSucceeded";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod issuance_config_store {
                    use super::runtime_types;
                    pub type IssuanceConfigStore =
                        runtime_types::pallet_issuance::IssuanceInfo<::core::primitive::u128>;
                }
                pub mod tge_total {
                    use super::runtime_types;
                    pub type TgeTotal = ::core::primitive::u128;
                }
                pub mod is_tge_finalized {
                    use super::runtime_types;
                    pub type IsTgeFinalized = ::core::primitive::bool;
                }
                pub mod session_issuance {
                    use super::runtime_types;
                    pub type SessionIssuance = ::core::option::Option<(
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    )>;
                    pub type Param0 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn issuance_config_store(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::issuance_config_store::IssuanceConfigStore,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Issuance",
                        "IssuanceConfigStore",
                        (),
                        [
                            92u8, 167u8, 221u8, 37u8, 254u8, 158u8, 126u8, 88u8, 205u8, 0u8, 3u8,
                            17u8, 146u8, 40u8, 80u8, 232u8, 51u8, 177u8, 140u8, 216u8, 249u8,
                            220u8, 195u8, 59u8, 19u8, 227u8, 105u8, 5u8, 13u8, 63u8, 198u8, 76u8,
                        ],
                    )
                }
                pub fn tge_total(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::tge_total::TgeTotal,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Issuance",
                        "TGETotal",
                        (),
                        [
                            111u8, 103u8, 125u8, 68u8, 30u8, 26u8, 80u8, 118u8, 138u8, 229u8,
                            228u8, 34u8, 76u8, 227u8, 150u8, 149u8, 129u8, 119u8, 128u8, 212u8,
                            106u8, 232u8, 217u8, 69u8, 136u8, 70u8, 218u8, 29u8, 199u8, 137u8,
                            198u8, 247u8,
                        ],
                    )
                }
                pub fn is_tge_finalized(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::is_tge_finalized::IsTgeFinalized,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Issuance",
                        "IsTGEFinalized",
                        (),
                        [
                            206u8, 217u8, 219u8, 93u8, 97u8, 145u8, 86u8, 244u8, 14u8, 152u8, 65u8,
                            197u8, 129u8, 146u8, 180u8, 185u8, 245u8, 147u8, 50u8, 79u8, 156u8,
                            226u8, 110u8, 109u8, 201u8, 49u8, 238u8, 159u8, 47u8, 212u8, 72u8,
                            55u8,
                        ],
                    )
                }
                pub fn session_issuance_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::session_issuance::SessionIssuance,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Issuance",
                        "SessionIssuance",
                        (),
                        [
                            190u8, 16u8, 134u8, 103u8, 7u8, 56u8, 218u8, 11u8, 228u8, 63u8, 9u8,
                            68u8, 100u8, 101u8, 187u8, 251u8, 27u8, 66u8, 52u8, 9u8, 249u8, 220u8,
                            191u8, 110u8, 91u8, 191u8, 188u8, 212u8, 148u8, 246u8, 115u8, 241u8,
                        ],
                    )
                }
                pub fn session_issuance(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::session_issuance::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::session_issuance::Param0,
                    >,
                    types::session_issuance::SessionIssuance,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Issuance",
                        "SessionIssuance",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            190u8, 16u8, 134u8, 103u8, 7u8, 56u8, 218u8, 11u8, 228u8, 63u8, 9u8,
                            68u8, 100u8, 101u8, 187u8, 251u8, 27u8, 66u8, 52u8, 9u8, 249u8, 220u8,
                            191u8, 110u8, 91u8, 191u8, 188u8, 212u8, 148u8, 246u8, 115u8, 241u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Number of blocks per session/round"]
                pub fn blocks_per_round(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "BlocksPerRound",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of sessions to store issuance history for"]
                pub fn history_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "HistoryLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The account id that holds the liquidity mining issuance"]
                pub fn liquidity_mining_issuance_vault(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_runtime::account::AccountId20,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "LiquidityMiningIssuanceVault",
                        [
                            184u8, 103u8, 76u8, 37u8, 218u8, 155u8, 125u8, 78u8, 138u8, 122u8,
                            255u8, 132u8, 124u8, 68u8, 65u8, 163u8, 97u8, 77u8, 80u8, 33u8, 69u8,
                            55u8, 69u8, 230u8, 83u8, 135u8, 254u8, 221u8, 222u8, 177u8, 10u8,
                            189u8,
                        ],
                    )
                }
                #[doc = " The account id that holds the staking issuance"]
                pub fn staking_issuance_vault(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_runtime::account::AccountId20,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "StakingIssuanceVault",
                        [
                            184u8, 103u8, 76u8, 37u8, 218u8, 155u8, 125u8, 78u8, 138u8, 122u8,
                            255u8, 132u8, 124u8, 68u8, 65u8, 163u8, 97u8, 77u8, 80u8, 33u8, 69u8,
                            55u8, 69u8, 230u8, 83u8, 135u8, 254u8, 221u8, 222u8, 177u8, 10u8,
                            189u8,
                        ],
                    )
                }
                #[doc = " The account id that holds the sequencers issuance"]
                pub fn sequencers_issuance_vault(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_runtime::account::AccountId20,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "SequencersIssuanceVault",
                        [
                            184u8, 103u8, 76u8, 37u8, 218u8, 155u8, 125u8, 78u8, 138u8, 122u8,
                            255u8, 132u8, 124u8, 68u8, 65u8, 163u8, 97u8, 77u8, 80u8, 33u8, 69u8,
                            55u8, 69u8, 230u8, 83u8, 135u8, 254u8, 221u8, 222u8, 177u8, 10u8,
                            189u8,
                        ],
                    )
                }
                #[doc = " The total mga allocated for crowdloans"]
                pub fn total_crowdloan_allocation(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "TotalCrowdloanAllocation",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of Mangata tokens"]
                pub fn immediate_tge_release_percent(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Percent,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "ImmediateTGEReleasePercent",
                        [
                            40u8, 171u8, 69u8, 196u8, 34u8, 184u8, 50u8, 128u8, 139u8, 192u8, 63u8,
                            231u8, 249u8, 200u8, 252u8, 73u8, 244u8, 170u8, 51u8, 177u8, 106u8,
                            47u8, 114u8, 234u8, 84u8, 104u8, 62u8, 118u8, 227u8, 50u8, 225u8,
                            122u8,
                        ],
                    )
                }
                #[doc = " The maximum amount of Mangata tokens"]
                pub fn issuance_cap(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "IssuanceCap",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The number of blocks the issuance is linear"]
                pub fn linear_issuance_blocks(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "LinearIssuanceBlocks",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The split of issuance for liquidity mining rewards"]
                pub fn liquidity_mining_split(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Perbill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "LiquidityMiningSplit",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The split of issuance for staking rewards"]
                pub fn staking_split(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Perbill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "StakingSplit",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The split of issuance for sequencers rewards"]
                pub fn sequencers_split(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Perbill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "SequencersSplit",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The number of blocks the tge tokens vest for"]
                pub fn tge_release_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "TGEReleasePeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The block at which the tge tokens begin to vest"]
                pub fn tge_release_begin(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Issuance",
                        "TGEReleaseBegin",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod multi_purpose_liquidity {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_multipurpose_liquidity::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_multipurpose_liquidity::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Migrates vested liquidity tokens from Vested pallet to MPL. Information about"]
                #[doc = "unlock schedule is preserved, so whenever one decides to move tokens back to"]
                #[doc = "Vested pallet tokens can be unlocked."]
                pub struct ReserveVestingLiquidityTokensByVestingIndex { pub liquidity_token_id : reserve_vesting_liquidity_tokens_by_vesting_index :: LiquidityTokenId , pub liquidity_token_vesting_index : reserve_vesting_liquidity_tokens_by_vesting_index :: LiquidityTokenVestingIndex , pub liquidity_token_unlock_some_amount_or_all : reserve_vesting_liquidity_tokens_by_vesting_index :: LiquidityTokenUnlockSomeAmountOrAll , }
                pub mod reserve_vesting_liquidity_tokens_by_vesting_index {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type LiquidityTokenVestingIndex = ::core::primitive::u32;
                    pub type LiquidityTokenUnlockSomeAmountOrAll =
                        ::core::option::Option<::core::primitive::u128>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic
                    for ReserveVestingLiquidityTokensByVestingIndex
                {
                    const PALLET: &'static str = "MultiPurposeLiquidity";
                    const CALL: &'static str = "reserve_vesting_liquidity_tokens_by_vesting_index";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Migrates vested MGX from Vested pallet to MPL. Information about unlock schedule is"]
                #[doc = "preserved, so whenever one decides to move tokens back to Vested pallet tokens can be"]
                #[doc = "unlocked."]
                pub struct ReserveVestingNativeTokensByVestingIndex { pub liquidity_token_vesting_index : reserve_vesting_native_tokens_by_vesting_index :: LiquidityTokenVestingIndex , pub liquidity_token_unlock_some_amount_or_all : reserve_vesting_native_tokens_by_vesting_index :: LiquidityTokenUnlockSomeAmountOrAll , }
                pub mod reserve_vesting_native_tokens_by_vesting_index {
                    use super::runtime_types;
                    pub type LiquidityTokenVestingIndex = ::core::primitive::u32;
                    pub type LiquidityTokenUnlockSomeAmountOrAll =
                        ::core::option::Option<::core::primitive::u128>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic
                    for ReserveVestingNativeTokensByVestingIndex
                {
                    const PALLET: &'static str = "MultiPurposeLiquidity";
                    const CALL: &'static str = "reserve_vesting_native_tokens_by_vesting_index";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ReserveVestingLiquidityTokens {
                    pub liquidity_token_id: reserve_vesting_liquidity_tokens::LiquidityTokenId,
                    pub liquidity_token_amount:
                        reserve_vesting_liquidity_tokens::LiquidityTokenAmount,
                }
                pub mod reserve_vesting_liquidity_tokens {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type LiquidityTokenAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ReserveVestingLiquidityTokens {
                    const PALLET: &'static str = "MultiPurposeLiquidity";
                    const CALL: &'static str = "reserve_vesting_liquidity_tokens";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UnreserveAndRelockInstance {
                    pub liquidity_token_id: unreserve_and_relock_instance::LiquidityTokenId,
                    pub relock_instance_index: unreserve_and_relock_instance::RelockInstanceIndex,
                }
                pub mod unreserve_and_relock_instance {
                    use super::runtime_types;
                    pub type LiquidityTokenId = ::core::primitive::u32;
                    pub type RelockInstanceIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UnreserveAndRelockInstance {
                    const PALLET: &'static str = "MultiPurposeLiquidity";
                    const CALL: &'static str = "unreserve_and_relock_instance";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Migrates vested liquidity tokens from Vested pallet to MPL. Information about"]
                #[doc = "unlock schedule is preserved, so whenever one decides to move tokens back to"]
                #[doc = "Vested pallet tokens can be unlocked."]
                pub fn reserve_vesting_liquidity_tokens_by_vesting_index(
                    &self,
                    liquidity_token_id : types :: reserve_vesting_liquidity_tokens_by_vesting_index :: LiquidityTokenId,
                    liquidity_token_vesting_index : types :: reserve_vesting_liquidity_tokens_by_vesting_index :: LiquidityTokenVestingIndex,
                    liquidity_token_unlock_some_amount_or_all : types :: reserve_vesting_liquidity_tokens_by_vesting_index :: LiquidityTokenUnlockSomeAmountOrAll,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ReserveVestingLiquidityTokensByVestingIndex,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MultiPurposeLiquidity",
                        "reserve_vesting_liquidity_tokens_by_vesting_index",
                        types::ReserveVestingLiquidityTokensByVestingIndex {
                            liquidity_token_id,
                            liquidity_token_vesting_index,
                            liquidity_token_unlock_some_amount_or_all,
                        },
                        [
                            227u8, 159u8, 6u8, 85u8, 209u8, 82u8, 229u8, 150u8, 119u8, 95u8, 148u8,
                            22u8, 146u8, 218u8, 223u8, 146u8, 85u8, 58u8, 154u8, 222u8, 222u8,
                            23u8, 42u8, 82u8, 3u8, 105u8, 162u8, 139u8, 220u8, 32u8, 78u8, 236u8,
                        ],
                    )
                }
                #[doc = "Migrates vested MGX from Vested pallet to MPL. Information about unlock schedule is"]
                #[doc = "preserved, so whenever one decides to move tokens back to Vested pallet tokens can be"]
                #[doc = "unlocked."]
                pub fn reserve_vesting_native_tokens_by_vesting_index(
                    &self,
                    liquidity_token_vesting_index : types :: reserve_vesting_native_tokens_by_vesting_index :: LiquidityTokenVestingIndex,
                    liquidity_token_unlock_some_amount_or_all : types :: reserve_vesting_native_tokens_by_vesting_index :: LiquidityTokenUnlockSomeAmountOrAll,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ReserveVestingNativeTokensByVestingIndex,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MultiPurposeLiquidity",
                        "reserve_vesting_native_tokens_by_vesting_index",
                        types::ReserveVestingNativeTokensByVestingIndex {
                            liquidity_token_vesting_index,
                            liquidity_token_unlock_some_amount_or_all,
                        },
                        [
                            11u8, 154u8, 50u8, 50u8, 121u8, 44u8, 21u8, 156u8, 254u8, 206u8, 1u8,
                            169u8, 80u8, 204u8, 164u8, 53u8, 220u8, 36u8, 147u8, 111u8, 90u8, 91u8,
                            136u8, 64u8, 160u8, 132u8, 91u8, 212u8, 35u8, 153u8, 127u8, 106u8,
                        ],
                    )
                }
                pub fn reserve_vesting_liquidity_tokens(
                    &self,
                    liquidity_token_id: types::reserve_vesting_liquidity_tokens::LiquidityTokenId,
                    liquidity_token_amount : types :: reserve_vesting_liquidity_tokens :: LiquidityTokenAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ReserveVestingLiquidityTokens,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MultiPurposeLiquidity",
                        "reserve_vesting_liquidity_tokens",
                        types::ReserveVestingLiquidityTokens {
                            liquidity_token_id,
                            liquidity_token_amount,
                        },
                        [
                            76u8, 160u8, 113u8, 124u8, 193u8, 76u8, 159u8, 231u8, 15u8, 201u8,
                            237u8, 210u8, 237u8, 87u8, 56u8, 126u8, 62u8, 160u8, 161u8, 252u8,
                            122u8, 136u8, 141u8, 26u8, 152u8, 87u8, 98u8, 50u8, 25u8, 180u8, 85u8,
                            247u8,
                        ],
                    )
                }
                pub fn unreserve_and_relock_instance(
                    &self,
                    liquidity_token_id: types::unreserve_and_relock_instance::LiquidityTokenId,
                    relock_instance_index : types :: unreserve_and_relock_instance :: RelockInstanceIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::UnreserveAndRelockInstance,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "MultiPurposeLiquidity",
                        "unreserve_and_relock_instance",
                        types::UnreserveAndRelockInstance {
                            liquidity_token_id,
                            relock_instance_index,
                        },
                        [
                            178u8, 246u8, 201u8, 88u8, 75u8, 166u8, 53u8, 59u8, 107u8, 223u8,
                            133u8, 126u8, 246u8, 87u8, 11u8, 12u8, 122u8, 193u8, 201u8, 62u8,
                            195u8, 90u8, 175u8, 176u8, 185u8, 165u8, 71u8, 46u8, 207u8, 170u8,
                            225u8, 206u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_multipurpose_liquidity::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct VestingTokensReserved(
                pub vesting_tokens_reserved::Field0,
                pub vesting_tokens_reserved::Field1,
                pub vesting_tokens_reserved::Field2,
            );
            pub mod vesting_tokens_reserved {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VestingTokensReserved {
                const PALLET: &'static str = "MultiPurposeLiquidity";
                const EVENT: &'static str = "VestingTokensReserved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct TokensRelockedFromReserve(
                pub tokens_relocked_from_reserve::Field0,
                pub tokens_relocked_from_reserve::Field1,
                pub tokens_relocked_from_reserve::Field2,
                pub tokens_relocked_from_reserve::Field3,
            );
            pub mod tokens_relocked_from_reserve {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TokensRelockedFromReserve {
                const PALLET: &'static str = "MultiPurposeLiquidity";
                const EVENT: &'static str = "TokensRelockedFromReserve";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod reserve_status {
                    use super::runtime_types;
                    pub type ReserveStatus =
                        runtime_types::pallet_multipurpose_liquidity::pallet::ReserveStatusInfo<
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod relock_status {
                    use super::runtime_types;
                    pub type RelockStatus =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::pallet_multipurpose_liquidity::pallet::RelockStatusInfo<
                                ::core::primitive::u128,
                                ::core::primitive::u32,
                            >,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn reserve_status_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::reserve_status::ReserveStatus,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MultiPurposeLiquidity",
                        "ReserveStatus",
                        (),
                        [
                            190u8, 214u8, 240u8, 31u8, 107u8, 69u8, 208u8, 160u8, 227u8, 25u8,
                            144u8, 13u8, 29u8, 135u8, 125u8, 169u8, 147u8, 20u8, 254u8, 81u8, 9u8,
                            77u8, 209u8, 233u8, 116u8, 193u8, 109u8, 3u8, 20u8, 70u8, 111u8, 191u8,
                        ],
                    )
                }
                pub fn reserve_status_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::reserve_status::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::reserve_status::Param0,
                    >,
                    types::reserve_status::ReserveStatus,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MultiPurposeLiquidity",
                        "ReserveStatus",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            190u8, 214u8, 240u8, 31u8, 107u8, 69u8, 208u8, 160u8, 227u8, 25u8,
                            144u8, 13u8, 29u8, 135u8, 125u8, 169u8, 147u8, 20u8, 254u8, 81u8, 9u8,
                            77u8, 209u8, 233u8, 116u8, 193u8, 109u8, 3u8, 20u8, 70u8, 111u8, 191u8,
                        ],
                    )
                }
                pub fn reserve_status(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::reserve_status::Param0>,
                    _1: impl ::core::borrow::Borrow<types::reserve_status::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::reserve_status::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::reserve_status::Param1,
                        >,
                    ),
                    types::reserve_status::ReserveStatus,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MultiPurposeLiquidity",
                        "ReserveStatus",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            190u8, 214u8, 240u8, 31u8, 107u8, 69u8, 208u8, 160u8, 227u8, 25u8,
                            144u8, 13u8, 29u8, 135u8, 125u8, 169u8, 147u8, 20u8, 254u8, 81u8, 9u8,
                            77u8, 209u8, 233u8, 116u8, 193u8, 109u8, 3u8, 20u8, 70u8, 111u8, 191u8,
                        ],
                    )
                }
                pub fn relock_status_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::relock_status::RelockStatus,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MultiPurposeLiquidity",
                        "RelockStatus",
                        (),
                        [
                            236u8, 228u8, 74u8, 79u8, 46u8, 79u8, 223u8, 159u8, 101u8, 187u8,
                            248u8, 6u8, 44u8, 204u8, 154u8, 66u8, 245u8, 114u8, 156u8, 201u8,
                            154u8, 200u8, 40u8, 105u8, 234u8, 71u8, 8u8, 8u8, 124u8, 80u8, 57u8,
                            70u8,
                        ],
                    )
                }
                pub fn relock_status_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::relock_status::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::relock_status::Param0,
                    >,
                    types::relock_status::RelockStatus,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MultiPurposeLiquidity",
                        "RelockStatus",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            236u8, 228u8, 74u8, 79u8, 46u8, 79u8, 223u8, 159u8, 101u8, 187u8,
                            248u8, 6u8, 44u8, 204u8, 154u8, 66u8, 245u8, 114u8, 156u8, 201u8,
                            154u8, 200u8, 40u8, 105u8, 234u8, 71u8, 8u8, 8u8, 124u8, 80u8, 57u8,
                            70u8,
                        ],
                    )
                }
                pub fn relock_status(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::relock_status::Param0>,
                    _1: impl ::core::borrow::Borrow<types::relock_status::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::relock_status::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::relock_status::Param1,
                        >,
                    ),
                    types::relock_status::RelockStatus,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "MultiPurposeLiquidity",
                        "RelockStatus",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            236u8, 228u8, 74u8, 79u8, 46u8, 79u8, 223u8, 159u8, 101u8, 187u8,
                            248u8, 6u8, 44u8, 204u8, 154u8, 66u8, 245u8, 114u8, 156u8, 201u8,
                            154u8, 200u8, 40u8, 105u8, 234u8, 71u8, 8u8, 8u8, 124u8, 80u8, 57u8,
                            70u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod bootstrap {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_bootstrap::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_bootstrap::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Allows for provisioning one of the tokens from currently bootstrapped pair. Can only be called during:"]
                #[doc = "- [`BootstrapPhase::Whitelist`]"]
                #[doc = "- [`BootstrapPhase::Public`]"]
                #[doc = ""]
                #[doc = "phases."]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = " - `token_id` - id of the token to provision (should be one of the currently bootstraped pair([`ActivePair`]))"]
                #[doc = " - `amount` - amount of the token to provision"]
                pub struct Provision {
                    pub token_id: provision::TokenId,
                    pub amount: provision::Amount,
                }
                pub mod provision {
                    use super::runtime_types;
                    pub type TokenId = ::core::primitive::u32;
                    pub type Amount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Provision {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "provision";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Allows for whitelisting accounts, so they can participate in during whitelist phase. The list of"]
                #[doc = "account is extended with every subsequent call"]
                pub struct WhitelistAccounts {
                    pub accounts: whitelist_accounts::Accounts,
                }
                pub mod whitelist_accounts {
                    use super::runtime_types;
                    pub type Accounts = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for WhitelistAccounts {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "whitelist_accounts";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Used for starting/scheduling new bootstrap"]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `first_token_id` - first token of the tokens pair"]
                #[doc = "- `second_token_id`: second token of the tokens pair"]
                #[doc = "- `ido_start` - number of block when bootstrap will be started (people will be allowed to participate)"]
                #[doc = "- `whitelist_phase_length`: - length of whitelist phase"]
                #[doc = "- `public_phase_lenght`- length of public phase"]
                #[doc = "- `promote_bootstrap_pool`- whether liquidity pool created by bootstrap should be promoted"]
                #[doc = "- `max_first_to_second_ratio` - represented as (numerator,denominator) - Ratio may be used to limit participations of second token id. Ratio between first and second token needs to be held during whole bootstrap. Whenever user tries to participate (using [`Pallet::provision`] extrinsic) the following conditions is check."]
                #[doc = "```ignore"]
                #[doc = "all previous first participations + first token participations             ratio numerator"]
                #[doc = "----------------------------------------------------------------------- <= ------------------"]
                #[doc = "all previous second token participations + second token participations     ratio denominator"]
                #[doc = "```"]
                #[doc = "and if it evaluates to `false` extrinsic will fail."]
                #[doc = ""]
                #[doc = "**Because of above equation only participations with first token of a bootstrap pair are limited!**"]
                #[doc = ""]
                #[doc = "# Examples"]
                #[doc = "Consider:"]
                #[doc = ""]
                #[doc = "- user willing to participate 1000 of first token, when:"]
                #[doc = "\t- ratio set during bootstrap schedule is is set to (1/2)"]
                #[doc = "\t- sum of first token participations - 10_000"]
                #[doc = "\t- sum of second token participations - 20_000"]
                #[doc = ""]
                #[doc = "participation extrinsic will **fail** because ratio condition **is not met**"]
                #[doc = "```ignore"]
                #[doc = "10_000 + 10_000      1"]
                #[doc = "--------------- <=  ---"]
                #[doc = "    20_000           2"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = "- user willing to participate 1000 of first token, when:"]
                #[doc = "\t- ratio set during bootstrap schedule is is set to (1/2)"]
                #[doc = "\t- sum of first token participations - 10_000"]
                #[doc = "\t- sum of second token participations - 40_000"]
                #[doc = ""]
                #[doc = "participation extrinsic will **succeed** because ratio condition **is met**"]
                #[doc = "```ignore"]
                #[doc = "10_000 + 10_000      1"]
                #[doc = "--------------- <=  ---"]
                #[doc = "    40_000           2"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = ""]
                #[doc = "**If one doesn't want to limit participations in any way, ratio should be set to (u128::MAX,0) - then ratio requirements are always met**"]
                #[doc = ""]
                #[doc = "```ignore"]
                #[doc = "all previous first participations + first token participations                u128::MAX"]
                #[doc = "----------------------------------------------------------------------- <= ------------------"]
                #[doc = "all previous second token participations + second token participations            1"]
                #[doc = "```"]
                pub struct ScheduleBootstrap {
                    pub first_token_id: schedule_bootstrap::FirstTokenId,
                    pub second_token_id: schedule_bootstrap::SecondTokenId,
                    pub ido_start: schedule_bootstrap::IdoStart,
                    pub whitelist_phase_length: schedule_bootstrap::WhitelistPhaseLength,
                    pub public_phase_length: schedule_bootstrap::PublicPhaseLength,
                    pub max_first_to_second_ratio: schedule_bootstrap::MaxFirstToSecondRatio,
                    pub promote_bootstrap_pool: schedule_bootstrap::PromoteBootstrapPool,
                }
                pub mod schedule_bootstrap {
                    use super::runtime_types;
                    pub type FirstTokenId = ::core::primitive::u32;
                    pub type SecondTokenId = ::core::primitive::u32;
                    pub type IdoStart = ::core::primitive::u32;
                    pub type WhitelistPhaseLength = ::core::option::Option<::core::primitive::u32>;
                    pub type PublicPhaseLength = ::core::primitive::u32;
                    pub type MaxFirstToSecondRatio =
                        ::core::option::Option<(::core::primitive::u128, ::core::primitive::u128)>;
                    pub type PromoteBootstrapPool = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleBootstrap {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "schedule_bootstrap";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Used to cancel active bootstrap. Can only be called before bootstrap is actually started"]
                pub struct CancelBootstrap;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelBootstrap {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "cancel_bootstrap";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UpdatePromoteBootstrapPool {
                    pub promote_bootstrap_pool: update_promote_bootstrap_pool::PromoteBootstrapPool,
                }
                pub mod update_promote_bootstrap_pool {
                    use super::runtime_types;
                    pub type PromoteBootstrapPool = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdatePromoteBootstrapPool {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "update_promote_bootstrap_pool";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "When bootstrap is in [`BootstrapPhase::Finished`] state user can claim his part of liquidity tokens."]
                pub struct ClaimLiquidityTokens;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimLiquidityTokens {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "claim_liquidity_tokens";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "When bootstrap is in [`BootstrapPhase::Finished`] state user can claim his part of liquidity tokens comparing to `claim_liquidity_tokens` when calling `claim_and_activate_liquidity_tokens` tokens will be automatically activated."]
                pub struct ClaimAndActivateLiquidityTokens;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimAndActivateLiquidityTokens {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "claim_and_activate_liquidity_tokens";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Used to reset Bootstrap state of large storages and prepare it for running another bootstrap."]
                #[doc = "It should be called multiple times until it produces [`Event::BootstrapReadyToBeFinalized`] event."]
                #[doc = ""]
                #[doc = "**!!! Cleaning up storage is complex operation and pruning all storage items related to particular"]
                #[doc = "bootstrap might not fit in a single block. As a result tx can be rejected !!!**"]
                pub struct PreFinalize;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PreFinalize {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "pre_finalize";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Used to complete resetting Bootstrap state and prepare it for running another bootstrap."]
                #[doc = "It should be called after pre_finalize has produced the [`Event::BootstrapReadyToBeFinalized`] event."]
                pub struct Finalize;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Finalize {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "finalize";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Allows claiming rewards for some account that haven't done that yet. The only difference between"]
                #[doc = "calling [`Pallet::claim_liquidity_tokens_for_account`] by some other account and calling [`Pallet::claim_liquidity_tokens`] directly by that account is account that will be charged for transaction fee."]
                #[doc = "# Args:"]
                #[doc = "- `other` - account in behalf of which liquidity tokens should be claimed"]
                pub struct ClaimLiquidityTokensForAccount {
                    pub account: claim_liquidity_tokens_for_account::Account,
                    pub activate_rewards: claim_liquidity_tokens_for_account::ActivateRewards,
                }
                pub mod claim_liquidity_tokens_for_account {
                    use super::runtime_types;
                    pub type Account = runtime_types::sp_runtime::account::AccountId20;
                    pub type ActivateRewards = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClaimLiquidityTokensForAccount {
                    const PALLET: &'static str = "Bootstrap";
                    const CALL: &'static str = "claim_liquidity_tokens_for_account";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Allows for provisioning one of the tokens from currently bootstrapped pair. Can only be called during:"]
                #[doc = "- [`BootstrapPhase::Whitelist`]"]
                #[doc = "- [`BootstrapPhase::Public`]"]
                #[doc = ""]
                #[doc = "phases."]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = " - `token_id` - id of the token to provision (should be one of the currently bootstraped pair([`ActivePair`]))"]
                #[doc = " - `amount` - amount of the token to provision"]
                pub fn provision(
                    &self,
                    token_id: types::provision::TokenId,
                    amount: types::provision::Amount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Provision>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "provision",
                        types::Provision { token_id, amount },
                        [
                            185u8, 63u8, 231u8, 152u8, 166u8, 176u8, 144u8, 192u8, 50u8, 49u8,
                            136u8, 201u8, 195u8, 39u8, 31u8, 235u8, 139u8, 44u8, 70u8, 229u8,
                            106u8, 188u8, 47u8, 84u8, 63u8, 232u8, 147u8, 145u8, 145u8, 121u8,
                            103u8, 159u8,
                        ],
                    )
                }
                #[doc = "Allows for whitelisting accounts, so they can participate in during whitelist phase. The list of"]
                #[doc = "account is extended with every subsequent call"]
                pub fn whitelist_accounts(
                    &self,
                    accounts: types::whitelist_accounts::Accounts,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::WhitelistAccounts>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "whitelist_accounts",
                        types::WhitelistAccounts { accounts },
                        [
                            92u8, 242u8, 110u8, 217u8, 53u8, 37u8, 181u8, 192u8, 22u8, 156u8,
                            205u8, 33u8, 226u8, 83u8, 223u8, 201u8, 147u8, 143u8, 150u8, 74u8, 3u8,
                            224u8, 170u8, 252u8, 86u8, 2u8, 73u8, 69u8, 167u8, 34u8, 185u8, 37u8,
                        ],
                    )
                }
                #[doc = "Used for starting/scheduling new bootstrap"]
                #[doc = ""]
                #[doc = "# Args:"]
                #[doc = "- `first_token_id` - first token of the tokens pair"]
                #[doc = "- `second_token_id`: second token of the tokens pair"]
                #[doc = "- `ido_start` - number of block when bootstrap will be started (people will be allowed to participate)"]
                #[doc = "- `whitelist_phase_length`: - length of whitelist phase"]
                #[doc = "- `public_phase_lenght`- length of public phase"]
                #[doc = "- `promote_bootstrap_pool`- whether liquidity pool created by bootstrap should be promoted"]
                #[doc = "- `max_first_to_second_ratio` - represented as (numerator,denominator) - Ratio may be used to limit participations of second token id. Ratio between first and second token needs to be held during whole bootstrap. Whenever user tries to participate (using [`Pallet::provision`] extrinsic) the following conditions is check."]
                #[doc = "```ignore"]
                #[doc = "all previous first participations + first token participations             ratio numerator"]
                #[doc = "----------------------------------------------------------------------- <= ------------------"]
                #[doc = "all previous second token participations + second token participations     ratio denominator"]
                #[doc = "```"]
                #[doc = "and if it evaluates to `false` extrinsic will fail."]
                #[doc = ""]
                #[doc = "**Because of above equation only participations with first token of a bootstrap pair are limited!**"]
                #[doc = ""]
                #[doc = "# Examples"]
                #[doc = "Consider:"]
                #[doc = ""]
                #[doc = "- user willing to participate 1000 of first token, when:"]
                #[doc = "\t- ratio set during bootstrap schedule is is set to (1/2)"]
                #[doc = "\t- sum of first token participations - 10_000"]
                #[doc = "\t- sum of second token participations - 20_000"]
                #[doc = ""]
                #[doc = "participation extrinsic will **fail** because ratio condition **is not met**"]
                #[doc = "```ignore"]
                #[doc = "10_000 + 10_000      1"]
                #[doc = "--------------- <=  ---"]
                #[doc = "    20_000           2"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = "- user willing to participate 1000 of first token, when:"]
                #[doc = "\t- ratio set during bootstrap schedule is is set to (1/2)"]
                #[doc = "\t- sum of first token participations - 10_000"]
                #[doc = "\t- sum of second token participations - 40_000"]
                #[doc = ""]
                #[doc = "participation extrinsic will **succeed** because ratio condition **is met**"]
                #[doc = "```ignore"]
                #[doc = "10_000 + 10_000      1"]
                #[doc = "--------------- <=  ---"]
                #[doc = "    40_000           2"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = ""]
                #[doc = "**If one doesn't want to limit participations in any way, ratio should be set to (u128::MAX,0) - then ratio requirements are always met**"]
                #[doc = ""]
                #[doc = "```ignore"]
                #[doc = "all previous first participations + first token participations                u128::MAX"]
                #[doc = "----------------------------------------------------------------------- <= ------------------"]
                #[doc = "all previous second token participations + second token participations            1"]
                #[doc = "```"]
                pub fn schedule_bootstrap(
                    &self,
                    first_token_id: types::schedule_bootstrap::FirstTokenId,
                    second_token_id: types::schedule_bootstrap::SecondTokenId,
                    ido_start: types::schedule_bootstrap::IdoStart,
                    whitelist_phase_length: types::schedule_bootstrap::WhitelistPhaseLength,
                    public_phase_length: types::schedule_bootstrap::PublicPhaseLength,
                    max_first_to_second_ratio: types::schedule_bootstrap::MaxFirstToSecondRatio,
                    promote_bootstrap_pool: types::schedule_bootstrap::PromoteBootstrapPool,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ScheduleBootstrap>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "schedule_bootstrap",
                        types::ScheduleBootstrap {
                            first_token_id,
                            second_token_id,
                            ido_start,
                            whitelist_phase_length,
                            public_phase_length,
                            max_first_to_second_ratio,
                            promote_bootstrap_pool,
                        },
                        [
                            7u8, 123u8, 23u8, 175u8, 128u8, 38u8, 224u8, 114u8, 172u8, 32u8, 223u8,
                            206u8, 41u8, 147u8, 83u8, 244u8, 133u8, 99u8, 64u8, 115u8, 249u8, 95u8,
                            79u8, 113u8, 108u8, 185u8, 187u8, 30u8, 131u8, 213u8, 51u8, 54u8,
                        ],
                    )
                }
                #[doc = "Used to cancel active bootstrap. Can only be called before bootstrap is actually started"]
                pub fn cancel_bootstrap(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelBootstrap>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "cancel_bootstrap",
                        types::CancelBootstrap {},
                        [
                            164u8, 148u8, 110u8, 22u8, 97u8, 111u8, 8u8, 197u8, 245u8, 44u8, 210u8,
                            50u8, 41u8, 53u8, 1u8, 158u8, 24u8, 216u8, 43u8, 49u8, 51u8, 237u8,
                            239u8, 71u8, 201u8, 80u8, 35u8, 251u8, 46u8, 84u8, 57u8, 148u8,
                        ],
                    )
                }
                pub fn update_promote_bootstrap_pool(
                    &self,
                    promote_bootstrap_pool : types :: update_promote_bootstrap_pool :: PromoteBootstrapPool,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::UpdatePromoteBootstrapPool,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "update_promote_bootstrap_pool",
                        types::UpdatePromoteBootstrapPool {
                            promote_bootstrap_pool,
                        },
                        [
                            244u8, 214u8, 54u8, 29u8, 51u8, 126u8, 160u8, 159u8, 249u8, 208u8,
                            92u8, 230u8, 17u8, 231u8, 54u8, 87u8, 164u8, 242u8, 124u8, 222u8, 21u8,
                            116u8, 23u8, 202u8, 215u8, 199u8, 119u8, 241u8, 179u8, 30u8, 145u8,
                            103u8,
                        ],
                    )
                }
                #[doc = "When bootstrap is in [`BootstrapPhase::Finished`] state user can claim his part of liquidity tokens."]
                pub fn claim_liquidity_tokens(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClaimLiquidityTokens>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "claim_liquidity_tokens",
                        types::ClaimLiquidityTokens {},
                        [
                            238u8, 200u8, 230u8, 132u8, 13u8, 105u8, 95u8, 127u8, 142u8, 132u8,
                            235u8, 174u8, 178u8, 86u8, 183u8, 80u8, 151u8, 61u8, 152u8, 227u8,
                            19u8, 156u8, 60u8, 153u8, 212u8, 92u8, 128u8, 200u8, 210u8, 11u8,
                            213u8, 43u8,
                        ],
                    )
                }
                #[doc = "When bootstrap is in [`BootstrapPhase::Finished`] state user can claim his part of liquidity tokens comparing to `claim_liquidity_tokens` when calling `claim_and_activate_liquidity_tokens` tokens will be automatically activated."]
                pub fn claim_and_activate_liquidity_tokens(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ClaimAndActivateLiquidityTokens,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "claim_and_activate_liquidity_tokens",
                        types::ClaimAndActivateLiquidityTokens {},
                        [
                            155u8, 224u8, 50u8, 110u8, 82u8, 124u8, 218u8, 158u8, 30u8, 132u8,
                            199u8, 20u8, 54u8, 186u8, 40u8, 202u8, 243u8, 173u8, 246u8, 128u8,
                            213u8, 45u8, 77u8, 23u8, 12u8, 83u8, 75u8, 53u8, 247u8, 26u8, 185u8,
                            82u8,
                        ],
                    )
                }
                #[doc = "Used to reset Bootstrap state of large storages and prepare it for running another bootstrap."]
                #[doc = "It should be called multiple times until it produces [`Event::BootstrapReadyToBeFinalized`] event."]
                #[doc = ""]
                #[doc = "**!!! Cleaning up storage is complex operation and pruning all storage items related to particular"]
                #[doc = "bootstrap might not fit in a single block. As a result tx can be rejected !!!**"]
                pub fn pre_finalize(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::PreFinalize>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "pre_finalize",
                        types::PreFinalize {},
                        [
                            147u8, 54u8, 91u8, 246u8, 226u8, 190u8, 4u8, 59u8, 190u8, 236u8, 187u8,
                            80u8, 158u8, 50u8, 208u8, 193u8, 39u8, 36u8, 115u8, 122u8, 203u8,
                            126u8, 118u8, 70u8, 111u8, 115u8, 28u8, 175u8, 11u8, 241u8, 2u8, 249u8,
                        ],
                    )
                }
                #[doc = "Used to complete resetting Bootstrap state and prepare it for running another bootstrap."]
                #[doc = "It should be called after pre_finalize has produced the [`Event::BootstrapReadyToBeFinalized`] event."]
                pub fn finalize(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Finalize>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "finalize",
                        types::Finalize {},
                        [
                            5u8, 176u8, 107u8, 208u8, 250u8, 242u8, 74u8, 217u8, 105u8, 210u8,
                            244u8, 224u8, 93u8, 198u8, 188u8, 45u8, 152u8, 94u8, 19u8, 81u8, 28u8,
                            147u8, 242u8, 199u8, 101u8, 36u8, 177u8, 123u8, 101u8, 221u8, 200u8,
                            86u8,
                        ],
                    )
                }
                #[doc = "Allows claiming rewards for some account that haven't done that yet. The only difference between"]
                #[doc = "calling [`Pallet::claim_liquidity_tokens_for_account`] by some other account and calling [`Pallet::claim_liquidity_tokens`] directly by that account is account that will be charged for transaction fee."]
                #[doc = "# Args:"]
                #[doc = "- `other` - account in behalf of which liquidity tokens should be claimed"]
                pub fn claim_liquidity_tokens_for_account(
                    &self,
                    account: types::claim_liquidity_tokens_for_account::Account,
                    activate_rewards: types::claim_liquidity_tokens_for_account::ActivateRewards,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ClaimLiquidityTokensForAccount,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Bootstrap",
                        "claim_liquidity_tokens_for_account",
                        types::ClaimLiquidityTokensForAccount {
                            account,
                            activate_rewards,
                        },
                        [
                            88u8, 33u8, 254u8, 3u8, 146u8, 147u8, 189u8, 200u8, 171u8, 110u8,
                            122u8, 207u8, 56u8, 10u8, 68u8, 111u8, 114u8, 65u8, 54u8, 173u8, 177u8,
                            25u8, 240u8, 224u8, 170u8, 188u8, 130u8, 130u8, 12u8, 178u8, 140u8,
                            122u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_bootstrap::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Funds provisioned"]
            pub struct Provisioned(pub provisioned::Field0, pub provisioned::Field1);
            pub mod provisioned {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Provisioned {
                const PALLET: &'static str = "Bootstrap";
                const EVENT: &'static str = "Provisioned";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Funds provisioned using vested tokens"]
            pub struct VestedProvisioned(
                pub vested_provisioned::Field0,
                pub vested_provisioned::Field1,
            );
            pub mod vested_provisioned {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for VestedProvisioned {
                const PALLET: &'static str = "Bootstrap";
                const EVENT: &'static str = "VestedProvisioned";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The activation of the rewards liquidity tokens failed"]
            pub struct RewardsLiquidityAcitvationFailed(
                pub rewards_liquidity_acitvation_failed::Field0,
                pub rewards_liquidity_acitvation_failed::Field1,
                pub rewards_liquidity_acitvation_failed::Field2,
            );
            pub mod rewards_liquidity_acitvation_failed {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RewardsLiquidityAcitvationFailed {
                const PALLET: &'static str = "Bootstrap";
                const EVENT: &'static str = "RewardsLiquidityAcitvationFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Rewards claimed"]
            pub struct RewardsClaimed(pub rewards_claimed::Field0, pub rewards_claimed::Field1);
            pub mod rewards_claimed {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RewardsClaimed {
                const PALLET: &'static str = "Bootstrap";
                const EVENT: &'static str = "RewardsClaimed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "account whitelisted"]
            pub struct AccountsWhitelisted;
            impl ::subxt::ext::subxt_core::events::StaticEvent for AccountsWhitelisted {
                const PALLET: &'static str = "Bootstrap";
                const EVENT: &'static str = "AccountsWhitelisted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "bootstrap pre finalization has completed partially"]
            pub struct BootstrapParitallyPreFinalized;
            impl ::subxt::ext::subxt_core::events::StaticEvent for BootstrapParitallyPreFinalized {
                const PALLET: &'static str = "Bootstrap";
                const EVENT: &'static str = "BootstrapParitallyPreFinalized";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "bootstrap pre finalization has completed, and the bootstrap can now be finalized"]
            pub struct BootstrapReadyToBeFinalized;
            impl ::subxt::ext::subxt_core::events::StaticEvent for BootstrapReadyToBeFinalized {
                const PALLET: &'static str = "Bootstrap";
                const EVENT: &'static str = "BootstrapReadyToBeFinalized";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "finalization process finished"]
            pub struct BootstrapFinalized;
            impl ::subxt::ext::subxt_core::events::StaticEvent for BootstrapFinalized {
                const PALLET: &'static str = "Bootstrap";
                const EVENT: &'static str = "BootstrapFinalized";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod provisions {
                    use super::runtime_types;
                    pub type Provisions = ::core::primitive::u128;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod vested_provisions {
                    use super::runtime_types;
                    pub type VestedProvisions = (
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    );
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod whitelisted_account {
                    use super::runtime_types;
                    pub type WhitelistedAccount = ();
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod phase {
                    use super::runtime_types;
                    pub type Phase = runtime_types::pallet_bootstrap::BootstrapPhase;
                }
                pub mod valuations {
                    use super::runtime_types;
                    pub type Valuations = (::core::primitive::u128, ::core::primitive::u128);
                }
                pub mod bootstrap_schedule {
                    use super::runtime_types;
                    pub type BootstrapSchedule = (
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        (::core::primitive::u128, ::core::primitive::u128),
                    );
                }
                pub mod minted_liquidity {
                    use super::runtime_types;
                    pub type MintedLiquidity = (::core::primitive::u32, ::core::primitive::u128);
                }
                pub mod claimed_rewards {
                    use super::runtime_types;
                    pub type ClaimedRewards = ::core::primitive::u128;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod provision_accounts {
                    use super::runtime_types;
                    pub type ProvisionAccounts = ();
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod active_pair {
                    use super::runtime_types;
                    pub type ActivePair = (::core::primitive::u32, ::core::primitive::u32);
                }
                pub mod promote_bootstrap_pool {
                    use super::runtime_types;
                    pub type PromoteBootstrapPool = ::core::primitive::bool;
                }
                pub mod archived_bootstrap {
                    use super::runtime_types;
                    pub type ArchivedBootstrap = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        (::core::primitive::u128, ::core::primitive::u128),
                    )>;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " maps ([`frame_system::Config::AccountId`], [`CurrencyId`]) -> [`Balance`] - identifies how much tokens did account provisioned in active bootstrap"]
                pub fn provisions_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::provisions::Provisions,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "Provisions",
                        (),
                        [
                            136u8, 250u8, 158u8, 77u8, 134u8, 68u8, 18u8, 49u8, 199u8, 61u8, 179u8,
                            75u8, 56u8, 62u8, 77u8, 108u8, 69u8, 96u8, 32u8, 104u8, 143u8, 223u8,
                            126u8, 191u8, 69u8, 147u8, 75u8, 166u8, 218u8, 212u8, 68u8, 71u8,
                        ],
                    )
                }
                #[doc = " maps ([`frame_system::Config::AccountId`], [`CurrencyId`]) -> [`Balance`] - identifies how much tokens did account provisioned in active bootstrap"]
                pub fn provisions_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::provisions::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::provisions::Param0,
                    >,
                    types::provisions::Provisions,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "Provisions",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            136u8, 250u8, 158u8, 77u8, 134u8, 68u8, 18u8, 49u8, 199u8, 61u8, 179u8,
                            75u8, 56u8, 62u8, 77u8, 108u8, 69u8, 96u8, 32u8, 104u8, 143u8, 223u8,
                            126u8, 191u8, 69u8, 147u8, 75u8, 166u8, 218u8, 212u8, 68u8, 71u8,
                        ],
                    )
                }
                #[doc = " maps ([`frame_system::Config::AccountId`], [`CurrencyId`]) -> [`Balance`] - identifies how much tokens did account provisioned in active bootstrap"]
                pub fn provisions(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::provisions::Param0>,
                    _1: impl ::core::borrow::Borrow<types::provisions::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::provisions::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::provisions::Param1,
                        >,
                    ),
                    types::provisions::Provisions,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "Provisions",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            136u8, 250u8, 158u8, 77u8, 134u8, 68u8, 18u8, 49u8, 199u8, 61u8, 179u8,
                            75u8, 56u8, 62u8, 77u8, 108u8, 69u8, 96u8, 32u8, 104u8, 143u8, 223u8,
                            126u8, 191u8, 69u8, 147u8, 75u8, 166u8, 218u8, 212u8, 68u8, 71u8,
                        ],
                    )
                }
                #[doc = " maps ([`frame_system::Config::AccountId`], [`CurrencyId`]) -> [`Balance`] - identifies how much vested tokens did account provisioned in active bootstrap"]
                pub fn vested_provisions_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::vested_provisions::VestedProvisions,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "VestedProvisions",
                        (),
                        [
                            19u8, 72u8, 156u8, 0u8, 207u8, 41u8, 252u8, 120u8, 59u8, 53u8, 218u8,
                            140u8, 149u8, 150u8, 126u8, 50u8, 181u8, 96u8, 83u8, 146u8, 84u8,
                            179u8, 247u8, 90u8, 7u8, 107u8, 19u8, 107u8, 226u8, 157u8, 217u8,
                            168u8,
                        ],
                    )
                }
                #[doc = " maps ([`frame_system::Config::AccountId`], [`CurrencyId`]) -> [`Balance`] - identifies how much vested tokens did account provisioned in active bootstrap"]
                pub fn vested_provisions_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::vested_provisions::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::vested_provisions::Param0,
                    >,
                    types::vested_provisions::VestedProvisions,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "VestedProvisions",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            19u8, 72u8, 156u8, 0u8, 207u8, 41u8, 252u8, 120u8, 59u8, 53u8, 218u8,
                            140u8, 149u8, 150u8, 126u8, 50u8, 181u8, 96u8, 83u8, 146u8, 84u8,
                            179u8, 247u8, 90u8, 7u8, 107u8, 19u8, 107u8, 226u8, 157u8, 217u8,
                            168u8,
                        ],
                    )
                }
                #[doc = " maps ([`frame_system::Config::AccountId`], [`CurrencyId`]) -> [`Balance`] - identifies how much vested tokens did account provisioned in active bootstrap"]
                pub fn vested_provisions(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::vested_provisions::Param0>,
                    _1: impl ::core::borrow::Borrow<types::vested_provisions::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::vested_provisions::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::vested_provisions::Param1,
                        >,
                    ),
                    types::vested_provisions::VestedProvisions,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "VestedProvisions",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            19u8, 72u8, 156u8, 0u8, 207u8, 41u8, 252u8, 120u8, 59u8, 53u8, 218u8,
                            140u8, 149u8, 150u8, 126u8, 50u8, 181u8, 96u8, 83u8, 146u8, 84u8,
                            179u8, 247u8, 90u8, 7u8, 107u8, 19u8, 107u8, 226u8, 157u8, 217u8,
                            168u8,
                        ],
                    )
                }
                #[doc = " list ([`Vec<AccountId>`]) of whitelisted accounts allowed to participate in [`BootstrapPhase::Whitelist`] phase"]
                pub fn whitelisted_account_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::whitelisted_account::WhitelistedAccount,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "WhitelistedAccount",
                        (),
                        [
                            73u8, 28u8, 135u8, 16u8, 218u8, 142u8, 231u8, 231u8, 89u8, 109u8,
                            185u8, 223u8, 24u8, 236u8, 67u8, 61u8, 150u8, 229u8, 208u8, 217u8,
                            113u8, 36u8, 62u8, 233u8, 242u8, 20u8, 99u8, 199u8, 4u8, 250u8, 47u8,
                            58u8,
                        ],
                    )
                }
                #[doc = " list ([`Vec<AccountId>`]) of whitelisted accounts allowed to participate in [`BootstrapPhase::Whitelist`] phase"]
                pub fn whitelisted_account(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::whitelisted_account::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::whitelisted_account::Param0,
                    >,
                    types::whitelisted_account::WhitelistedAccount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "WhitelistedAccount",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            73u8, 28u8, 135u8, 16u8, 218u8, 142u8, 231u8, 231u8, 89u8, 109u8,
                            185u8, 223u8, 24u8, 236u8, 67u8, 61u8, 150u8, 229u8, 208u8, 217u8,
                            113u8, 36u8, 62u8, 233u8, 242u8, 20u8, 99u8, 199u8, 4u8, 250u8, 47u8,
                            58u8,
                        ],
                    )
                }
                #[doc = " Current state of bootstrap as [`BootstrapPhase`]"]
                pub fn phase(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::phase::Phase,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "Phase",
                        (),
                        [
                            96u8, 12u8, 108u8, 208u8, 227u8, 3u8, 194u8, 3u8, 186u8, 241u8, 189u8,
                            202u8, 13u8, 158u8, 37u8, 153u8, 44u8, 105u8, 244u8, 210u8, 114u8,
                            94u8, 88u8, 208u8, 181u8, 127u8, 24u8, 51u8, 2u8, 102u8, 149u8, 217u8,
                        ],
                    )
                }
                #[doc = " Total sum of provisions of `first` and `second` token in active bootstrap"]
                pub fn valuations(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::valuations::Valuations,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "Valuations",
                        (),
                        [
                            64u8, 160u8, 55u8, 115u8, 119u8, 79u8, 172u8, 34u8, 123u8, 32u8, 199u8,
                            214u8, 169u8, 87u8, 102u8, 144u8, 230u8, 73u8, 28u8, 53u8, 119u8,
                            233u8, 62u8, 3u8, 59u8, 26u8, 100u8, 93u8, 136u8, 80u8, 119u8, 240u8,
                        ],
                    )
                }
                #[doc = " Active bootstrap parameters"]
                pub fn bootstrap_schedule(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::bootstrap_schedule::BootstrapSchedule,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "BootstrapSchedule",
                        (),
                        [
                            112u8, 46u8, 149u8, 41u8, 151u8, 128u8, 38u8, 8u8, 218u8, 232u8, 43u8,
                            104u8, 81u8, 39u8, 212u8, 35u8, 64u8, 154u8, 182u8, 121u8, 24u8, 139u8,
                            91u8, 118u8, 14u8, 229u8, 75u8, 200u8, 203u8, 230u8, 223u8, 211u8,
                        ],
                    )
                }
                pub fn minted_liquidity(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::minted_liquidity::MintedLiquidity,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "MintedLiquidity",
                        (),
                        [
                            191u8, 176u8, 87u8, 64u8, 19u8, 223u8, 11u8, 10u8, 153u8, 198u8, 130u8,
                            9u8, 210u8, 206u8, 30u8, 67u8, 71u8, 133u8, 37u8, 83u8, 215u8, 122u8,
                            40u8, 92u8, 46u8, 165u8, 53u8, 183u8, 217u8, 166u8, 242u8, 44u8,
                        ],
                    )
                }
                #[doc = "  Maps ([`frame_system::Config::AccountId`], [`CurrencyId`] ) -> [`Balance`] - where [`CurrencyId`] is id of the token that user participated with. This storage item is used to identify how much liquidity tokens has been claim by the user. If user participated with 2 tokens there are two entries associated with given account (`Address`, `first_token_id`) and (`Address`, `second_token_id`)"]
                pub fn claimed_rewards_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::claimed_rewards::ClaimedRewards,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "ClaimedRewards",
                        (),
                        [
                            252u8, 119u8, 99u8, 76u8, 169u8, 134u8, 33u8, 204u8, 44u8, 50u8, 191u8,
                            21u8, 113u8, 121u8, 127u8, 254u8, 206u8, 16u8, 150u8, 129u8, 157u8,
                            19u8, 94u8, 223u8, 221u8, 0u8, 198u8, 75u8, 218u8, 185u8, 28u8, 30u8,
                        ],
                    )
                }
                #[doc = "  Maps ([`frame_system::Config::AccountId`], [`CurrencyId`] ) -> [`Balance`] - where [`CurrencyId`] is id of the token that user participated with. This storage item is used to identify how much liquidity tokens has been claim by the user. If user participated with 2 tokens there are two entries associated with given account (`Address`, `first_token_id`) and (`Address`, `second_token_id`)"]
                pub fn claimed_rewards_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::claimed_rewards::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::claimed_rewards::Param0,
                    >,
                    types::claimed_rewards::ClaimedRewards,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "ClaimedRewards",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            252u8, 119u8, 99u8, 76u8, 169u8, 134u8, 33u8, 204u8, 44u8, 50u8, 191u8,
                            21u8, 113u8, 121u8, 127u8, 254u8, 206u8, 16u8, 150u8, 129u8, 157u8,
                            19u8, 94u8, 223u8, 221u8, 0u8, 198u8, 75u8, 218u8, 185u8, 28u8, 30u8,
                        ],
                    )
                }
                #[doc = "  Maps ([`frame_system::Config::AccountId`], [`CurrencyId`] ) -> [`Balance`] - where [`CurrencyId`] is id of the token that user participated with. This storage item is used to identify how much liquidity tokens has been claim by the user. If user participated with 2 tokens there are two entries associated with given account (`Address`, `first_token_id`) and (`Address`, `second_token_id`)"]
                pub fn claimed_rewards(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::claimed_rewards::Param0>,
                    _1: impl ::core::borrow::Borrow<types::claimed_rewards::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::claimed_rewards::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::claimed_rewards::Param1,
                        >,
                    ),
                    types::claimed_rewards::ClaimedRewards,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "ClaimedRewards",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            252u8, 119u8, 99u8, 76u8, 169u8, 134u8, 33u8, 204u8, 44u8, 50u8, 191u8,
                            21u8, 113u8, 121u8, 127u8, 254u8, 206u8, 16u8, 150u8, 129u8, 157u8,
                            19u8, 94u8, 223u8, 221u8, 0u8, 198u8, 75u8, 218u8, 185u8, 28u8, 30u8,
                        ],
                    )
                }
                #[doc = " List of accounts that provisioned funds to bootstrap and has not claimed liquidity tokens yet"]
                pub fn provision_accounts_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::provision_accounts::ProvisionAccounts,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "ProvisionAccounts",
                        (),
                        [
                            69u8, 117u8, 180u8, 1u8, 161u8, 120u8, 215u8, 37u8, 59u8, 150u8, 186u8,
                            154u8, 121u8, 105u8, 21u8, 170u8, 82u8, 169u8, 130u8, 22u8, 100u8, 8u8,
                            122u8, 40u8, 72u8, 16u8, 251u8, 217u8, 228u8, 215u8, 19u8, 205u8,
                        ],
                    )
                }
                #[doc = " List of accounts that provisioned funds to bootstrap and has not claimed liquidity tokens yet"]
                pub fn provision_accounts(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::provision_accounts::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::provision_accounts::Param0,
                    >,
                    types::provision_accounts::ProvisionAccounts,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "ProvisionAccounts",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            69u8, 117u8, 180u8, 1u8, 161u8, 120u8, 215u8, 37u8, 59u8, 150u8, 186u8,
                            154u8, 121u8, 105u8, 21u8, 170u8, 82u8, 169u8, 130u8, 22u8, 100u8, 8u8,
                            122u8, 40u8, 72u8, 16u8, 251u8, 217u8, 228u8, 215u8, 19u8, 205u8,
                        ],
                    )
                }
                #[doc = " Currently bootstraped pair of tokens representaed as [ `first_token_id`, `second_token_id`]"]
                pub fn active_pair(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::active_pair::ActivePair,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "ActivePair",
                        (),
                        [
                            160u8, 24u8, 1u8, 129u8, 146u8, 197u8, 212u8, 99u8, 128u8, 16u8, 251u8,
                            51u8, 242u8, 243u8, 165u8, 97u8, 117u8, 191u8, 191u8, 27u8, 42u8,
                            206u8, 68u8, 26u8, 220u8, 198u8, 87u8, 83u8, 234u8, 235u8, 54u8, 127u8,
                        ],
                    )
                }
                #[doc = " Wheter to automatically promote the pool after [`BootstrapPhase::PublicPhase`] or not."]
                pub fn promote_bootstrap_pool(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::promote_bootstrap_pool::PromoteBootstrapPool,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "PromoteBootstrapPool",
                        (),
                        [
                            30u8, 6u8, 36u8, 174u8, 38u8, 79u8, 227u8, 51u8, 9u8, 46u8, 108u8,
                            108u8, 33u8, 151u8, 56u8, 200u8, 234u8, 215u8, 88u8, 74u8, 85u8, 59u8,
                            247u8, 43u8, 144u8, 151u8, 154u8, 165u8, 37u8, 49u8, 173u8, 114u8,
                        ],
                    )
                }
                pub fn archived_bootstrap(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::archived_bootstrap::ArchivedBootstrap,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Bootstrap",
                        "ArchivedBootstrap",
                        (),
                        [
                            113u8, 182u8, 199u8, 147u8, 203u8, 154u8, 12u8, 31u8, 63u8, 122u8,
                            99u8, 63u8, 54u8, 58u8, 53u8, 151u8, 10u8, 100u8, 10u8, 88u8, 181u8,
                            242u8, 179u8, 0u8, 86u8, 8u8, 237u8, 204u8, 9u8, 253u8, 69u8, 41u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn default_bootstrap_promoted_pool_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u8,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Bootstrap",
                        "DefaultBootstrapPromotedPoolWeight",
                        [
                            141u8, 130u8, 11u8, 35u8, 226u8, 114u8, 92u8, 179u8, 168u8, 110u8,
                            28u8, 91u8, 221u8, 64u8, 4u8, 148u8, 201u8, 193u8, 185u8, 66u8, 226u8,
                            114u8, 97u8, 79u8, 62u8, 212u8, 202u8, 114u8, 237u8, 228u8, 183u8,
                            165u8,
                        ],
                    )
                }
                pub fn bootstrap_update_buffer(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Bootstrap",
                        "BootstrapUpdateBuffer",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn treasury_pallet_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_support::PalletId,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Bootstrap",
                        "TreasuryPalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod authorship {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod author {
                    use super::runtime_types;
                    pub type Author = runtime_types::sp_runtime::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Author of current block."]
                pub fn author(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::author::Author,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Authorship",
                        "Author",
                        (),
                        [
                            7u8, 127u8, 74u8, 91u8, 81u8, 221u8, 194u8, 231u8, 235u8, 168u8, 73u8,
                            46u8, 213u8, 97u8, 197u8, 227u8, 72u8, 89u8, 2u8, 221u8, 28u8, 38u8,
                            77u8, 172u8, 153u8, 20u8, 189u8, 249u8, 101u8, 225u8, 183u8, 139u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod parachain_staking {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::parachain_staking::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::parachain_staking::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the total number of collator candidates selected per round"]
                #[doc = "- changes are not applied until the start of the next round"]
                pub struct SetTotalSelected {
                    pub new: set_total_selected::New,
                }
                pub mod set_total_selected {
                    use super::runtime_types;
                    pub type New = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetTotalSelected {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_total_selected";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the commission for all collators"]
                pub struct SetCollatorCommission {
                    pub new: set_collator_commission::New,
                }
                pub mod set_collator_commission {
                    use super::runtime_types;
                    pub type New = runtime_types::sp_arithmetic::per_things::Perbill;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetCollatorCommission {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "set_collator_commission";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Join the set of collator candidates"]
                pub struct JoinCandidates {
                    pub bond: join_candidates::Bond,
                    pub liquidity_token: join_candidates::LiquidityToken,
                    pub use_balance_from: join_candidates::UseBalanceFrom,
                    pub candidate_count: join_candidates::CandidateCount,
                    pub liquidity_token_count: join_candidates::LiquidityTokenCount,
                }
                pub mod join_candidates {
                    use super::runtime_types;
                    pub type Bond = ::core::primitive::u128;
                    pub type LiquidityToken = ::core::primitive::u32;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                    >;
                    pub type CandidateCount = ::core::primitive::u32;
                    pub type LiquidityTokenCount = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for JoinCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "join_candidates";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request to leave the set of candidates. If successful, the account is immediately"]
                #[doc = "removed from the candidate pool to prevent selection as a collator."]
                pub struct ScheduleLeaveCandidates {
                    pub candidate_count: schedule_leave_candidates::CandidateCount,
                }
                pub mod schedule_leave_candidates {
                    use super::runtime_types;
                    pub type CandidateCount = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute leave candidates request"]
                pub struct ExecuteLeaveCandidates {
                    pub candidate: execute_leave_candidates::Candidate,
                    pub candidate_delegation_count:
                        execute_leave_candidates::CandidateDelegationCount,
                }
                pub mod execute_leave_candidates {
                    use super::runtime_types;
                    pub type Candidate = runtime_types::sp_runtime::account::AccountId20;
                    pub type CandidateDelegationCount = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExecuteLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "execute_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel open request to leave candidates"]
                #[doc = "- only callable by collator account"]
                #[doc = "- result upon successful call is the candidate is active in the candidate pool"]
                pub struct CancelLeaveCandidates {
                    pub candidate_count: cancel_leave_candidates::CandidateCount,
                }
                pub mod cancel_leave_candidates {
                    use super::runtime_types;
                    pub type CandidateCount = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelLeaveCandidates {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "cancel_leave_candidates";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Temporarily leave the set of collator candidates without unbonding"]
                pub struct GoOffline;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for GoOffline {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "go_offline";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Rejoin the set of collator candidates if previously had called `go_offline`"]
                pub struct GoOnline;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for GoOnline {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "go_online";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request by collator candidate to increase self bond by `more`"]
                pub struct ScheduleCandidateBondMore {
                    pub more: schedule_candidate_bond_more::More,
                    pub use_balance_from: schedule_candidate_bond_more::UseBalanceFrom,
                }
                pub mod schedule_candidate_bond_more {
                    use super::runtime_types;
                    pub type More = ::core::primitive::u128;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleCandidateBondMore {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_candidate_bond_more";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request by collator candidate to decrease self bond by `less`"]
                pub struct ScheduleCandidateBondLess {
                    pub less: schedule_candidate_bond_less::Less,
                }
                pub mod schedule_candidate_bond_less {
                    use super::runtime_types;
                    pub type Less = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleCandidateBondLess {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_candidate_bond_less";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute pending request to adjust the collator candidate self bond"]
                pub struct ExecuteCandidateBondRequest {
                    pub candidate: execute_candidate_bond_request::Candidate,
                    pub use_balance_from: execute_candidate_bond_request::UseBalanceFrom,
                }
                pub mod execute_candidate_bond_request {
                    use super::runtime_types;
                    pub type Candidate = runtime_types::sp_runtime::account::AccountId20;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExecuteCandidateBondRequest {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "execute_candidate_bond_request";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel pending request to adjust the collator candidate self bond"]
                pub struct CancelCandidateBondRequest;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelCandidateBondRequest {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "cancel_candidate_bond_request";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "If caller is not a delegator and not a collator, then join the set of delegators"]
                #[doc = "If caller is a delegator, then makes delegation to change their delegation state"]
                pub struct Delegate {
                    pub collator: delegate::Collator,
                    pub amount: delegate::Amount,
                    pub use_balance_from: delegate::UseBalanceFrom,
                    pub candidate_delegation_count: delegate::CandidateDelegationCount,
                    pub delegation_count: delegate::DelegationCount,
                }
                pub mod delegate {
                    use super::runtime_types;
                    pub type Collator = runtime_types::sp_runtime::account::AccountId20;
                    pub type Amount = ::core::primitive::u128;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                    >;
                    pub type CandidateDelegationCount = ::core::primitive::u32;
                    pub type DelegationCount = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Delegate {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "delegate";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request to leave the set of delegators. If successful, the caller is scheduled"]
                #[doc = "to be allowed to exit. Success forbids future delegator actions until the request is"]
                #[doc = "invoked or cancelled."]
                pub struct ScheduleLeaveDelegators;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleLeaveDelegators {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_leave_delegators";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute the right to exit the set of delegators and revoke all ongoing delegations."]
                pub struct ExecuteLeaveDelegators {
                    pub delegator: execute_leave_delegators::Delegator,
                    pub delegation_count: execute_leave_delegators::DelegationCount,
                }
                pub mod execute_leave_delegators {
                    use super::runtime_types;
                    pub type Delegator = runtime_types::sp_runtime::account::AccountId20;
                    pub type DelegationCount = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExecuteLeaveDelegators {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "execute_leave_delegators";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel a pending request to exit the set of delegators. Success clears the pending exit"]
                #[doc = "request (thereby resetting the delay upon another `leave_delegators` call)."]
                pub struct CancelLeaveDelegators;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelLeaveDelegators {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "cancel_leave_delegators";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request to revoke an existing delegation. If successful, the delegation is scheduled"]
                #[doc = "to be allowed to be revoked via the `execute_delegation_request` extrinsic."]
                pub struct ScheduleRevokeDelegation {
                    pub collator: schedule_revoke_delegation::Collator,
                }
                pub mod schedule_revoke_delegation {
                    use super::runtime_types;
                    pub type Collator = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleRevokeDelegation {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_revoke_delegation";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request to bond more for delegators wrt a specific collator candidate."]
                pub struct ScheduleDelegatorBondMore {
                    pub candidate: schedule_delegator_bond_more::Candidate,
                    pub more: schedule_delegator_bond_more::More,
                    pub use_balance_from: schedule_delegator_bond_more::UseBalanceFrom,
                }
                pub mod schedule_delegator_bond_more {
                    use super::runtime_types;
                    pub type Candidate = runtime_types::sp_runtime::account::AccountId20;
                    pub type More = ::core::primitive::u128;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleDelegatorBondMore {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_delegator_bond_more";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request bond less for delegators wrt a specific collator candidate."]
                pub struct ScheduleDelegatorBondLess {
                    pub candidate: schedule_delegator_bond_less::Candidate,
                    pub less: schedule_delegator_bond_less::Less,
                }
                pub mod schedule_delegator_bond_less {
                    use super::runtime_types;
                    pub type Candidate = runtime_types::sp_runtime::account::AccountId20;
                    pub type Less = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ScheduleDelegatorBondLess {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "schedule_delegator_bond_less";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Execute pending request to change an existing delegation"]
                pub struct ExecuteDelegationRequest {
                    pub delegator: execute_delegation_request::Delegator,
                    pub candidate: execute_delegation_request::Candidate,
                    pub use_balance_from: execute_delegation_request::UseBalanceFrom,
                }
                pub mod execute_delegation_request {
                    use super::runtime_types;
                    pub type Delegator = runtime_types::sp_runtime::account::AccountId20;
                    pub type Candidate = runtime_types::sp_runtime::account::AccountId20;
                    pub type UseBalanceFrom = ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ExecuteDelegationRequest {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "execute_delegation_request";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel request to change an existing delegation."]
                pub struct CancelDelegationRequest {
                    pub candidate: cancel_delegation_request::Candidate,
                }
                pub mod cancel_delegation_request {
                    use super::runtime_types;
                    pub type Candidate = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelDelegationRequest {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "cancel_delegation_request";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Enables new staking token to be used for staking. Only tokens paired with MGX can be"]
                #[doc = "used. Caller can pass the id of token for which MGX paired pool already exists or"]
                #[doc = "liquidity token id itself. **Root only**"]
                pub struct AddStakingLiquidityToken {
                    pub paired_or_liquidity_token:
                        add_staking_liquidity_token::PairedOrLiquidityToken,
                    pub current_liquidity_tokens:
                        add_staking_liquidity_token::CurrentLiquidityTokens,
                }
                pub mod add_staking_liquidity_token {
                    use super::runtime_types;
                    pub type PairedOrLiquidityToken =
                        runtime_types::parachain_staking::pallet::PairedOrLiquidityToken<
                            ::core::primitive::u32,
                        >;
                    pub type CurrentLiquidityTokens = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddStakingLiquidityToken {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "add_staking_liquidity_token";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes previously added liquidity token"]
                pub struct RemoveStakingLiquidityToken {
                    pub paired_or_liquidity_token:
                        remove_staking_liquidity_token::PairedOrLiquidityToken,
                    pub current_liquidity_tokens:
                        remove_staking_liquidity_token::CurrentLiquidityTokens,
                }
                pub mod remove_staking_liquidity_token {
                    use super::runtime_types;
                    pub type PairedOrLiquidityToken =
                        runtime_types::parachain_staking::pallet::PairedOrLiquidityToken<
                            ::core::primitive::u32,
                        >;
                    pub type CurrentLiquidityTokens = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveStakingLiquidityToken {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "remove_staking_liquidity_token";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Modifies aggregator metadata by extending or reducing list of approved candidates"]
                #[doc = "Account may only become aggregator only if its not collator or delegator at the moment"]
                pub struct AggregatorUpdateMetadata {
                    pub collator_candidates: aggregator_update_metadata::CollatorCandidates,
                    pub action: aggregator_update_metadata::Action,
                }
                pub mod aggregator_update_metadata {
                    use super::runtime_types;
                    pub type CollatorCandidates = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                    pub type Action = runtime_types::parachain_staking::MetadataUpdateAction;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AggregatorUpdateMetadata {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "aggregator_update_metadata";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Assigns/replaces the candidate that given collator wants to aggregate under"]
                pub struct UpdateCandidateAggregator {
                    pub maybe_aggregator: update_candidate_aggregator::MaybeAggregator,
                }
                pub mod update_candidate_aggregator {
                    use super::runtime_types;
                    pub type MaybeAggregator =
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateCandidateAggregator {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "update_candidate_aggregator";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "This extrinsic should be used to distribute rewards for collator and assodiated"]
                #[doc = "delegators. As round rewards are processed in random order its impossible predict"]
                #[doc = "how many delegators (and assodiated transfer extrinsic calls) will be required so"]
                #[doc = "worst case scenario (delegators_count = MaxCollatorCandidates) is assumed."]
                #[doc = ""]
                #[doc = "params:"]
                #[doc = "- collator - account id"]
                #[doc = "- limit - number of rewards periods that should be processed within extrinsic. Note"]
                #[doc = "that limit assumes worst case scenario of (delegators_count = MaxCollatorCandidates)"]
                #[doc = "so as a result, `limit` or more session round rewards may be distributed"]
                pub struct PayoutCollatorRewards {
                    pub collator: payout_collator_rewards::Collator,
                    pub number_of_sesisons: payout_collator_rewards::NumberOfSesisons,
                }
                pub mod payout_collator_rewards {
                    use super::runtime_types;
                    pub type Collator = runtime_types::sp_runtime::account::AccountId20;
                    pub type NumberOfSesisons = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PayoutCollatorRewards {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "payout_collator_rewards";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Payout delegator rewards only for particular round. Collators should rather use"]
                #[doc = "[`Pallet::payout_collator_rewards`] but if collator is inresponsive one can claim"]
                #[doc = "particular delegator rewards manually."]
                pub struct PayoutDelegatorReward {
                    pub round: payout_delegator_reward::Round,
                    pub collator: payout_delegator_reward::Collator,
                    pub delegator: payout_delegator_reward::Delegator,
                }
                pub mod payout_delegator_reward {
                    use super::runtime_types;
                    pub type Round = ::core::primitive::u32;
                    pub type Collator = runtime_types::sp_runtime::account::AccountId20;
                    pub type Delegator = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PayoutDelegatorReward {
                    const PALLET: &'static str = "ParachainStaking";
                    const CALL: &'static str = "payout_delegator_reward";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the total number of collator candidates selected per round"]
                #[doc = "- changes are not applied until the start of the next round"]
                pub fn set_total_selected(
                    &self,
                    new: types::set_total_selected::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetTotalSelected>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "set_total_selected",
                        types::SetTotalSelected { new },
                        [
                            79u8, 99u8, 189u8, 86u8, 137u8, 181u8, 252u8, 121u8, 117u8, 188u8,
                            204u8, 247u8, 36u8, 179u8, 253u8, 211u8, 108u8, 234u8, 149u8, 239u8,
                            120u8, 27u8, 90u8, 7u8, 85u8, 150u8, 31u8, 134u8, 224u8, 248u8, 18u8,
                            179u8,
                        ],
                    )
                }
                #[doc = "Set the commission for all collators"]
                pub fn set_collator_commission(
                    &self,
                    new: types::set_collator_commission::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetCollatorCommission,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "set_collator_commission",
                        types::SetCollatorCommission { new },
                        [
                            166u8, 106u8, 4u8, 178u8, 151u8, 254u8, 151u8, 254u8, 73u8, 228u8,
                            144u8, 234u8, 186u8, 200u8, 200u8, 49u8, 247u8, 158u8, 87u8, 173u8,
                            110u8, 97u8, 184u8, 69u8, 145u8, 224u8, 173u8, 198u8, 236u8, 5u8,
                            248u8, 161u8,
                        ],
                    )
                }
                #[doc = "Join the set of collator candidates"]
                pub fn join_candidates(
                    &self,
                    bond: types::join_candidates::Bond,
                    liquidity_token: types::join_candidates::LiquidityToken,
                    use_balance_from: types::join_candidates::UseBalanceFrom,
                    candidate_count: types::join_candidates::CandidateCount,
                    liquidity_token_count: types::join_candidates::LiquidityTokenCount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::JoinCandidates>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "join_candidates",
                        types::JoinCandidates {
                            bond,
                            liquidity_token,
                            use_balance_from,
                            candidate_count,
                            liquidity_token_count,
                        },
                        [
                            61u8, 208u8, 93u8, 26u8, 222u8, 218u8, 61u8, 110u8, 89u8, 110u8, 223u8,
                            248u8, 65u8, 56u8, 239u8, 183u8, 35u8, 151u8, 46u8, 224u8, 151u8,
                            121u8, 79u8, 61u8, 33u8, 44u8, 159u8, 253u8, 79u8, 135u8, 24u8, 38u8,
                        ],
                    )
                }
                #[doc = "Request to leave the set of candidates. If successful, the account is immediately"]
                #[doc = "removed from the candidate pool to prevent selection as a collator."]
                pub fn schedule_leave_candidates(
                    &self,
                    candidate_count: types::schedule_leave_candidates::CandidateCount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ScheduleLeaveCandidates,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "schedule_leave_candidates",
                        types::ScheduleLeaveCandidates { candidate_count },
                        [
                            38u8, 95u8, 168u8, 104u8, 240u8, 115u8, 200u8, 24u8, 171u8, 60u8, 75u8,
                            183u8, 58u8, 126u8, 195u8, 186u8, 246u8, 204u8, 3u8, 68u8, 109u8,
                            110u8, 157u8, 141u8, 115u8, 38u8, 99u8, 252u8, 217u8, 254u8, 67u8,
                            226u8,
                        ],
                    )
                }
                #[doc = "Execute leave candidates request"]
                pub fn execute_leave_candidates(
                    &self,
                    candidate: types::execute_leave_candidates::Candidate,
                    candidate_delegation_count : types :: execute_leave_candidates :: CandidateDelegationCount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ExecuteLeaveCandidates,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "execute_leave_candidates",
                        types::ExecuteLeaveCandidates {
                            candidate,
                            candidate_delegation_count,
                        },
                        [
                            85u8, 60u8, 236u8, 59u8, 6u8, 58u8, 12u8, 80u8, 199u8, 158u8, 164u8,
                            191u8, 36u8, 101u8, 246u8, 90u8, 35u8, 196u8, 13u8, 157u8, 213u8,
                            100u8, 158u8, 242u8, 143u8, 56u8, 12u8, 222u8, 146u8, 233u8, 76u8,
                            76u8,
                        ],
                    )
                }
                #[doc = "Cancel open request to leave candidates"]
                #[doc = "- only callable by collator account"]
                #[doc = "- result upon successful call is the candidate is active in the candidate pool"]
                pub fn cancel_leave_candidates(
                    &self,
                    candidate_count: types::cancel_leave_candidates::CandidateCount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::CancelLeaveCandidates,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "cancel_leave_candidates",
                        types::CancelLeaveCandidates { candidate_count },
                        [
                            142u8, 203u8, 196u8, 63u8, 28u8, 190u8, 133u8, 202u8, 72u8, 85u8,
                            143u8, 29u8, 41u8, 8u8, 50u8, 232u8, 123u8, 197u8, 174u8, 198u8, 100u8,
                            162u8, 167u8, 233u8, 62u8, 39u8, 230u8, 31u8, 172u8, 101u8, 72u8,
                            234u8,
                        ],
                    )
                }
                #[doc = "Temporarily leave the set of collator candidates without unbonding"]
                pub fn go_offline(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::GoOffline>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "go_offline",
                        types::GoOffline {},
                        [
                            229u8, 123u8, 37u8, 67u8, 121u8, 41u8, 249u8, 87u8, 1u8, 78u8, 249u8,
                            173u8, 135u8, 228u8, 239u8, 244u8, 177u8, 153u8, 242u8, 112u8, 157u8,
                            150u8, 12u8, 213u8, 38u8, 250u8, 85u8, 150u8, 252u8, 60u8, 204u8,
                            134u8,
                        ],
                    )
                }
                #[doc = "Rejoin the set of collator candidates if previously had called `go_offline`"]
                pub fn go_online(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::GoOnline>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "go_online",
                        types::GoOnline {},
                        [
                            58u8, 44u8, 183u8, 212u8, 2u8, 121u8, 216u8, 100u8, 238u8, 222u8,
                            118u8, 20u8, 145u8, 231u8, 226u8, 156u8, 130u8, 2u8, 113u8, 3u8, 49u8,
                            119u8, 211u8, 112u8, 151u8, 192u8, 181u8, 139u8, 108u8, 209u8, 80u8,
                            47u8,
                        ],
                    )
                }
                #[doc = "Request by collator candidate to increase self bond by `more`"]
                pub fn schedule_candidate_bond_more(
                    &self,
                    more: types::schedule_candidate_bond_more::More,
                    use_balance_from: types::schedule_candidate_bond_more::UseBalanceFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ScheduleCandidateBondMore,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "schedule_candidate_bond_more",
                        types::ScheduleCandidateBondMore {
                            more,
                            use_balance_from,
                        },
                        [
                            76u8, 9u8, 225u8, 234u8, 109u8, 147u8, 38u8, 18u8, 41u8, 5u8, 189u8,
                            151u8, 2u8, 1u8, 165u8, 254u8, 21u8, 27u8, 233u8, 31u8, 84u8, 189u8,
                            228u8, 125u8, 99u8, 186u8, 230u8, 14u8, 217u8, 24u8, 249u8, 70u8,
                        ],
                    )
                }
                #[doc = "Request by collator candidate to decrease self bond by `less`"]
                pub fn schedule_candidate_bond_less(
                    &self,
                    less: types::schedule_candidate_bond_less::Less,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ScheduleCandidateBondLess,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "schedule_candidate_bond_less",
                        types::ScheduleCandidateBondLess { less },
                        [
                            128u8, 77u8, 9u8, 178u8, 190u8, 213u8, 12u8, 108u8, 117u8, 174u8,
                            210u8, 130u8, 78u8, 111u8, 181u8, 173u8, 0u8, 92u8, 43u8, 79u8, 134u8,
                            9u8, 120u8, 241u8, 3u8, 58u8, 88u8, 113u8, 249u8, 22u8, 0u8, 177u8,
                        ],
                    )
                }
                #[doc = "Execute pending request to adjust the collator candidate self bond"]
                pub fn execute_candidate_bond_request(
                    &self,
                    candidate: types::execute_candidate_bond_request::Candidate,
                    use_balance_from: types::execute_candidate_bond_request::UseBalanceFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ExecuteCandidateBondRequest,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "execute_candidate_bond_request",
                        types::ExecuteCandidateBondRequest {
                            candidate,
                            use_balance_from,
                        },
                        [
                            106u8, 245u8, 147u8, 4u8, 91u8, 145u8, 235u8, 80u8, 73u8, 6u8, 167u8,
                            76u8, 184u8, 0u8, 6u8, 19u8, 10u8, 149u8, 126u8, 195u8, 5u8, 42u8,
                            245u8, 69u8, 84u8, 208u8, 106u8, 42u8, 92u8, 172u8, 133u8, 114u8,
                        ],
                    )
                }
                #[doc = "Cancel pending request to adjust the collator candidate self bond"]
                pub fn cancel_candidate_bond_request(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::CancelCandidateBondRequest,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "cancel_candidate_bond_request",
                        types::CancelCandidateBondRequest {},
                        [
                            16u8, 238u8, 101u8, 0u8, 24u8, 193u8, 43u8, 86u8, 65u8, 144u8, 150u8,
                            141u8, 150u8, 33u8, 6u8, 201u8, 60u8, 45u8, 41u8, 210u8, 11u8, 67u8,
                            125u8, 14u8, 167u8, 149u8, 61u8, 24u8, 37u8, 85u8, 240u8, 125u8,
                        ],
                    )
                }
                #[doc = "If caller is not a delegator and not a collator, then join the set of delegators"]
                #[doc = "If caller is a delegator, then makes delegation to change their delegation state"]
                pub fn delegate(
                    &self,
                    collator: types::delegate::Collator,
                    amount: types::delegate::Amount,
                    use_balance_from: types::delegate::UseBalanceFrom,
                    candidate_delegation_count: types::delegate::CandidateDelegationCount,
                    delegation_count: types::delegate::DelegationCount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Delegate>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "delegate",
                        types::Delegate {
                            collator,
                            amount,
                            use_balance_from,
                            candidate_delegation_count,
                            delegation_count,
                        },
                        [
                            33u8, 91u8, 168u8, 103u8, 81u8, 85u8, 58u8, 24u8, 88u8, 32u8, 51u8,
                            5u8, 157u8, 121u8, 141u8, 89u8, 66u8, 5u8, 141u8, 152u8, 79u8, 168u8,
                            180u8, 190u8, 134u8, 201u8, 93u8, 23u8, 57u8, 241u8, 156u8, 24u8,
                        ],
                    )
                }
                #[doc = "Request to leave the set of delegators. If successful, the caller is scheduled"]
                #[doc = "to be allowed to exit. Success forbids future delegator actions until the request is"]
                #[doc = "invoked or cancelled."]
                pub fn schedule_leave_delegators(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ScheduleLeaveDelegators,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "schedule_leave_delegators",
                        types::ScheduleLeaveDelegators {},
                        [
                            79u8, 161u8, 131u8, 47u8, 146u8, 172u8, 95u8, 85u8, 146u8, 253u8,
                            246u8, 33u8, 107u8, 164u8, 133u8, 129u8, 177u8, 168u8, 206u8, 138u8,
                            77u8, 29u8, 48u8, 149u8, 246u8, 98u8, 213u8, 0u8, 42u8, 43u8, 60u8,
                            36u8,
                        ],
                    )
                }
                #[doc = "Execute the right to exit the set of delegators and revoke all ongoing delegations."]
                pub fn execute_leave_delegators(
                    &self,
                    delegator: types::execute_leave_delegators::Delegator,
                    delegation_count: types::execute_leave_delegators::DelegationCount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ExecuteLeaveDelegators,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "execute_leave_delegators",
                        types::ExecuteLeaveDelegators {
                            delegator,
                            delegation_count,
                        },
                        [
                            58u8, 193u8, 242u8, 32u8, 203u8, 2u8, 186u8, 9u8, 73u8, 12u8, 3u8,
                            108u8, 4u8, 246u8, 5u8, 159u8, 62u8, 160u8, 248u8, 233u8, 29u8, 158u8,
                            7u8, 217u8, 151u8, 80u8, 105u8, 212u8, 152u8, 14u8, 102u8, 101u8,
                        ],
                    )
                }
                #[doc = "Cancel a pending request to exit the set of delegators. Success clears the pending exit"]
                #[doc = "request (thereby resetting the delay upon another `leave_delegators` call)."]
                pub fn cancel_leave_delegators(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::CancelLeaveDelegators,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "cancel_leave_delegators",
                        types::CancelLeaveDelegators {},
                        [
                            141u8, 227u8, 180u8, 84u8, 53u8, 31u8, 19u8, 252u8, 189u8, 55u8, 65u8,
                            115u8, 91u8, 199u8, 236u8, 74u8, 90u8, 45u8, 209u8, 218u8, 126u8,
                            177u8, 228u8, 131u8, 93u8, 111u8, 39u8, 30u8, 131u8, 136u8, 0u8, 131u8,
                        ],
                    )
                }
                #[doc = "Request to revoke an existing delegation. If successful, the delegation is scheduled"]
                #[doc = "to be allowed to be revoked via the `execute_delegation_request` extrinsic."]
                pub fn schedule_revoke_delegation(
                    &self,
                    collator: types::schedule_revoke_delegation::Collator,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ScheduleRevokeDelegation,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "schedule_revoke_delegation",
                        types::ScheduleRevokeDelegation { collator },
                        [
                            49u8, 14u8, 47u8, 15u8, 255u8, 98u8, 144u8, 195u8, 236u8, 20u8, 71u8,
                            162u8, 231u8, 204u8, 216u8, 147u8, 186u8, 202u8, 204u8, 191u8, 96u8,
                            187u8, 229u8, 1u8, 71u8, 161u8, 35u8, 100u8, 59u8, 80u8, 155u8, 185u8,
                        ],
                    )
                }
                #[doc = "Request to bond more for delegators wrt a specific collator candidate."]
                pub fn schedule_delegator_bond_more(
                    &self,
                    candidate: types::schedule_delegator_bond_more::Candidate,
                    more: types::schedule_delegator_bond_more::More,
                    use_balance_from: types::schedule_delegator_bond_more::UseBalanceFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ScheduleDelegatorBondMore,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "schedule_delegator_bond_more",
                        types::ScheduleDelegatorBondMore {
                            candidate,
                            more,
                            use_balance_from,
                        },
                        [
                            17u8, 88u8, 113u8, 129u8, 42u8, 193u8, 120u8, 237u8, 135u8, 46u8, 91u8,
                            94u8, 35u8, 124u8, 52u8, 107u8, 237u8, 192u8, 149u8, 124u8, 200u8,
                            90u8, 117u8, 197u8, 123u8, 11u8, 131u8, 152u8, 25u8, 144u8, 82u8,
                            148u8,
                        ],
                    )
                }
                #[doc = "Request bond less for delegators wrt a specific collator candidate."]
                pub fn schedule_delegator_bond_less(
                    &self,
                    candidate: types::schedule_delegator_bond_less::Candidate,
                    less: types::schedule_delegator_bond_less::Less,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ScheduleDelegatorBondLess,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "schedule_delegator_bond_less",
                        types::ScheduleDelegatorBondLess { candidate, less },
                        [
                            236u8, 220u8, 191u8, 205u8, 149u8, 32u8, 160u8, 164u8, 201u8, 47u8,
                            106u8, 191u8, 56u8, 26u8, 79u8, 51u8, 76u8, 128u8, 33u8, 141u8, 184u8,
                            112u8, 86u8, 132u8, 66u8, 26u8, 40u8, 116u8, 99u8, 53u8, 80u8, 182u8,
                        ],
                    )
                }
                #[doc = "Execute pending request to change an existing delegation"]
                pub fn execute_delegation_request(
                    &self,
                    delegator: types::execute_delegation_request::Delegator,
                    candidate: types::execute_delegation_request::Candidate,
                    use_balance_from: types::execute_delegation_request::UseBalanceFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ExecuteDelegationRequest,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "execute_delegation_request",
                        types::ExecuteDelegationRequest {
                            delegator,
                            candidate,
                            use_balance_from,
                        },
                        [
                            47u8, 20u8, 244u8, 108u8, 120u8, 6u8, 104u8, 137u8, 39u8, 90u8, 211u8,
                            52u8, 166u8, 5u8, 236u8, 5u8, 253u8, 52u8, 122u8, 213u8, 3u8, 103u8,
                            88u8, 121u8, 252u8, 110u8, 30u8, 246u8, 242u8, 93u8, 90u8, 238u8,
                        ],
                    )
                }
                #[doc = "Cancel request to change an existing delegation."]
                pub fn cancel_delegation_request(
                    &self,
                    candidate: types::cancel_delegation_request::Candidate,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::CancelDelegationRequest,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "cancel_delegation_request",
                        types::CancelDelegationRequest { candidate },
                        [
                            149u8, 224u8, 75u8, 66u8, 75u8, 187u8, 222u8, 81u8, 1u8, 199u8, 18u8,
                            189u8, 228u8, 3u8, 6u8, 238u8, 188u8, 141u8, 68u8, 82u8, 228u8, 130u8,
                            56u8, 251u8, 173u8, 15u8, 75u8, 143u8, 95u8, 117u8, 215u8, 144u8,
                        ],
                    )
                }
                #[doc = "Enables new staking token to be used for staking. Only tokens paired with MGX can be"]
                #[doc = "used. Caller can pass the id of token for which MGX paired pool already exists or"]
                #[doc = "liquidity token id itself. **Root only**"]
                pub fn add_staking_liquidity_token(
                    &self,
                    paired_or_liquidity_token : types :: add_staking_liquidity_token :: PairedOrLiquidityToken,
                    current_liquidity_tokens : types :: add_staking_liquidity_token :: CurrentLiquidityTokens,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::AddStakingLiquidityToken,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "add_staking_liquidity_token",
                        types::AddStakingLiquidityToken {
                            paired_or_liquidity_token,
                            current_liquidity_tokens,
                        },
                        [
                            202u8, 129u8, 169u8, 33u8, 95u8, 211u8, 30u8, 160u8, 145u8, 182u8,
                            88u8, 1u8, 201u8, 238u8, 135u8, 58u8, 96u8, 162u8, 8u8, 172u8, 123u8,
                            47u8, 57u8, 151u8, 103u8, 63u8, 28u8, 123u8, 111u8, 223u8, 188u8, 57u8,
                        ],
                    )
                }
                #[doc = "Removes previously added liquidity token"]
                pub fn remove_staking_liquidity_token(
                    &self,
                    paired_or_liquidity_token : types :: remove_staking_liquidity_token :: PairedOrLiquidityToken,
                    current_liquidity_tokens : types :: remove_staking_liquidity_token :: CurrentLiquidityTokens,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::RemoveStakingLiquidityToken,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "remove_staking_liquidity_token",
                        types::RemoveStakingLiquidityToken {
                            paired_or_liquidity_token,
                            current_liquidity_tokens,
                        },
                        [
                            244u8, 89u8, 115u8, 162u8, 245u8, 101u8, 54u8, 121u8, 146u8, 174u8,
                            26u8, 176u8, 128u8, 123u8, 193u8, 177u8, 82u8, 22u8, 192u8, 147u8,
                            54u8, 8u8, 28u8, 11u8, 143u8, 154u8, 140u8, 101u8, 232u8, 153u8, 185u8,
                            17u8,
                        ],
                    )
                }
                #[doc = "Modifies aggregator metadata by extending or reducing list of approved candidates"]
                #[doc = "Account may only become aggregator only if its not collator or delegator at the moment"]
                pub fn aggregator_update_metadata(
                    &self,
                    collator_candidates: types::aggregator_update_metadata::CollatorCandidates,
                    action: types::aggregator_update_metadata::Action,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::AggregatorUpdateMetadata,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "aggregator_update_metadata",
                        types::AggregatorUpdateMetadata {
                            collator_candidates,
                            action,
                        },
                        [
                            139u8, 221u8, 58u8, 91u8, 113u8, 124u8, 250u8, 46u8, 34u8, 200u8,
                            144u8, 152u8, 171u8, 115u8, 175u8, 141u8, 210u8, 135u8, 187u8, 174u8,
                            246u8, 149u8, 55u8, 29u8, 229u8, 204u8, 140u8, 114u8, 227u8, 196u8,
                            129u8, 156u8,
                        ],
                    )
                }
                #[doc = "Assigns/replaces the candidate that given collator wants to aggregate under"]
                pub fn update_candidate_aggregator(
                    &self,
                    maybe_aggregator: types::update_candidate_aggregator::MaybeAggregator,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::UpdateCandidateAggregator,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "update_candidate_aggregator",
                        types::UpdateCandidateAggregator { maybe_aggregator },
                        [
                            179u8, 122u8, 195u8, 115u8, 5u8, 132u8, 119u8, 125u8, 149u8, 69u8,
                            164u8, 30u8, 187u8, 168u8, 132u8, 182u8, 61u8, 153u8, 180u8, 164u8,
                            54u8, 77u8, 140u8, 33u8, 139u8, 52u8, 102u8, 172u8, 106u8, 179u8, 93u8,
                            75u8,
                        ],
                    )
                }
                #[doc = "This extrinsic should be used to distribute rewards for collator and assodiated"]
                #[doc = "delegators. As round rewards are processed in random order its impossible predict"]
                #[doc = "how many delegators (and assodiated transfer extrinsic calls) will be required so"]
                #[doc = "worst case scenario (delegators_count = MaxCollatorCandidates) is assumed."]
                #[doc = ""]
                #[doc = "params:"]
                #[doc = "- collator - account id"]
                #[doc = "- limit - number of rewards periods that should be processed within extrinsic. Note"]
                #[doc = "that limit assumes worst case scenario of (delegators_count = MaxCollatorCandidates)"]
                #[doc = "so as a result, `limit` or more session round rewards may be distributed"]
                pub fn payout_collator_rewards(
                    &self,
                    collator: types::payout_collator_rewards::Collator,
                    number_of_sesisons: types::payout_collator_rewards::NumberOfSesisons,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::PayoutCollatorRewards,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "payout_collator_rewards",
                        types::PayoutCollatorRewards {
                            collator,
                            number_of_sesisons,
                        },
                        [
                            175u8, 89u8, 3u8, 54u8, 71u8, 213u8, 168u8, 20u8, 136u8, 157u8, 145u8,
                            103u8, 140u8, 4u8, 194u8, 139u8, 15u8, 233u8, 75u8, 203u8, 103u8, 74u8,
                            218u8, 11u8, 203u8, 134u8, 249u8, 131u8, 181u8, 244u8, 196u8, 248u8,
                        ],
                    )
                }
                #[doc = "Payout delegator rewards only for particular round. Collators should rather use"]
                #[doc = "[`Pallet::payout_collator_rewards`] but if collator is inresponsive one can claim"]
                #[doc = "particular delegator rewards manually."]
                pub fn payout_delegator_reward(
                    &self,
                    round: types::payout_delegator_reward::Round,
                    collator: types::payout_delegator_reward::Collator,
                    delegator: types::payout_delegator_reward::Delegator,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::PayoutDelegatorReward,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "ParachainStaking",
                        "payout_delegator_reward",
                        types::PayoutDelegatorReward {
                            round,
                            collator,
                            delegator,
                        },
                        [
                            26u8, 129u8, 22u8, 27u8, 232u8, 114u8, 46u8, 194u8, 24u8, 142u8, 110u8,
                            0u8, 235u8, 136u8, 71u8, 16u8, 37u8, 12u8, 113u8, 16u8, 101u8, 74u8,
                            103u8, 69u8, 8u8, 202u8, 189u8, 232u8, 172u8, 4u8, 1u8, 94u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::parachain_staking::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Starting Block, Round, Number of Collators Selected, Total Balance"]
            pub struct NewRound(
                pub new_round::Field0,
                pub new_round::Field1,
                pub new_round::Field2,
                pub new_round::Field3,
            );
            pub mod new_round {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u32;
                pub type Field2 = ::core::primitive::u32;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewRound {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "NewRound";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Account, Amount Locked, New Total Amt Locked"]
            pub struct JoinedCollatorCandidates(
                pub joined_collator_candidates::Field0,
                pub joined_collator_candidates::Field1,
                pub joined_collator_candidates::Field2,
            );
            pub mod joined_collator_candidates {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for JoinedCollatorCandidates {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "JoinedCollatorCandidates";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Round, Collator Account, Total Exposed Amount (includes all delegations)"]
            pub struct CollatorChosen(
                pub collator_chosen::Field0,
                pub collator_chosen::Field1,
                pub collator_chosen::Field2,
            );
            pub mod collator_chosen {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollatorChosen {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorChosen";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Candidate, Amount To Increase, Round at which request can be executed by caller"]
            pub struct CandidateBondMoreRequested(
                pub candidate_bond_more_requested::Field0,
                pub candidate_bond_more_requested::Field1,
                pub candidate_bond_more_requested::Field2,
            );
            pub mod candidate_bond_more_requested {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateBondMoreRequested {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBondMoreRequested";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Candidate, Amount To Decrease, Round at which request can be executed by caller"]
            pub struct CandidateBondLessRequested(
                pub candidate_bond_less_requested::Field0,
                pub candidate_bond_less_requested::Field1,
                pub candidate_bond_less_requested::Field2,
            );
            pub mod candidate_bond_less_requested {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateBondLessRequested {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBondLessRequested";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Candidate, Amount, New Bond Total"]
            pub struct CandidateBondedMore(
                pub candidate_bonded_more::Field0,
                pub candidate_bonded_more::Field1,
                pub candidate_bonded_more::Field2,
            );
            pub mod candidate_bonded_more {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateBondedMore {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBondedMore";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Candidate, Amount, New Bond"]
            pub struct CandidateBondedLess(
                pub candidate_bonded_less::Field0,
                pub candidate_bonded_less::Field1,
                pub candidate_bonded_less::Field2,
            );
            pub mod candidate_bonded_less {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateBondedLess {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBondedLess";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Round Offline, Candidate"]
            pub struct CandidateWentOffline(
                pub candidate_went_offline::Field0,
                pub candidate_went_offline::Field1,
            );
            pub mod candidate_went_offline {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateWentOffline {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateWentOffline";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Round Online, Candidate"]
            pub struct CandidateBackOnline(
                pub candidate_back_online::Field0,
                pub candidate_back_online::Field1,
            );
            pub mod candidate_back_online {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateBackOnline {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateBackOnline";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Round At Which Exit Is Allowed, Candidate, Scheduled Exit"]
            pub struct CandidateScheduledExit(
                pub candidate_scheduled_exit::Field0,
                pub candidate_scheduled_exit::Field1,
                pub candidate_scheduled_exit::Field2,
            );
            pub mod candidate_scheduled_exit {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateScheduledExit {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateScheduledExit";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Candidate"]
            pub struct CancelledCandidateExit(pub cancelled_candidate_exit::Field0);
            pub mod cancelled_candidate_exit {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CancelledCandidateExit {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CancelledCandidateExit";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Candidate, Cancelled Request"]
            pub struct CancelledCandidateBondChange(
                pub cancelled_candidate_bond_change::Field0,
                pub cancelled_candidate_bond_change::Field1,
            );
            pub mod cancelled_candidate_bond_change {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::parachain_staking::pallet::CandidateBondRequest<
                    ::core::primitive::u128,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CancelledCandidateBondChange {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CancelledCandidateBondChange";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Ex-Candidate, Amount Unlocked, New Total Amt Locked"]
            pub struct CandidateLeft(
                pub candidate_left::Field0,
                pub candidate_left::Field1,
                pub candidate_left::Field2,
            );
            pub mod candidate_left {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateLeft {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateLeft";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Delegator, Candidate, Amount to be increased, Round at which can be executed"]
            pub struct DelegationIncreaseScheduled(
                pub delegation_increase_scheduled::Field0,
                pub delegation_increase_scheduled::Field1,
                pub delegation_increase_scheduled::Field2,
                pub delegation_increase_scheduled::Field3,
            );
            pub mod delegation_increase_scheduled {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegationIncreaseScheduled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationIncreaseScheduled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Delegator, Candidate, Amount to be decreased, Round at which can be executed"]
            pub struct DelegationDecreaseScheduled(
                pub delegation_decrease_scheduled::Field0,
                pub delegation_decrease_scheduled::Field1,
                pub delegation_decrease_scheduled::Field2,
                pub delegation_decrease_scheduled::Field3,
            );
            pub mod delegation_decrease_scheduled {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegationDecreaseScheduled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationDecreaseScheduled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct DelegationIncreased(
                pub delegation_increased::Field0,
                pub delegation_increased::Field1,
                pub delegation_increased::Field2,
                pub delegation_increased::Field3,
            );
            pub mod delegation_increased {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::bool;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegationIncreased {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationIncreased";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct DelegationDecreased(
                pub delegation_decreased::Field0,
                pub delegation_decreased::Field1,
                pub delegation_decreased::Field2,
                pub delegation_decreased::Field3,
            );
            pub mod delegation_decreased {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::bool;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegationDecreased {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationDecreased";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Round, Delegator, Scheduled Exit"]
            pub struct DelegatorExitScheduled(
                pub delegator_exit_scheduled::Field0,
                pub delegator_exit_scheduled::Field1,
                pub delegator_exit_scheduled::Field2,
            );
            pub mod delegator_exit_scheduled {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegatorExitScheduled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorExitScheduled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Round, Delegator, Candidate, Scheduled Exit"]
            pub struct DelegationRevocationScheduled(
                pub delegation_revocation_scheduled::Field0,
                pub delegation_revocation_scheduled::Field1,
                pub delegation_revocation_scheduled::Field2,
                pub delegation_revocation_scheduled::Field3,
            );
            pub mod delegation_revocation_scheduled {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field3 = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegationRevocationScheduled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationRevocationScheduled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Delegator, Amount Unstaked"]
            pub struct DelegatorLeft(pub delegator_left::Field0, pub delegator_left::Field1);
            pub mod delegator_left {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegatorLeft {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorLeft";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Delegator, Candidate, Amount Unstaked"]
            pub struct DelegationRevoked(
                pub delegation_revoked::Field0,
                pub delegation_revoked::Field1,
                pub delegation_revoked::Field2,
            );
            pub mod delegation_revoked {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegationRevoked {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegationRevoked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Delegator"]
            pub struct DelegatorExitCancelled(pub delegator_exit_cancelled::Field0);
            pub mod delegator_exit_cancelled {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegatorExitCancelled {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorExitCancelled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Delegator, Cancelled Request"]
            pub struct CancelledDelegationRequest(
                pub cancelled_delegation_request::Field0,
                pub cancelled_delegation_request::Field1,
            );
            pub mod cancelled_delegation_request {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::parachain_staking::pallet::DelegationRequest<
                    runtime_types::sp_runtime::account::AccountId20,
                    ::core::primitive::u128,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CancelledDelegationRequest {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CancelledDelegationRequest";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Delegator, Amount Locked, Candidate, Delegator Position with New Total Counted if in Top"]
            pub struct Delegation(
                pub delegation::Field0,
                pub delegation::Field1,
                pub delegation::Field2,
                pub delegation::Field3,
            );
            pub mod delegation {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field3 = runtime_types::parachain_staking::pallet::DelegatorAdded<
                    ::core::primitive::u128,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Delegation {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "Delegation";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Delegator, Candidate, Amount Unstaked, New Total Amt Staked for Candidate"]
            pub struct DelegatorLeftCandidate(
                pub delegator_left_candidate::Field0,
                pub delegator_left_candidate::Field1,
                pub delegator_left_candidate::Field2,
                pub delegator_left_candidate::Field3,
            );
            pub mod delegator_left_candidate {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegatorLeftCandidate {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorLeftCandidate";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Session index, Delegator, Collator, Due reward (as per counted delegation for collator)"]
            pub struct DelegatorDueReward(
                pub delegator_due_reward::Field0,
                pub delegator_due_reward::Field1,
                pub delegator_due_reward::Field2,
                pub delegator_due_reward::Field3,
            );
            pub mod delegator_due_reward {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field3 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DelegatorDueReward {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "DelegatorDueReward";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Paid the account (delegator or collator) the balance as liquid rewards"]
            pub struct Rewarded(
                pub rewarded::Field0,
                pub rewarded::Field1,
                pub rewarded::Field2,
            );
            pub mod rewarded {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Rewarded {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "Rewarded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Notify about reward periods that has been paid (collator, payout rounds, any rewards left)"]
            pub struct CollatorRewardsDistributed(
                pub collator_rewards_distributed::Field0,
                pub collator_rewards_distributed::Field1,
            );
            pub mod collator_rewards_distributed {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::parachain_staking::PayoutRounds;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollatorRewardsDistributed {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorRewardsDistributed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Staking expectations set"]
            pub struct StakeExpectationsSet(
                pub stake_expectations_set::Field0,
                pub stake_expectations_set::Field1,
                pub stake_expectations_set::Field2,
            );
            pub mod stake_expectations_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u128;
                pub type Field1 = ::core::primitive::u128;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for StakeExpectationsSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "StakeExpectationsSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Set total selected candidates to this value [old, new]"]
            pub struct TotalSelectedSet(
                pub total_selected_set::Field0,
                pub total_selected_set::Field1,
            );
            pub mod total_selected_set {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for TotalSelectedSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "TotalSelectedSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Set collator commission to this value [old, new]"]
            pub struct CollatorCommissionSet(
                pub collator_commission_set::Field0,
                pub collator_commission_set::Field1,
            );
            pub mod collator_commission_set {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_arithmetic::per_things::Perbill;
                pub type Field1 = runtime_types::sp_arithmetic::per_things::Perbill;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CollatorCommissionSet {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CollatorCommissionSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A candidate updated aggregator"]
            pub struct CandidateAggregatorUpdated(
                pub candidate_aggregator_updated::Field0,
                pub candidate_aggregator_updated::Field1,
            );
            pub mod candidate_aggregator_updated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 =
                    ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for CandidateAggregatorUpdated {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "CandidateAggregatorUpdated";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An agggregator's metadata has been updated"]
            pub struct AggregatorMetadataUpdated(pub aggregator_metadata_updated::Field0);
            pub mod aggregator_metadata_updated {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AggregatorMetadataUpdated {
                const PALLET: &'static str = "ParachainStaking";
                const EVENT: &'static str = "AggregatorMetadataUpdated";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod collator_commission {
                    use super::runtime_types;
                    pub type CollatorCommission = runtime_types::sp_arithmetic::per_things::Perbill;
                }
                pub mod total_selected {
                    use super::runtime_types;
                    pub type TotalSelected = ::core::primitive::u32;
                }
                pub mod round {
                    use super::runtime_types;
                    pub type Round =
                        runtime_types::parachain_staking::pallet::RoundInfo<::core::primitive::u32>;
                }
                pub mod delegator_state {
                    use super::runtime_types;
                    pub type DelegatorState = runtime_types::parachain_staking::pallet::Delegator<
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod candidate_state {
                    use super::runtime_types;
                    pub type CandidateState =
                        runtime_types::parachain_staking::pallet::CollatorCandidate<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod selected_candidates {
                    use super::runtime_types;
                    pub type SelectedCandidates = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                }
                pub mod total {
                    use super::runtime_types;
                    pub type Total = ::core::primitive::u128;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod candidate_pool {
                    use super::runtime_types;
                    pub type CandidatePool = runtime_types::parachain_staking::set::OrderedSet<
                        runtime_types::parachain_staking::pallet::Bond<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    >;
                }
                pub mod at_stake {
                    use super::runtime_types;
                    pub type AtStake = runtime_types::parachain_staking::pallet::CollatorSnapshot<
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod points {
                    use super::runtime_types;
                    pub type Points = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod awarded_pts {
                    use super::runtime_types;
                    pub type AwardedPts = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod staking_liquidity_tokens {
                    use super::runtime_types;
                    pub type StakingLiquidityTokens = ::subxt::ext::subxt_core::utils::KeyedVec<
                        ::core::primitive::u32,
                        ::core::option::Option<(::core::primitive::u128, ::core::primitive::u128)>,
                    >;
                }
                pub mod candidate_aggregator {
                    use super::runtime_types;
                    pub type CandidateAggregator = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                }
                pub mod aggregator_metadata {
                    use super::runtime_types;
                    pub type AggregatorMetadata =
                        runtime_types::parachain_staking::pallet::AggregatorMetadataType<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u32,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod round_aggregator_info {
                    use super::runtime_types;
                    pub type RoundAggregatorInfo = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::sp_runtime::account::AccountId20,
                        ::subxt::ext::subxt_core::utils::KeyedVec<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                        >,
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod round_collator_reward_info {
                    use super::runtime_types;
                    pub type RoundCollatorRewardInfo =
                        runtime_types::parachain_staking::pallet::RoundCollatorRewardInfoType<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Commission percent taken off of rewards for all collators"]
                pub fn collator_commission(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::collator_commission::CollatorCommission,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "CollatorCommission",
                        (),
                        [
                            224u8, 174u8, 87u8, 155u8, 58u8, 228u8, 184u8, 141u8, 241u8, 63u8,
                            115u8, 13u8, 105u8, 242u8, 194u8, 185u8, 226u8, 225u8, 225u8, 75u8,
                            150u8, 118u8, 8u8, 15u8, 122u8, 144u8, 234u8, 202u8, 25u8, 200u8, 2u8,
                            86u8,
                        ],
                    )
                }
                #[doc = " The total candidates selected every round"]
                pub fn total_selected(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total_selected::TotalSelected,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "TotalSelected",
                        (),
                        [
                            197u8, 168u8, 229u8, 97u8, 69u8, 217u8, 117u8, 140u8, 226u8, 215u8,
                            255u8, 171u8, 236u8, 171u8, 4u8, 253u8, 41u8, 59u8, 227u8, 237u8,
                            198u8, 99u8, 4u8, 239u8, 60u8, 75u8, 41u8, 161u8, 28u8, 234u8, 255u8,
                            127u8,
                        ],
                    )
                }
                #[doc = " Current round index and next round scheduled transition"]
                pub fn round(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::round::Round,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "Round",
                        (),
                        [
                            53u8, 212u8, 149u8, 87u8, 210u8, 115u8, 100u8, 246u8, 132u8, 216u8,
                            157u8, 162u8, 66u8, 122u8, 36u8, 36u8, 45u8, 228u8, 147u8, 35u8, 63u8,
                            44u8, 248u8, 183u8, 248u8, 67u8, 81u8, 202u8, 237u8, 250u8, 87u8, 38u8,
                        ],
                    )
                }
                #[doc = " Get delegator state associated with an account if account is delegating else None"]
                pub fn delegator_state_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::delegator_state::DelegatorState,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "DelegatorState",
                        (),
                        [
                            101u8, 152u8, 209u8, 33u8, 244u8, 231u8, 225u8, 235u8, 72u8, 175u8,
                            99u8, 170u8, 216u8, 244u8, 16u8, 64u8, 48u8, 6u8, 232u8, 143u8, 194u8,
                            153u8, 127u8, 254u8, 52u8, 247u8, 94u8, 100u8, 166u8, 79u8, 74u8,
                            237u8,
                        ],
                    )
                }
                #[doc = " Get delegator state associated with an account if account is delegating else None"]
                pub fn delegator_state(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::delegator_state::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::delegator_state::Param0,
                    >,
                    types::delegator_state::DelegatorState,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "DelegatorState",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            101u8, 152u8, 209u8, 33u8, 244u8, 231u8, 225u8, 235u8, 72u8, 175u8,
                            99u8, 170u8, 216u8, 244u8, 16u8, 64u8, 48u8, 6u8, 232u8, 143u8, 194u8,
                            153u8, 127u8, 254u8, 52u8, 247u8, 94u8, 100u8, 166u8, 79u8, 74u8,
                            237u8,
                        ],
                    )
                }
                #[doc = " Get collator candidate state associated with an account if account is a candidate else None"]
                pub fn candidate_state_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::candidate_state::CandidateState,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "CandidateState",
                        (),
                        [
                            15u8, 12u8, 164u8, 151u8, 72u8, 54u8, 248u8, 12u8, 239u8, 61u8, 54u8,
                            130u8, 115u8, 81u8, 201u8, 153u8, 64u8, 232u8, 198u8, 138u8, 39u8,
                            204u8, 134u8, 62u8, 137u8, 249u8, 64u8, 145u8, 64u8, 248u8, 99u8,
                            227u8,
                        ],
                    )
                }
                #[doc = " Get collator candidate state associated with an account if account is a candidate else None"]
                pub fn candidate_state(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::candidate_state::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::candidate_state::Param0,
                    >,
                    types::candidate_state::CandidateState,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "CandidateState",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            15u8, 12u8, 164u8, 151u8, 72u8, 54u8, 248u8, 12u8, 239u8, 61u8, 54u8,
                            130u8, 115u8, 81u8, 201u8, 153u8, 64u8, 232u8, 198u8, 138u8, 39u8,
                            204u8, 134u8, 62u8, 137u8, 249u8, 64u8, 145u8, 64u8, 248u8, 99u8,
                            227u8,
                        ],
                    )
                }
                #[doc = " The collator candidates selected for the current round"]
                #[doc = " Block authors selection algorithm details [`Pallet::select_top_candidates`]"]
                pub fn selected_candidates(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::selected_candidates::SelectedCandidates,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "SelectedCandidates",
                        (),
                        [
                            37u8, 18u8, 75u8, 205u8, 252u8, 214u8, 109u8, 232u8, 76u8, 249u8, 33u8,
                            160u8, 13u8, 196u8, 41u8, 78u8, 102u8, 177u8, 123u8, 90u8, 124u8, 65u8,
                            79u8, 163u8, 84u8, 52u8, 12u8, 170u8, 6u8, 253u8, 82u8, 252u8,
                        ],
                    )
                }
                #[doc = " Total capital locked by this staking pallet"]
                pub fn total_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::total::Total,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "Total",
                        (),
                        [
                            28u8, 165u8, 236u8, 23u8, 179u8, 76u8, 215u8, 204u8, 244u8, 233u8,
                            50u8, 203u8, 149u8, 216u8, 8u8, 120u8, 115u8, 74u8, 14u8, 233u8, 128u8,
                            245u8, 224u8, 122u8, 166u8, 234u8, 200u8, 134u8, 168u8, 185u8, 51u8,
                            3u8,
                        ],
                    )
                }
                #[doc = " Total capital locked by this staking pallet"]
                pub fn total(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::total::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::total::Param0,
                    >,
                    types::total::Total,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "Total",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            28u8, 165u8, 236u8, 23u8, 179u8, 76u8, 215u8, 204u8, 244u8, 233u8,
                            50u8, 203u8, 149u8, 216u8, 8u8, 120u8, 115u8, 74u8, 14u8, 233u8, 128u8,
                            245u8, 224u8, 122u8, 166u8, 234u8, 200u8, 134u8, 168u8, 185u8, 51u8,
                            3u8,
                        ],
                    )
                }
                #[doc = " The pool of collator candidates, each with their total backing stake"]
                pub fn candidate_pool(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::candidate_pool::CandidatePool,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "CandidatePool",
                        (),
                        [
                            126u8, 76u8, 230u8, 75u8, 240u8, 244u8, 170u8, 99u8, 37u8, 99u8, 179u8,
                            86u8, 46u8, 110u8, 222u8, 165u8, 199u8, 189u8, 94u8, 171u8, 103u8,
                            114u8, 119u8, 243u8, 143u8, 20u8, 180u8, 181u8, 235u8, 161u8, 73u8,
                            149u8,
                        ],
                    )
                }
                #[doc = " Snapshot of collator delegation stake at the start of the round"]
                pub fn at_stake_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::at_stake::AtStake,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "AtStake",
                        (),
                        [
                            227u8, 22u8, 179u8, 10u8, 191u8, 161u8, 75u8, 36u8, 189u8, 222u8,
                            113u8, 36u8, 155u8, 75u8, 254u8, 214u8, 116u8, 117u8, 250u8, 190u8,
                            222u8, 112u8, 53u8, 158u8, 137u8, 208u8, 46u8, 224u8, 228u8, 67u8,
                            207u8, 36u8,
                        ],
                    )
                }
                #[doc = " Snapshot of collator delegation stake at the start of the round"]
                pub fn at_stake_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::at_stake::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::at_stake::Param0,
                    >,
                    types::at_stake::AtStake,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "AtStake",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            227u8, 22u8, 179u8, 10u8, 191u8, 161u8, 75u8, 36u8, 189u8, 222u8,
                            113u8, 36u8, 155u8, 75u8, 254u8, 214u8, 116u8, 117u8, 250u8, 190u8,
                            222u8, 112u8, 53u8, 158u8, 137u8, 208u8, 46u8, 224u8, 228u8, 67u8,
                            207u8, 36u8,
                        ],
                    )
                }
                #[doc = " Snapshot of collator delegation stake at the start of the round"]
                pub fn at_stake(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::at_stake::Param0>,
                    _1: impl ::core::borrow::Borrow<types::at_stake::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::at_stake::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::at_stake::Param1,
                        >,
                    ),
                    types::at_stake::AtStake,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "AtStake",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            227u8, 22u8, 179u8, 10u8, 191u8, 161u8, 75u8, 36u8, 189u8, 222u8,
                            113u8, 36u8, 155u8, 75u8, 254u8, 214u8, 116u8, 117u8, 250u8, 190u8,
                            222u8, 112u8, 53u8, 158u8, 137u8, 208u8, 46u8, 224u8, 228u8, 67u8,
                            207u8, 36u8,
                        ],
                    )
                }
                #[doc = " Total points awarded to collators for block production in the round"]
                pub fn points_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::points::Points,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "Points",
                        (),
                        [
                            72u8, 3u8, 145u8, 244u8, 22u8, 10u8, 182u8, 153u8, 13u8, 175u8, 94u8,
                            117u8, 53u8, 89u8, 18u8, 171u8, 147u8, 72u8, 93u8, 135u8, 155u8, 80u8,
                            192u8, 61u8, 145u8, 70u8, 144u8, 10u8, 33u8, 213u8, 154u8, 161u8,
                        ],
                    )
                }
                #[doc = " Total points awarded to collators for block production in the round"]
                pub fn points(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::points::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::points::Param0,
                    >,
                    types::points::Points,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "Points",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            72u8, 3u8, 145u8, 244u8, 22u8, 10u8, 182u8, 153u8, 13u8, 175u8, 94u8,
                            117u8, 53u8, 89u8, 18u8, 171u8, 147u8, 72u8, 93u8, 135u8, 155u8, 80u8,
                            192u8, 61u8, 145u8, 70u8, 144u8, 10u8, 33u8, 213u8, 154u8, 161u8,
                        ],
                    )
                }
                #[doc = " Points for each collator per round"]
                pub fn awarded_pts_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::awarded_pts::AwardedPts,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "AwardedPts",
                        (),
                        [
                            205u8, 111u8, 81u8, 222u8, 104u8, 240u8, 213u8, 106u8, 246u8, 32u8,
                            78u8, 203u8, 237u8, 252u8, 105u8, 246u8, 24u8, 24u8, 102u8, 33u8,
                            215u8, 13u8, 229u8, 162u8, 27u8, 188u8, 89u8, 131u8, 119u8, 169u8,
                            242u8, 176u8,
                        ],
                    )
                }
                #[doc = " Points for each collator per round"]
                pub fn awarded_pts_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::awarded_pts::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::awarded_pts::Param0,
                    >,
                    types::awarded_pts::AwardedPts,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "AwardedPts",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            205u8, 111u8, 81u8, 222u8, 104u8, 240u8, 213u8, 106u8, 246u8, 32u8,
                            78u8, 203u8, 237u8, 252u8, 105u8, 246u8, 24u8, 24u8, 102u8, 33u8,
                            215u8, 13u8, 229u8, 162u8, 27u8, 188u8, 89u8, 131u8, 119u8, 169u8,
                            242u8, 176u8,
                        ],
                    )
                }
                #[doc = " Points for each collator per round"]
                pub fn awarded_pts(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::awarded_pts::Param0>,
                    _1: impl ::core::borrow::Borrow<types::awarded_pts::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::awarded_pts::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::awarded_pts::Param1,
                        >,
                    ),
                    types::awarded_pts::AwardedPts,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "AwardedPts",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            205u8, 111u8, 81u8, 222u8, 104u8, 240u8, 213u8, 106u8, 246u8, 32u8,
                            78u8, 203u8, 237u8, 252u8, 105u8, 246u8, 24u8, 24u8, 102u8, 33u8,
                            215u8, 13u8, 229u8, 162u8, 27u8, 188u8, 89u8, 131u8, 119u8, 169u8,
                            242u8, 176u8,
                        ],
                    )
                }
                pub fn staking_liquidity_tokens(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::staking_liquidity_tokens::StakingLiquidityTokens,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "StakingLiquidityTokens",
                        (),
                        [
                            99u8, 202u8, 191u8, 14u8, 40u8, 249u8, 153u8, 195u8, 161u8, 133u8,
                            197u8, 104u8, 33u8, 199u8, 174u8, 72u8, 18u8, 70u8, 111u8, 182u8,
                            196u8, 23u8, 167u8, 87u8, 36u8, 197u8, 163u8, 125u8, 42u8, 64u8, 248u8,
                            108u8,
                        ],
                    )
                }
                #[doc = " Maps collator to its aggregator"]
                pub fn candidate_aggregator(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::candidate_aggregator::CandidateAggregator,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "CandidateAggregator",
                        (),
                        [
                            150u8, 242u8, 205u8, 209u8, 249u8, 106u8, 39u8, 207u8, 242u8, 27u8,
                            129u8, 64u8, 146u8, 82u8, 45u8, 174u8, 127u8, 251u8, 12u8, 209u8,
                            177u8, 232u8, 19u8, 202u8, 63u8, 86u8, 149u8, 55u8, 92u8, 42u8, 94u8,
                            28u8,
                        ],
                    )
                }
                #[doc = " Stores information about approved candidates for aggregation"]
                pub fn aggregator_metadata_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::aggregator_metadata::AggregatorMetadata,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "AggregatorMetadata",
                        (),
                        [
                            217u8, 8u8, 130u8, 186u8, 59u8, 82u8, 139u8, 184u8, 35u8, 24u8, 238u8,
                            81u8, 168u8, 62u8, 107u8, 177u8, 145u8, 82u8, 108u8, 38u8, 81u8, 151u8,
                            21u8, 203u8, 21u8, 114u8, 231u8, 29u8, 149u8, 144u8, 219u8, 242u8,
                        ],
                    )
                }
                #[doc = " Stores information about approved candidates for aggregation"]
                pub fn aggregator_metadata(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::aggregator_metadata::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::aggregator_metadata::Param0,
                    >,
                    types::aggregator_metadata::AggregatorMetadata,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "AggregatorMetadata",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            217u8, 8u8, 130u8, 186u8, 59u8, 82u8, 139u8, 184u8, 35u8, 24u8, 238u8,
                            81u8, 168u8, 62u8, 107u8, 177u8, 145u8, 82u8, 108u8, 38u8, 81u8, 151u8,
                            21u8, 203u8, 21u8, 114u8, 231u8, 29u8, 149u8, 144u8, 219u8, 242u8,
                        ],
                    )
                }
                #[doc = " Stored once per session, maps aggregator to list of assosiated candidates"]
                pub fn round_aggregator_info_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::round_aggregator_info::RoundAggregatorInfo,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "RoundAggregatorInfo",
                        (),
                        [
                            159u8, 131u8, 195u8, 214u8, 20u8, 207u8, 114u8, 4u8, 156u8, 193u8,
                            171u8, 247u8, 243u8, 113u8, 155u8, 219u8, 40u8, 134u8, 253u8, 209u8,
                            100u8, 242u8, 93u8, 5u8, 3u8, 69u8, 154u8, 247u8, 57u8, 141u8, 57u8,
                            3u8,
                        ],
                    )
                }
                #[doc = " Stored once per session, maps aggregator to list of assosiated candidates"]
                pub fn round_aggregator_info(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::round_aggregator_info::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::round_aggregator_info::Param0,
                    >,
                    types::round_aggregator_info::RoundAggregatorInfo,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "RoundAggregatorInfo",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            159u8, 131u8, 195u8, 214u8, 20u8, 207u8, 114u8, 4u8, 156u8, 193u8,
                            171u8, 247u8, 243u8, 113u8, 155u8, 219u8, 40u8, 134u8, 253u8, 209u8,
                            100u8, 242u8, 93u8, 5u8, 3u8, 69u8, 154u8, 247u8, 57u8, 141u8, 57u8,
                            3u8,
                        ],
                    )
                }
                #[doc = " Stores information about rewards per each session"]
                pub fn round_collator_reward_info_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::round_collator_reward_info::RoundCollatorRewardInfo,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "RoundCollatorRewardInfo",
                        (),
                        [
                            88u8, 184u8, 139u8, 218u8, 55u8, 13u8, 25u8, 11u8, 179u8, 145u8, 68u8,
                            88u8, 225u8, 206u8, 127u8, 137u8, 255u8, 214u8, 168u8, 139u8, 143u8,
                            93u8, 110u8, 75u8, 140u8, 182u8, 60u8, 10u8, 102u8, 1u8, 226u8, 0u8,
                        ],
                    )
                }
                #[doc = " Stores information about rewards per each session"]
                pub fn round_collator_reward_info_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::round_collator_reward_info::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::round_collator_reward_info::Param0,
                    >,
                    types::round_collator_reward_info::RoundCollatorRewardInfo,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "RoundCollatorRewardInfo",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            88u8, 184u8, 139u8, 218u8, 55u8, 13u8, 25u8, 11u8, 179u8, 145u8, 68u8,
                            88u8, 225u8, 206u8, 127u8, 137u8, 255u8, 214u8, 168u8, 139u8, 143u8,
                            93u8, 110u8, 75u8, 140u8, 182u8, 60u8, 10u8, 102u8, 1u8, 226u8, 0u8,
                        ],
                    )
                }
                #[doc = " Stores information about rewards per each session"]
                pub fn round_collator_reward_info(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::round_collator_reward_info::Param0>,
                    _1: impl ::core::borrow::Borrow<types::round_collator_reward_info::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::round_collator_reward_info::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::round_collator_reward_info::Param1,
                        >,
                    ),
                    types::round_collator_reward_info::RoundCollatorRewardInfo,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "RoundCollatorRewardInfo",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            88u8, 184u8, 139u8, 218u8, 55u8, 13u8, 25u8, 11u8, 179u8, 145u8, 68u8,
                            88u8, 225u8, 206u8, 127u8, 137u8, 255u8, 214u8, 168u8, 139u8, 143u8,
                            93u8, 110u8, 75u8, 140u8, 182u8, 60u8, 10u8, 102u8, 1u8, 226u8, 0u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Default number of blocks per round at genesis"]
                pub fn blocks_per_round(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "BlocksPerRound",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that candidates remain bonded before exit request is executable"]
                pub fn leave_candidates_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "LeaveCandidatesDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that candidate requests to adjust self-bond must wait to be executable"]
                pub fn candidate_bond_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "CandidateBondDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that delegators remain bonded before exit request is executable"]
                pub fn leave_delegators_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "LeaveDelegatorsDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that delegations remain bonded before revocation request is executable"]
                pub fn revoke_delegation_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "RevokeDelegationDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds that delegation {more, less} requests must wait before executable"]
                pub fn delegation_bond_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "DelegationBondDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds after which block authors are rewarded"]
                pub fn reward_payment_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "RewardPaymentDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Minimum number of selected candidates every round"]
                pub fn min_selected_candidates(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "MinSelectedCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum collator candidates allowed"]
                pub fn max_collator_candidates(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "MaxCollatorCandidates",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum delegators allowed per candidate"]
                pub fn max_total_delegators_per_candidate(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "MaxTotalDelegatorsPerCandidate",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum delegators counted per candidate"]
                pub fn max_delegators_per_candidate(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "MaxDelegatorsPerCandidate",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn default_payout_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "DefaultPayoutLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maximum delegations per delegator"]
                pub fn max_delegations_per_delegator(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "MaxDelegationsPerDelegator",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Default commission due to collators, is `CollatorCommission` storage value in genesis"]
                pub fn default_collator_commission(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Perbill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "DefaultCollatorCommission",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " Minimum stake required for any candidate to be in `SelectedCandidates` for the round"]
                pub fn min_collator_stk(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "MinCollatorStk",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Minimum stake required for any account to be a collator candidate"]
                pub fn min_candidate_stk(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "MinCandidateStk",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Minimum stake for any registered on-chain account to delegate"]
                pub fn min_delegation(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "MinDelegation",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The native token used for payouts"]
                pub fn native_token_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "NativeTokenId",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The account id that holds the liquidity mining issuance"]
                pub fn staking_issuance_vault(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_runtime::account::AccountId20,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "ParachainStaking",
                        "StakingIssuanceVault",
                        [
                            184u8, 103u8, 76u8, 37u8, 218u8, 155u8, 125u8, 78u8, 138u8, 122u8,
                            255u8, 132u8, 124u8, 68u8, 65u8, 163u8, 97u8, 77u8, 80u8, 33u8, 69u8,
                            55u8, 69u8, 230u8, 83u8, 135u8, 254u8, 221u8, 222u8, 177u8, 10u8,
                            189u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sequencer_staking {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Errors"]
        pub type Error = runtime_types::pallet_sequencer_staking::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_sequencer_staking::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "provides stake for the purpose of becoming sequencers"]
                #[doc = ""]
                #[doc = "- `chain` - chain for which to assign stake_amount"]
                #[doc = "- `stake_amont` - amount of stake"]
                #[doc = "- `alias_account` - optional parameter, alias account is eligible to create manual bataches"]
                #[doc = "                    of updates in pallet-rolldown. Alias account can not be set to another"]
                #[doc = "                    active sequencer or to some account that is already used as"]
                #[doc = "                    alias_account for another sequencer"]
                #[doc = "- `stake_action` - determines what are candidate expectations regarding joining active set,"]
                #[doc = "\t* 'StakeOnly' - sequencer only provides stake, but does not join active set."]
                #[doc = "\t* 'StakeAndJoinActiveSet' - sequencer provides stake and joins active set. Fails if"]
                #[doc = "\t\t\t\t\t\t\t\tcandidate didnt join active set or if candidate is already in active set."]
                #[doc = "\t\tCandiate can also choose to call `rejoin_active_sequencers` later when there are free seats to"]
                #[doc = "\t\tjoin active set"]
                pub struct ProvideSequencerStake {
                    pub chain: provide_sequencer_stake::Chain,
                    pub stake_amount: provide_sequencer_stake::StakeAmount,
                    pub alias_account: provide_sequencer_stake::AliasAccount,
                    pub stake_action: provide_sequencer_stake::StakeAction,
                }
                pub mod provide_sequencer_stake {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type StakeAmount = ::core::primitive::u128;
                    pub type AliasAccount =
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
                    pub type StakeAction = runtime_types::pallet_sequencer_staking::StakeAction;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ProvideSequencerStake {
                    const PALLET: &'static str = "SequencerStaking";
                    const CALL: &'static str = "provide_sequencer_stake";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct LeaveActiveSequencers {
                    pub chain: leave_active_sequencers::Chain,
                }
                pub mod leave_active_sequencers {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for LeaveActiveSequencers {
                    const PALLET: &'static str = "SequencerStaking";
                    const CALL: &'static str = "leave_active_sequencers";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RejoinActiveSequencers {
                    pub chain: rejoin_active_sequencers::Chain,
                }
                pub mod rejoin_active_sequencers {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RejoinActiveSequencers {
                    const PALLET: &'static str = "SequencerStaking";
                    const CALL: &'static str = "rejoin_active_sequencers";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Unstake {
                    pub chain: unstake::Chain,
                }
                pub mod unstake {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Unstake {
                    const PALLET: &'static str = "SequencerStaking";
                    const CALL: &'static str = "unstake";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SetSequencerConfiguration {
                    pub chain: set_sequencer_configuration::Chain,
                    pub minimal_stake_amount: set_sequencer_configuration::MinimalStakeAmount,
                    pub slash_fine_amount: set_sequencer_configuration::SlashFineAmount,
                }
                pub mod set_sequencer_configuration {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type MinimalStakeAmount = ::core::primitive::u128;
                    pub type SlashFineAmount = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetSequencerConfiguration {
                    const PALLET: &'static str = "SequencerStaking";
                    const CALL: &'static str = "set_sequencer_configuration";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Allows to configure alias_account for active sequencer. This extrinisic can only be called"]
                #[doc = "by active sequencer"]
                #[doc = "- `chain` -"]
                #[doc = "- `alias_account` - optional parameter, alias account is eligible to create manual bataches"]
                #[doc = "                    of updates in pallet-rolldown. Alias account can not be set to another"]
                #[doc = "                    active sequencer or to some account that is already used as"]
                #[doc = "                    alias_account for another sequencer"]
                pub struct SetUpdaterAccountForSequencer {
                    pub chain: set_updater_account_for_sequencer::Chain,
                    pub alias_account: set_updater_account_for_sequencer::AliasAccount,
                }
                pub mod set_updater_account_for_sequencer {
                    use super::runtime_types;
                    pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                    pub type AliasAccount =
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetUpdaterAccountForSequencer {
                    const PALLET: &'static str = "SequencerStaking";
                    const CALL: &'static str = "set_updater_account_for_sequencer";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "This extrinsic should be used to distribute rewards for sequencer."]
                #[doc = ""]
                #[doc = "params:"]
                #[doc = "- sequencer - account id"]
                #[doc = "- number_of_sessions - number of rewards periods that should be processed within extrinsic."]
                pub struct PayoutSequencerRewards {
                    pub sequencer: payout_sequencer_rewards::Sequencer,
                    pub number_of_sessions: payout_sequencer_rewards::NumberOfSessions,
                }
                pub mod payout_sequencer_rewards {
                    use super::runtime_types;
                    pub type Sequencer = runtime_types::sp_runtime::account::AccountId20;
                    pub type NumberOfSessions = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PayoutSequencerRewards {
                    const PALLET: &'static str = "SequencerStaking";
                    const CALL: &'static str = "payout_sequencer_rewards";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "provides stake for the purpose of becoming sequencers"]
                #[doc = ""]
                #[doc = "- `chain` - chain for which to assign stake_amount"]
                #[doc = "- `stake_amont` - amount of stake"]
                #[doc = "- `alias_account` - optional parameter, alias account is eligible to create manual bataches"]
                #[doc = "                    of updates in pallet-rolldown. Alias account can not be set to another"]
                #[doc = "                    active sequencer or to some account that is already used as"]
                #[doc = "                    alias_account for another sequencer"]
                #[doc = "- `stake_action` - determines what are candidate expectations regarding joining active set,"]
                #[doc = "\t* 'StakeOnly' - sequencer only provides stake, but does not join active set."]
                #[doc = "\t* 'StakeAndJoinActiveSet' - sequencer provides stake and joins active set. Fails if"]
                #[doc = "\t\t\t\t\t\t\t\tcandidate didnt join active set or if candidate is already in active set."]
                #[doc = "\t\tCandiate can also choose to call `rejoin_active_sequencers` later when there are free seats to"]
                #[doc = "\t\tjoin active set"]
                pub fn provide_sequencer_stake(
                    &self,
                    chain: types::provide_sequencer_stake::Chain,
                    stake_amount: types::provide_sequencer_stake::StakeAmount,
                    alias_account: types::provide_sequencer_stake::AliasAccount,
                    stake_action: types::provide_sequencer_stake::StakeAction,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ProvideSequencerStake,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SequencerStaking",
                        "provide_sequencer_stake",
                        types::ProvideSequencerStake {
                            chain,
                            stake_amount,
                            alias_account,
                            stake_action,
                        },
                        [
                            200u8, 230u8, 254u8, 221u8, 172u8, 116u8, 56u8, 178u8, 26u8, 183u8,
                            247u8, 229u8, 238u8, 44u8, 100u8, 231u8, 22u8, 74u8, 52u8, 218u8,
                            221u8, 7u8, 100u8, 130u8, 36u8, 44u8, 80u8, 84u8, 158u8, 121u8, 82u8,
                            62u8,
                        ],
                    )
                }
                pub fn leave_active_sequencers(
                    &self,
                    chain: types::leave_active_sequencers::Chain,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::LeaveActiveSequencers,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SequencerStaking",
                        "leave_active_sequencers",
                        types::LeaveActiveSequencers { chain },
                        [
                            160u8, 35u8, 99u8, 212u8, 133u8, 80u8, 171u8, 106u8, 205u8, 55u8,
                            189u8, 20u8, 164u8, 47u8, 3u8, 50u8, 247u8, 35u8, 223u8, 74u8, 24u8,
                            167u8, 67u8, 187u8, 55u8, 82u8, 187u8, 195u8, 4u8, 173u8, 123u8, 249u8,
                        ],
                    )
                }
                pub fn rejoin_active_sequencers(
                    &self,
                    chain: types::rejoin_active_sequencers::Chain,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::RejoinActiveSequencers,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SequencerStaking",
                        "rejoin_active_sequencers",
                        types::RejoinActiveSequencers { chain },
                        [
                            175u8, 66u8, 157u8, 115u8, 92u8, 240u8, 67u8, 115u8, 19u8, 73u8, 249u8,
                            212u8, 210u8, 32u8, 62u8, 53u8, 145u8, 115u8, 221u8, 166u8, 139u8, 5u8,
                            162u8, 87u8, 170u8, 74u8, 95u8, 212u8, 142u8, 104u8, 100u8, 23u8,
                        ],
                    )
                }
                pub fn unstake(
                    &self,
                    chain: types::unstake::Chain,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Unstake>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SequencerStaking",
                        "unstake",
                        types::Unstake { chain },
                        [
                            150u8, 0u8, 72u8, 59u8, 106u8, 205u8, 96u8, 35u8, 7u8, 233u8, 168u8,
                            125u8, 183u8, 25u8, 74u8, 193u8, 99u8, 81u8, 15u8, 92u8, 113u8, 215u8,
                            162u8, 103u8, 146u8, 166u8, 157u8, 16u8, 177u8, 99u8, 88u8, 158u8,
                        ],
                    )
                }
                pub fn set_sequencer_configuration(
                    &self,
                    chain: types::set_sequencer_configuration::Chain,
                    minimal_stake_amount: types::set_sequencer_configuration::MinimalStakeAmount,
                    slash_fine_amount: types::set_sequencer_configuration::SlashFineAmount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetSequencerConfiguration,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SequencerStaking",
                        "set_sequencer_configuration",
                        types::SetSequencerConfiguration {
                            chain,
                            minimal_stake_amount,
                            slash_fine_amount,
                        },
                        [
                            173u8, 226u8, 83u8, 110u8, 169u8, 229u8, 202u8, 46u8, 23u8, 15u8,
                            163u8, 191u8, 112u8, 145u8, 155u8, 221u8, 32u8, 111u8, 232u8, 156u8,
                            192u8, 208u8, 104u8, 205u8, 214u8, 104u8, 159u8, 72u8, 119u8, 94u8,
                            108u8, 242u8,
                        ],
                    )
                }
                #[doc = "Allows to configure alias_account for active sequencer. This extrinisic can only be called"]
                #[doc = "by active sequencer"]
                #[doc = "- `chain` -"]
                #[doc = "- `alias_account` - optional parameter, alias account is eligible to create manual bataches"]
                #[doc = "                    of updates in pallet-rolldown. Alias account can not be set to another"]
                #[doc = "                    active sequencer or to some account that is already used as"]
                #[doc = "                    alias_account for another sequencer"]
                pub fn set_updater_account_for_sequencer(
                    &self,
                    chain: types::set_updater_account_for_sequencer::Chain,
                    alias_account: types::set_updater_account_for_sequencer::AliasAccount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::SetUpdaterAccountForSequencer,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SequencerStaking",
                        "set_updater_account_for_sequencer",
                        types::SetUpdaterAccountForSequencer {
                            chain,
                            alias_account,
                        },
                        [
                            117u8, 9u8, 211u8, 78u8, 173u8, 42u8, 216u8, 153u8, 19u8, 225u8, 48u8,
                            153u8, 182u8, 173u8, 95u8, 127u8, 192u8, 174u8, 66u8, 173u8, 23u8,
                            87u8, 28u8, 192u8, 60u8, 26u8, 200u8, 161u8, 186u8, 228u8, 14u8, 84u8,
                        ],
                    )
                }
                #[doc = "This extrinsic should be used to distribute rewards for sequencer."]
                #[doc = ""]
                #[doc = "params:"]
                #[doc = "- sequencer - account id"]
                #[doc = "- number_of_sessions - number of rewards periods that should be processed within extrinsic."]
                pub fn payout_sequencer_rewards(
                    &self,
                    sequencer: types::payout_sequencer_rewards::Sequencer,
                    number_of_sessions: types::payout_sequencer_rewards::NumberOfSessions,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::PayoutSequencerRewards,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SequencerStaking",
                        "payout_sequencer_rewards",
                        types::PayoutSequencerRewards {
                            sequencer,
                            number_of_sessions,
                        },
                        [
                            110u8, 86u8, 44u8, 247u8, 237u8, 45u8, 121u8, 188u8, 150u8, 43u8, 59u8,
                            25u8, 195u8, 170u8, 101u8, 73u8, 170u8, 218u8, 84u8, 242u8, 211u8,
                            208u8, 100u8, 209u8, 112u8, 174u8, 116u8, 245u8, 116u8, 13u8, 230u8,
                            206u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_sequencer_staking::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SequencersRemovedFromActiveSet(
                pub sequencers_removed_from_active_set::Field0,
                pub sequencers_removed_from_active_set::Field1,
            );
            pub mod sequencers_removed_from_active_set {
                use super::runtime_types;
                pub type Field0 = runtime_types::pallet_rolldown::messages::Chain;
                pub type Field1 = ::subxt::ext::subxt_core::alloc::vec::Vec<
                    runtime_types::sp_runtime::account::AccountId20,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SequencersRemovedFromActiveSet {
                const PALLET: &'static str = "SequencerStaking";
                const EVENT: &'static str = "SequencersRemovedFromActiveSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SequencerJoinedActiveSet(
                pub sequencer_joined_active_set::Field0,
                pub sequencer_joined_active_set::Field1,
            );
            pub mod sequencer_joined_active_set {
                use super::runtime_types;
                pub type Field0 = runtime_types::pallet_rolldown::messages::Chain;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SequencerJoinedActiveSet {
                const PALLET: &'static str = "SequencerStaking";
                const EVENT: &'static str = "SequencerJoinedActiveSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct StakeProvided {
                pub chain: stake_provided::Chain,
                pub added_stake: stake_provided::AddedStake,
                pub total_stake: stake_provided::TotalStake,
            }
            pub mod stake_provided {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type AddedStake = ::core::primitive::u128;
                pub type TotalStake = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for StakeProvided {
                const PALLET: &'static str = "SequencerStaking";
                const EVENT: &'static str = "StakeProvided";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct StakeRemoved {
                pub chain: stake_removed::Chain,
                pub removed_stake: stake_removed::RemovedStake,
            }
            pub mod stake_removed {
                use super::runtime_types;
                pub type Chain = runtime_types::pallet_rolldown::messages::Chain;
                pub type RemovedStake = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for StakeRemoved {
                const PALLET: &'static str = "SequencerStaking";
                const EVENT: &'static str = "StakeRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Notify about reward periods that has been paid (sequencer, payout rounds, any rewards left)"]
            pub struct SequencerRewardsDistributed(
                pub sequencer_rewards_distributed::Field0,
                pub sequencer_rewards_distributed::Field1,
            );
            pub mod sequencer_rewards_distributed {
                use super::runtime_types;
                pub type Field0 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field1 = runtime_types::pallet_sequencer_staking::PayoutRounds;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SequencerRewardsDistributed {
                const PALLET: &'static str = "SequencerStaking";
                const EVENT: &'static str = "SequencerRewardsDistributed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Paid the account the balance as liquid rewards"]
            pub struct Rewarded(
                pub rewarded::Field0,
                pub rewarded::Field1,
                pub rewarded::Field2,
            );
            pub mod rewarded {
                use super::runtime_types;
                pub type Field0 = ::core::primitive::u32;
                pub type Field1 = runtime_types::sp_runtime::account::AccountId20;
                pub type Field2 = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Rewarded {
                const PALLET: &'static str = "SequencerStaking";
                const EVENT: &'static str = "Rewarded";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod sequencer_stake {
                    use super::runtime_types;
                    pub type SequencerStake = ::core::primitive::u128;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = runtime_types::pallet_rolldown::messages::Chain;
                }
                pub mod alias_account {
                    use super::runtime_types;
                    pub type AliasAccount = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = runtime_types::pallet_rolldown::messages::Chain;
                }
                pub mod alias_account_in_use {
                    use super::runtime_types;
                    pub type AliasAccountInUse = ();
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod active_sequencers {
                    use super::runtime_types;
                    pub type ActiveSequencers = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::pallet_rolldown::messages::Chain,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                    >;
                }
                pub mod selected_sequencer {
                    use super::runtime_types;
                    pub type SelectedSequencer = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::pallet_rolldown::messages::Chain,
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                }
                pub mod current_round {
                    use super::runtime_types;
                    pub type CurrentRound = ::core::primitive::u32;
                }
                pub mod next_sequencer_index {
                    use super::runtime_types;
                    pub type NextSequencerIndex = ::subxt::ext::subxt_core::utils::KeyedVec<
                        runtime_types::pallet_rolldown::messages::Chain,
                        ::core::primitive::u32,
                    >;
                }
                pub mod slash_fine_amount {
                    use super::runtime_types;
                    pub type SlashFineAmount = ::core::primitive::u128;
                }
                pub mod minimal_stake_amount {
                    use super::runtime_types;
                    pub type MinimalStakeAmount = ::core::primitive::u128;
                }
                pub mod round_sequencer_reward_info {
                    use super::runtime_types;
                    pub type RoundSequencerRewardInfo = ::core::primitive::u128;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param1 = ::core::primitive::u32;
                }
                pub mod points {
                    use super::runtime_types;
                    pub type Points = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod awarded_pts {
                    use super::runtime_types;
                    pub type AwardedPts = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u32;
                    pub type Param1 = runtime_types::sp_runtime::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                pub fn sequencer_stake_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::sequencer_stake::SequencerStake,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "SequencerStake",
                        (),
                        [
                            174u8, 79u8, 18u8, 23u8, 82u8, 44u8, 109u8, 133u8, 129u8, 203u8, 53u8,
                            247u8, 234u8, 194u8, 105u8, 156u8, 27u8, 209u8, 221u8, 124u8, 59u8,
                            217u8, 188u8, 253u8, 42u8, 1u8, 196u8, 96u8, 68u8, 157u8, 109u8, 42u8,
                        ],
                    )
                }
                pub fn sequencer_stake_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::sequencer_stake::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::sequencer_stake::Param0,
                    >,
                    types::sequencer_stake::SequencerStake,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "SequencerStake",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            174u8, 79u8, 18u8, 23u8, 82u8, 44u8, 109u8, 133u8, 129u8, 203u8, 53u8,
                            247u8, 234u8, 194u8, 105u8, 156u8, 27u8, 209u8, 221u8, 124u8, 59u8,
                            217u8, 188u8, 253u8, 42u8, 1u8, 196u8, 96u8, 68u8, 157u8, 109u8, 42u8,
                        ],
                    )
                }
                pub fn sequencer_stake(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::sequencer_stake::Param0>,
                    _1: impl ::core::borrow::Borrow<types::sequencer_stake::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::sequencer_stake::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::sequencer_stake::Param1,
                        >,
                    ),
                    types::sequencer_stake::SequencerStake,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "SequencerStake",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            174u8, 79u8, 18u8, 23u8, 82u8, 44u8, 109u8, 133u8, 129u8, 203u8, 53u8,
                            247u8, 234u8, 194u8, 105u8, 156u8, 27u8, 209u8, 221u8, 124u8, 59u8,
                            217u8, 188u8, 253u8, 42u8, 1u8, 196u8, 96u8, 68u8, 157u8, 109u8, 42u8,
                        ],
                    )
                }
                pub fn alias_account_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::alias_account::AliasAccount,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "AliasAccount",
                        (),
                        [
                            187u8, 254u8, 39u8, 211u8, 6u8, 232u8, 192u8, 43u8, 131u8, 80u8, 146u8,
                            83u8, 67u8, 180u8, 23u8, 160u8, 222u8, 180u8, 22u8, 16u8, 223u8, 142u8,
                            235u8, 75u8, 26u8, 255u8, 32u8, 92u8, 217u8, 63u8, 61u8, 123u8,
                        ],
                    )
                }
                pub fn alias_account_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::alias_account::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::alias_account::Param0,
                    >,
                    types::alias_account::AliasAccount,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "AliasAccount",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            187u8, 254u8, 39u8, 211u8, 6u8, 232u8, 192u8, 43u8, 131u8, 80u8, 146u8,
                            83u8, 67u8, 180u8, 23u8, 160u8, 222u8, 180u8, 22u8, 16u8, 223u8, 142u8,
                            235u8, 75u8, 26u8, 255u8, 32u8, 92u8, 217u8, 63u8, 61u8, 123u8,
                        ],
                    )
                }
                pub fn alias_account(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::alias_account::Param0>,
                    _1: impl ::core::borrow::Borrow<types::alias_account::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::alias_account::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::alias_account::Param1,
                        >,
                    ),
                    types::alias_account::AliasAccount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "AliasAccount",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            187u8, 254u8, 39u8, 211u8, 6u8, 232u8, 192u8, 43u8, 131u8, 80u8, 146u8,
                            83u8, 67u8, 180u8, 23u8, 160u8, 222u8, 180u8, 22u8, 16u8, 223u8, 142u8,
                            235u8, 75u8, 26u8, 255u8, 32u8, 92u8, 217u8, 63u8, 61u8, 123u8,
                        ],
                    )
                }
                pub fn alias_account_in_use_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::alias_account_in_use::AliasAccountInUse,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "AliasAccountInUse",
                        (),
                        [
                            147u8, 254u8, 130u8, 156u8, 163u8, 35u8, 207u8, 98u8, 117u8, 188u8,
                            156u8, 50u8, 84u8, 160u8, 115u8, 222u8, 181u8, 109u8, 144u8, 54u8,
                            127u8, 153u8, 140u8, 140u8, 24u8, 201u8, 78u8, 124u8, 69u8, 223u8,
                            26u8, 125u8,
                        ],
                    )
                }
                pub fn alias_account_in_use(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::alias_account_in_use::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::alias_account_in_use::Param0,
                    >,
                    types::alias_account_in_use::AliasAccountInUse,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "AliasAccountInUse",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            147u8, 254u8, 130u8, 156u8, 163u8, 35u8, 207u8, 98u8, 117u8, 188u8,
                            156u8, 50u8, 84u8, 160u8, 115u8, 222u8, 181u8, 109u8, 144u8, 54u8,
                            127u8, 153u8, 140u8, 140u8, 24u8, 201u8, 78u8, 124u8, 69u8, 223u8,
                            26u8, 125u8,
                        ],
                    )
                }
                pub fn active_sequencers(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::active_sequencers::ActiveSequencers,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "ActiveSequencers",
                        (),
                        [
                            0u8, 27u8, 85u8, 245u8, 37u8, 15u8, 51u8, 198u8, 103u8, 55u8, 181u8,
                            249u8, 223u8, 76u8, 63u8, 229u8, 4u8, 165u8, 139u8, 12u8, 39u8, 233u8,
                            210u8, 160u8, 137u8, 166u8, 69u8, 24u8, 84u8, 63u8, 192u8, 111u8,
                        ],
                    )
                }
                pub fn selected_sequencer(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::selected_sequencer::SelectedSequencer,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "SelectedSequencer",
                        (),
                        [
                            122u8, 89u8, 151u8, 232u8, 132u8, 113u8, 132u8, 135u8, 70u8, 132u8,
                            153u8, 214u8, 228u8, 142u8, 203u8, 201u8, 169u8, 35u8, 203u8, 18u8,
                            94u8, 234u8, 211u8, 109u8, 5u8, 23u8, 109u8, 108u8, 29u8, 119u8, 20u8,
                            238u8,
                        ],
                    )
                }
                pub fn current_round(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::current_round::CurrentRound,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "CurrentRound",
                        (),
                        [
                            36u8, 98u8, 75u8, 19u8, 13u8, 250u8, 136u8, 31u8, 63u8, 120u8, 224u8,
                            83u8, 183u8, 198u8, 195u8, 37u8, 82u8, 213u8, 193u8, 217u8, 137u8,
                            62u8, 201u8, 251u8, 45u8, 141u8, 171u8, 22u8, 54u8, 134u8, 113u8,
                            232u8,
                        ],
                    )
                }
                pub fn next_sequencer_index(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_sequencer_index::NextSequencerIndex,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "NextSequencerIndex",
                        (),
                        [
                            245u8, 219u8, 181u8, 104u8, 109u8, 85u8, 79u8, 135u8, 17u8, 113u8,
                            198u8, 16u8, 81u8, 4u8, 4u8, 157u8, 206u8, 249u8, 26u8, 163u8, 187u8,
                            76u8, 169u8, 205u8, 38u8, 173u8, 64u8, 95u8, 95u8, 89u8, 170u8, 137u8,
                        ],
                    )
                }
                pub fn slash_fine_amount(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::slash_fine_amount::SlashFineAmount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "SlashFineAmount",
                        (),
                        [
                            19u8, 206u8, 74u8, 27u8, 216u8, 135u8, 154u8, 49u8, 158u8, 155u8, 69u8,
                            152u8, 37u8, 240u8, 163u8, 248u8, 146u8, 229u8, 186u8, 227u8, 250u8,
                            89u8, 220u8, 7u8, 179u8, 180u8, 202u8, 206u8, 108u8, 219u8, 185u8,
                            177u8,
                        ],
                    )
                }
                pub fn minimal_stake_amount(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::minimal_stake_amount::MinimalStakeAmount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "MinimalStakeAmount",
                        (),
                        [
                            142u8, 74u8, 38u8, 160u8, 23u8, 157u8, 179u8, 120u8, 222u8, 39u8, 14u8,
                            204u8, 5u8, 212u8, 219u8, 167u8, 147u8, 191u8, 29u8, 110u8, 197u8,
                            140u8, 96u8, 21u8, 115u8, 65u8, 91u8, 143u8, 127u8, 165u8, 166u8,
                            248u8,
                        ],
                    )
                }
                #[doc = " Stores information about rewards per each session"]
                pub fn round_sequencer_reward_info_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::round_sequencer_reward_info::RoundSequencerRewardInfo,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "RoundSequencerRewardInfo",
                        (),
                        [
                            219u8, 114u8, 104u8, 201u8, 221u8, 1u8, 100u8, 173u8, 71u8, 145u8,
                            206u8, 94u8, 150u8, 82u8, 179u8, 222u8, 156u8, 173u8, 40u8, 99u8, 89u8,
                            36u8, 33u8, 16u8, 100u8, 233u8, 37u8, 225u8, 124u8, 73u8, 27u8, 62u8,
                        ],
                    )
                }
                #[doc = " Stores information about rewards per each session"]
                pub fn round_sequencer_reward_info_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::round_sequencer_reward_info::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::round_sequencer_reward_info::Param0,
                    >,
                    types::round_sequencer_reward_info::RoundSequencerRewardInfo,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "RoundSequencerRewardInfo",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            219u8, 114u8, 104u8, 201u8, 221u8, 1u8, 100u8, 173u8, 71u8, 145u8,
                            206u8, 94u8, 150u8, 82u8, 179u8, 222u8, 156u8, 173u8, 40u8, 99u8, 89u8,
                            36u8, 33u8, 16u8, 100u8, 233u8, 37u8, 225u8, 124u8, 73u8, 27u8, 62u8,
                        ],
                    )
                }
                #[doc = " Stores information about rewards per each session"]
                pub fn round_sequencer_reward_info(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::round_sequencer_reward_info::Param0>,
                    _1: impl ::core::borrow::Borrow<types::round_sequencer_reward_info::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::round_sequencer_reward_info::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::round_sequencer_reward_info::Param1,
                        >,
                    ),
                    types::round_sequencer_reward_info::RoundSequencerRewardInfo,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "RoundSequencerRewardInfo",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            219u8, 114u8, 104u8, 201u8, 221u8, 1u8, 100u8, 173u8, 71u8, 145u8,
                            206u8, 94u8, 150u8, 82u8, 179u8, 222u8, 156u8, 173u8, 40u8, 99u8, 89u8,
                            36u8, 33u8, 16u8, 100u8, 233u8, 37u8, 225u8, 124u8, 73u8, 27u8, 62u8,
                        ],
                    )
                }
                #[doc = " Total points awarded to collators for block production in the round"]
                pub fn points_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::points::Points,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "Points",
                        (),
                        [
                            72u8, 3u8, 145u8, 244u8, 22u8, 10u8, 182u8, 153u8, 13u8, 175u8, 94u8,
                            117u8, 53u8, 89u8, 18u8, 171u8, 147u8, 72u8, 93u8, 135u8, 155u8, 80u8,
                            192u8, 61u8, 145u8, 70u8, 144u8, 10u8, 33u8, 213u8, 154u8, 161u8,
                        ],
                    )
                }
                #[doc = " Total points awarded to collators for block production in the round"]
                pub fn points(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::points::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::points::Param0,
                    >,
                    types::points::Points,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "Points",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            72u8, 3u8, 145u8, 244u8, 22u8, 10u8, 182u8, 153u8, 13u8, 175u8, 94u8,
                            117u8, 53u8, 89u8, 18u8, 171u8, 147u8, 72u8, 93u8, 135u8, 155u8, 80u8,
                            192u8, 61u8, 145u8, 70u8, 144u8, 10u8, 33u8, 213u8, 154u8, 161u8,
                        ],
                    )
                }
                #[doc = " Points for each collator per round"]
                pub fn awarded_pts_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::awarded_pts::AwardedPts,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "AwardedPts",
                        (),
                        [
                            205u8, 111u8, 81u8, 222u8, 104u8, 240u8, 213u8, 106u8, 246u8, 32u8,
                            78u8, 203u8, 237u8, 252u8, 105u8, 246u8, 24u8, 24u8, 102u8, 33u8,
                            215u8, 13u8, 229u8, 162u8, 27u8, 188u8, 89u8, 131u8, 119u8, 169u8,
                            242u8, 176u8,
                        ],
                    )
                }
                #[doc = " Points for each collator per round"]
                pub fn awarded_pts_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::awarded_pts::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::awarded_pts::Param0,
                    >,
                    types::awarded_pts::AwardedPts,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "AwardedPts",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            205u8, 111u8, 81u8, 222u8, 104u8, 240u8, 213u8, 106u8, 246u8, 32u8,
                            78u8, 203u8, 237u8, 252u8, 105u8, 246u8, 24u8, 24u8, 102u8, 33u8,
                            215u8, 13u8, 229u8, 162u8, 27u8, 188u8, 89u8, 131u8, 119u8, 169u8,
                            242u8, 176u8,
                        ],
                    )
                }
                #[doc = " Points for each collator per round"]
                pub fn awarded_pts(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::awarded_pts::Param0>,
                    _1: impl ::core::borrow::Borrow<types::awarded_pts::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::awarded_pts::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::awarded_pts::Param1,
                        >,
                    ),
                    types::awarded_pts::AwardedPts,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "AwardedPts",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            205u8, 111u8, 81u8, 222u8, 104u8, 240u8, 213u8, 106u8, 246u8, 32u8,
                            78u8, 203u8, 237u8, 252u8, 105u8, 246u8, 24u8, 24u8, 102u8, 33u8,
                            215u8, 13u8, 229u8, 162u8, 27u8, 188u8, 89u8, 131u8, 119u8, 169u8,
                            242u8, 176u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                pub fn minimum_sequencers(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "MinimumSequencers",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn no_of_past_sessions_for_eligibility(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "NoOfPastSessionsForEligibility",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn max_sequencers(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "MaxSequencers",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn blocks_for_sequencer_update(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "BlocksForSequencerUpdate",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                pub fn canceller_reward_percentage(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Permill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "CancellerRewardPercentage",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                pub fn default_payout_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "DefaultPayoutLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Number of rounds after which block authors are rewarded"]
                pub fn reward_payment_delay(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "SequencerStaking",
                        "RewardPaymentDelay",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod session {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the session pallet."]
        pub type Error = runtime_types::pallet_session::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_session::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Sets the session key(s) of the function caller to `keys`."]
                #[doc = "Allows an account to set its session key prior to becoming a validator."]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be signed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
                #[doc = "  fixed."]
                pub struct SetKeys {
                    pub keys: set_keys::Keys,
                    pub proof: set_keys::Proof,
                }
                pub mod set_keys {
                    use super::runtime_types;
                    pub type Keys = runtime_types::rollup_runtime::SessionKeys;
                    pub type Proof =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "set_keys";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Removes any session key(s) of the function caller."]
                #[doc = ""]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                #[doc = "usually means being a stash account)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
                #[doc = "  `T::Keys::key_ids()` which is fixed."]
                pub struct PurgeKeys;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for PurgeKeys {
                    const PALLET: &'static str = "Session";
                    const CALL: &'static str = "purge_keys";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Sets the session key(s) of the function caller to `keys`."]
                #[doc = "Allows an account to set its session key prior to becoming a validator."]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be signed."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
                #[doc = "  fixed."]
                pub fn set_keys(
                    &self,
                    keys: types::set_keys::Keys,
                    proof: types::set_keys::Proof,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetKeys>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Session",
                        "set_keys",
                        types::SetKeys { keys, proof },
                        [
                            47u8, 127u8, 163u8, 217u8, 206u8, 187u8, 133u8, 242u8, 41u8, 220u8,
                            161u8, 23u8, 104u8, 81u8, 53u8, 96u8, 129u8, 183u8, 37u8, 129u8, 178u8,
                            48u8, 192u8, 123u8, 194u8, 58u8, 193u8, 238u8, 114u8, 250u8, 81u8,
                            252u8,
                        ],
                    )
                }
                #[doc = "Removes any session key(s) of the function caller."]
                #[doc = ""]
                #[doc = "This doesn't take effect until the next session."]
                #[doc = ""]
                #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                #[doc = "usually means being a stash account)."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
                #[doc = "  `T::Keys::key_ids()` which is fixed."]
                pub fn purge_keys(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::PurgeKeys>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Session",
                        "purge_keys",
                        types::PurgeKeys {},
                        [
                            215u8, 204u8, 146u8, 236u8, 32u8, 78u8, 198u8, 79u8, 85u8, 214u8, 15u8,
                            151u8, 158u8, 31u8, 146u8, 119u8, 119u8, 204u8, 151u8, 169u8, 226u8,
                            67u8, 217u8, 39u8, 241u8, 245u8, 203u8, 240u8, 203u8, 172u8, 16u8,
                            209u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_session::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New session has happened. Note that the argument is the session index, not the"]
            #[doc = "block number as the type might suggest."]
            pub struct NewSession {
                pub session_index: new_session::SessionIndex,
            }
            pub mod new_session {
                use super::runtime_types;
                pub type SessionIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewSession {
                const PALLET: &'static str = "Session";
                const EVENT: &'static str = "NewSession";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod validators {
                    use super::runtime_types;
                    pub type Validators = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                }
                pub mod current_index {
                    use super::runtime_types;
                    pub type CurrentIndex = ::core::primitive::u32;
                }
                pub mod queued_changed {
                    use super::runtime_types;
                    pub type QueuedChanged = ::core::primitive::bool;
                }
                pub mod queued_keys {
                    use super::runtime_types;
                    pub type QueuedKeys = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::rollup_runtime::SessionKeys,
                    )>;
                }
                pub mod disabled_validators {
                    use super::runtime_types;
                    pub type DisabledValidators =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>;
                }
                pub mod next_keys {
                    use super::runtime_types;
                    pub type NextKeys = runtime_types::rollup_runtime::SessionKeys;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod key_owner {
                    use super::runtime_types;
                    pub type KeyOwner = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param0 = runtime_types::sp_core::crypto::KeyTypeId;
                    pub type Param1 = [::core::primitive::u8];
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current set of validators."]
                pub fn validators(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::validators::Validators,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "Validators",
                        (),
                        [
                            74u8, 152u8, 125u8, 12u8, 188u8, 63u8, 206u8, 211u8, 41u8, 58u8, 12u8,
                            204u8, 94u8, 87u8, 207u8, 104u8, 228u8, 185u8, 237u8, 140u8, 81u8,
                            153u8, 214u8, 53u8, 56u8, 170u8, 153u8, 251u8, 222u8, 26u8, 156u8,
                            174u8,
                        ],
                    )
                }
                #[doc = " Current index of the session."]
                pub fn current_index(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::current_index::CurrentIndex,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "CurrentIndex",
                        (),
                        [
                            167u8, 151u8, 125u8, 150u8, 159u8, 21u8, 78u8, 217u8, 237u8, 183u8,
                            135u8, 65u8, 187u8, 114u8, 188u8, 206u8, 16u8, 32u8, 69u8, 208u8,
                            134u8, 159u8, 232u8, 224u8, 243u8, 27u8, 31u8, 166u8, 145u8, 44u8,
                            221u8, 230u8,
                        ],
                    )
                }
                #[doc = " True if the underlying economic identities or weighting behind the validators"]
                #[doc = " has changed in the queued validator set."]
                pub fn queued_changed(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::queued_changed::QueuedChanged,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "QueuedChanged",
                        (),
                        [
                            184u8, 137u8, 224u8, 137u8, 31u8, 236u8, 95u8, 164u8, 102u8, 225u8,
                            198u8, 227u8, 140u8, 37u8, 113u8, 57u8, 59u8, 4u8, 202u8, 102u8, 117u8,
                            36u8, 226u8, 64u8, 113u8, 141u8, 199u8, 111u8, 99u8, 144u8, 198u8,
                            153u8,
                        ],
                    )
                }
                #[doc = " The queued keys for the next session. When the next session begins, these keys"]
                #[doc = " will be used to determine the validator's session keys."]
                pub fn queued_keys(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::queued_keys::QueuedKeys,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "QueuedKeys",
                        (),
                        [
                            79u8, 165u8, 50u8, 13u8, 220u8, 28u8, 103u8, 217u8, 33u8, 178u8, 18u8,
                            235u8, 208u8, 203u8, 39u8, 109u8, 182u8, 104u8, 28u8, 128u8, 144u8,
                            215u8, 26u8, 92u8, 144u8, 152u8, 201u8, 28u8, 182u8, 62u8, 193u8,
                            210u8,
                        ],
                    )
                }
                #[doc = " Indices of disabled validators."]
                #[doc = ""]
                #[doc = " The vec is always kept sorted so that we can find whether a given validator is"]
                #[doc = " disabled using binary search. It gets cleared when `on_session_ending` returns"]
                #[doc = " a new set of identities."]
                pub fn disabled_validators(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::disabled_validators::DisabledValidators,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "DisabledValidators",
                        (),
                        [
                            213u8, 19u8, 168u8, 234u8, 187u8, 200u8, 180u8, 97u8, 234u8, 189u8,
                            36u8, 233u8, 158u8, 184u8, 45u8, 35u8, 129u8, 213u8, 133u8, 8u8, 104u8,
                            183u8, 46u8, 68u8, 154u8, 240u8, 132u8, 22u8, 247u8, 11u8, 54u8, 221u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_keys::NextKeys,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "NextKeys",
                        (),
                        [
                            184u8, 246u8, 103u8, 216u8, 133u8, 134u8, 59u8, 69u8, 236u8, 171u8,
                            92u8, 54u8, 4u8, 53u8, 230u8, 121u8, 69u8, 221u8, 133u8, 22u8, 232u8,
                            205u8, 199u8, 126u8, 183u8, 140u8, 46u8, 162u8, 124u8, 43u8, 151u8,
                            191u8,
                        ],
                    )
                }
                #[doc = " The next session keys for a validator."]
                pub fn next_keys(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::next_keys::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::next_keys::Param0,
                    >,
                    types::next_keys::NextKeys,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "NextKeys",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            184u8, 246u8, 103u8, 216u8, 133u8, 134u8, 59u8, 69u8, 236u8, 171u8,
                            92u8, 54u8, 4u8, 53u8, 230u8, 121u8, 69u8, 221u8, 133u8, 22u8, 232u8,
                            205u8, 199u8, 126u8, 183u8, 140u8, 46u8, 162u8, 124u8, 43u8, 151u8,
                            191u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::key_owner::KeyOwner,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "KeyOwner",
                        (),
                        [
                            7u8, 34u8, 6u8, 153u8, 19u8, 114u8, 111u8, 74u8, 48u8, 195u8, 192u8,
                            125u8, 226u8, 155u8, 218u8, 11u8, 41u8, 45u8, 31u8, 159u8, 32u8, 26u8,
                            53u8, 206u8, 109u8, 191u8, 139u8, 162u8, 193u8, 197u8, 231u8, 245u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner_iter1(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::key_owner::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::key_owner::Param0,
                    >,
                    types::key_owner::KeyOwner,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "KeyOwner",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            7u8, 34u8, 6u8, 153u8, 19u8, 114u8, 111u8, 74u8, 48u8, 195u8, 192u8,
                            125u8, 226u8, 155u8, 218u8, 11u8, 41u8, 45u8, 31u8, 159u8, 32u8, 26u8,
                            53u8, 206u8, 109u8, 191u8, 139u8, 162u8, 193u8, 197u8, 231u8, 245u8,
                        ],
                    )
                }
                #[doc = " The owner of a key. The key is the `KeyTypeId` + the encoded key."]
                pub fn key_owner(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::key_owner::Param0>,
                    _1: impl ::core::borrow::Borrow<types::key_owner::Param1>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::key_owner::Param0,
                        >,
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                            types::key_owner::Param1,
                        >,
                    ),
                    types::key_owner::KeyOwner,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Session",
                        "KeyOwner",
                        (
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _0.borrow(),
                            ),
                            ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                                _1.borrow(),
                            ),
                        ),
                        [
                            7u8, 34u8, 6u8, 153u8, 19u8, 114u8, 111u8, 74u8, 48u8, 195u8, 192u8,
                            125u8, 226u8, 155u8, 218u8, 11u8, 41u8, 45u8, 31u8, 159u8, 32u8, 26u8,
                            53u8, 206u8, 109u8, 191u8, 139u8, 162u8, 193u8, 197u8, 231u8, 245u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod aura {
        use super::root_mod;
        use super::runtime_types;
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod authorities {
                    use super::runtime_types;
                    pub type Authorities =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                        >;
                }
                pub mod current_slot {
                    use super::runtime_types;
                    pub type CurrentSlot = runtime_types::sp_consensus_slots::Slot;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current authority set."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::authorities::Authorities,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Aura",
                        "Authorities",
                        (),
                        [
                            232u8, 129u8, 167u8, 104u8, 47u8, 188u8, 238u8, 164u8, 6u8, 29u8,
                            129u8, 45u8, 64u8, 182u8, 194u8, 47u8, 0u8, 73u8, 63u8, 102u8, 204u8,
                            94u8, 111u8, 96u8, 137u8, 7u8, 141u8, 110u8, 180u8, 80u8, 228u8, 16u8,
                        ],
                    )
                }
                #[doc = " The current slot of this block."]
                #[doc = ""]
                #[doc = " This will be set in `on_initialize`."]
                pub fn current_slot(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::current_slot::CurrentSlot,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Aura",
                        "CurrentSlot",
                        (),
                        [
                            112u8, 199u8, 115u8, 248u8, 217u8, 242u8, 45u8, 231u8, 178u8, 53u8,
                            236u8, 167u8, 219u8, 238u8, 81u8, 243u8, 39u8, 140u8, 68u8, 19u8,
                            201u8, 169u8, 211u8, 133u8, 135u8, 213u8, 150u8, 105u8, 60u8, 252u8,
                            43u8, 57u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod grandpa {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_grandpa::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_grandpa::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                pub struct ReportEquivocation {
                    pub equivocation_proof: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        report_equivocation::EquivocationProof,
                    >,
                    pub key_owner_proof: report_equivocation::KeyOwnerProof,
                }
                pub mod report_equivocation {
                    use super::runtime_types;
                    pub type EquivocationProof =
                        runtime_types::sp_consensus_grandpa::EquivocationProof<
                            ::subxt::ext::subxt_core::utils::H256,
                            ::core::primitive::u32,
                        >;
                    pub type KeyOwnerProof = runtime_types::sp_core::Void;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ReportEquivocation {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "report_equivocation";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                #[doc = ""]
                #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                #[doc = "if the block author is defined it will be defined as the equivocation"]
                #[doc = "reporter."]
                pub struct ReportEquivocationUnsigned {
                    pub equivocation_proof: ::subxt::ext::subxt_core::alloc::boxed::Box<
                        report_equivocation_unsigned::EquivocationProof,
                    >,
                    pub key_owner_proof: report_equivocation_unsigned::KeyOwnerProof,
                }
                pub mod report_equivocation_unsigned {
                    use super::runtime_types;
                    pub type EquivocationProof =
                        runtime_types::sp_consensus_grandpa::EquivocationProof<
                            ::subxt::ext::subxt_core::utils::H256,
                            ::core::primitive::u32,
                        >;
                    pub type KeyOwnerProof = runtime_types::sp_core::Void;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ReportEquivocationUnsigned {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "report_equivocation_unsigned";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
                #[doc = ""]
                #[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
                #[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
                #[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
                #[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
                #[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
                #[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
                #[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
                #[doc = "block of all validators of the new authority set."]
                #[doc = ""]
                #[doc = "Only callable by root."]
                pub struct NoteStalled {
                    pub delay: note_stalled::Delay,
                    pub best_finalized_block_number: note_stalled::BestFinalizedBlockNumber,
                }
                pub mod note_stalled {
                    use super::runtime_types;
                    pub type Delay = ::core::primitive::u32;
                    pub type BestFinalizedBlockNumber = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for NoteStalled {
                    const PALLET: &'static str = "Grandpa";
                    const CALL: &'static str = "note_stalled";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                pub fn report_equivocation(
                    &self,
                    equivocation_proof: types::report_equivocation::EquivocationProof,
                    key_owner_proof: types::report_equivocation::KeyOwnerProof,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ReportEquivocation>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Grandpa",
                        "report_equivocation",
                        types::ReportEquivocation {
                            equivocation_proof: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                equivocation_proof,
                            ),
                            key_owner_proof,
                        },
                        [
                            158u8, 70u8, 189u8, 51u8, 231u8, 191u8, 199u8, 33u8, 64u8, 156u8, 71u8,
                            243u8, 122u8, 199u8, 216u8, 10u8, 45u8, 73u8, 198u8, 141u8, 31u8,
                            209u8, 58u8, 164u8, 219u8, 124u8, 242u8, 26u8, 114u8, 52u8, 65u8,
                            106u8,
                        ],
                    )
                }
                #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                #[doc = "equivocation proof and validate the given key ownership proof"]
                #[doc = "against the extracted offender. If both are valid, the offence"]
                #[doc = "will be reported."]
                #[doc = ""]
                #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                #[doc = "if the block author is defined it will be defined as the equivocation"]
                #[doc = "reporter."]
                pub fn report_equivocation_unsigned(
                    &self,
                    equivocation_proof: types::report_equivocation_unsigned::EquivocationProof,
                    key_owner_proof: types::report_equivocation_unsigned::KeyOwnerProof,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::ReportEquivocationUnsigned,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Grandpa",
                        "report_equivocation_unsigned",
                        types::ReportEquivocationUnsigned {
                            equivocation_proof: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                equivocation_proof,
                            ),
                            key_owner_proof,
                        },
                        [
                            53u8, 23u8, 255u8, 215u8, 105u8, 11u8, 67u8, 177u8, 234u8, 248u8,
                            183u8, 57u8, 230u8, 239u8, 54u8, 238u8, 115u8, 170u8, 153u8, 18u8,
                            55u8, 195u8, 85u8, 98u8, 109u8, 194u8, 57u8, 225u8, 139u8, 237u8,
                            171u8, 152u8,
                        ],
                    )
                }
                #[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
                #[doc = ""]
                #[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
                #[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
                #[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
                #[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
                #[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
                #[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
                #[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
                #[doc = "block of all validators of the new authority set."]
                #[doc = ""]
                #[doc = "Only callable by root."]
                pub fn note_stalled(
                    &self,
                    delay: types::note_stalled::Delay,
                    best_finalized_block_number: types::note_stalled::BestFinalizedBlockNumber,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::NoteStalled>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Grandpa",
                        "note_stalled",
                        types::NoteStalled {
                            delay,
                            best_finalized_block_number,
                        },
                        [
                            158u8, 25u8, 64u8, 114u8, 131u8, 139u8, 227u8, 132u8, 42u8, 107u8,
                            40u8, 249u8, 18u8, 93u8, 254u8, 86u8, 37u8, 67u8, 250u8, 35u8, 241u8,
                            194u8, 209u8, 20u8, 39u8, 75u8, 186u8, 21u8, 48u8, 124u8, 151u8, 31u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_grandpa::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New authority set has been applied."]
            pub struct NewAuthorities {
                pub authority_set: new_authorities::AuthoritySet,
            }
            pub mod new_authorities {
                use super::runtime_types;
                pub type AuthoritySet = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                    runtime_types::sp_consensus_grandpa::app::Public,
                    ::core::primitive::u64,
                )>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for NewAuthorities {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "NewAuthorities";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Current authority set has been paused."]
            pub struct Paused;
            impl ::subxt::ext::subxt_core::events::StaticEvent for Paused {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Paused";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Current authority set has been resumed."]
            pub struct Resumed;
            impl ::subxt::ext::subxt_core::events::StaticEvent for Resumed {
                const PALLET: &'static str = "Grandpa";
                const EVENT: &'static str = "Resumed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod state {
                    use super::runtime_types;
                    pub type State =
                        runtime_types::pallet_grandpa::StoredState<::core::primitive::u32>;
                }
                pub mod pending_change {
                    use super::runtime_types;
                    pub type PendingChange =
                        runtime_types::pallet_grandpa::StoredPendingChange<::core::primitive::u32>;
                }
                pub mod next_forced {
                    use super::runtime_types;
                    pub type NextForced = ::core::primitive::u32;
                }
                pub mod stalled {
                    use super::runtime_types;
                    pub type Stalled = (::core::primitive::u32, ::core::primitive::u32);
                }
                pub mod current_set_id {
                    use super::runtime_types;
                    pub type CurrentSetId = ::core::primitive::u64;
                }
                pub mod set_id_session {
                    use super::runtime_types;
                    pub type SetIdSession = ::core::primitive::u32;
                    pub type Param0 = ::core::primitive::u64;
                }
                pub mod authorities {
                    use super::runtime_types;
                    pub type Authorities =
                        runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                            runtime_types::sp_consensus_grandpa::app::Public,
                            ::core::primitive::u64,
                        )>;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " State of the current authority set."]
                pub fn state(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::state::State,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Grandpa",
                        "State",
                        (),
                        [
                            73u8, 71u8, 112u8, 83u8, 238u8, 75u8, 44u8, 9u8, 180u8, 33u8, 30u8,
                            121u8, 98u8, 96u8, 61u8, 133u8, 16u8, 70u8, 30u8, 249u8, 34u8, 148u8,
                            15u8, 239u8, 164u8, 157u8, 52u8, 27u8, 144u8, 52u8, 223u8, 109u8,
                        ],
                    )
                }
                #[doc = " Pending change: (signaled at, scheduled change)."]
                pub fn pending_change(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::pending_change::PendingChange,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Grandpa",
                        "PendingChange",
                        (),
                        [
                            150u8, 194u8, 185u8, 248u8, 239u8, 43u8, 141u8, 253u8, 61u8, 106u8,
                            74u8, 164u8, 209u8, 204u8, 206u8, 200u8, 32u8, 38u8, 11u8, 78u8, 84u8,
                            243u8, 181u8, 142u8, 179u8, 151u8, 81u8, 204u8, 244u8, 150u8, 137u8,
                            250u8,
                        ],
                    )
                }
                #[doc = " next block number where we can force a change."]
                pub fn next_forced(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::next_forced::NextForced,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Grandpa",
                        "NextForced",
                        (),
                        [
                            3u8, 231u8, 56u8, 18u8, 87u8, 112u8, 227u8, 126u8, 180u8, 131u8, 255u8,
                            141u8, 82u8, 34u8, 61u8, 47u8, 234u8, 37u8, 95u8, 62u8, 33u8, 235u8,
                            231u8, 122u8, 125u8, 8u8, 223u8, 95u8, 255u8, 204u8, 40u8, 97u8,
                        ],
                    )
                }
                #[doc = " `true` if we are currently stalled."]
                pub fn stalled(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::stalled::Stalled,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Grandpa",
                        "Stalled",
                        (),
                        [
                            6u8, 81u8, 205u8, 142u8, 195u8, 48u8, 0u8, 247u8, 108u8, 170u8, 10u8,
                            249u8, 72u8, 206u8, 32u8, 103u8, 109u8, 57u8, 51u8, 21u8, 144u8, 204u8,
                            79u8, 8u8, 191u8, 185u8, 38u8, 34u8, 118u8, 223u8, 75u8, 241u8,
                        ],
                    )
                }
                #[doc = " The number of changes (both in terms of keys and underlying economic responsibilities)"]
                #[doc = " in the \"set\" of Grandpa validators from genesis."]
                pub fn current_set_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::current_set_id::CurrentSetId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Grandpa",
                        "CurrentSetId",
                        (),
                        [
                            234u8, 215u8, 218u8, 42u8, 30u8, 76u8, 129u8, 40u8, 125u8, 137u8,
                            207u8, 47u8, 46u8, 213u8, 159u8, 50u8, 175u8, 81u8, 155u8, 123u8,
                            246u8, 175u8, 156u8, 68u8, 22u8, 113u8, 135u8, 137u8, 163u8, 18u8,
                            115u8, 73u8,
                        ],
                    )
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " This is only used for validating equivocation proofs. An equivocation proof must"]
                #[doc = " contains a key-ownership proof for a given session, therefore we need a way to tie"]
                #[doc = " together sessions and GRANDPA set ids, i.e. we need to validate that a validator"]
                #[doc = " was the owner of a given key on a given session, and what the active set ID was"]
                #[doc = " during that session."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]
                pub fn set_id_session_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::set_id_session::SetIdSession,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Grandpa",
                        "SetIdSession",
                        (),
                        [
                            47u8, 0u8, 239u8, 121u8, 187u8, 213u8, 254u8, 50u8, 238u8, 10u8, 162u8,
                            65u8, 189u8, 166u8, 37u8, 74u8, 82u8, 81u8, 160u8, 20u8, 180u8, 253u8,
                            238u8, 18u8, 209u8, 203u8, 38u8, 148u8, 16u8, 105u8, 72u8, 169u8,
                        ],
                    )
                }
                #[doc = " A mapping from grandpa set ID to the index of the *most recent* session for which its"]
                #[doc = " members were responsible."]
                #[doc = ""]
                #[doc = " This is only used for validating equivocation proofs. An equivocation proof must"]
                #[doc = " contains a key-ownership proof for a given session, therefore we need a way to tie"]
                #[doc = " together sessions and GRANDPA set ids, i.e. we need to validate that a validator"]
                #[doc = " was the owner of a given key on a given session, and what the active set ID was"]
                #[doc = " during that session."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: `SetId` is not under user control."]
                pub fn set_id_session(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::set_id_session::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::set_id_session::Param0,
                    >,
                    types::set_id_session::SetIdSession,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Grandpa",
                        "SetIdSession",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            47u8, 0u8, 239u8, 121u8, 187u8, 213u8, 254u8, 50u8, 238u8, 10u8, 162u8,
                            65u8, 189u8, 166u8, 37u8, 74u8, 82u8, 81u8, 160u8, 20u8, 180u8, 253u8,
                            238u8, 18u8, 209u8, 203u8, 38u8, 148u8, 16u8, 105u8, 72u8, 169u8,
                        ],
                    )
                }
                #[doc = " The current list of authorities."]
                pub fn authorities(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::authorities::Authorities,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Grandpa",
                        "Authorities",
                        (),
                        [
                            67u8, 196u8, 244u8, 13u8, 246u8, 245u8, 198u8, 98u8, 81u8, 55u8, 182u8,
                            187u8, 214u8, 5u8, 181u8, 76u8, 251u8, 213u8, 144u8, 166u8, 36u8,
                            153u8, 234u8, 181u8, 252u8, 55u8, 198u8, 175u8, 55u8, 211u8, 105u8,
                            85u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Max Authorities in use"]
                pub fn max_authorities(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Grandpa",
                        "MaxAuthorities",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of nominators for each validator."]
                pub fn max_nominators(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Grandpa",
                        "MaxNominators",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum number of entries to keep in the set id to session index mapping."]
                #[doc = ""]
                #[doc = " Since the `SetIdSession` map is only used for validating equivocations this"]
                #[doc = " value should relate to the bonding duration of whatever staking system is"]
                #[doc = " being used (if any). If equivocation handling is not enabled then this value"]
                #[doc = " can be zero."]
                pub fn max_set_id_session_entries(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u64,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Grandpa",
                        "MaxSetIdSessionEntries",
                        [
                            128u8, 214u8, 205u8, 242u8, 181u8, 142u8, 124u8, 231u8, 190u8, 146u8,
                            59u8, 226u8, 157u8, 101u8, 103u8, 117u8, 249u8, 65u8, 18u8, 191u8,
                            103u8, 119u8, 53u8, 85u8, 81u8, 96u8, 220u8, 42u8, 184u8, 239u8, 42u8,
                            246u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod asset_registry {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::orml_asset_registry::module::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::orml_asset_registry::module::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RegisterAsset {
                    pub metadata: register_asset::Metadata,
                    pub asset_id: register_asset::AssetId,
                }
                pub mod register_asset {
                    use super::runtime_types;
                    pub type Metadata = runtime_types::orml_traits::asset_registry::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::mangata_types::assets::CustomMetadata,
                    >;
                    pub type AssetId = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RegisterAsset {
                    const PALLET: &'static str = "AssetRegistry";
                    const CALL: &'static str = "register_asset";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UpdateAsset {
                    pub asset_id: update_asset::AssetId,
                    pub decimals: update_asset::Decimals,
                    pub name: update_asset::Name,
                    pub symbol: update_asset::Symbol,
                    pub existential_deposit: update_asset::ExistentialDeposit,
                    pub additional: update_asset::Additional,
                }
                pub mod update_asset {
                    use super::runtime_types;
                    pub type AssetId = ::core::primitive::u32;
                    pub type Decimals = ::core::option::Option<::core::primitive::u32>;
                    pub type Name = ::core::option::Option<
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >;
                    pub type Symbol = ::core::option::Option<
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    >;
                    pub type ExistentialDeposit = ::core::option::Option<::core::primitive::u128>;
                    pub type Additional = ::core::option::Option<
                        runtime_types::mangata_types::assets::CustomMetadata,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateAsset {
                    const PALLET: &'static str = "AssetRegistry";
                    const CALL: &'static str = "update_asset";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RegisterL1Asset {
                    pub metadata: register_l1_asset::Metadata,
                    pub asset_id: register_l1_asset::AssetId,
                    pub l1_asset: register_l1_asset::L1Asset,
                }
                pub mod register_l1_asset {
                    use super::runtime_types;
                    pub type Metadata = runtime_types::orml_traits::asset_registry::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::mangata_types::assets::CustomMetadata,
                    >;
                    pub type AssetId = ::core::option::Option<::core::primitive::u32>;
                    pub type L1Asset = runtime_types::mangata_types::assets::L1Asset;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RegisterL1Asset {
                    const PALLET: &'static str = "AssetRegistry";
                    const CALL: &'static str = "register_l1_asset";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct UpdateL1AssetData {
                    pub asset_id: update_l1_asset_data::AssetId,
                    pub l1_asset: update_l1_asset_data::L1Asset,
                }
                pub mod update_l1_asset_data {
                    use super::runtime_types;
                    pub type AssetId = ::core::primitive::u32;
                    pub type L1Asset =
                        ::core::option::Option<runtime_types::mangata_types::assets::L1Asset>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for UpdateL1AssetData {
                    const PALLET: &'static str = "AssetRegistry";
                    const CALL: &'static str = "update_l1_asset_data";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                pub fn register_asset(
                    &self,
                    metadata: types::register_asset::Metadata,
                    asset_id: types::register_asset::AssetId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RegisterAsset>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "AssetRegistry",
                        "register_asset",
                        types::RegisterAsset { metadata, asset_id },
                        [
                            95u8, 129u8, 240u8, 133u8, 189u8, 101u8, 56u8, 204u8, 40u8, 176u8,
                            150u8, 116u8, 206u8, 229u8, 28u8, 210u8, 75u8, 130u8, 108u8, 228u8,
                            156u8, 21u8, 139u8, 47u8, 25u8, 123u8, 245u8, 128u8, 214u8, 107u8,
                            194u8, 124u8,
                        ],
                    )
                }
                pub fn update_asset(
                    &self,
                    asset_id: types::update_asset::AssetId,
                    decimals: types::update_asset::Decimals,
                    name: types::update_asset::Name,
                    symbol: types::update_asset::Symbol,
                    existential_deposit: types::update_asset::ExistentialDeposit,
                    additional: types::update_asset::Additional,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateAsset>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "AssetRegistry",
                        "update_asset",
                        types::UpdateAsset {
                            asset_id,
                            decimals,
                            name,
                            symbol,
                            existential_deposit,
                            additional,
                        },
                        [
                            231u8, 96u8, 170u8, 48u8, 120u8, 165u8, 69u8, 98u8, 79u8, 124u8, 17u8,
                            125u8, 178u8, 230u8, 207u8, 175u8, 177u8, 103u8, 79u8, 52u8, 168u8,
                            215u8, 68u8, 146u8, 236u8, 81u8, 64u8, 109u8, 142u8, 118u8, 144u8,
                            172u8,
                        ],
                    )
                }
                pub fn register_l1_asset(
                    &self,
                    metadata: types::register_l1_asset::Metadata,
                    asset_id: types::register_l1_asset::AssetId,
                    l1_asset: types::register_l1_asset::L1Asset,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RegisterL1Asset>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "AssetRegistry",
                        "register_l1_asset",
                        types::RegisterL1Asset {
                            metadata,
                            asset_id,
                            l1_asset,
                        },
                        [
                            203u8, 104u8, 12u8, 150u8, 188u8, 228u8, 70u8, 231u8, 197u8, 144u8,
                            5u8, 7u8, 114u8, 68u8, 58u8, 59u8, 116u8, 163u8, 38u8, 21u8, 104u8,
                            111u8, 120u8, 55u8, 111u8, 218u8, 140u8, 189u8, 168u8, 173u8, 84u8,
                            46u8,
                        ],
                    )
                }
                pub fn update_l1_asset_data(
                    &self,
                    asset_id: types::update_l1_asset_data::AssetId,
                    l1_asset: types::update_l1_asset_data::L1Asset,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::UpdateL1AssetData>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "AssetRegistry",
                        "update_l1_asset_data",
                        types::UpdateL1AssetData { asset_id, l1_asset },
                        [
                            213u8, 18u8, 146u8, 13u8, 62u8, 169u8, 118u8, 93u8, 206u8, 189u8,
                            218u8, 230u8, 125u8, 96u8, 20u8, 219u8, 125u8, 192u8, 179u8, 29u8,
                            61u8, 227u8, 44u8, 166u8, 142u8, 152u8, 124u8, 183u8, 191u8, 2u8, 82u8,
                            8u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::orml_asset_registry::module::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RegisteredAsset {
                pub asset_id: registered_asset::AssetId,
                pub metadata: registered_asset::Metadata,
            }
            pub mod registered_asset {
                use super::runtime_types;
                pub type AssetId = ::core::primitive::u32;
                pub type Metadata = runtime_types::orml_traits::asset_registry::AssetMetadata<
                    ::core::primitive::u128,
                    runtime_types::mangata_types::assets::CustomMetadata,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RegisteredAsset {
                const PALLET: &'static str = "AssetRegistry";
                const EVENT: &'static str = "RegisteredAsset";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct UpdatedAsset {
                pub asset_id: updated_asset::AssetId,
                pub metadata: updated_asset::Metadata,
            }
            pub mod updated_asset {
                use super::runtime_types;
                pub type AssetId = ::core::primitive::u32;
                pub type Metadata = runtime_types::orml_traits::asset_registry::AssetMetadata<
                    ::core::primitive::u128,
                    runtime_types::mangata_types::assets::CustomMetadata,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UpdatedAsset {
                const PALLET: &'static str = "AssetRegistry";
                const EVENT: &'static str = "UpdatedAsset";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod metadata {
                    use super::runtime_types;
                    pub type Metadata = runtime_types::orml_traits::asset_registry::AssetMetadata<
                        ::core::primitive::u128,
                        runtime_types::mangata_types::assets::CustomMetadata,
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod id_to_l1_asset {
                    use super::runtime_types;
                    pub type IdToL1Asset = runtime_types::mangata_types::assets::L1Asset;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod l1_asset_to_id {
                    use super::runtime_types;
                    pub type L1AssetToId = ::core::primitive::u32;
                    pub type Param0 = runtime_types::mangata_types::assets::L1Asset;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The metadata of an asset, indexed by asset id."]
                pub fn metadata_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::metadata::Metadata,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "AssetRegistry",
                        "Metadata",
                        (),
                        [
                            93u8, 23u8, 70u8, 33u8, 1u8, 219u8, 78u8, 34u8, 120u8, 229u8, 109u8,
                            2u8, 243u8, 242u8, 104u8, 130u8, 183u8, 186u8, 215u8, 66u8, 220u8,
                            155u8, 77u8, 66u8, 163u8, 165u8, 132u8, 42u8, 31u8, 229u8, 98u8, 142u8,
                        ],
                    )
                }
                #[doc = " The metadata of an asset, indexed by asset id."]
                pub fn metadata(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::metadata::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::metadata::Param0,
                    >,
                    types::metadata::Metadata,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "AssetRegistry",
                        "Metadata",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            93u8, 23u8, 70u8, 33u8, 1u8, 219u8, 78u8, 34u8, 120u8, 229u8, 109u8,
                            2u8, 243u8, 242u8, 104u8, 130u8, 183u8, 186u8, 215u8, 66u8, 220u8,
                            155u8, 77u8, 66u8, 163u8, 165u8, 132u8, 42u8, 31u8, 229u8, 98u8, 142u8,
                        ],
                    )
                }
                #[doc = " Maps a location to an asset id - useful when processing xcm"]
                #[doc = " messages."]
                #[doc = " Maps a asset id to an L1Asset - useful when processing l1 assets"]
                pub fn id_to_l1_asset_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::id_to_l1_asset::IdToL1Asset,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "AssetRegistry",
                        "IdToL1Asset",
                        (),
                        [
                            16u8, 46u8, 83u8, 113u8, 37u8, 240u8, 102u8, 145u8, 127u8, 22u8, 158u8,
                            163u8, 182u8, 22u8, 90u8, 181u8, 130u8, 184u8, 84u8, 122u8, 208u8,
                            118u8, 119u8, 17u8, 130u8, 222u8, 27u8, 161u8, 129u8, 118u8, 248u8,
                            166u8,
                        ],
                    )
                }
                #[doc = " Maps a location to an asset id - useful when processing xcm"]
                #[doc = " messages."]
                #[doc = " Maps a asset id to an L1Asset - useful when processing l1 assets"]
                pub fn id_to_l1_asset(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::id_to_l1_asset::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::id_to_l1_asset::Param0,
                    >,
                    types::id_to_l1_asset::IdToL1Asset,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "AssetRegistry",
                        "IdToL1Asset",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            16u8, 46u8, 83u8, 113u8, 37u8, 240u8, 102u8, 145u8, 127u8, 22u8, 158u8,
                            163u8, 182u8, 22u8, 90u8, 181u8, 130u8, 184u8, 84u8, 122u8, 208u8,
                            118u8, 119u8, 17u8, 130u8, 222u8, 27u8, 161u8, 129u8, 118u8, 248u8,
                            166u8,
                        ],
                    )
                }
                #[doc = " Maps a L1Asset to an asset id - useful when processing l1 assets"]
                pub fn l1_asset_to_id_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::l1_asset_to_id::L1AssetToId,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "AssetRegistry",
                        "L1AssetToId",
                        (),
                        [
                            60u8, 129u8, 218u8, 38u8, 167u8, 2u8, 62u8, 145u8, 236u8, 176u8, 104u8,
                            102u8, 252u8, 195u8, 214u8, 250u8, 61u8, 189u8, 42u8, 161u8, 13u8,
                            195u8, 73u8, 166u8, 56u8, 137u8, 93u8, 238u8, 6u8, 164u8, 117u8, 97u8,
                        ],
                    )
                }
                #[doc = " Maps a L1Asset to an asset id - useful when processing l1 assets"]
                pub fn l1_asset_to_id(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::l1_asset_to_id::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::l1_asset_to_id::Param0,
                    >,
                    types::l1_asset_to_id::L1AssetToId,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "AssetRegistry",
                        "L1AssetToId",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            60u8, 129u8, 218u8, 38u8, 167u8, 2u8, 62u8, 145u8, 236u8, 176u8, 104u8,
                            102u8, 252u8, 195u8, 214u8, 250u8, 61u8, 189u8, 42u8, 161u8, 13u8,
                            195u8, 73u8, 166u8, 56u8, 137u8, 93u8, 238u8, 6u8, 164u8, 117u8, 97u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum length of a name or symbol."]
                pub fn string_limit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "AssetRegistry",
                        "StringLimit",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod treasury {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the treasury pallet."]
        pub type Error = runtime_types::pallet_treasury::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_treasury::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Put forward a suggestion for spending."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = "A deposit proportional to the value is reserved and slashed if the proposal is rejected."]
                #[doc = "It is returned once the proposal is awarded."]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = "- O(1)"]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::Proposed`] if successful."]
                pub struct ProposeSpend {
                    #[codec(compact)]
                    pub value: propose_spend::Value,
                    pub beneficiary: propose_spend::Beneficiary,
                }
                pub mod propose_spend {
                    use super::runtime_types;
                    pub type Value = ::core::primitive::u128;
                    pub type Beneficiary = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ProposeSpend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "propose_spend";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Reject a proposed spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = "The original deposit will be slashed."]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = "- O(1)"]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::Rejected`] if successful."]
                pub struct RejectProposal {
                    #[codec(compact)]
                    pub proposal_id: reject_proposal::ProposalId,
                }
                pub mod reject_proposal {
                    use super::runtime_types;
                    pub type ProposalId = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RejectProposal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "reject_proposal";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Approve a proposal."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::ApproveOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "At a later time, the proposal will be allocated to the beneficiary and the original"]
                #[doc = "deposit will be returned."]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = " - O(1)."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "No events are emitted from this dispatch."]
                pub struct ApproveProposal {
                    #[codec(compact)]
                    pub proposal_id: approve_proposal::ProposalId,
                }
                pub mod approve_proposal {
                    use super::runtime_types;
                    pub type ProposalId = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ApproveProposal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "approve_proposal";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`."]
                #[doc = ""]
                #[doc = "### Details"]
                #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                #[doc = "beneficiary."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The destination account for the transfer."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::SpendApproved`] if successful."]
                pub struct SpendLocal {
                    #[codec(compact)]
                    pub amount: spend_local::Amount,
                    pub beneficiary: spend_local::Beneficiary,
                }
                pub mod spend_local {
                    use super::runtime_types;
                    pub type Amount = ::core::primitive::u128;
                    pub type Beneficiary = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SpendLocal {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "spend_local";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "The original deposit will no longer be returned."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `proposal_id`: The index of a proposal"]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = "- O(A) where `A` is the number of approvals"]
                #[doc = ""]
                #[doc = "### Errors"]
                #[doc = "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the"]
                #[doc = "  approval queue, i.e., the proposal has not been approved. This could also mean the"]
                #[doc = "  proposal does not exist altogether, thus there is no way it would have been approved"]
                #[doc = "  in the first place."]
                pub struct RemoveApproval {
                    #[codec(compact)]
                    pub proposal_id: remove_approval::ProposalId,
                }
                pub mod remove_approval {
                    use super::runtime_types;
                    pub type ProposalId = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveApproval {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "remove_approval";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least"]
                #[doc = "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted"]
                #[doc = "for assertion using the [`Config::BalanceConverter`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "Create an approved spend for transferring a specific `amount` of `asset_kind` to a"]
                #[doc = "designated beneficiary. The spend must be claimed using the `payout` dispatchable within"]
                #[doc = "the [`Config::PayoutPeriod`]."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `asset_kind`: An indicator of the specific asset class to be spent."]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The beneficiary of the spend."]
                #[doc = "- `valid_from`: The block number from which the spend can be claimed. It can refer to"]
                #[doc = "  the past if the resulting spend has not yet expired according to the"]
                #[doc = "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after"]
                #[doc = "  approval."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::AssetSpendApproved`] if successful."]
                pub struct Spend {
                    pub asset_kind: ::subxt::ext::subxt_core::alloc::boxed::Box<spend::AssetKind>,
                    #[codec(compact)]
                    pub amount: spend::Amount,
                    pub beneficiary:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<spend::Beneficiary>,
                    pub valid_from: spend::ValidFrom,
                }
                pub mod spend {
                    use super::runtime_types;
                    pub type AssetKind = ();
                    pub type Amount = ::core::primitive::u128;
                    pub type Beneficiary = runtime_types::sp_runtime::account::AccountId20;
                    pub type ValidFrom = ::core::option::Option<::core::primitive::u32>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Spend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "spend";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Claim a spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "Spends must be claimed within some temporal bounds. A spend may be claimed within one"]
                #[doc = "[`Config::PayoutPeriod`] from the `valid_from` block."]
                #[doc = "In case of a payout failure, the spend status must be updated with the `check_status`"]
                #[doc = "dispatchable before retrying with the current function."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::Paid`] if successful."]
                pub struct Payout {
                    pub index: payout::Index,
                }
                pub mod payout {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Payout {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "payout";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Check the status of the spend and remove it from the storage if processed."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "The status check is a prerequisite for retrying a failed payout."]
                #[doc = "If a spend has either succeeded or expired, it is removed from the storage by this"]
                #[doc = "function. In such instances, transaction fees are refunded."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::PaymentFailed`] if the spend payout has failed."]
                #[doc = "Emits [`Event::SpendProcessed`] if the spend payout has succeed."]
                pub struct CheckStatus {
                    pub index: check_status::Index,
                }
                pub mod check_status {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CheckStatus {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "check_status";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Void previously approved spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "A spend void is only possible if the payout has not been attempted yet."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::AssetSpendVoided`] if successful."]
                pub struct VoidSpend {
                    pub index: void_spend::Index,
                }
                pub mod void_spend {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for VoidSpend {
                    const PALLET: &'static str = "Treasury";
                    const CALL: &'static str = "void_spend";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Put forward a suggestion for spending."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = "A deposit proportional to the value is reserved and slashed if the proposal is rejected."]
                #[doc = "It is returned once the proposal is awarded."]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = "- O(1)"]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::Proposed`] if successful."]
                pub fn propose_spend(
                    &self,
                    value: types::propose_spend::Value,
                    beneficiary: types::propose_spend::Beneficiary,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ProposeSpend>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "propose_spend",
                        types::ProposeSpend { value, beneficiary },
                        [
                            159u8, 123u8, 137u8, 51u8, 19u8, 246u8, 128u8, 49u8, 228u8, 129u8,
                            89u8, 3u8, 247u8, 43u8, 102u8, 154u8, 159u8, 190u8, 206u8, 5u8, 52u8,
                            143u8, 16u8, 43u8, 91u8, 88u8, 221u8, 47u8, 99u8, 209u8, 94u8, 149u8,
                        ],
                    )
                }
                #[doc = "Reject a proposed spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = "The original deposit will be slashed."]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = "- O(1)"]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::Rejected`] if successful."]
                pub fn reject_proposal(
                    &self,
                    proposal_id: types::reject_proposal::ProposalId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RejectProposal>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "reject_proposal",
                        types::RejectProposal { proposal_id },
                        [
                            18u8, 166u8, 80u8, 141u8, 222u8, 230u8, 4u8, 36u8, 7u8, 76u8, 12u8,
                            40u8, 145u8, 114u8, 12u8, 43u8, 223u8, 78u8, 189u8, 222u8, 120u8, 80u8,
                            225u8, 215u8, 119u8, 68u8, 200u8, 15u8, 25u8, 172u8, 192u8, 173u8,
                        ],
                    )
                }
                #[doc = "Approve a proposal."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::ApproveOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "At a later time, the proposal will be allocated to the beneficiary and the original"]
                #[doc = "deposit will be returned."]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = " - O(1)."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "No events are emitted from this dispatch."]
                pub fn approve_proposal(
                    &self,
                    proposal_id: types::approve_proposal::ProposalId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ApproveProposal>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "approve_proposal",
                        types::ApproveProposal { proposal_id },
                        [
                            154u8, 176u8, 152u8, 97u8, 167u8, 177u8, 78u8, 9u8, 235u8, 229u8,
                            199u8, 193u8, 214u8, 3u8, 16u8, 30u8, 4u8, 104u8, 27u8, 184u8, 100u8,
                            65u8, 179u8, 13u8, 91u8, 62u8, 115u8, 5u8, 219u8, 211u8, 251u8, 153u8,
                        ],
                    )
                }
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`."]
                #[doc = ""]
                #[doc = "### Details"]
                #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                #[doc = "beneficiary."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The destination account for the transfer."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::SpendApproved`] if successful."]
                pub fn spend_local(
                    &self,
                    amount: types::spend_local::Amount,
                    beneficiary: types::spend_local::Beneficiary,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SpendLocal>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "spend_local",
                        types::SpendLocal {
                            amount,
                            beneficiary,
                        },
                        [
                            133u8, 109u8, 18u8, 64u8, 165u8, 25u8, 70u8, 238u8, 11u8, 209u8, 132u8,
                            222u8, 91u8, 216u8, 234u8, 176u8, 130u8, 187u8, 189u8, 134u8, 125u8,
                            144u8, 203u8, 80u8, 238u8, 53u8, 198u8, 219u8, 81u8, 235u8, 81u8,
                            232u8,
                        ],
                    )
                }
                #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "The original deposit will no longer be returned."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `proposal_id`: The index of a proposal"]
                #[doc = ""]
                #[doc = "### Complexity"]
                #[doc = "- O(A) where `A` is the number of approvals"]
                #[doc = ""]
                #[doc = "### Errors"]
                #[doc = "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the"]
                #[doc = "  approval queue, i.e., the proposal has not been approved. This could also mean the"]
                #[doc = "  proposal does not exist altogether, thus there is no way it would have been approved"]
                #[doc = "  in the first place."]
                pub fn remove_approval(
                    &self,
                    proposal_id: types::remove_approval::ProposalId,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveApproval>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "remove_approval",
                        types::RemoveApproval { proposal_id },
                        [
                            180u8, 20u8, 39u8, 227u8, 29u8, 228u8, 234u8, 36u8, 155u8, 114u8,
                            197u8, 135u8, 185u8, 31u8, 56u8, 247u8, 224u8, 168u8, 254u8, 233u8,
                            250u8, 134u8, 186u8, 155u8, 108u8, 84u8, 94u8, 226u8, 207u8, 130u8,
                            196u8, 100u8,
                        ],
                    )
                }
                #[doc = "Propose and approve a spend of treasury funds."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least"]
                #[doc = "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted"]
                #[doc = "for assertion using the [`Config::BalanceConverter`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "Create an approved spend for transferring a specific `amount` of `asset_kind` to a"]
                #[doc = "designated beneficiary. The spend must be claimed using the `payout` dispatchable within"]
                #[doc = "the [`Config::PayoutPeriod`]."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `asset_kind`: An indicator of the specific asset class to be spent."]
                #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                #[doc = "- `beneficiary`: The beneficiary of the spend."]
                #[doc = "- `valid_from`: The block number from which the spend can be claimed. It can refer to"]
                #[doc = "  the past if the resulting spend has not yet expired according to the"]
                #[doc = "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after"]
                #[doc = "  approval."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::AssetSpendApproved`] if successful."]
                pub fn spend(
                    &self,
                    asset_kind: types::spend::AssetKind,
                    amount: types::spend::Amount,
                    beneficiary: types::spend::Beneficiary,
                    valid_from: types::spend::ValidFrom,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Spend>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "spend",
                        types::Spend {
                            asset_kind: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                asset_kind,
                            ),
                            amount,
                            beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box::new(
                                beneficiary,
                            ),
                            valid_from,
                        },
                        [
                            48u8, 219u8, 135u8, 215u8, 229u8, 56u8, 57u8, 160u8, 51u8, 202u8, 13u8,
                            252u8, 148u8, 125u8, 209u8, 136u8, 50u8, 204u8, 252u8, 21u8, 183u8,
                            243u8, 197u8, 184u8, 163u8, 241u8, 162u8, 207u8, 98u8, 121u8, 105u8,
                            58u8,
                        ],
                    )
                }
                #[doc = "Claim a spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "Spends must be claimed within some temporal bounds. A spend may be claimed within one"]
                #[doc = "[`Config::PayoutPeriod`] from the `valid_from` block."]
                #[doc = "In case of a payout failure, the spend status must be updated with the `check_status`"]
                #[doc = "dispatchable before retrying with the current function."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::Paid`] if successful."]
                pub fn payout(
                    &self,
                    index: types::payout::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Payout>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "payout",
                        types::Payout { index },
                        [
                            179u8, 254u8, 82u8, 94u8, 248u8, 26u8, 6u8, 34u8, 93u8, 244u8, 186u8,
                            199u8, 163u8, 32u8, 110u8, 220u8, 78u8, 11u8, 168u8, 182u8, 169u8,
                            56u8, 53u8, 194u8, 168u8, 218u8, 131u8, 38u8, 46u8, 156u8, 93u8, 234u8,
                        ],
                    )
                }
                #[doc = "Check the status of the spend and remove it from the storage if processed."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be signed."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "The status check is a prerequisite for retrying a failed payout."]
                #[doc = "If a spend has either succeeded or expired, it is removed from the storage by this"]
                #[doc = "function. In such instances, transaction fees are refunded."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::PaymentFailed`] if the spend payout has failed."]
                #[doc = "Emits [`Event::SpendProcessed`] if the spend payout has succeed."]
                pub fn check_status(
                    &self,
                    index: types::check_status::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CheckStatus>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "check_status",
                        types::CheckStatus { index },
                        [
                            164u8, 111u8, 10u8, 11u8, 104u8, 237u8, 112u8, 240u8, 104u8, 130u8,
                            179u8, 221u8, 54u8, 18u8, 8u8, 172u8, 148u8, 245u8, 110u8, 174u8, 75u8,
                            38u8, 46u8, 143u8, 101u8, 232u8, 65u8, 252u8, 36u8, 152u8, 29u8, 209u8,
                        ],
                    )
                }
                #[doc = "Void previously approved spend."]
                #[doc = ""]
                #[doc = "## Dispatch Origin"]
                #[doc = ""]
                #[doc = "Must be [`Config::RejectOrigin`]."]
                #[doc = ""]
                #[doc = "## Details"]
                #[doc = ""]
                #[doc = "A spend void is only possible if the payout has not been attempted yet."]
                #[doc = ""]
                #[doc = "### Parameters"]
                #[doc = "- `index`: The spend index."]
                #[doc = ""]
                #[doc = "## Events"]
                #[doc = ""]
                #[doc = "Emits [`Event::AssetSpendVoided`] if successful."]
                pub fn void_spend(
                    &self,
                    index: types::void_spend::Index,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::VoidSpend>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Treasury",
                        "void_spend",
                        types::VoidSpend { index },
                        [
                            9u8, 212u8, 174u8, 92u8, 43u8, 102u8, 224u8, 124u8, 247u8, 239u8,
                            196u8, 68u8, 132u8, 171u8, 116u8, 206u8, 52u8, 23u8, 92u8, 31u8, 156u8,
                            160u8, 25u8, 16u8, 125u8, 60u8, 9u8, 109u8, 145u8, 139u8, 102u8, 224u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_treasury::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "New proposal."]
            pub struct Proposed {
                pub proposal_index: proposed::ProposalIndex,
            }
            pub mod proposed {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "We have ended a spend period and will now allocate funds."]
            pub struct Spending {
                pub budget_remaining: spending::BudgetRemaining,
            }
            pub mod spending {
                use super::runtime_types;
                pub type BudgetRemaining = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Spending {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Spending";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some funds have been allocated."]
            pub struct Awarded {
                pub proposal_index: awarded::ProposalIndex,
                pub award: awarded::Award,
                pub account: awarded::Account,
            }
            pub mod awarded {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Award = ::core::primitive::u128;
                pub type Account = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Awarded {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Awarded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proposal was rejected; funds were slashed."]
            pub struct Rejected {
                pub proposal_index: rejected::ProposalIndex,
                pub slashed: rejected::Slashed,
            }
            pub mod rejected {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Slashed = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Rejected {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rejected";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some of our funds have been burnt."]
            pub struct Burnt {
                pub burnt_funds: burnt::BurntFunds,
            }
            pub mod burnt {
                use super::runtime_types;
                pub type BurntFunds = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Burnt {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Burnt";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
            pub struct Rollover {
                pub rollover_balance: rollover::RolloverBalance,
            }
            pub mod rollover {
                use super::runtime_types;
                pub type RolloverBalance = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Rollover {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Rollover";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Some funds have been deposited."]
            pub struct Deposit {
                pub value: deposit::Value,
            }
            pub mod deposit {
                use super::runtime_types;
                pub type Value = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Deposit {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Deposit";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new spend proposal has been approved."]
            pub struct SpendApproved {
                pub proposal_index: spend_approved::ProposalIndex,
                pub amount: spend_approved::Amount,
                pub beneficiary: spend_approved::Beneficiary,
            }
            pub mod spend_approved {
                use super::runtime_types;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type Amount = ::core::primitive::u128;
                pub type Beneficiary = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendApproved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The inactive funds of the pallet have been updated."]
            pub struct UpdatedInactive {
                pub reactivated: updated_inactive::Reactivated,
                pub deactivated: updated_inactive::Deactivated,
            }
            pub mod updated_inactive {
                use super::runtime_types;
                pub type Reactivated = ::core::primitive::u128;
                pub type Deactivated = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UpdatedInactive {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "UpdatedInactive";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A new asset spend proposal has been approved."]
            pub struct AssetSpendApproved {
                pub index: asset_spend_approved::Index,
                pub asset_kind: asset_spend_approved::AssetKind,
                pub amount: asset_spend_approved::Amount,
                pub beneficiary: asset_spend_approved::Beneficiary,
                pub valid_from: asset_spend_approved::ValidFrom,
                pub expire_at: asset_spend_approved::ExpireAt,
            }
            pub mod asset_spend_approved {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type AssetKind = ();
                pub type Amount = ::core::primitive::u128;
                pub type Beneficiary = runtime_types::sp_runtime::account::AccountId20;
                pub type ValidFrom = ::core::primitive::u32;
                pub type ExpireAt = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AssetSpendApproved {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "AssetSpendApproved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "An approved spend was voided."]
            pub struct AssetSpendVoided {
                pub index: asset_spend_voided::Index,
            }
            pub mod asset_spend_voided {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AssetSpendVoided {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "AssetSpendVoided";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A payment happened."]
            pub struct Paid {
                pub index: paid::Index,
                pub payment_id: paid::PaymentId,
            }
            pub mod paid {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type PaymentId = ();
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Paid {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "Paid";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A payment failed and can be retried."]
            pub struct PaymentFailed {
                pub index: payment_failed::Index,
                pub payment_id: payment_failed::PaymentId,
            }
            pub mod payment_failed {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
                pub type PaymentId = ();
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PaymentFailed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "PaymentFailed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A spend was processed and removed from the storage. It might have been successfully"]
            #[doc = "paid or it may have expired."]
            pub struct SpendProcessed {
                pub index: spend_processed::Index,
            }
            pub mod spend_processed {
                use super::runtime_types;
                pub type Index = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SpendProcessed {
                const PALLET: &'static str = "Treasury";
                const EVENT: &'static str = "SpendProcessed";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proposal_count {
                    use super::runtime_types;
                    pub type ProposalCount = ::core::primitive::u32;
                }
                pub mod proposals {
                    use super::runtime_types;
                    pub type Proposals = runtime_types::pallet_treasury::Proposal<
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
                pub mod deactivated {
                    use super::runtime_types;
                    pub type Deactivated = ::core::primitive::u128;
                }
                pub mod approvals {
                    use super::runtime_types;
                    pub type Approvals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u32,
                        >;
                }
                pub mod spend_count {
                    use super::runtime_types;
                    pub type SpendCount = ::core::primitive::u32;
                }
                pub mod spends {
                    use super::runtime_types;
                    pub type Spends = runtime_types::pallet_treasury::SpendStatus<
                        (),
                        ::core::primitive::u128,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        (),
                    >;
                    pub type Param0 = ::core::primitive::u32;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Number of proposals that have been made."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposal_count::ProposalCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "ProposalCount",
                        (),
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]
                pub fn proposals_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposals::Proposals,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Proposals",
                        (),
                        [
                            27u8, 204u8, 232u8, 218u8, 41u8, 17u8, 78u8, 244u8, 133u8, 134u8,
                            111u8, 227u8, 229u8, 204u8, 63u8, 219u8, 250u8, 61u8, 81u8, 91u8,
                            251u8, 240u8, 228u8, 189u8, 82u8, 60u8, 193u8, 174u8, 177u8, 116u8,
                            194u8, 3u8,
                        ],
                    )
                }
                #[doc = " Proposals that have been made."]
                pub fn proposals(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proposals::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::proposals::Param0,
                    >,
                    types::proposals::Proposals,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Proposals",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            27u8, 204u8, 232u8, 218u8, 41u8, 17u8, 78u8, 244u8, 133u8, 134u8,
                            111u8, 227u8, 229u8, 204u8, 63u8, 219u8, 250u8, 61u8, 81u8, 91u8,
                            251u8, 240u8, 228u8, 189u8, 82u8, 60u8, 193u8, 174u8, 177u8, 116u8,
                            194u8, 3u8,
                        ],
                    )
                }
                #[doc = " The amount which has been reported as inactive to Currency."]
                pub fn deactivated(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::deactivated::Deactivated,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Deactivated",
                        (),
                        [
                            120u8, 221u8, 159u8, 56u8, 161u8, 44u8, 54u8, 233u8, 47u8, 114u8,
                            170u8, 150u8, 52u8, 24u8, 137u8, 212u8, 122u8, 247u8, 40u8, 17u8,
                            208u8, 130u8, 42u8, 154u8, 33u8, 222u8, 59u8, 116u8, 0u8, 15u8, 79u8,
                            123u8,
                        ],
                    )
                }
                #[doc = " Proposal indices that have been approved but not yet awarded."]
                pub fn approvals(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::approvals::Approvals,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Approvals",
                        (),
                        [
                            78u8, 147u8, 186u8, 235u8, 17u8, 40u8, 247u8, 235u8, 67u8, 222u8, 3u8,
                            14u8, 248u8, 17u8, 67u8, 180u8, 93u8, 161u8, 64u8, 35u8, 119u8, 194u8,
                            187u8, 226u8, 135u8, 162u8, 147u8, 174u8, 139u8, 72u8, 99u8, 212u8,
                        ],
                    )
                }
                #[doc = " The count of spends that have been made."]
                pub fn spend_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::spend_count::SpendCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "SpendCount",
                        (),
                        [
                            220u8, 74u8, 248u8, 52u8, 243u8, 209u8, 42u8, 236u8, 27u8, 98u8, 76u8,
                            153u8, 129u8, 176u8, 34u8, 177u8, 33u8, 132u8, 21u8, 71u8, 206u8,
                            146u8, 222u8, 44u8, 232u8, 246u8, 205u8, 92u8, 240u8, 136u8, 182u8,
                            30u8,
                        ],
                    )
                }
                #[doc = " Spends that have been approved and being processed."]
                pub fn spends_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::spends::Spends,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Spends",
                        (),
                        [
                            247u8, 98u8, 3u8, 65u8, 246u8, 169u8, 206u8, 96u8, 126u8, 60u8, 63u8,
                            234u8, 245u8, 142u8, 56u8, 170u8, 56u8, 88u8, 236u8, 161u8, 47u8,
                            177u8, 47u8, 105u8, 22u8, 255u8, 204u8, 65u8, 108u8, 208u8, 242u8,
                            95u8,
                        ],
                    )
                }
                #[doc = " Spends that have been approved and being processed."]
                pub fn spends(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::spends::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::spends::Param0,
                    >,
                    types::spends::Spends,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Treasury",
                        "Spends",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            247u8, 98u8, 3u8, 65u8, 246u8, 169u8, 206u8, 96u8, 126u8, 60u8, 63u8,
                            234u8, 245u8, 142u8, 56u8, 170u8, 56u8, 88u8, 236u8, 161u8, 47u8,
                            177u8, 47u8, 105u8, 22u8, 255u8, 204u8, 65u8, 108u8, 208u8, 242u8,
                            95u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " Fraction of a proposal's value that should be bonded in order to place the proposal."]
                #[doc = " An accepted proposal gets these back. A rejected proposal does not."]
                pub fn proposal_bond(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Permill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "ProposalBond",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " Minimum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_minimum(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "ProposalBondMinimum",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " Maximum amount of funds that should be placed in a deposit for making a proposal."]
                pub fn proposal_bond_maximum(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::option::Option<::core::primitive::u128>,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "ProposalBondMaximum",
                        [
                            198u8, 51u8, 89u8, 159u8, 124u8, 251u8, 51u8, 80u8, 167u8, 193u8, 44u8,
                            199u8, 80u8, 36u8, 41u8, 130u8, 137u8, 229u8, 178u8, 208u8, 37u8,
                            215u8, 169u8, 183u8, 180u8, 191u8, 140u8, 240u8, 250u8, 61u8, 42u8,
                            147u8,
                        ],
                    )
                }
                #[doc = " Period between successive spends."]
                pub fn spend_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "SpendPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Percentage of spare funds (if any) that are burnt per spend period."]
                pub fn burn(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_arithmetic::per_things::Permill,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "Burn",
                        [
                            65u8, 93u8, 120u8, 165u8, 204u8, 81u8, 159u8, 163u8, 93u8, 135u8,
                            114u8, 121u8, 147u8, 35u8, 215u8, 213u8, 4u8, 223u8, 83u8, 37u8, 225u8,
                            200u8, 189u8, 156u8, 140u8, 36u8, 58u8, 46u8, 42u8, 232u8, 155u8, 0u8,
                        ],
                    )
                }
                #[doc = " The treasury's pallet id, used for deriving its sovereign account ID."]
                pub fn pallet_id(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::frame_support::PalletId,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "PalletId",
                        [
                            56u8, 243u8, 53u8, 83u8, 154u8, 179u8, 170u8, 80u8, 133u8, 173u8, 61u8,
                            161u8, 47u8, 225u8, 146u8, 21u8, 50u8, 229u8, 248u8, 27u8, 104u8, 58u8,
                            129u8, 197u8, 102u8, 160u8, 168u8, 205u8, 154u8, 42u8, 217u8, 53u8,
                        ],
                    )
                }
                #[doc = " The maximum number of approvals that can wait in the spending queue."]
                #[doc = ""]
                #[doc = " NOTE: This parameter is also used within the Bounties Pallet extension if enabled."]
                pub fn max_approvals(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "MaxApprovals",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The period during which an approved treasury spend has to be claimed."]
                pub fn payout_period(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Treasury",
                        "PayoutPeriod",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the Sudo pallet."]
        pub type Error = runtime_types::pallet_sudo_mangata::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_sudo_mangata::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub struct Sudo {
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<sudo::Call>,
                }
                pub mod sudo {
                    use super::runtime_types;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Sudo {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub struct SudoUncheckedWeight {
                    pub call:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<sudo_unchecked_weight::Call>,
                    pub weight: sudo_unchecked_weight::Weight,
                }
                pub mod sudo_unchecked_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoUncheckedWeight {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_unchecked_weight";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                pub struct SetKey {
                    pub new: set_key::New,
                }
                pub mod set_key {
                    use super::runtime_types;
                    pub type New = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetKey {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "set_key";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub struct SudoAs {
                    pub who: sudo_as::Who,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<sudo_as::Call>,
                }
                pub mod sudo_as {
                    use super::runtime_types;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoAs {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "sudo_as";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Permanently removes the sudo key."]
                #[doc = ""]
                #[doc = "**This cannot be un-done.**"]
                pub struct RemoveKey;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveKey {
                    const PALLET: &'static str = "Sudo";
                    const CALL: &'static str = "remove_key";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- O(1)."]
                pub fn sudo(
                    &self,
                    call: types::sudo::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Sudo>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "sudo",
                        types::Sudo {
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            55u8, 122u8, 32u8, 108u8, 102u8, 237u8, 192u8, 96u8, 36u8, 52u8, 242u8,
                            107u8, 152u8, 51u8, 221u8, 189u8, 6u8, 78u8, 152u8, 99u8, 156u8, 59u8,
                            229u8, 93u8, 41u8, 10u8, 100u8, 19u8, 186u8, 13u8, 79u8, 148u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "Sudo user to specify the weight of the call."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: types::sudo_unchecked_weight::Call,
                    weight: types::sudo_unchecked_weight::Weight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SudoUncheckedWeight>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "sudo_unchecked_weight",
                        types::SudoUncheckedWeight {
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                            weight,
                        },
                        [
                            144u8, 176u8, 61u8, 6u8, 30u8, 103u8, 191u8, 44u8, 237u8, 10u8, 204u8,
                            193u8, 209u8, 133u8, 49u8, 198u8, 133u8, 136u8, 92u8, 174u8, 218u8,
                            124u8, 170u8, 78u8, 238u8, 63u8, 69u8, 20u8, 204u8, 238u8, 130u8, 31u8,
                        ],
                    )
                }
                #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                #[doc = "key."]
                pub fn set_key(
                    &self,
                    new: types::set_key::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetKey>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "set_key",
                        types::SetKey { new },
                        [
                            238u8, 140u8, 16u8, 19u8, 56u8, 31u8, 53u8, 0u8, 211u8, 184u8, 54u8,
                            107u8, 73u8, 23u8, 54u8, 134u8, 135u8, 54u8, 143u8, 89u8, 157u8, 179u8,
                            185u8, 168u8, 31u8, 167u8, 173u8, 125u8, 104u8, 145u8, 239u8, 219u8,
                        ],
                    )
                }
                #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                pub fn sudo_as(
                    &self,
                    who: types::sudo_as::Who,
                    call: types::sudo_as::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SudoAs>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "sudo_as",
                        types::SudoAs {
                            who,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            7u8, 161u8, 123u8, 112u8, 160u8, 181u8, 248u8, 248u8, 127u8, 211u8,
                            183u8, 172u8, 221u8, 242u8, 68u8, 141u8, 189u8, 70u8, 176u8, 59u8,
                            35u8, 168u8, 33u8, 172u8, 129u8, 187u8, 214u8, 76u8, 203u8, 121u8,
                            238u8, 202u8,
                        ],
                    )
                }
                #[doc = "Permanently removes the sudo key."]
                #[doc = ""]
                #[doc = "**This cannot be un-done.**"]
                pub fn remove_key(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveKey>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Sudo",
                        "remove_key",
                        types::RemoveKey {},
                        [
                            133u8, 253u8, 54u8, 175u8, 202u8, 239u8, 5u8, 198u8, 180u8, 138u8,
                            25u8, 28u8, 109u8, 40u8, 30u8, 56u8, 126u8, 100u8, 52u8, 205u8, 250u8,
                            191u8, 61u8, 195u8, 172u8, 142u8, 184u8, 239u8, 247u8, 10u8, 211u8,
                            79u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_sudo_mangata::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sudo call just took place."]
            pub struct Sudid {
                pub sudo_result: sudid::SudoResult,
            }
            pub mod sudid {
                use super::runtime_types;
                pub type SudoResult =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Sudid {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "Sudid";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The sudo key has been updated."]
            pub struct KeyChanged {
                pub old: key_changed::Old,
                pub new: key_changed::New,
            }
            pub mod key_changed {
                use super::runtime_types;
                pub type Old =
                    ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
                pub type New = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The key was permanently removed."]
            pub struct KeyRemoved;
            impl ::subxt::ext::subxt_core::events::StaticEvent for KeyRemoved {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "KeyRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A [sudo_as](Pallet::sudo_as) call just took place."]
            pub struct SudoAsDone {
                pub sudo_result: sudo_as_done::SudoResult,
            }
            pub mod sudo_as_done {
                use super::runtime_types;
                pub type SudoResult =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SudoAsDone {
                const PALLET: &'static str = "Sudo";
                const EVENT: &'static str = "SudoAsDone";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod key {
                    use super::runtime_types;
                    pub type Key = runtime_types::sp_runtime::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The `AccountId` of the sudo key."]
                pub fn key(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::key::Key,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Sudo",
                        "Key",
                        (),
                        [
                            158u8, 215u8, 223u8, 217u8, 35u8, 56u8, 30u8, 236u8, 175u8, 210u8,
                            217u8, 34u8, 129u8, 233u8, 209u8, 131u8, 102u8, 70u8, 130u8, 55u8,
                            115u8, 41u8, 33u8, 30u8, 22u8, 39u8, 135u8, 150u8, 173u8, 228u8, 222u8,
                            164u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod sudo_origin {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "Error for the Sudo pallet"]
        pub type Error = runtime_types::pallet_sudo_origin::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_sudo_origin::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub struct Sudo {
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<sudo::Call>,
                }
                pub mod sudo {
                    use super::runtime_types;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Sudo {
                    const PALLET: &'static str = "SudoOrigin";
                    const CALL: &'static str = "sudo";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "SudoOrigin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- The weight of this call is defined by the caller."]
                #[doc = "# </weight>"]
                pub struct SudoUncheckedWeight {
                    pub call:
                        ::subxt::ext::subxt_core::alloc::boxed::Box<sudo_unchecked_weight::Call>,
                    pub weight: sudo_unchecked_weight::Weight,
                }
                pub mod sudo_unchecked_weight {
                    use super::runtime_types;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                    pub type Weight = runtime_types::sp_weights::weight_v2::Weight;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoUncheckedWeight {
                    const PALLET: &'static str = "SudoOrigin";
                    const CALL: &'static str = "sudo_unchecked_weight";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub struct SudoAs {
                    pub who: sudo_as::Who,
                    pub call: ::subxt::ext::subxt_core::alloc::boxed::Box<sudo_as::Call>,
                }
                pub mod sudo_as {
                    use super::runtime_types;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                    pub type Call = runtime_types::rollup_runtime::RuntimeCall;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SudoAs {
                    const PALLET: &'static str = "SudoOrigin";
                    const CALL: &'static str = "sudo_as";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Root` origin."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub fn sudo(
                    &self,
                    call: types::sudo::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Sudo>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SudoOrigin",
                        "sudo",
                        types::Sudo {
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            55u8, 122u8, 32u8, 108u8, 102u8, 237u8, 192u8, 96u8, 36u8, 52u8, 242u8,
                            107u8, 152u8, 51u8, 221u8, 189u8, 6u8, 78u8, 152u8, 99u8, 156u8, 59u8,
                            229u8, 93u8, 41u8, 10u8, 100u8, 19u8, 186u8, 13u8, 79u8, 148u8,
                        ],
                    )
                }
                #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Root` origin."]
                #[doc = "This function does not check the weight of the call, and instead allows the"]
                #[doc = "SudoOrigin to specify the weight of the call."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- The weight of this call is defined by the caller."]
                #[doc = "# </weight>"]
                pub fn sudo_unchecked_weight(
                    &self,
                    call: types::sudo_unchecked_weight::Call,
                    weight: types::sudo_unchecked_weight::Weight,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SudoUncheckedWeight>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SudoOrigin",
                        "sudo_unchecked_weight",
                        types::SudoUncheckedWeight {
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                            weight,
                        },
                        [
                            144u8, 176u8, 61u8, 6u8, 30u8, 103u8, 191u8, 44u8, 237u8, 10u8, 204u8,
                            193u8, 209u8, 133u8, 49u8, 198u8, 133u8, 136u8, 92u8, 174u8, 218u8,
                            124u8, 170u8, 78u8, 238u8, 63u8, 69u8, 20u8, 204u8, 238u8, 130u8, 31u8,
                        ],
                    )
                }
                #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Signed` origin from"]
                #[doc = "a given account."]
                #[doc = ""]
                #[doc = "# <weight>"]
                #[doc = "- O(1)."]
                #[doc = "- Limited storage reads."]
                #[doc = "- One DB write (event)."]
                #[doc = "- Weight of derivative `call` execution + 10,000."]
                #[doc = "# </weight>"]
                pub fn sudo_as(
                    &self,
                    who: types::sudo_as::Who,
                    call: types::sudo_as::Call,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SudoAs>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "SudoOrigin",
                        "sudo_as",
                        types::SudoAs {
                            who,
                            call: ::subxt::ext::subxt_core::alloc::boxed::Box::new(call),
                        },
                        [
                            7u8, 161u8, 123u8, 112u8, 160u8, 181u8, 248u8, 248u8, 127u8, 211u8,
                            183u8, 172u8, 221u8, 242u8, 68u8, 141u8, 189u8, 70u8, 176u8, 59u8,
                            35u8, 168u8, 33u8, 172u8, 129u8, 187u8, 214u8, 76u8, 203u8, 121u8,
                            238u8, 202u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_sudo_origin::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct SuOriginDid(pub su_origin_did::Field0);
            pub mod su_origin_did {
                use super::runtime_types;
                pub type Field0 =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SuOriginDid {
                const PALLET: &'static str = "SudoOrigin";
                const EVENT: &'static str = "SuOriginDid";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sudo just took place. \\[result\\]"]
            pub struct SuOriginDoAsDone(pub su_origin_do_as_done::Field0);
            pub mod su_origin_do_as_done {
                use super::runtime_types;
                pub type Field0 =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SuOriginDoAsDone {
                const PALLET: &'static str = "SudoOrigin";
                const EVENT: &'static str = "SuOriginDoAsDone";
            }
        }
    }
    pub mod council {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_collective_mangata::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_collective_mangata::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub struct SetMembers {
                    pub new_members: set_members::NewMembers,
                    pub prime: set_members::Prime,
                    pub old_count: set_members::OldCount,
                }
                pub mod set_members {
                    use super::runtime_types;
                    pub type NewMembers = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                    pub type Prime =
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
                    pub type OldCount = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetMembers {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "set_members";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub struct Execute {
                    pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<execute::Proposal>,
                    #[codec(compact)]
                    pub length_bound: execute::LengthBound,
                }
                pub mod execute {
                    use super::runtime_types;
                    pub type Proposal = runtime_types::rollup_runtime::RuntimeCall;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Execute {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "execute";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub struct Propose {
                    #[codec(compact)]
                    pub threshold: propose::Threshold,
                    pub proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<propose::Proposal>,
                    #[codec(compact)]
                    pub length_bound: propose::LengthBound,
                }
                pub mod propose {
                    use super::runtime_types;
                    pub type Threshold = ::core::primitive::u32;
                    pub type Proposal = runtime_types::rollup_runtime::RuntimeCall;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Propose {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "propose";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub struct Vote {
                    pub proposal: vote::Proposal,
                    #[codec(compact)]
                    pub index: vote::Index,
                    pub approve: vote::Approve,
                }
                pub mod vote {
                    use super::runtime_types;
                    pub type Proposal = ::subxt::ext::subxt_core::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type Approve = ::core::primitive::bool;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Vote {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "vote";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin or a foundation account."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub struct DisapproveProposal {
                    pub proposal_hash: disapprove_proposal::ProposalHash,
                }
                pub mod disapprove_proposal {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for DisapproveProposal {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "disapprove_proposal";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub struct Close {
                    pub proposal_hash: close::ProposalHash,
                    #[codec(compact)]
                    pub index: close::Index,
                    pub proposal_weight_bound: close::ProposalWeightBound,
                    #[codec(compact)]
                    pub length_bound: close::LengthBound,
                }
                pub mod close {
                    use super::runtime_types;
                    pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                    pub type Index = ::core::primitive::u32;
                    pub type ProposalWeightBound = runtime_types::sp_weights::weight_v2::Weight;
                    pub type LengthBound = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for Close {
                    const PALLET: &'static str = "Council";
                    const CALL: &'static str = "close";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Set the collective's membership."]
                #[doc = ""]
                #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                #[doc = "- `prime`: The prime member whose vote sets the default."]
                #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                #[doc = "  weight estimation."]
                #[doc = ""]
                #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                #[doc = ""]
                #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                #[doc = ""]
                #[doc = "# WARNING:"]
                #[doc = ""]
                #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                #[doc = "implementation of the trait [`ChangeMembers`]."]
                #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                #[doc = "with other logic managing the member set."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(MP + N)` where:"]
                #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                #[doc = "  - `P` proposals-count (code-bounded)"]
                pub fn set_members(
                    &self,
                    new_members: types::set_members::NewMembers,
                    prime: types::set_members::Prime,
                    old_count: types::set_members::OldCount,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetMembers>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "set_members",
                        types::SetMembers {
                            new_members,
                            prime,
                            old_count,
                        },
                        [
                            57u8, 48u8, 193u8, 19u8, 33u8, 214u8, 209u8, 67u8, 27u8, 228u8, 99u8,
                            142u8, 118u8, 147u8, 228u8, 12u8, 25u8, 250u8, 141u8, 100u8, 98u8,
                            206u8, 128u8, 17u8, 226u8, 68u8, 96u8, 177u8, 196u8, 192u8, 4u8, 67u8,
                        ],
                    )
                }
                #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                #[doc = ""]
                #[doc = "Origin must be a member of the collective."]
                #[doc = ""]
                #[doc = "## Complexity:"]
                #[doc = "- `O(B + M + P)` where:"]
                #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "- `M` members-count (code-bounded)"]
                #[doc = "- `P` complexity of dispatching `proposal`"]
                pub fn execute(
                    &self,
                    proposal: types::execute::Proposal,
                    length_bound: types::execute::LengthBound,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Execute>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "execute",
                        types::Execute {
                            proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            54u8, 192u8, 33u8, 27u8, 74u8, 27u8, 44u8, 183u8, 165u8, 196u8, 134u8,
                            31u8, 175u8, 112u8, 49u8, 164u8, 194u8, 237u8, 146u8, 84u8, 168u8,
                            197u8, 187u8, 163u8, 35u8, 136u8, 252u8, 64u8, 10u8, 219u8, 32u8,
                            219u8,
                        ],
                    )
                }
                #[doc = "Add a new proposal to either be voted on or executed directly."]
                #[doc = ""]
                #[doc = "Requires the sender to be member."]
                #[doc = ""]
                #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                #[doc = "or put up for voting."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - branching is influenced by `threshold` where:"]
                #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                pub fn propose(
                    &self,
                    threshold: types::propose::Threshold,
                    proposal: types::propose::Proposal,
                    length_bound: types::propose::LengthBound,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Propose>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "propose",
                        types::Propose {
                            threshold,
                            proposal: ::subxt::ext::subxt_core::alloc::boxed::Box::new(proposal),
                            length_bound,
                        },
                        [
                            99u8, 239u8, 128u8, 83u8, 208u8, 58u8, 30u8, 55u8, 64u8, 59u8, 124u8,
                            52u8, 147u8, 46u8, 202u8, 71u8, 23u8, 150u8, 138u8, 173u8, 207u8,
                            106u8, 78u8, 218u8, 69u8, 10u8, 105u8, 230u8, 70u8, 195u8, 17u8, 54u8,
                        ],
                    )
                }
                #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                #[doc = ""]
                #[doc = "Requires the sender to be a member."]
                #[doc = ""]
                #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                #[doc = "fee."]
                #[doc = "## Complexity"]
                #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                pub fn vote(
                    &self,
                    proposal: types::vote::Proposal,
                    index: types::vote::Index,
                    approve: types::vote::Approve,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Vote>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "vote",
                        types::Vote {
                            proposal,
                            index,
                            approve,
                        },
                        [
                            110u8, 141u8, 24u8, 33u8, 91u8, 7u8, 89u8, 198u8, 54u8, 10u8, 76u8,
                            129u8, 45u8, 20u8, 216u8, 104u8, 231u8, 246u8, 174u8, 205u8, 190u8,
                            176u8, 171u8, 113u8, 33u8, 37u8, 155u8, 203u8, 251u8, 34u8, 25u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                #[doc = "state."]
                #[doc = ""]
                #[doc = "Must be called by the Root origin or a foundation account."]
                #[doc = ""]
                #[doc = "Parameters:"]
                #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "O(P) where P is the number of max proposals"]
                pub fn disapprove_proposal(
                    &self,
                    proposal_hash: types::disapprove_proposal::ProposalHash,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::DisapproveProposal>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "disapprove_proposal",
                        types::DisapproveProposal { proposal_hash },
                        [
                            26u8, 140u8, 111u8, 193u8, 229u8, 59u8, 53u8, 196u8, 230u8, 60u8, 7u8,
                            155u8, 168u8, 7u8, 201u8, 177u8, 70u8, 103u8, 190u8, 57u8, 244u8,
                            156u8, 67u8, 101u8, 228u8, 6u8, 213u8, 83u8, 225u8, 95u8, 148u8, 96u8,
                        ],
                    )
                }
                #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                #[doc = ""]
                #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                #[doc = ""]
                #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                #[doc = "has enough votes to be approved or disapproved."]
                #[doc = ""]
                #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                #[doc = "unless there is a prime member set and the prime member cast an approval."]
                #[doc = ""]
                #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                #[doc = ""]
                #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                #[doc = "proposal."]
                #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                #[doc = ""]
                #[doc = "## Complexity"]
                #[doc = "- `O(B + M + P1 + P2)` where:"]
                #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                #[doc = "  - `P2` is proposal-count (code-bounded)"]
                pub fn close(
                    &self,
                    proposal_hash: types::close::ProposalHash,
                    index: types::close::Index,
                    proposal_weight_bound: types::close::ProposalWeightBound,
                    length_bound: types::close::LengthBound,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::Close>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Council",
                        "close",
                        types::Close {
                            proposal_hash,
                            index,
                            proposal_weight_bound,
                            length_bound,
                        },
                        [
                            136u8, 48u8, 243u8, 34u8, 60u8, 109u8, 186u8, 158u8, 72u8, 48u8, 62u8,
                            34u8, 167u8, 46u8, 33u8, 142u8, 239u8, 43u8, 238u8, 125u8, 94u8, 80u8,
                            157u8, 245u8, 220u8, 126u8, 58u8, 244u8, 186u8, 195u8, 30u8, 127u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_collective_mangata::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
            #[doc = "`MemberCount`)."]
            pub struct Proposed {
                pub account: proposed::Account,
                pub proposal_index: proposed::ProposalIndex,
                pub proposal_hash: proposed::ProposalHash,
                pub threshold: proposed::Threshold,
            }
            pub mod proposed {
                use super::runtime_types;
                pub type Account = runtime_types::sp_runtime::account::AccountId20;
                pub type ProposalIndex = ::core::primitive::u32;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Threshold = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Proposed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Proposed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion (given hash) has been voted on by given account, leaving"]
            #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
            pub struct Voted {
                pub account: voted::Account,
                pub proposal_hash: voted::ProposalHash,
                pub voted: voted::Voted,
                pub yes: voted::Yes,
                pub no: voted::No,
            }
            pub mod voted {
                use super::runtime_types;
                pub type Account = runtime_types::sp_runtime::account::AccountId20;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Voted = ::core::primitive::bool;
                pub type Yes = ::core::primitive::u32;
                pub type No = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Voted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Voted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion was approved by the required threshold."]
            pub struct Approved {
                pub proposal_hash: approved::ProposalHash,
            }
            pub mod approved {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Approved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Approved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion was not approved by the required threshold."]
            pub struct Disapproved {
                pub proposal_hash: disapproved::ProposalHash,
            }
            pub mod disapproved {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Disapproved {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Disapproved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
            pub struct Executed {
                pub proposal_hash: executed::ProposalHash,
                pub result: executed::Result,
            }
            pub mod executed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Executed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Executed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
            pub struct MemberExecuted {
                pub proposal_hash: member_executed::ProposalHash,
                pub result: member_executed::Result,
            }
            pub mod member_executed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Result =
                    ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MemberExecuted {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "MemberExecuted";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
            pub struct Closed {
                pub proposal_hash: closed::ProposalHash,
                pub yes: closed::Yes,
                pub no: closed::No,
            }
            pub mod closed {
                use super::runtime_types;
                pub type ProposalHash = ::subxt::ext::subxt_core::utils::H256;
                pub type Yes = ::core::primitive::u32;
                pub type No = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for Closed {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "Closed";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The members have been changed"]
            pub struct MembersChanged {
                pub new_members: members_changed::NewMembers,
            }
            pub mod members_changed {
                use super::runtime_types;
                pub type NewMembers = ::subxt::ext::subxt_core::alloc::vec::Vec<
                    runtime_types::sp_runtime::account::AccountId20,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for MembersChanged {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "MembersChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The Prime member has been set"]
            pub struct PrimeSet {
                pub new_prime: prime_set::NewPrime,
            }
            pub mod prime_set {
                use super::runtime_types;
                pub type NewPrime =
                    ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PrimeSet {
                const PALLET: &'static str = "Council";
                const EVENT: &'static str = "PrimeSet";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod proposals {
                    use super::runtime_types;
                    pub type Proposals =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::subxt::ext::subxt_core::utils::H256,
                        >;
                }
                pub mod proposal_of {
                    use super::runtime_types;
                    pub type ProposalOf = runtime_types::rollup_runtime::RuntimeCall;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod proposal_proposed_time {
                    use super::runtime_types;
                    pub type ProposalProposedTime = ::core::primitive::u32;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod voting {
                    use super::runtime_types;
                    pub type Voting = runtime_types::pallet_collective_mangata::Votes<
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                    >;
                    pub type Param0 = ::subxt::ext::subxt_core::utils::H256;
                }
                pub mod proposal_count {
                    use super::runtime_types;
                    pub type ProposalCount = ::core::primitive::u32;
                }
                pub mod members {
                    use super::runtime_types;
                    pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                }
                pub mod prime {
                    use super::runtime_types;
                    pub type Prime = runtime_types::sp_runtime::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The hashes of the active proposals."]
                pub fn proposals(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposals::Proposals,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Proposals",
                        (),
                        [
                            210u8, 234u8, 7u8, 29u8, 231u8, 80u8, 17u8, 36u8, 189u8, 34u8, 175u8,
                            147u8, 56u8, 92u8, 201u8, 104u8, 207u8, 150u8, 58u8, 110u8, 90u8, 28u8,
                            198u8, 79u8, 236u8, 245u8, 19u8, 38u8, 68u8, 59u8, 215u8, 74u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposal_of::ProposalOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "ProposalOf",
                        (),
                        [
                            51u8, 157u8, 79u8, 154u8, 65u8, 134u8, 79u8, 127u8, 82u8, 157u8, 33u8,
                            103u8, 108u8, 112u8, 38u8, 116u8, 163u8, 150u8, 225u8, 80u8, 42u8,
                            119u8, 202u8, 10u8, 200u8, 45u8, 145u8, 190u8, 34u8, 105u8, 13u8,
                            167u8,
                        ],
                    )
                }
                #[doc = " Actual proposal for a given hash, if it's current."]
                pub fn proposal_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proposal_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::proposal_of::Param0,
                    >,
                    types::proposal_of::ProposalOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "ProposalOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            51u8, 157u8, 79u8, 154u8, 65u8, 134u8, 79u8, 127u8, 82u8, 157u8, 33u8,
                            103u8, 108u8, 112u8, 38u8, 116u8, 163u8, 150u8, 225u8, 80u8, 42u8,
                            119u8, 202u8, 10u8, 200u8, 45u8, 145u8, 190u8, 34u8, 105u8, 13u8,
                            167u8,
                        ],
                    )
                }
                #[doc = " Block when the proposal was proposed."]
                pub fn proposal_proposed_time_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposal_proposed_time::ProposalProposedTime,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "ProposalProposedTime",
                        (),
                        [
                            247u8, 55u8, 179u8, 133u8, 244u8, 99u8, 154u8, 242u8, 25u8, 138u8,
                            133u8, 130u8, 15u8, 240u8, 156u8, 214u8, 38u8, 156u8, 111u8, 154u8,
                            62u8, 164u8, 225u8, 250u8, 208u8, 53u8, 111u8, 255u8, 45u8, 64u8, 29u8,
                            10u8,
                        ],
                    )
                }
                #[doc = " Block when the proposal was proposed."]
                pub fn proposal_proposed_time(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::proposal_proposed_time::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::proposal_proposed_time::Param0,
                    >,
                    types::proposal_proposed_time::ProposalProposedTime,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "ProposalProposedTime",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            247u8, 55u8, 179u8, 133u8, 244u8, 99u8, 154u8, 242u8, 25u8, 138u8,
                            133u8, 130u8, 15u8, 240u8, 156u8, 214u8, 38u8, 156u8, 111u8, 154u8,
                            62u8, 164u8, 225u8, 250u8, 208u8, 53u8, 111u8, 255u8, 45u8, 64u8, 29u8,
                            10u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::voting::Voting,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Voting",
                        (),
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Votes on a given proposal, if it is ongoing."]
                pub fn voting(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::voting::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::voting::Param0,
                    >,
                    types::voting::Voting,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Voting",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            98u8, 196u8, 41u8, 133u8, 250u8, 43u8, 117u8, 234u8, 220u8, 251u8,
                            209u8, 250u8, 141u8, 167u8, 161u8, 75u8, 192u8, 37u8, 144u8, 123u8,
                            18u8, 140u8, 173u8, 98u8, 87u8, 143u8, 145u8, 58u8, 37u8, 80u8, 173u8,
                            229u8,
                        ],
                    )
                }
                #[doc = " Proposals so far."]
                pub fn proposal_count(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::proposal_count::ProposalCount,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "ProposalCount",
                        (),
                        [
                            91u8, 238u8, 246u8, 106u8, 95u8, 66u8, 83u8, 134u8, 1u8, 225u8, 164u8,
                            216u8, 113u8, 101u8, 203u8, 200u8, 113u8, 97u8, 246u8, 228u8, 140u8,
                            29u8, 29u8, 48u8, 176u8, 137u8, 93u8, 230u8, 56u8, 75u8, 51u8, 149u8,
                        ],
                    )
                }
                #[doc = " The current members of the collective. This is stored sorted (just by value)."]
                pub fn members(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::members::Members,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Members",
                        (),
                        [
                            239u8, 177u8, 211u8, 65u8, 244u8, 88u8, 99u8, 62u8, 211u8, 52u8, 40u8,
                            10u8, 99u8, 162u8, 212u8, 203u8, 225u8, 253u8, 182u8, 133u8, 107u8,
                            103u8, 77u8, 238u8, 148u8, 255u8, 65u8, 106u8, 9u8, 230u8, 236u8,
                            224u8,
                        ],
                    )
                }
                #[doc = " The prime member that helps determine the default vote behavior in case of absentations."]
                pub fn prime(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::prime::Prime,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Council",
                        "Prime",
                        (),
                        [
                            37u8, 41u8, 188u8, 54u8, 33u8, 64u8, 159u8, 123u8, 190u8, 96u8, 187u8,
                            46u8, 35u8, 217u8, 157u8, 189u8, 243u8, 40u8, 118u8, 144u8, 104u8,
                            27u8, 188u8, 54u8, 55u8, 241u8, 78u8, 33u8, 116u8, 44u8, 88u8, 62u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The maximum weight of a dispatch call that can be proposed and executed."]
                pub fn max_proposal_weight(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    runtime_types::sp_weights::weight_v2::Weight,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Council",
                        "MaxProposalWeight",
                        [
                            149u8, 252u8, 129u8, 80u8, 169u8, 36u8, 79u8, 127u8, 240u8, 156u8,
                            56u8, 202u8, 219u8, 86u8, 5u8, 65u8, 245u8, 148u8, 138u8, 243u8, 210u8,
                            128u8, 234u8, 216u8, 240u8, 219u8, 123u8, 235u8, 21u8, 158u8, 237u8,
                            112u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod identity {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_identity::pallet::Error;
        #[doc = "Identity pallet declaration."]
        pub type Call = runtime_types::pallet_identity::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add a registrar to the system."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
                #[doc = ""]
                #[doc = "- `account`: the account of the registrar."]
                #[doc = ""]
                #[doc = "Emits `RegistrarAdded` if successful."]
                pub struct AddRegistrar {
                    pub account: add_registrar::Account,
                }
                pub mod add_registrar {
                    use super::runtime_types;
                    pub type Account = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddRegistrar {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "add_registrar";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set an account's identity information and reserve the appropriate deposit."]
                #[doc = ""]
                #[doc = "If the account already has identity information, the deposit is taken as part payment"]
                #[doc = "for the new deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `info`: The identity information."]
                #[doc = ""]
                #[doc = "Emits `IdentitySet` if successful."]
                pub struct SetIdentity {
                    pub info: ::subxt::ext::subxt_core::alloc::boxed::Box<set_identity::Info>,
                }
                pub mod set_identity {
                    use super::runtime_types;
                    pub type Info = runtime_types::pallet_identity::legacy::IdentityInfo;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_identity";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the sub-accounts of the sender."]
                #[doc = ""]
                #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
                #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "identity."]
                #[doc = ""]
                #[doc = "- `subs`: The identity's (new) sub-accounts."]
                pub struct SetSubs {
                    pub subs: set_subs::Subs,
                }
                pub mod set_subs {
                    use super::runtime_types;
                    pub type Subs = ::subxt::ext::subxt_core::alloc::vec::Vec<(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::pallet_identity::types::Data,
                    )>;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetSubs {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_subs";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
                #[doc = ""]
                #[doc = "Payment: All reserved balances on the account are returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "identity."]
                #[doc = ""]
                #[doc = "Emits `IdentityCleared` if successful."]
                pub struct ClearIdentity;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "clear_identity";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Request a judgement from a registrar."]
                #[doc = ""]
                #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
                #[doc = "given."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                #[doc = "registered identity."]
                #[doc = ""]
                #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
                #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
                #[doc = ""]
                #[doc = "```nocompile"]
                #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = "Emits `JudgementRequested` if successful."]
                pub struct RequestJudgement {
                    #[codec(compact)]
                    pub reg_index: request_judgement::RegIndex,
                    #[codec(compact)]
                    pub max_fee: request_judgement::MaxFee,
                }
                pub mod request_judgement {
                    use super::runtime_types;
                    pub type RegIndex = ::core::primitive::u32;
                    pub type MaxFee = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RequestJudgement {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "request_judgement";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Cancel a previous request."]
                #[doc = ""]
                #[doc = "Payment: A previously reserved deposit is returned on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                #[doc = "registered identity."]
                #[doc = ""]
                #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
                #[doc = ""]
                #[doc = "Emits `JudgementUnrequested` if successful."]
                pub struct CancelRequest {
                    pub reg_index: cancel_request::RegIndex,
                }
                pub mod cancel_request {
                    use super::runtime_types;
                    pub type RegIndex = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for CancelRequest {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "cancel_request";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the fee required for a judgement to be requested from a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `fee`: the new fee."]
                pub struct SetFee {
                    #[codec(compact)]
                    pub index: set_fee::Index,
                    #[codec(compact)]
                    pub fee: set_fee::Fee,
                }
                pub mod set_fee {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                    pub type Fee = ::core::primitive::u128;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetFee {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_fee";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Change the account associated with a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `new`: the new account ID."]
                pub struct SetAccountId {
                    #[codec(compact)]
                    pub index: set_account_id::Index,
                    pub new: set_account_id::New,
                }
                pub mod set_account_id {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                    pub type New = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetAccountId {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_account_id";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the field information for a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
                pub struct SetFields {
                    #[codec(compact)]
                    pub index: set_fields::Index,
                    pub fields: set_fields::Fields,
                }
                pub mod set_fields {
                    use super::runtime_types;
                    pub type Index = ::core::primitive::u32;
                    pub type Fields = ::core::primitive::u64;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetFields {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_fields";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Provide a judgement for an account's identity."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `reg_index`."]
                #[doc = ""]
                #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
                #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                #[doc = "  with a registered identity."]
                #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
                #[doc = "- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is"]
                #[doc = "  provided."]
                #[doc = ""]
                #[doc = "Note: Judgements do not apply to a username."]
                #[doc = ""]
                #[doc = "Emits `JudgementGiven` if successful."]
                pub struct ProvideJudgement {
                    #[codec(compact)]
                    pub reg_index: provide_judgement::RegIndex,
                    pub target: provide_judgement::Target,
                    pub judgement: provide_judgement::Judgement,
                    pub identity: provide_judgement::Identity,
                }
                pub mod provide_judgement {
                    use super::runtime_types;
                    pub type RegIndex = ::core::primitive::u32;
                    pub type Target = runtime_types::sp_runtime::account::AccountId20;
                    pub type Judgement =
                        runtime_types::pallet_identity::types::Judgement<::core::primitive::u128>;
                    pub type Identity = ::subxt::ext::subxt_core::utils::H256;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ProvideJudgement {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "provide_judgement";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
                #[doc = ""]
                #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
                #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
                #[doc = "manually using `cancel_request`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                #[doc = "  with a registered identity."]
                #[doc = ""]
                #[doc = "Emits `IdentityKilled` if successful."]
                pub struct KillIdentity {
                    pub target: kill_identity::Target,
                }
                pub mod kill_identity {
                    use super::runtime_types;
                    pub type Target = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for KillIdentity {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "kill_identity";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add the given account to the sender's subs."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub struct AddSub {
                    pub sub: add_sub::Sub,
                    pub data: add_sub::Data,
                }
                pub mod add_sub {
                    use super::runtime_types;
                    pub type Sub = runtime_types::sp_runtime::account::AccountId20;
                    pub type Data = runtime_types::pallet_identity::types::Data;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "add_sub";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Alter the associated name of the given sub-account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub struct RenameSub {
                    pub sub: rename_sub::Sub,
                    pub data: rename_sub::Data,
                }
                pub mod rename_sub {
                    use super::runtime_types;
                    pub type Sub = runtime_types::sp_runtime::account::AccountId20;
                    pub type Data = runtime_types::pallet_identity::types::Data;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RenameSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "rename_sub";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove the given account from the sender's subs."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub struct RemoveSub {
                    pub sub: remove_sub::Sub,
                }
                pub mod remove_sub {
                    use super::runtime_types;
                    pub type Sub = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "remove_sub";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove the sender as a sub-account."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender (*not* the original depositor)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "super-identity."]
                #[doc = ""]
                #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
                #[doc = "controller of an account is maliciously registered as a sub-account."]
                pub struct QuitSub;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for QuitSub {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "quit_sub";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add an `AccountId` with permission to grant usernames with a given `suffix` appended."]
                #[doc = ""]
                #[doc = "The authority can grant up to `allocation` usernames. To top up their allocation, they"]
                #[doc = "should just issue (or request via governance) a new `add_username_authority` call."]
                pub struct AddUsernameAuthority {
                    pub authority: add_username_authority::Authority,
                    pub suffix: add_username_authority::Suffix,
                    pub allocation: add_username_authority::Allocation,
                }
                pub mod add_username_authority {
                    use super::runtime_types;
                    pub type Authority = runtime_types::sp_runtime::account::AccountId20;
                    pub type Suffix =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub type Allocation = ::core::primitive::u32;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddUsernameAuthority {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "add_username_authority";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove `authority` from the username authorities."]
                pub struct RemoveUsernameAuthority {
                    pub authority: remove_username_authority::Authority,
                }
                pub mod remove_username_authority {
                    use super::runtime_types;
                    pub type Authority = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveUsernameAuthority {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "remove_username_authority";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the username for `who`. Must be called by a username authority."]
                #[doc = ""]
                #[doc = "The authority must have an `allocation`. Users can either pre-sign their usernames or"]
                #[doc = "accept them later."]
                #[doc = ""]
                #[doc = "Usernames must:"]
                #[doc = "  - Only contain lowercase ASCII characters or digits."]
                #[doc = "  - When combined with the suffix of the issuing authority be _less than_ the"]
                #[doc = "    `MaxUsernameLength`."]
                pub struct SetUsernameFor {
                    pub who: set_username_for::Who,
                    pub username: set_username_for::Username,
                    pub signature: set_username_for::Signature,
                }
                pub mod set_username_for {
                    use super::runtime_types;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                    pub type Username =
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>;
                    pub type Signature = ::core::option::Option<
                        runtime_types::sp_runtime::account::EthereumSignature,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetUsernameFor {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_username_for";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Accept a given username that an `authority` granted. The call must include the full"]
                #[doc = "username, as in `username.suffix`."]
                pub struct AcceptUsername {
                    pub username: accept_username::Username,
                }
                pub mod accept_username {
                    use super::runtime_types;
                    pub type Username = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AcceptUsername {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "accept_username";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove an expired username approval. The username was approved by an authority but never"]
                #[doc = "accepted by the user and must now be beyond its expiration. The call must include the"]
                #[doc = "full username, as in `username.suffix`."]
                pub struct RemoveExpiredApproval {
                    pub username: remove_expired_approval::Username,
                }
                pub mod remove_expired_approval {
                    use super::runtime_types;
                    pub type Username = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveExpiredApproval {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "remove_expired_approval";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set a given username as the primary. The username should include the suffix."]
                pub struct SetPrimaryUsername {
                    pub username: set_primary_username::Username,
                }
                pub mod set_primary_username {
                    use super::runtime_types;
                    pub type Username = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetPrimaryUsername {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "set_primary_username";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a username that corresponds to an account with no identity. Exists when a user"]
                #[doc = "gets a username but then calls `clear_identity`."]
                pub struct RemoveDanglingUsername {
                    pub username: remove_dangling_username::Username,
                }
                pub mod remove_dangling_username {
                    use super::runtime_types;
                    pub type Username = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveDanglingUsername {
                    const PALLET: &'static str = "Identity";
                    const CALL: &'static str = "remove_dangling_username";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a registrar to the system."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
                #[doc = ""]
                #[doc = "- `account`: the account of the registrar."]
                #[doc = ""]
                #[doc = "Emits `RegistrarAdded` if successful."]
                pub fn add_registrar(
                    &self,
                    account: types::add_registrar::Account,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddRegistrar>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "add_registrar",
                        types::AddRegistrar { account },
                        [
                            23u8, 128u8, 32u8, 51u8, 248u8, 65u8, 18u8, 119u8, 74u8, 81u8, 63u8,
                            64u8, 185u8, 110u8, 135u8, 70u8, 21u8, 172u8, 52u8, 63u8, 58u8, 157u8,
                            152u8, 77u8, 151u8, 64u8, 69u8, 144u8, 150u8, 122u8, 159u8, 111u8,
                        ],
                    )
                }
                #[doc = "Set an account's identity information and reserve the appropriate deposit."]
                #[doc = ""]
                #[doc = "If the account already has identity information, the deposit is taken as part payment"]
                #[doc = "for the new deposit."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_."]
                #[doc = ""]
                #[doc = "- `info`: The identity information."]
                #[doc = ""]
                #[doc = "Emits `IdentitySet` if successful."]
                pub fn set_identity(
                    &self,
                    info: types::set_identity::Info,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetIdentity>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "set_identity",
                        types::SetIdentity {
                            info: ::subxt::ext::subxt_core::alloc::boxed::Box::new(info),
                        },
                        [
                            18u8, 86u8, 67u8, 10u8, 116u8, 254u8, 94u8, 95u8, 166u8, 30u8, 204u8,
                            189u8, 174u8, 70u8, 191u8, 255u8, 149u8, 93u8, 156u8, 120u8, 105u8,
                            138u8, 199u8, 181u8, 43u8, 150u8, 143u8, 254u8, 182u8, 81u8, 86u8,
                            45u8,
                        ],
                    )
                }
                #[doc = "Set the sub-accounts of the sender."]
                #[doc = ""]
                #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
                #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "identity."]
                #[doc = ""]
                #[doc = "- `subs`: The identity's (new) sub-accounts."]
                pub fn set_subs(
                    &self,
                    subs: types::set_subs::Subs,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetSubs>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "set_subs",
                        types::SetSubs { subs },
                        [
                            254u8, 153u8, 39u8, 14u8, 151u8, 240u8, 157u8, 125u8, 118u8, 3u8,
                            127u8, 218u8, 139u8, 27u8, 20u8, 250u8, 66u8, 76u8, 89u8, 85u8, 170u8,
                            222u8, 129u8, 180u8, 178u8, 201u8, 186u8, 227u8, 70u8, 193u8, 213u8,
                            120u8,
                        ],
                    )
                }
                #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
                #[doc = ""]
                #[doc = "Payment: All reserved balances on the account are returned."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "identity."]
                #[doc = ""]
                #[doc = "Emits `IdentityCleared` if successful."]
                pub fn clear_identity(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearIdentity>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "clear_identity",
                        types::ClearIdentity {},
                        [
                            43u8, 115u8, 205u8, 44u8, 24u8, 130u8, 220u8, 69u8, 247u8, 176u8,
                            200u8, 175u8, 67u8, 183u8, 36u8, 200u8, 162u8, 132u8, 242u8, 25u8,
                            21u8, 106u8, 197u8, 219u8, 141u8, 51u8, 204u8, 13u8, 191u8, 201u8,
                            31u8, 31u8,
                        ],
                    )
                }
                #[doc = "Request a judgement from a registrar."]
                #[doc = ""]
                #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
                #[doc = "given."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                #[doc = "registered identity."]
                #[doc = ""]
                #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
                #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
                #[doc = ""]
                #[doc = "```nocompile"]
                #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
                #[doc = "```"]
                #[doc = ""]
                #[doc = "Emits `JudgementRequested` if successful."]
                pub fn request_judgement(
                    &self,
                    reg_index: types::request_judgement::RegIndex,
                    max_fee: types::request_judgement::MaxFee,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RequestJudgement>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "request_judgement",
                        types::RequestJudgement { reg_index, max_fee },
                        [
                            83u8, 85u8, 55u8, 184u8, 14u8, 54u8, 49u8, 212u8, 26u8, 148u8, 33u8,
                            147u8, 182u8, 54u8, 180u8, 12u8, 61u8, 179u8, 216u8, 157u8, 103u8,
                            52u8, 120u8, 252u8, 83u8, 203u8, 144u8, 65u8, 15u8, 3u8, 21u8, 33u8,
                        ],
                    )
                }
                #[doc = "Cancel a previous request."]
                #[doc = ""]
                #[doc = "Payment: A previously reserved deposit is returned on success."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                #[doc = "registered identity."]
                #[doc = ""]
                #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
                #[doc = ""]
                #[doc = "Emits `JudgementUnrequested` if successful."]
                pub fn cancel_request(
                    &self,
                    reg_index: types::cancel_request::RegIndex,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::CancelRequest>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "cancel_request",
                        types::CancelRequest { reg_index },
                        [
                            81u8, 14u8, 133u8, 219u8, 43u8, 84u8, 163u8, 208u8, 21u8, 185u8, 75u8,
                            117u8, 126u8, 33u8, 210u8, 106u8, 122u8, 210u8, 35u8, 207u8, 104u8,
                            206u8, 41u8, 117u8, 247u8, 108u8, 56u8, 23u8, 123u8, 169u8, 169u8,
                            61u8,
                        ],
                    )
                }
                #[doc = "Set the fee required for a judgement to be requested from a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `fee`: the new fee."]
                pub fn set_fee(
                    &self,
                    index: types::set_fee::Index,
                    fee: types::set_fee::Fee,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetFee>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "set_fee",
                        types::SetFee { index, fee },
                        [
                            131u8, 20u8, 17u8, 127u8, 180u8, 65u8, 225u8, 144u8, 193u8, 60u8,
                            131u8, 241u8, 30u8, 149u8, 8u8, 76u8, 29u8, 52u8, 102u8, 108u8, 127u8,
                            130u8, 70u8, 18u8, 94u8, 145u8, 179u8, 109u8, 252u8, 219u8, 58u8,
                            163u8,
                        ],
                    )
                }
                #[doc = "Change the account associated with a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `new`: the new account ID."]
                pub fn set_account_id(
                    &self,
                    index: types::set_account_id::Index,
                    new: types::set_account_id::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetAccountId>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "set_account_id",
                        types::SetAccountId { index, new },
                        [
                            204u8, 93u8, 150u8, 67u8, 223u8, 190u8, 154u8, 5u8, 142u8, 233u8,
                            195u8, 248u8, 217u8, 225u8, 153u8, 174u8, 135u8, 51u8, 166u8, 147u8,
                            91u8, 201u8, 89u8, 181u8, 147u8, 58u8, 222u8, 63u8, 57u8, 208u8, 184u8,
                            138u8,
                        ],
                    )
                }
                #[doc = "Set the field information for a registrar."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `index`."]
                #[doc = ""]
                #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
                pub fn set_fields(
                    &self,
                    index: types::set_fields::Index,
                    fields: types::set_fields::Fields,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetFields>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "set_fields",
                        types::SetFields { index, fields },
                        [
                            75u8, 38u8, 58u8, 93u8, 92u8, 164u8, 146u8, 146u8, 183u8, 245u8, 135u8,
                            235u8, 12u8, 148u8, 37u8, 193u8, 58u8, 66u8, 173u8, 223u8, 166u8,
                            169u8, 54u8, 159u8, 141u8, 36u8, 25u8, 231u8, 190u8, 211u8, 254u8,
                            38u8,
                        ],
                    )
                }
                #[doc = "Provide a judgement for an account's identity."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                #[doc = "of the registrar whose index is `reg_index`."]
                #[doc = ""]
                #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
                #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                #[doc = "  with a registered identity."]
                #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
                #[doc = "- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is"]
                #[doc = "  provided."]
                #[doc = ""]
                #[doc = "Note: Judgements do not apply to a username."]
                #[doc = ""]
                #[doc = "Emits `JudgementGiven` if successful."]
                pub fn provide_judgement(
                    &self,
                    reg_index: types::provide_judgement::RegIndex,
                    target: types::provide_judgement::Target,
                    judgement: types::provide_judgement::Judgement,
                    identity: types::provide_judgement::Identity,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ProvideJudgement>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "provide_judgement",
                        types::ProvideJudgement {
                            reg_index,
                            target,
                            judgement,
                            identity,
                        },
                        [
                            56u8, 101u8, 116u8, 218u8, 163u8, 199u8, 44u8, 22u8, 143u8, 51u8,
                            120u8, 142u8, 207u8, 91u8, 73u8, 124u8, 171u8, 187u8, 110u8, 236u8,
                            23u8, 41u8, 189u8, 12u8, 11u8, 212u8, 193u8, 116u8, 85u8, 3u8, 199u8,
                            136u8,
                        ],
                    )
                }
                #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
                #[doc = ""]
                #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
                #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
                #[doc = "manually using `cancel_request`."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
                #[doc = ""]
                #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                #[doc = "  with a registered identity."]
                #[doc = ""]
                #[doc = "Emits `IdentityKilled` if successful."]
                pub fn kill_identity(
                    &self,
                    target: types::kill_identity::Target,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::KillIdentity>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "kill_identity",
                        types::KillIdentity { target },
                        [
                            147u8, 88u8, 54u8, 4u8, 233u8, 165u8, 85u8, 199u8, 158u8, 144u8, 137u8,
                            33u8, 248u8, 44u8, 64u8, 116u8, 13u8, 178u8, 116u8, 48u8, 245u8, 5u8,
                            97u8, 153u8, 10u8, 162u8, 155u8, 231u8, 131u8, 239u8, 54u8, 25u8,
                        ],
                    )
                }
                #[doc = "Add the given account to the sender's subs."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn add_sub(
                    &self,
                    sub: types::add_sub::Sub,
                    data: types::add_sub::Data,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddSub>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "add_sub",
                        types::AddSub { sub, data },
                        [
                            20u8, 50u8, 158u8, 18u8, 17u8, 76u8, 178u8, 254u8, 41u8, 84u8, 61u8,
                            115u8, 76u8, 251u8, 234u8, 1u8, 51u8, 49u8, 42u8, 176u8, 16u8, 232u8,
                            130u8, 145u8, 152u8, 215u8, 131u8, 87u8, 0u8, 31u8, 45u8, 188u8,
                        ],
                    )
                }
                #[doc = "Alter the associated name of the given sub-account."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn rename_sub(
                    &self,
                    sub: types::rename_sub::Sub,
                    data: types::rename_sub::Data,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RenameSub>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "rename_sub",
                        types::RenameSub { sub, data },
                        [
                            4u8, 124u8, 66u8, 167u8, 227u8, 54u8, 172u8, 93u8, 203u8, 80u8, 76u8,
                            84u8, 0u8, 70u8, 86u8, 147u8, 225u8, 116u8, 121u8, 126u8, 31u8, 198u8,
                            115u8, 1u8, 27u8, 43u8, 111u8, 201u8, 188u8, 110u8, 91u8, 190u8,
                        ],
                    )
                }
                #[doc = "Remove the given account from the sender's subs."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "sub identity of `sub`."]
                pub fn remove_sub(
                    &self,
                    sub: types::remove_sub::Sub,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveSub>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "remove_sub",
                        types::RemoveSub { sub },
                        [
                            223u8, 209u8, 112u8, 231u8, 141u8, 112u8, 192u8, 177u8, 32u8, 65u8,
                            8u8, 101u8, 45u8, 249u8, 91u8, 176u8, 218u8, 164u8, 184u8, 12u8, 213u8,
                            195u8, 29u8, 235u8, 40u8, 90u8, 81u8, 104u8, 228u8, 253u8, 58u8, 55u8,
                        ],
                    )
                }
                #[doc = "Remove the sender as a sub-account."]
                #[doc = ""]
                #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                #[doc = "to the sender (*not* the original depositor)."]
                #[doc = ""]
                #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                #[doc = "super-identity."]
                #[doc = ""]
                #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
                #[doc = "controller of an account is maliciously registered as a sub-account."]
                pub fn quit_sub(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::QuitSub>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "quit_sub",
                        types::QuitSub {},
                        [
                            147u8, 131u8, 175u8, 171u8, 187u8, 201u8, 240u8, 26u8, 146u8, 224u8,
                            74u8, 166u8, 242u8, 193u8, 204u8, 247u8, 168u8, 93u8, 18u8, 32u8, 27u8,
                            208u8, 149u8, 146u8, 179u8, 172u8, 75u8, 112u8, 84u8, 141u8, 233u8,
                            223u8,
                        ],
                    )
                }
                #[doc = "Add an `AccountId` with permission to grant usernames with a given `suffix` appended."]
                #[doc = ""]
                #[doc = "The authority can grant up to `allocation` usernames. To top up their allocation, they"]
                #[doc = "should just issue (or request via governance) a new `add_username_authority` call."]
                pub fn add_username_authority(
                    &self,
                    authority: types::add_username_authority::Authority,
                    suffix: types::add_username_authority::Suffix,
                    allocation: types::add_username_authority::Allocation,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddUsernameAuthority>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "add_username_authority",
                        types::AddUsernameAuthority {
                            authority,
                            suffix,
                            allocation,
                        },
                        [
                            248u8, 216u8, 111u8, 193u8, 25u8, 210u8, 138u8, 253u8, 231u8, 237u8,
                            120u8, 211u8, 98u8, 95u8, 44u8, 30u8, 190u8, 55u8, 133u8, 28u8, 164u8,
                            115u8, 104u8, 132u8, 144u8, 229u8, 212u8, 138u8, 133u8, 57u8, 172u8,
                            133u8,
                        ],
                    )
                }
                #[doc = "Remove `authority` from the username authorities."]
                pub fn remove_username_authority(
                    &self,
                    authority: types::remove_username_authority::Authority,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::RemoveUsernameAuthority,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "remove_username_authority",
                        types::RemoveUsernameAuthority { authority },
                        [
                            192u8, 18u8, 21u8, 238u8, 34u8, 145u8, 95u8, 209u8, 188u8, 204u8,
                            217u8, 203u8, 109u8, 166u8, 198u8, 32u8, 63u8, 23u8, 60u8, 216u8, 35u8,
                            143u8, 237u8, 31u8, 192u8, 103u8, 122u8, 76u8, 235u8, 137u8, 187u8,
                            31u8,
                        ],
                    )
                }
                #[doc = "Set the username for `who`. Must be called by a username authority."]
                #[doc = ""]
                #[doc = "The authority must have an `allocation`. Users can either pre-sign their usernames or"]
                #[doc = "accept them later."]
                #[doc = ""]
                #[doc = "Usernames must:"]
                #[doc = "  - Only contain lowercase ASCII characters or digits."]
                #[doc = "  - When combined with the suffix of the issuing authority be _less than_ the"]
                #[doc = "    `MaxUsernameLength`."]
                pub fn set_username_for(
                    &self,
                    who: types::set_username_for::Who,
                    username: types::set_username_for::Username,
                    signature: types::set_username_for::Signature,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetUsernameFor>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "set_username_for",
                        types::SetUsernameFor {
                            who,
                            username,
                            signature,
                        },
                        [
                            175u8, 163u8, 251u8, 238u8, 62u8, 35u8, 187u8, 70u8, 217u8, 252u8,
                            107u8, 126u8, 77u8, 224u8, 141u8, 1u8, 101u8, 127u8, 135u8, 49u8,
                            148u8, 254u8, 99u8, 2u8, 100u8, 29u8, 10u8, 195u8, 244u8, 198u8, 195u8,
                            192u8,
                        ],
                    )
                }
                #[doc = "Accept a given username that an `authority` granted. The call must include the full"]
                #[doc = "username, as in `username.suffix`."]
                pub fn accept_username(
                    &self,
                    username: types::accept_username::Username,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AcceptUsername>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "accept_username",
                        types::AcceptUsername { username },
                        [
                            247u8, 162u8, 83u8, 250u8, 214u8, 7u8, 12u8, 253u8, 227u8, 4u8, 95u8,
                            71u8, 150u8, 218u8, 216u8, 86u8, 137u8, 37u8, 114u8, 188u8, 18u8,
                            232u8, 229u8, 179u8, 172u8, 251u8, 70u8, 29u8, 18u8, 86u8, 33u8, 129u8,
                        ],
                    )
                }
                #[doc = "Remove an expired username approval. The username was approved by an authority but never"]
                #[doc = "accepted by the user and must now be beyond its expiration. The call must include the"]
                #[doc = "full username, as in `username.suffix`."]
                pub fn remove_expired_approval(
                    &self,
                    username: types::remove_expired_approval::Username,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::RemoveExpiredApproval,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "remove_expired_approval",
                        types::RemoveExpiredApproval { username },
                        [
                            159u8, 171u8, 27u8, 97u8, 224u8, 171u8, 14u8, 89u8, 65u8, 213u8, 208u8,
                            67u8, 118u8, 146u8, 0u8, 131u8, 82u8, 186u8, 142u8, 52u8, 173u8, 90u8,
                            104u8, 107u8, 114u8, 202u8, 123u8, 222u8, 49u8, 53u8, 59u8, 61u8,
                        ],
                    )
                }
                #[doc = "Set a given username as the primary. The username should include the suffix."]
                pub fn set_primary_username(
                    &self,
                    username: types::set_primary_username::Username,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetPrimaryUsername>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "set_primary_username",
                        types::SetPrimaryUsername { username },
                        [
                            3u8, 25u8, 56u8, 26u8, 108u8, 165u8, 84u8, 231u8, 16u8, 4u8, 6u8,
                            232u8, 141u8, 7u8, 254u8, 50u8, 26u8, 230u8, 66u8, 245u8, 255u8, 101u8,
                            183u8, 234u8, 197u8, 186u8, 132u8, 197u8, 251u8, 84u8, 212u8, 162u8,
                        ],
                    )
                }
                #[doc = "Remove a username that corresponds to an account with no identity. Exists when a user"]
                #[doc = "gets a username but then calls `clear_identity`."]
                pub fn remove_dangling_username(
                    &self,
                    username: types::remove_dangling_username::Username,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<
                    types::RemoveDanglingUsername,
                > {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "Identity",
                        "remove_dangling_username",
                        types::RemoveDanglingUsername { username },
                        [
                            220u8, 67u8, 52u8, 223u8, 169u8, 81u8, 202u8, 74u8, 199u8, 169u8, 89u8,
                            60u8, 57u8, 153u8, 240u8, 105u8, 188u8, 222u8, 250u8, 247u8, 91u8,
                            137u8, 37u8, 212u8, 10u8, 51u8, 9u8, 202u8, 165u8, 155u8, 222u8, 29u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_identity::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A name was set or reset (which will remove all judgements)."]
            pub struct IdentitySet {
                pub who: identity_set::Who,
            }
            pub mod identity_set {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for IdentitySet {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentitySet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A name was cleared, and the given balance returned."]
            pub struct IdentityCleared {
                pub who: identity_cleared::Who,
                pub deposit: identity_cleared::Deposit,
            }
            pub mod identity_cleared {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for IdentityCleared {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityCleared";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A name was removed and the given balance slashed."]
            pub struct IdentityKilled {
                pub who: identity_killed::Who,
                pub deposit: identity_killed::Deposit,
            }
            pub mod identity_killed {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for IdentityKilled {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "IdentityKilled";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A judgement was asked from a registrar."]
            pub struct JudgementRequested {
                pub who: judgement_requested::Who,
                pub registrar_index: judgement_requested::RegistrarIndex,
            }
            pub mod judgement_requested {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type RegistrarIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for JudgementRequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementRequested";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A judgement request was retracted."]
            pub struct JudgementUnrequested {
                pub who: judgement_unrequested::Who,
                pub registrar_index: judgement_unrequested::RegistrarIndex,
            }
            pub mod judgement_unrequested {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type RegistrarIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for JudgementUnrequested {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementUnrequested";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A judgement was given by a registrar."]
            pub struct JudgementGiven {
                pub target: judgement_given::Target,
                pub registrar_index: judgement_given::RegistrarIndex,
            }
            pub mod judgement_given {
                use super::runtime_types;
                pub type Target = runtime_types::sp_runtime::account::AccountId20;
                pub type RegistrarIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for JudgementGiven {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "JudgementGiven";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A registrar was added."]
            pub struct RegistrarAdded {
                pub registrar_index: registrar_added::RegistrarIndex,
            }
            pub mod registrar_added {
                use super::runtime_types;
                pub type RegistrarIndex = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for RegistrarAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "RegistrarAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sub-identity was added to an identity and the deposit paid."]
            pub struct SubIdentityAdded {
                pub sub: sub_identity_added::Sub,
                pub main: sub_identity_added::Main,
                pub deposit: sub_identity_added::Deposit,
            }
            pub mod sub_identity_added {
                use super::runtime_types;
                pub type Sub = runtime_types::sp_runtime::account::AccountId20;
                pub type Main = runtime_types::sp_runtime::account::AccountId20;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SubIdentityAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sub-identity was removed from an identity and the deposit freed."]
            pub struct SubIdentityRemoved {
                pub sub: sub_identity_removed::Sub,
                pub main: sub_identity_removed::Main,
                pub deposit: sub_identity_removed::Deposit,
            }
            pub mod sub_identity_removed {
                use super::runtime_types;
                pub type Sub = runtime_types::sp_runtime::account::AccountId20;
                pub type Main = runtime_types::sp_runtime::account::AccountId20;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SubIdentityRemoved {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
            #[doc = "main identity account to the sub-identity account."]
            pub struct SubIdentityRevoked {
                pub sub: sub_identity_revoked::Sub,
                pub main: sub_identity_revoked::Main,
                pub deposit: sub_identity_revoked::Deposit,
            }
            pub mod sub_identity_revoked {
                use super::runtime_types;
                pub type Sub = runtime_types::sp_runtime::account::AccountId20;
                pub type Main = runtime_types::sp_runtime::account::AccountId20;
                pub type Deposit = ::core::primitive::u128;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for SubIdentityRevoked {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "SubIdentityRevoked";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A username authority was added."]
            pub struct AuthorityAdded {
                pub authority: authority_added::Authority,
            }
            pub mod authority_added {
                use super::runtime_types;
                pub type Authority = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AuthorityAdded {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "AuthorityAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A username authority was removed."]
            pub struct AuthorityRemoved {
                pub authority: authority_removed::Authority,
            }
            pub mod authority_removed {
                use super::runtime_types;
                pub type Authority = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for AuthorityRemoved {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "AuthorityRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A username was set for `who`."]
            pub struct UsernameSet {
                pub who: username_set::Who,
                pub username: username_set::Username,
            }
            pub mod username_set {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Username = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UsernameSet {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "UsernameSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A username was queued, but `who` must accept it prior to `expiration`."]
            pub struct UsernameQueued {
                pub who: username_queued::Who,
                pub username: username_queued::Username,
                pub expiration: username_queued::Expiration,
            }
            pub mod username_queued {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Username = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
                pub type Expiration = ::core::primitive::u32;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for UsernameQueued {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "UsernameQueued";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A queued username passed its expiration without being claimed and was removed."]
            pub struct PreapprovalExpired {
                pub whose: preapproval_expired::Whose,
            }
            pub mod preapproval_expired {
                use super::runtime_types;
                pub type Whose = runtime_types::sp_runtime::account::AccountId20;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PreapprovalExpired {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "PreapprovalExpired";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A username was set as a primary and can be looked up from `who`."]
            pub struct PrimaryUsernameSet {
                pub who: primary_username_set::Who,
                pub username: primary_username_set::Username,
            }
            pub mod primary_username_set {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Username = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for PrimaryUsernameSet {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "PrimaryUsernameSet";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "A dangling username (as in, a username corresponding to an account that has removed its"]
            #[doc = "identity) has been removed."]
            pub struct DanglingUsernameRemoved {
                pub who: dangling_username_removed::Who,
                pub username: dangling_username_removed::Username,
            }
            pub mod dangling_username_removed {
                use super::runtime_types;
                pub type Who = runtime_types::sp_runtime::account::AccountId20;
                pub type Username = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                    ::core::primitive::u8,
                >;
            }
            impl ::subxt::ext::subxt_core::events::StaticEvent for DanglingUsernameRemoved {
                const PALLET: &'static str = "Identity";
                const EVENT: &'static str = "DanglingUsernameRemoved";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod identity_of {
                    use super::runtime_types;
                    pub type IdentityOf = (
                        runtime_types::pallet_identity::types::Registration<
                            ::core::primitive::u128,
                            runtime_types::pallet_identity::legacy::IdentityInfo,
                        >,
                        ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    );
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod super_of {
                    use super::runtime_types;
                    pub type SuperOf = (
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::pallet_identity::types::Data,
                    );
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod subs_of {
                    use super::runtime_types;
                    pub type SubsOf = (
                        ::core::primitive::u128,
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                    );
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod registrars {
                    use super::runtime_types;
                    pub type Registrars =
                        runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::option::Option<
                                runtime_types::pallet_identity::types::RegistrarInfo<
                                    ::core::primitive::u128,
                                    runtime_types::sp_runtime::account::AccountId20,
                                    ::core::primitive::u64,
                                >,
                            >,
                        >;
                }
                pub mod username_authorities {
                    use super::runtime_types;
                    pub type UsernameAuthorities =
                        runtime_types::pallet_identity::types::AuthorityProperties<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >;
                    pub type Param0 = runtime_types::sp_runtime::account::AccountId20;
                }
                pub mod account_of_username {
                    use super::runtime_types;
                    pub type AccountOfUsername = runtime_types::sp_runtime::account::AccountId20;
                    pub type Param0 = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
                pub mod pending_usernames {
                    use super::runtime_types;
                    pub type PendingUsernames = (
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                    );
                    pub type Param0 = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " Information that is pertinent to identify the entity behind an account. First item is the"]
                #[doc = " registration, second is the account's primary username."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn identity_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::identity_of::IdentityOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "IdentityOf",
                        (),
                        [
                            85u8, 162u8, 79u8, 157u8, 119u8, 143u8, 229u8, 99u8, 229u8, 69u8, 51u8,
                            89u8, 102u8, 47u8, 161u8, 155u8, 131u8, 118u8, 27u8, 117u8, 150u8,
                            27u8, 154u8, 86u8, 111u8, 190u8, 93u8, 30u8, 35u8, 196u8, 159u8, 15u8,
                        ],
                    )
                }
                #[doc = " Information that is pertinent to identify the entity behind an account. First item is the"]
                #[doc = " registration, second is the account's primary username."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn identity_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::identity_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::identity_of::Param0,
                    >,
                    types::identity_of::IdentityOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "IdentityOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            85u8, 162u8, 79u8, 157u8, 119u8, 143u8, 229u8, 99u8, 229u8, 69u8, 51u8,
                            89u8, 102u8, 47u8, 161u8, 155u8, 131u8, 118u8, 27u8, 117u8, 150u8,
                            27u8, 154u8, 86u8, 111u8, 190u8, 93u8, 30u8, 35u8, 196u8, 159u8, 15u8,
                        ],
                    )
                }
                #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
                #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
                pub fn super_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::super_of::SuperOf,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "SuperOf",
                        (),
                        [
                            169u8, 196u8, 47u8, 208u8, 82u8, 165u8, 75u8, 184u8, 178u8, 255u8,
                            65u8, 75u8, 221u8, 63u8, 203u8, 243u8, 176u8, 118u8, 69u8, 162u8, 57u8,
                            225u8, 241u8, 53u8, 133u8, 125u8, 201u8, 255u8, 63u8, 164u8, 0u8,
                            216u8,
                        ],
                    )
                }
                #[doc = " The super-identity of an alternative \"sub\" identity together with its name, within that"]
                #[doc = " context. If the account is not some other account's sub-identity, then just `None`."]
                pub fn super_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::super_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::super_of::Param0,
                    >,
                    types::super_of::SuperOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "SuperOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            169u8, 196u8, 47u8, 208u8, 82u8, 165u8, 75u8, 184u8, 178u8, 255u8,
                            65u8, 75u8, 221u8, 63u8, 203u8, 243u8, 176u8, 118u8, 69u8, 162u8, 57u8,
                            225u8, 241u8, 53u8, 133u8, 125u8, 201u8, 255u8, 63u8, 164u8, 0u8,
                            216u8,
                        ],
                    )
                }
                #[doc = " Alternative \"sub\" identities of this account."]
                #[doc = ""]
                #[doc = " The first item is the deposit, the second is a vector of the accounts."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn subs_of_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::subs_of::SubsOf,
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "SubsOf",
                        (),
                        [
                            216u8, 23u8, 82u8, 40u8, 9u8, 59u8, 57u8, 145u8, 190u8, 247u8, 73u8,
                            220u8, 112u8, 203u8, 36u8, 85u8, 239u8, 190u8, 11u8, 207u8, 73u8,
                            198u8, 76u8, 89u8, 78u8, 221u8, 97u8, 71u8, 179u8, 176u8, 170u8, 170u8,
                        ],
                    )
                }
                #[doc = " Alternative \"sub\" identities of this account."]
                #[doc = ""]
                #[doc = " The first item is the deposit, the second is a vector of the accounts."]
                #[doc = ""]
                #[doc = " TWOX-NOTE: OK ― `AccountId` is a secure hash."]
                pub fn subs_of(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::subs_of::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::subs_of::Param0,
                    >,
                    types::subs_of::SubsOf,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "SubsOf",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            216u8, 23u8, 82u8, 40u8, 9u8, 59u8, 57u8, 145u8, 190u8, 247u8, 73u8,
                            220u8, 112u8, 203u8, 36u8, 85u8, 239u8, 190u8, 11u8, 207u8, 73u8,
                            198u8, 76u8, 89u8, 78u8, 221u8, 97u8, 71u8, 179u8, 176u8, 170u8, 170u8,
                        ],
                    )
                }
                #[doc = " The set of registrars. Not expected to get very big as can only be added through a"]
                #[doc = " special origin (likely a council motion)."]
                #[doc = ""]
                #[doc = " The index into this can be cast to `RegistrarIndex` to get a valid value."]
                pub fn registrars(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::registrars::Registrars,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "Registrars",
                        (),
                        [
                            174u8, 132u8, 64u8, 243u8, 119u8, 154u8, 101u8, 67u8, 81u8, 152u8,
                            120u8, 251u8, 192u8, 199u8, 7u8, 246u8, 29u8, 220u8, 54u8, 91u8, 228u8,
                            148u8, 148u8, 134u8, 236u8, 143u8, 148u8, 119u8, 243u8, 214u8, 64u8,
                            151u8,
                        ],
                    )
                }
                #[doc = " A map of the accounts who are authorized to grant usernames."]
                pub fn username_authorities_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::username_authorities::UsernameAuthorities,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "UsernameAuthorities",
                        (),
                        [
                            46u8, 116u8, 131u8, 253u8, 100u8, 170u8, 247u8, 51u8, 230u8, 39u8,
                            179u8, 218u8, 63u8, 39u8, 105u8, 124u8, 105u8, 83u8, 184u8, 19u8, 16u8,
                            141u8, 18u8, 231u8, 130u8, 240u8, 201u8, 133u8, 229u8, 234u8, 183u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " A map of the accounts who are authorized to grant usernames."]
                pub fn username_authorities(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::username_authorities::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::username_authorities::Param0,
                    >,
                    types::username_authorities::UsernameAuthorities,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "UsernameAuthorities",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            46u8, 116u8, 131u8, 253u8, 100u8, 170u8, 247u8, 51u8, 230u8, 39u8,
                            179u8, 218u8, 63u8, 39u8, 105u8, 124u8, 105u8, 83u8, 184u8, 19u8, 16u8,
                            141u8, 18u8, 231u8, 130u8, 240u8, 201u8, 133u8, 229u8, 234u8, 183u8,
                            143u8,
                        ],
                    )
                }
                #[doc = " Reverse lookup from `username` to the `AccountId` that has registered it. The value should"]
                #[doc = " be a key in the `IdentityOf` map, but it may not if the user has cleared their identity."]
                #[doc = ""]
                #[doc = " Multiple usernames may map to the same `AccountId`, but `IdentityOf` will only map to one"]
                #[doc = " primary username."]
                pub fn account_of_username_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::account_of_username::AccountOfUsername,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "AccountOfUsername",
                        (),
                        [
                            65u8, 247u8, 225u8, 249u8, 71u8, 3u8, 119u8, 11u8, 97u8, 32u8, 226u8,
                            34u8, 154u8, 224u8, 8u8, 107u8, 10u8, 8u8, 165u8, 210u8, 63u8, 178u8,
                            144u8, 86u8, 22u8, 168u8, 106u8, 141u8, 94u8, 26u8, 204u8, 84u8,
                        ],
                    )
                }
                #[doc = " Reverse lookup from `username` to the `AccountId` that has registered it. The value should"]
                #[doc = " be a key in the `IdentityOf` map, but it may not if the user has cleared their identity."]
                #[doc = ""]
                #[doc = " Multiple usernames may map to the same `AccountId`, but `IdentityOf` will only map to one"]
                #[doc = " primary username."]
                pub fn account_of_username(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::account_of_username::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::account_of_username::Param0,
                    >,
                    types::account_of_username::AccountOfUsername,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "AccountOfUsername",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            65u8, 247u8, 225u8, 249u8, 71u8, 3u8, 119u8, 11u8, 97u8, 32u8, 226u8,
                            34u8, 154u8, 224u8, 8u8, 107u8, 10u8, 8u8, 165u8, 210u8, 63u8, 178u8,
                            144u8, 86u8, 22u8, 168u8, 106u8, 141u8, 94u8, 26u8, 204u8, 84u8,
                        ],
                    )
                }
                #[doc = " Usernames that an authority has granted, but that the account controller has not confirmed"]
                #[doc = " that they want it. Used primarily in cases where the `AccountId` cannot provide a signature"]
                #[doc = " because they are a pure proxy, multisig, etc. In order to confirm it, they should call"]
                #[doc = " [`Call::accept_username`]."]
                #[doc = ""]
                #[doc = " First tuple item is the account and second is the acceptance deadline."]
                pub fn pending_usernames_iter(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::pending_usernames::PendingUsernames,
                    (),
                    (),
                    ::subxt::ext::subxt_core::utils::Yes,
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "PendingUsernames",
                        (),
                        [
                            45u8, 229u8, 27u8, 249u8, 158u8, 202u8, 88u8, 21u8, 45u8, 230u8, 76u8,
                            250u8, 159u8, 139u8, 198u8, 220u8, 74u8, 20u8, 53u8, 31u8, 192u8,
                            151u8, 142u8, 54u8, 200u8, 229u8, 119u8, 112u8, 122u8, 30u8, 139u8,
                            165u8,
                        ],
                    )
                }
                #[doc = " Usernames that an authority has granted, but that the account controller has not confirmed"]
                #[doc = " that they want it. Used primarily in cases where the `AccountId` cannot provide a signature"]
                #[doc = " because they are a pure proxy, multisig, etc. In order to confirm it, they should call"]
                #[doc = " [`Call::accept_username`]."]
                #[doc = ""]
                #[doc = " First tuple item is the account and second is the acceptance deadline."]
                pub fn pending_usernames(
                    &self,
                    _0: impl ::core::borrow::Borrow<types::pending_usernames::Param0>,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    ::subxt::ext::subxt_core::storage::address::StaticStorageKey<
                        types::pending_usernames::Param0,
                    >,
                    types::pending_usernames::PendingUsernames,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "Identity",
                        "PendingUsernames",
                        ::subxt::ext::subxt_core::storage::address::StaticStorageKey::new(
                            _0.borrow(),
                        ),
                        [
                            45u8, 229u8, 27u8, 249u8, 158u8, 202u8, 88u8, 21u8, 45u8, 230u8, 76u8,
                            250u8, 159u8, 139u8, 198u8, 220u8, 74u8, 20u8, 53u8, 31u8, 192u8,
                            151u8, 142u8, 54u8, 200u8, 229u8, 119u8, 112u8, 122u8, 30u8, 139u8,
                            165u8,
                        ],
                    )
                }
            }
        }
        pub mod constants {
            use super::runtime_types;
            pub struct ConstantsApi;
            impl ConstantsApi {
                #[doc = " The amount held on deposit for a registered identity."]
                pub fn basic_deposit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Identity",
                        "BasicDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit per encoded byte for a registered identity."]
                pub fn byte_deposit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Identity",
                        "ByteDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The amount held on deposit for a registered subaccount. This should account for the fact"]
                #[doc = " that one storage item's value will increase by the size of an account ID, and there will"]
                #[doc = " be another trie item whose value is the size of an account ID plus 32 bytes."]
                pub fn sub_account_deposit(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u128,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Identity",
                        "SubAccountDeposit",
                        [
                            84u8, 157u8, 140u8, 4u8, 93u8, 57u8, 29u8, 133u8, 105u8, 200u8, 214u8,
                            27u8, 144u8, 208u8, 218u8, 160u8, 130u8, 109u8, 101u8, 54u8, 210u8,
                            136u8, 71u8, 63u8, 49u8, 237u8, 234u8, 15u8, 178u8, 98u8, 148u8, 156u8,
                        ],
                    )
                }
                #[doc = " The maximum number of sub-accounts allowed per identified account."]
                pub fn max_sub_accounts(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Identity",
                        "MaxSubAccounts",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " Maxmimum number of registrars allowed in the system. Needed to bound the complexity"]
                #[doc = " of, e.g., updating judgements."]
                pub fn max_registrars(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Identity",
                        "MaxRegistrars",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The number of blocks within which a username grant must be accepted."]
                pub fn pending_username_expiration(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Identity",
                        "PendingUsernameExpiration",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a suffix."]
                pub fn max_suffix_length(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Identity",
                        "MaxSuffixLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
                #[doc = " The maximum length of a username, including its suffix and any system-added delimiters."]
                pub fn max_username_length(
                    &self,
                ) -> ::subxt::ext::subxt_core::constants::address::StaticAddress<
                    ::core::primitive::u32,
                > {
                    ::subxt::ext::subxt_core::constants::address::StaticAddress::new_static(
                        "Identity",
                        "MaxUsernameLength",
                        [
                            98u8, 252u8, 116u8, 72u8, 26u8, 180u8, 225u8, 83u8, 200u8, 157u8,
                            125u8, 151u8, 53u8, 76u8, 168u8, 26u8, 10u8, 9u8, 98u8, 68u8, 9u8,
                            178u8, 197u8, 113u8, 31u8, 79u8, 200u8, 90u8, 203u8, 100u8, 41u8,
                            145u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod foundation_members {
        use super::root_mod;
        use super::runtime_types;
        #[doc = "The `Error` enum of this pallet."]
        pub type Error = runtime_types::pallet_membership::pallet::Error;
        #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
        pub type Call = runtime_types::pallet_membership::pallet::Call;
        pub mod calls {
            use super::root_mod;
            use super::runtime_types;
            type DispatchError = runtime_types::sp_runtime::DispatchError;
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Add a member `who` to the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::AddOrigin`."]
                pub struct AddMember {
                    pub who: add_member::Who,
                }
                pub mod add_member {
                    use super::runtime_types;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for AddMember {
                    const PALLET: &'static str = "FoundationMembers";
                    const CALL: &'static str = "add_member";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove a member `who` from the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::RemoveOrigin`."]
                pub struct RemoveMember {
                    pub who: remove_member::Who,
                }
                pub mod remove_member {
                    use super::runtime_types;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for RemoveMember {
                    const PALLET: &'static str = "FoundationMembers";
                    const CALL: &'static str = "remove_member";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Swap out one member `remove` for another `add`."]
                #[doc = ""]
                #[doc = "May only be called from `T::SwapOrigin`."]
                #[doc = ""]
                #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                pub struct SwapMember {
                    pub remove: swap_member::Remove,
                    pub add: swap_member::Add,
                }
                pub mod swap_member {
                    use super::runtime_types;
                    pub type Remove = runtime_types::sp_runtime::account::AccountId20;
                    pub type Add = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SwapMember {
                    const PALLET: &'static str = "FoundationMembers";
                    const CALL: &'static str = "swap_member";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                #[doc = "pass `members` pre-sorted."]
                #[doc = ""]
                #[doc = "May only be called from `T::ResetOrigin`."]
                pub struct ResetMembers {
                    pub members: reset_members::Members,
                }
                pub mod reset_members {
                    use super::runtime_types;
                    pub type Members = ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ResetMembers {
                    const PALLET: &'static str = "FoundationMembers";
                    const CALL: &'static str = "reset_members";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Swap out the sending member for some other key `new`."]
                #[doc = ""]
                #[doc = "May only be called from `Signed` origin of a current member."]
                #[doc = ""]
                #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                pub struct ChangeKey {
                    pub new: change_key::New,
                }
                pub mod change_key {
                    use super::runtime_types;
                    pub type New = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ChangeKey {
                    const PALLET: &'static str = "FoundationMembers";
                    const CALL: &'static str = "change_key";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Set the prime member. Must be a current member."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub struct SetPrime {
                    pub who: set_prime::Who,
                }
                pub mod set_prime {
                    use super::runtime_types;
                    pub type Who = runtime_types::sp_runtime::account::AccountId20;
                }
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for SetPrime {
                    const PALLET: &'static str = "FoundationMembers";
                    const CALL: &'static str = "set_prime";
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Remove the prime member if it exists."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub struct ClearPrime;
                impl ::subxt::ext::subxt_core::blocks::StaticExtrinsic for ClearPrime {
                    const PALLET: &'static str = "FoundationMembers";
                    const CALL: &'static str = "clear_prime";
                }
            }
            pub struct TransactionApi;
            impl TransactionApi {
                #[doc = "Add a member `who` to the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::AddOrigin`."]
                pub fn add_member(
                    &self,
                    who: types::add_member::Who,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::AddMember>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FoundationMembers",
                        "add_member",
                        types::AddMember { who },
                        [
                            28u8, 243u8, 28u8, 180u8, 28u8, 21u8, 58u8, 9u8, 23u8, 113u8, 62u8,
                            2u8, 240u8, 77u8, 147u8, 154u8, 23u8, 203u8, 112u8, 230u8, 168u8, 12u8,
                            173u8, 98u8, 135u8, 121u8, 36u8, 5u8, 21u8, 254u8, 128u8, 39u8,
                        ],
                    )
                }
                #[doc = "Remove a member `who` from the set."]
                #[doc = ""]
                #[doc = "May only be called from `T::RemoveOrigin`."]
                pub fn remove_member(
                    &self,
                    who: types::remove_member::Who,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::RemoveMember>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FoundationMembers",
                        "remove_member",
                        types::RemoveMember { who },
                        [
                            26u8, 169u8, 249u8, 31u8, 159u8, 104u8, 52u8, 246u8, 198u8, 77u8,
                            168u8, 40u8, 134u8, 178u8, 67u8, 4u8, 1u8, 109u8, 172u8, 23u8, 6u8,
                            215u8, 90u8, 201u8, 241u8, 223u8, 129u8, 203u8, 16u8, 119u8, 71u8,
                            44u8,
                        ],
                    )
                }
                #[doc = "Swap out one member `remove` for another `add`."]
                #[doc = ""]
                #[doc = "May only be called from `T::SwapOrigin`."]
                #[doc = ""]
                #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                pub fn swap_member(
                    &self,
                    remove: types::swap_member::Remove,
                    add: types::swap_member::Add,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SwapMember>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FoundationMembers",
                        "swap_member",
                        types::SwapMember { remove, add },
                        [
                            105u8, 252u8, 210u8, 205u8, 245u8, 241u8, 137u8, 133u8, 50u8, 48u8,
                            40u8, 63u8, 88u8, 8u8, 163u8, 80u8, 214u8, 148u8, 233u8, 65u8, 184u8,
                            150u8, 179u8, 178u8, 106u8, 145u8, 224u8, 162u8, 234u8, 100u8, 214u8,
                            211u8,
                        ],
                    )
                }
                #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                #[doc = "pass `members` pre-sorted."]
                #[doc = ""]
                #[doc = "May only be called from `T::ResetOrigin`."]
                pub fn reset_members(
                    &self,
                    members: types::reset_members::Members,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ResetMembers>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FoundationMembers",
                        "reset_members",
                        types::ResetMembers { members },
                        [
                            184u8, 248u8, 64u8, 17u8, 231u8, 161u8, 69u8, 19u8, 37u8, 28u8, 106u8,
                            63u8, 24u8, 226u8, 73u8, 167u8, 109u8, 39u8, 160u8, 97u8, 66u8, 135u8,
                            249u8, 19u8, 157u8, 196u8, 64u8, 57u8, 137u8, 46u8, 143u8, 91u8,
                        ],
                    )
                }
                #[doc = "Swap out the sending member for some other key `new`."]
                #[doc = ""]
                #[doc = "May only be called from `Signed` origin of a current member."]
                #[doc = ""]
                #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                pub fn change_key(
                    &self,
                    new: types::change_key::New,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ChangeKey>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FoundationMembers",
                        "change_key",
                        types::ChangeKey { new },
                        [
                            72u8, 210u8, 199u8, 222u8, 242u8, 7u8, 38u8, 42u8, 231u8, 109u8, 15u8,
                            127u8, 199u8, 48u8, 148u8, 97u8, 197u8, 174u8, 168u8, 68u8, 119u8,
                            47u8, 218u8, 231u8, 146u8, 117u8, 204u8, 170u8, 205u8, 28u8, 194u8,
                            29u8,
                        ],
                    )
                }
                #[doc = "Set the prime member. Must be a current member."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn set_prime(
                    &self,
                    who: types::set_prime::Who,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::SetPrime>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FoundationMembers",
                        "set_prime",
                        types::SetPrime { who },
                        [
                            153u8, 15u8, 87u8, 124u8, 159u8, 238u8, 66u8, 209u8, 175u8, 215u8,
                            225u8, 79u8, 158u8, 252u8, 152u8, 160u8, 127u8, 176u8, 9u8, 242u8,
                            100u8, 149u8, 240u8, 143u8, 176u8, 246u8, 208u8, 192u8, 159u8, 14u8,
                            69u8, 85u8,
                        ],
                    )
                }
                #[doc = "Remove the prime member if it exists."]
                #[doc = ""]
                #[doc = "May only be called from `T::PrimeOrigin`."]
                pub fn clear_prime(
                    &self,
                ) -> ::subxt::ext::subxt_core::tx::payload::StaticPayload<types::ClearPrime>
                {
                    ::subxt::ext::subxt_core::tx::payload::StaticPayload::new_static(
                        "FoundationMembers",
                        "clear_prime",
                        types::ClearPrime {},
                        [
                            71u8, 213u8, 34u8, 23u8, 186u8, 63u8, 240u8, 216u8, 190u8, 251u8, 84u8,
                            109u8, 140u8, 137u8, 210u8, 211u8, 242u8, 231u8, 212u8, 133u8, 151u8,
                            125u8, 25u8, 46u8, 210u8, 53u8, 133u8, 222u8, 21u8, 107u8, 120u8, 52u8,
                        ],
                    )
                }
            }
        }
        #[doc = "The `Event` enum of this pallet"]
        pub type Event = runtime_types::pallet_membership::pallet::Event;
        pub mod events {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The given member was added; see the transaction for who."]
            pub struct MemberAdded;
            impl ::subxt::ext::subxt_core::events::StaticEvent for MemberAdded {
                const PALLET: &'static str = "FoundationMembers";
                const EVENT: &'static str = "MemberAdded";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The given member was removed; see the transaction for who."]
            pub struct MemberRemoved;
            impl ::subxt::ext::subxt_core::events::StaticEvent for MemberRemoved {
                const PALLET: &'static str = "FoundationMembers";
                const EVENT: &'static str = "MemberRemoved";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Two members were swapped; see the transaction for who."]
            pub struct MembersSwapped;
            impl ::subxt::ext::subxt_core::events::StaticEvent for MembersSwapped {
                const PALLET: &'static str = "FoundationMembers";
                const EVENT: &'static str = "MembersSwapped";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "The membership was reset; see the transaction for who the new set is."]
            pub struct MembersReset;
            impl ::subxt::ext::subxt_core::events::StaticEvent for MembersReset {
                const PALLET: &'static str = "FoundationMembers";
                const EVENT: &'static str = "MembersReset";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "One of the members' keys changed."]
            pub struct KeyChanged;
            impl ::subxt::ext::subxt_core::events::StaticEvent for KeyChanged {
                const PALLET: &'static str = "FoundationMembers";
                const EVENT: &'static str = "KeyChanged";
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            #[doc = "Phantom member, never used."]
            pub struct Dummy;
            impl ::subxt::ext::subxt_core::events::StaticEvent for Dummy {
                const PALLET: &'static str = "FoundationMembers";
                const EVENT: &'static str = "Dummy";
            }
        }
        pub mod storage {
            use super::runtime_types;
            pub mod types {
                use super::runtime_types;
                pub mod members {
                    use super::runtime_types;
                    pub type Members = runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >;
                }
                pub mod prime {
                    use super::runtime_types;
                    pub type Prime = runtime_types::sp_runtime::account::AccountId20;
                }
            }
            pub struct StorageApi;
            impl StorageApi {
                #[doc = " The current membership, stored as an ordered Vec."]
                pub fn members(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::members::Members,
                    ::subxt::ext::subxt_core::utils::Yes,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FoundationMembers",
                        "Members",
                        (),
                        [
                            71u8, 223u8, 201u8, 178u8, 175u8, 28u8, 74u8, 96u8, 23u8, 59u8, 70u8,
                            237u8, 214u8, 11u8, 43u8, 62u8, 89u8, 182u8, 236u8, 69u8, 71u8, 19u8,
                            161u8, 30u8, 23u8, 231u8, 1u8, 187u8, 20u8, 211u8, 116u8, 65u8,
                        ],
                    )
                }
                #[doc = " The current prime member, if one exists."]
                pub fn prime(
                    &self,
                ) -> ::subxt::ext::subxt_core::storage::address::StaticAddress<
                    (),
                    types::prime::Prime,
                    ::subxt::ext::subxt_core::utils::Yes,
                    (),
                    (),
                > {
                    ::subxt::ext::subxt_core::storage::address::StaticAddress::new_static(
                        "FoundationMembers",
                        "Prime",
                        (),
                        [
                            37u8, 41u8, 188u8, 54u8, 33u8, 64u8, 159u8, 123u8, 190u8, 96u8, 187u8,
                            46u8, 35u8, 217u8, 157u8, 189u8, 243u8, 40u8, 118u8, 144u8, 104u8,
                            27u8, 188u8, 54u8, 55u8, 241u8, 78u8, 33u8, 116u8, 44u8, 88u8, 62u8,
                        ],
                    )
                }
            }
        }
    }
    pub mod runtime_types {
        use super::runtime_types;
        pub mod bounded_collections {
            use super::runtime_types;
            pub mod bounded_btree_map {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BoundedBTreeMap<_0, _1>(
                    pub ::subxt::ext::subxt_core::utils::KeyedVec<_0, _1>,
                );
            }
            pub mod bounded_btree_set {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BoundedBTreeSet<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
            }
            pub mod bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BoundedVec<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
            }
            pub mod weak_bounded_vec {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct WeakBoundedVec<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
            }
        }
        pub mod finality_grandpa {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Equivocation<_0, _1, _2> {
                pub round_number: ::core::primitive::u64,
                pub identity: _0,
                pub first: (_1, _2),
                pub second: (_1, _2),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Precommit<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Prevote<_0, _1> {
                pub target_hash: _0,
                pub target_number: _1,
            }
        }
        pub mod frame_support {
            use super::runtime_types;
            pub mod dispatch {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum DispatchClass {
                    #[codec(index = 0)]
                    Normal,
                    #[codec(index = 1)]
                    Operational,
                    #[codec(index = 2)]
                    Mandatory,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct DispatchInfo {
                    pub weight: runtime_types::sp_weights::weight_v2::Weight,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub pays_fee: runtime_types::frame_support::dispatch::Pays,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Pays {
                    #[codec(index = 0)]
                    Yes,
                    #[codec(index = 1)]
                    No,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PerDispatchClass<_0> {
                    pub normal: _0,
                    pub operational: _0,
                    pub mandatory: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum RawOrigin<_0> {
                    #[codec(index = 0)]
                    Root,
                    #[codec(index = 1)]
                    Signed(_0),
                    #[codec(index = 2)]
                    None,
                }
            }
            pub mod traits {
                use super::runtime_types;
                pub mod tokens {
                    use super::runtime_types;
                    pub mod misc {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                            :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                            Clone,
                            Debug,
                            PartialEq,
                        )]
                        #[allow(non_snake_case)]
                        # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                        #[codec(dumb_trait_bound)]
                        #[decode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                        )]
                        #[encode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                        )]
                        pub enum BalanceStatus {
                            #[codec(index = 0)]
                            Free,
                            #[codec(index = 1)]
                            Reserved,
                        }
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct PalletId(pub [::core::primitive::u8; 8usize]);
        }
        pub mod frame_system {
            use super::runtime_types;
            pub mod extensions {
                use super::runtime_types;
                pub mod check_genesis {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckGenesis;
                }
                pub mod check_mortality {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckMortality(pub runtime_types::sp_runtime::generic::era::Era);
                }
                pub mod check_non_zero_sender {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckNonZeroSender;
                }
                pub mod check_nonce {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckNonce(#[codec(compact)] pub ::core::primitive::u32);
                }
                pub mod check_spec_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckSpecVersion;
                }
                pub mod check_tx_version {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckTxVersion;
                }
                pub mod check_weight {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct CheckWeight;
                }
            }
            pub mod limits {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BlockLength {
                    pub max: runtime_types::frame_support::dispatch::PerDispatchClass<
                        ::core::primitive::u32,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct BlockWeights {
                    pub base_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_block: runtime_types::sp_weights::weight_v2::Weight,
                    pub per_class: runtime_types::frame_support::dispatch::PerDispatchClass<
                        runtime_types::frame_system::limits::WeightsPerClass,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct WeightsPerClass {
                    pub base_extrinsic: runtime_types::sp_weights::weight_v2::Weight,
                    pub max_extrinsic:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub max_total:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                    pub reserved:
                        ::core::option::Option<runtime_types::sp_weights::weight_v2::Weight>,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Persists list of encoded txs into the storage queue. There is an dedicated"]
                    #[doc = "check in [Executive](https://storage.googleapis.com/mangata-docs-node/frame_executive/struct.Executive.html) that verifies that passed binary data can be"]
                    #[doc = "decoded into extrinsics."]
                    enqueue_txs {
                        txs: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Make some on-chain remark."]
                    #[doc = ""]
                    #[doc = "Can be executed by every `origin`."]
                    remark {
                        remark: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Set the number of pages in the WebAssembly environment's heap."]
                    set_heap_pages { pages: ::core::primitive::u64 },
                    #[codec(index = 3)]
                    #[doc = "Set the new runtime code."]
                    set_code {
                        code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set the new runtime code without doing any checks of the given `code`."]
                    #[doc = ""]
                    #[doc = "Note that runtime upgrades will not run if this is called with a not-increasing spec"]
                    #[doc = "version!"]
                    set_code_without_checks {
                        code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set some items of storage."]
                    set_storage {
                        items: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        )>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Kill some items from storage."]
                    kill_storage {
                        keys: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        >,
                    },
                    #[codec(index = 7)]
                    #[doc = "Kill all storage items with a key that starts with the given prefix."]
                    #[doc = ""]
                    #[doc = "**NOTE:** We rely on the Root origin to provide us the number of subkeys under"]
                    #[doc = "the prefix we are removing to accurately calculate the weight of this function."]
                    kill_prefix {
                        prefix: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        subkeys: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Make some on-chain remark and emit event."]
                    remark_with_event {
                        remark: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 10)]
                    #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                    #[doc = "later."]
                    #[doc = ""]
                    #[doc = "This call requires Root origin."]
                    authorize_upgrade {
                        code_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 11)]
                    #[doc = "Authorize an upgrade to a given `code_hash` for the runtime. The runtime can be supplied"]
                    #[doc = "later."]
                    #[doc = ""]
                    #[doc = "WARNING: This authorizes an upgrade that will take place without any safety checks, for"]
                    #[doc = "example that the spec name remains the same and that the version number increases. Not"]
                    #[doc = "recommended for normal use. Use `authorize_upgrade` instead."]
                    #[doc = ""]
                    #[doc = "This call requires Root origin."]
                    authorize_upgrade_without_checks {
                        code_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 12)]
                    #[doc = "Provide the preimage (runtime binary) `code` for an upgrade that has been authorized."]
                    #[doc = ""]
                    #[doc = "If the authorization required a version check, this call will ensure the spec name"]
                    #[doc = "remains unchanged and that the spec version has increased."]
                    #[doc = ""]
                    #[doc = "Depending on the runtime's `OnSetCode` configuration, this function may directly apply"]
                    #[doc = "the new `code` in the same block or attempt to schedule the upgrade."]
                    #[doc = ""]
                    #[doc = "All origins are allowed."]
                    apply_authorized_upgrade {
                        code: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the System pallet"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The name of specification does not match between the current runtime"]
                    #[doc = "and the new runtime."]
                    InvalidSpecName,
                    #[codec(index = 1)]
                    #[doc = "The specification version is not allowed to decrease between the current runtime"]
                    #[doc = "and the new runtime."]
                    SpecVersionNeedsToIncrease,
                    #[codec(index = 2)]
                    #[doc = "Failed to extract the runtime version from the new runtime."]
                    #[doc = ""]
                    #[doc = "Either calling `Core_version` or decoding `RuntimeVersion` failed."]
                    FailedToExtractRuntimeVersion,
                    #[codec(index = 3)]
                    #[doc = "Suicide called when the account has non-default composite data."]
                    NonDefaultComposite,
                    #[codec(index = 4)]
                    #[doc = "There is a non-zero reference count preventing the account from being purged."]
                    NonZeroRefCount,
                    #[codec(index = 5)]
                    #[doc = "The origin filter prevent the call to be dispatched."]
                    CallFiltered,
                    #[codec(index = 6)]
                    #[doc = "the storage queue is empty and cannot accept any new txs"]
                    StorageQueueFull,
                    #[codec(index = 7)]
                    #[doc = "A multi-block migration is ongoing and prevents the current code from being replaced."]
                    MultiBlockMigrationsOngoing,
                    #[codec(index = 8)]
                    #[doc = "No upgrade authorized."]
                    NothingAuthorized,
                    #[codec(index = 9)]
                    #[doc = "The submitted code is not authorized."]
                    Unauthorized,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Event for the System pallet."]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An extrinsic completed successfully."]
                    ExtrinsicSuccess {
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 1)]
                    #[doc = "An extrinsic failed."]
                    ExtrinsicFailed {
                        dispatch_error: runtime_types::sp_runtime::DispatchError,
                        dispatch_info: runtime_types::frame_support::dispatch::DispatchInfo,
                    },
                    #[codec(index = 2)]
                    #[doc = "`:code` was updated."]
                    CodeUpdated,
                    #[codec(index = 3)]
                    #[doc = "A new account was created."]
                    NewAccount {
                        account: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "An account was reaped."]
                    KilledAccount {
                        account: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "On on-chain remark happened."]
                    Remarked {
                        sender: runtime_types::sp_runtime::account::AccountId20,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "On stored txs"]
                    TxsEnqueued { count: ::core::primitive::u64 },
                    #[codec(index = 7)]
                    #[doc = "An upgrade was authorized."]
                    UpgradeAuthorized {
                        code_hash: ::subxt::ext::subxt_core::utils::H256,
                        check_version: ::core::primitive::bool,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct AccountInfo<_0, _1> {
                pub nonce: _0,
                pub consumers: ::core::primitive::u32,
                pub providers: ::core::primitive::u32,
                pub sufficients: ::core::primitive::u32,
                pub data: _1,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct CodeUpgradeAuthorization {
                pub code_hash: ::subxt::ext::subxt_core::utils::H256,
                pub check_version: ::core::primitive::bool,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct EventRecord<_0, _1> {
                pub phase: runtime_types::frame_system::Phase,
                pub event: _0,
                pub topics: ::subxt::ext::subxt_core::alloc::vec::Vec<_1>,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct LastRuntimeUpgradeInfo {
                #[codec(compact)]
                pub spec_version: ::core::primitive::u32,
                pub spec_name: ::subxt::ext::subxt_core::alloc::string::String,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Phase {
                #[codec(index = 0)]
                ApplyExtrinsic(::core::primitive::u32),
                #[codec(index = 1)]
                Finalization,
                #[codec(index = 2)]
                Initialization,
            }
        }
        pub mod mangata_types {
            use super::runtime_types;
            pub mod assets {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CustomMetadata {
                    pub xcm:
                        ::core::option::Option<runtime_types::mangata_types::assets::XcmMetadata>,
                    pub xyk:
                        ::core::option::Option<runtime_types::mangata_types::assets::XykMetadata>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum L1Asset {
                    #[codec(index = 0)]
                    Ethereum([::core::primitive::u8; 20usize]),
                    #[codec(index = 1)]
                    Arbitrum([::core::primitive::u8; 20usize]),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct XcmMetadata {
                    pub fee_per_second: ::core::primitive::u128,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct XykMetadata {
                    pub operations_disabled: ::core::primitive::bool,
                }
            }
            pub mod multipurpose_liquidity {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum ActivateKind {
                    #[codec(index = 0)]
                    AvailableBalance,
                    #[codec(index = 1)]
                    StakedUnactivatedReserves,
                    #[codec(index = 2)]
                    UnspentReserves,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum BondKind {
                    #[codec(index = 0)]
                    AvailableBalance,
                    #[codec(index = 1)]
                    ActivatedUnstakedReserves,
                    #[codec(index = 2)]
                    UnspentReserves,
                }
            }
        }
        pub mod orml_asset_registry {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    register_asset {
                        metadata: runtime_types::orml_traits::asset_registry::AssetMetadata<
                            ::core::primitive::u128,
                            runtime_types::mangata_types::assets::CustomMetadata,
                        >,
                        asset_id: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 1)]
                    update_asset {
                        asset_id: ::core::primitive::u32,
                        decimals: ::core::option::Option<::core::primitive::u32>,
                        name: ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                        symbol: ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                        existential_deposit: ::core::option::Option<::core::primitive::u128>,
                        additional: ::core::option::Option<
                            runtime_types::mangata_types::assets::CustomMetadata,
                        >,
                    },
                    #[codec(index = 2)]
                    register_l1_asset {
                        metadata: runtime_types::orml_traits::asset_registry::AssetMetadata<
                            ::core::primitive::u128,
                            runtime_types::mangata_types::assets::CustomMetadata,
                        >,
                        asset_id: ::core::option::Option<::core::primitive::u32>,
                        l1_asset: runtime_types::mangata_types::assets::L1Asset,
                    },
                    #[codec(index = 3)]
                    update_l1_asset_data {
                        asset_id: ::core::primitive::u32,
                        l1_asset:
                            ::core::option::Option<runtime_types::mangata_types::assets::L1Asset>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Asset was not found."]
                    AssetNotFound,
                    #[codec(index = 1)]
                    #[doc = "The version of the `VersionedLocation` value used is not able"]
                    #[doc = "to be interpreted."]
                    BadVersion,
                    #[codec(index = 2)]
                    #[doc = "The asset id is invalid."]
                    InvalidAssetId,
                    #[codec(index = 3)]
                    #[doc = "Another asset was already register with this location."]
                    #[doc = "Another asset was already register with this asset id."]
                    ConflictingAssetId,
                    #[codec(index = 4)]
                    #[doc = "Name or symbol is too long."]
                    InvalidAssetString,
                    #[codec(index = 5)]
                    ConflictingL1Asset,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    RegisteredAsset {
                        asset_id: ::core::primitive::u32,
                        metadata: runtime_types::orml_traits::asset_registry::AssetMetadata<
                            ::core::primitive::u128,
                            runtime_types::mangata_types::assets::CustomMetadata,
                        >,
                    },
                    #[codec(index = 1)]
                    UpdatedAsset {
                        asset_id: ::core::primitive::u32,
                        metadata: runtime_types::orml_traits::asset_registry::AssetMetadata<
                            ::core::primitive::u128,
                            runtime_types::mangata_types::assets::CustomMetadata,
                        >,
                    },
                }
            }
        }
        pub mod orml_tokens {
            use super::runtime_types;
            pub mod module {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Transfer some liquid free balance to another account."]
                    #[doc = ""]
                    #[doc = "`transfer` will set the `FreeBalance` of the sender and receiver."]
                    #[doc = "It will decrease the total issuance of the system by the"]
                    #[doc = "`TransferFee`. If the sender's account is below the existential"]
                    #[doc = "deposit as a result of the transfer, the account will be reaped."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    transfer {
                        dest: runtime_types::sp_runtime::account::AccountId20,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Transfer all remaining balance to the given account."]
                    #[doc = ""]
                    #[doc = "NOTE: This function only attempts to transfer _transferable_"]
                    #[doc = "balances. This means that any locked, reserved, or existential"]
                    #[doc = "deposits (when `keep_alive` is `true`), will not be transferred by"]
                    #[doc = "this function. To ensure that this function results in a killed"]
                    #[doc = "account, you might need to prepare the account by removing any"]
                    #[doc = "reference counters, storage deposits, etc..."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `keep_alive`: A boolean to determine if the `transfer_all`"]
                    #[doc = "  operation should send all of the funds the account has, causing"]
                    #[doc = "  the sender account to be killed (false), or transfer everything"]
                    #[doc = "  except at least the existential deposit, which will guarantee to"]
                    #[doc = "  keep the sender account alive (true)."]
                    transfer_all {
                        dest: runtime_types::sp_runtime::account::AccountId20,
                        currency_id: ::core::primitive::u32,
                        keep_alive: ::core::primitive::bool,
                    },
                    #[codec(index = 2)]
                    #[doc = "Same as the [`transfer`] call, but with a check that the transfer"]
                    #[doc = "will not kill the origin account."]
                    #[doc = ""]
                    #[doc = "99% of the time you want [`transfer`] instead."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `Signed` by the"]
                    #[doc = "transactor."]
                    #[doc = ""]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    transfer_keep_alive {
                        dest: runtime_types::sp_runtime::account::AccountId20,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Exactly as `transfer`, except the origin must be root and the source"]
                    #[doc = "account may be specified."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `source`: The sender of the transfer."]
                    #[doc = "- `dest`: The recipient of the transfer."]
                    #[doc = "- `currency_id`: currency type."]
                    #[doc = "- `amount`: free balance amount to tranfer."]
                    force_transfer {
                        source: runtime_types::sp_runtime::account::AccountId20,
                        dest: runtime_types::sp_runtime::account::AccountId20,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Set the balances of a given account."]
                    #[doc = ""]
                    #[doc = "This will alter `FreeBalance` and `ReservedBalance` in storage. it"]
                    #[doc = "will also decrease the total issuance of the system"]
                    #[doc = "(`TotalIssuance`). If the new free or reserved balance is below the"]
                    #[doc = "existential deposit, it will reap the `AccountInfo`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call is `root`."]
                    set_balance {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        currency_id: ::core::primitive::u32,
                        #[codec(compact)]
                        new_free: ::core::primitive::u128,
                        #[codec(compact)]
                        new_reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    create {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    mint {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The balance is too low"]
                    BalanceTooLow,
                    #[codec(index = 1)]
                    #[doc = "Cannot convert Amount into Balance type"]
                    AmountIntoBalanceFailed,
                    #[codec(index = 2)]
                    #[doc = "Failed because liquidity restrictions due to locking"]
                    LiquidityRestrictions,
                    #[codec(index = 3)]
                    #[doc = "Failed because the maximum locks was exceeded"]
                    MaxLocksExceeded,
                    #[codec(index = 4)]
                    #[doc = "Transfer/payment would kill account"]
                    KeepAlive,
                    #[codec(index = 5)]
                    #[doc = "Value too low to create account due to existential deposit"]
                    ExistentialDeposit,
                    #[codec(index = 6)]
                    #[doc = "Beneficiary account must pre-exist"]
                    DeadAccount,
                    #[codec(index = 7)]
                    #[doc = "Failed because token with given id does not exits"]
                    TokenIdNotExists,
                    #[codec(index = 8)]
                    TooManyReserves,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "An account was created with some free balance."]
                    Endowed {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An account was removed whose balance was non-zero but below"]
                    #[doc = "ExistentialDeposit, resulting in an outright loss."]
                    DustLost {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Transfer succeeded."]
                    Transfer {
                        currency_id: ::core::primitive::u32,
                        from: runtime_types::sp_runtime::account::AccountId20,
                        to: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Some balance was reserved (moved from free to reserved)."]
                    Reserved {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some balance was unreserved (moved from reserved to free)."]
                    Unreserved {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Some reserved balance was repatriated (moved from reserved to"]
                    #[doc = "another account)."]
                    ReserveRepatriated {
                        currency_id: ::core::primitive::u32,
                        from: runtime_types::sp_runtime::account::AccountId20,
                        to: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                        status: runtime_types::frame_support::traits::tokens::misc::BalanceStatus,
                    },
                    #[codec(index = 6)]
                    #[doc = "A balance was set by root."]
                    BalanceSet {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        free: ::core::primitive::u128,
                        reserved: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "The total issuance of an currency has been set"]
                    TotalIssuanceSet {
                        currency_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "Some balances were withdrawn (e.g. pay for transaction fee)"]
                    Withdrawn {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Some balances were slashed (e.g. due to mis-behavior)"]
                    Slashed {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        free_amount: ::core::primitive::u128,
                        reserved_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "Deposited some balance into an account"]
                    Deposited {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 11)]
                    #[doc = "Some funds are locked"]
                    LockSet {
                        lock_id: [::core::primitive::u8; 8usize],
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    #[doc = "Some locked funds were unlocked"]
                    LockRemoved {
                        lock_id: [::core::primitive::u8; 8usize],
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 13)]
                    #[doc = "A token was issued."]
                    Created(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 14)]
                    #[doc = "A token was minted."]
                    Minted(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 15)]
                    #[doc = "Some free balance was locked."]
                    Locked {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 16)]
                    #[doc = "Some locked balance was freed."]
                    Unlocked {
                        currency_id: ::core::primitive::u32,
                        who: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 17)]
                    Issued {
                        currency_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 18)]
                    Rescinded {
                        currency_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct AccountData<_0> {
                pub free: _0,
                pub reserved: _0,
                pub frozen: _0,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct BalanceLock<_0> {
                pub id: [::core::primitive::u8; 8usize],
                pub amount: _0,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ReserveData<_0, _1> {
                pub id: _0,
                pub amount: _1,
            }
        }
        pub mod orml_traits {
            use super::runtime_types;
            pub mod asset_registry {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AssetMetadata<_0, _1> {
                    pub decimals: ::core::primitive::u32,
                    pub name: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub symbol: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                        ::core::primitive::u8,
                    >,
                    pub existential_deposit: _0,
                    pub additional: _1,
                }
            }
        }
        pub mod pallet_bootstrap {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Allows for provisioning one of the tokens from currently bootstrapped pair. Can only be called during:"]
                    #[doc = "- [`BootstrapPhase::Whitelist`]"]
                    #[doc = "- [`BootstrapPhase::Public`]"]
                    #[doc = ""]
                    #[doc = "phases."]
                    #[doc = ""]
                    #[doc = "# Args:"]
                    #[doc = " - `token_id` - id of the token to provision (should be one of the currently bootstraped pair([`ActivePair`]))"]
                    #[doc = " - `amount` - amount of the token to provision"]
                    provision {
                        token_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Allows for whitelisting accounts, so they can participate in during whitelist phase. The list of"]
                    #[doc = "account is extended with every subsequent call"]
                    whitelist_accounts {
                        accounts: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Used for starting/scheduling new bootstrap"]
                    #[doc = ""]
                    #[doc = "# Args:"]
                    #[doc = "- `first_token_id` - first token of the tokens pair"]
                    #[doc = "- `second_token_id`: second token of the tokens pair"]
                    #[doc = "- `ido_start` - number of block when bootstrap will be started (people will be allowed to participate)"]
                    #[doc = "- `whitelist_phase_length`: - length of whitelist phase"]
                    #[doc = "- `public_phase_lenght`- length of public phase"]
                    #[doc = "- `promote_bootstrap_pool`- whether liquidity pool created by bootstrap should be promoted"]
                    #[doc = "- `max_first_to_second_ratio` - represented as (numerator,denominator) - Ratio may be used to limit participations of second token id. Ratio between first and second token needs to be held during whole bootstrap. Whenever user tries to participate (using [`Pallet::provision`] extrinsic) the following conditions is check."]
                    #[doc = "```ignore"]
                    #[doc = "all previous first participations + first token participations             ratio numerator"]
                    #[doc = "----------------------------------------------------------------------- <= ------------------"]
                    #[doc = "all previous second token participations + second token participations     ratio denominator"]
                    #[doc = "```"]
                    #[doc = "and if it evaluates to `false` extrinsic will fail."]
                    #[doc = ""]
                    #[doc = "**Because of above equation only participations with first token of a bootstrap pair are limited!**"]
                    #[doc = ""]
                    #[doc = "# Examples"]
                    #[doc = "Consider:"]
                    #[doc = ""]
                    #[doc = "- user willing to participate 1000 of first token, when:"]
                    #[doc = "\t- ratio set during bootstrap schedule is is set to (1/2)"]
                    #[doc = "\t- sum of first token participations - 10_000"]
                    #[doc = "\t- sum of second token participations - 20_000"]
                    #[doc = ""]
                    #[doc = "participation extrinsic will **fail** because ratio condition **is not met**"]
                    #[doc = "```ignore"]
                    #[doc = "10_000 + 10_000      1"]
                    #[doc = "--------------- <=  ---"]
                    #[doc = "    20_000           2"]
                    #[doc = "```"]
                    #[doc = ""]
                    #[doc = "- user willing to participate 1000 of first token, when:"]
                    #[doc = "\t- ratio set during bootstrap schedule is is set to (1/2)"]
                    #[doc = "\t- sum of first token participations - 10_000"]
                    #[doc = "\t- sum of second token participations - 40_000"]
                    #[doc = ""]
                    #[doc = "participation extrinsic will **succeed** because ratio condition **is met**"]
                    #[doc = "```ignore"]
                    #[doc = "10_000 + 10_000      1"]
                    #[doc = "--------------- <=  ---"]
                    #[doc = "    40_000           2"]
                    #[doc = "```"]
                    #[doc = ""]
                    #[doc = ""]
                    #[doc = "**If one doesn't want to limit participations in any way, ratio should be set to (u128::MAX,0) - then ratio requirements are always met**"]
                    #[doc = ""]
                    #[doc = "```ignore"]
                    #[doc = "all previous first participations + first token participations                u128::MAX"]
                    #[doc = "----------------------------------------------------------------------- <= ------------------"]
                    #[doc = "all previous second token participations + second token participations            1"]
                    #[doc = "```"]
                    schedule_bootstrap {
                        first_token_id: ::core::primitive::u32,
                        second_token_id: ::core::primitive::u32,
                        ido_start: ::core::primitive::u32,
                        whitelist_phase_length: ::core::option::Option<::core::primitive::u32>,
                        public_phase_length: ::core::primitive::u32,
                        max_first_to_second_ratio: ::core::option::Option<(
                            ::core::primitive::u128,
                            ::core::primitive::u128,
                        )>,
                        promote_bootstrap_pool: ::core::primitive::bool,
                    },
                    #[codec(index = 3)]
                    #[doc = "Used to cancel active bootstrap. Can only be called before bootstrap is actually started"]
                    cancel_bootstrap,
                    #[codec(index = 4)]
                    update_promote_bootstrap_pool {
                        promote_bootstrap_pool: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "When bootstrap is in [`BootstrapPhase::Finished`] state user can claim his part of liquidity tokens."]
                    claim_liquidity_tokens,
                    #[codec(index = 6)]
                    #[doc = "When bootstrap is in [`BootstrapPhase::Finished`] state user can claim his part of liquidity tokens comparing to `claim_liquidity_tokens` when calling `claim_and_activate_liquidity_tokens` tokens will be automatically activated."]
                    claim_and_activate_liquidity_tokens,
                    #[codec(index = 7)]
                    #[doc = "Used to reset Bootstrap state of large storages and prepare it for running another bootstrap."]
                    #[doc = "It should be called multiple times until it produces [`Event::BootstrapReadyToBeFinalized`] event."]
                    #[doc = ""]
                    #[doc = "**!!! Cleaning up storage is complex operation and pruning all storage items related to particular"]
                    #[doc = "bootstrap might not fit in a single block. As a result tx can be rejected !!!**"]
                    pre_finalize,
                    #[codec(index = 8)]
                    #[doc = "Used to complete resetting Bootstrap state and prepare it for running another bootstrap."]
                    #[doc = "It should be called after pre_finalize has produced the [`Event::BootstrapReadyToBeFinalized`] event."]
                    finalize,
                    #[codec(index = 9)]
                    #[doc = "Allows claiming rewards for some account that haven't done that yet. The only difference between"]
                    #[doc = "calling [`Pallet::claim_liquidity_tokens_for_account`] by some other account and calling [`Pallet::claim_liquidity_tokens`] directly by that account is account that will be charged for transaction fee."]
                    #[doc = "# Args:"]
                    #[doc = "- `other` - account in behalf of which liquidity tokens should be claimed"]
                    claim_liquidity_tokens_for_account {
                        account: runtime_types::sp_runtime::account::AccountId20,
                        activate_rewards: ::core::primitive::bool,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Only scheduled token pair can be used for provisions"]
                    UnsupportedTokenId,
                    #[codec(index = 1)]
                    #[doc = "Not enough funds for provision"]
                    NotEnoughAssets,
                    #[codec(index = 2)]
                    #[doc = "Not enough funds for provision (vested)"]
                    NotEnoughVestedAssets,
                    #[codec(index = 3)]
                    #[doc = "Math problem"]
                    MathOverflow,
                    #[codec(index = 4)]
                    #[doc = "User cannot participate at this moment"]
                    Unauthorized,
                    #[codec(index = 5)]
                    #[doc = "Bootstrap cant be scheduled in past"]
                    BootstrapStartInThePast,
                    #[codec(index = 6)]
                    #[doc = "Bootstarap phases cannot lasts 0 blocks"]
                    PhaseLengthCannotBeZero,
                    #[codec(index = 7)]
                    #[doc = "Bootstrate event already started"]
                    AlreadyStarted,
                    #[codec(index = 8)]
                    #[doc = "Valuation ratio exceeded"]
                    ValuationRatio,
                    #[codec(index = 9)]
                    #[doc = "First provision must be in non restricted token"]
                    FirstProvisionInSecondTokenId,
                    #[codec(index = 10)]
                    #[doc = "Bootstraped pool already exists"]
                    PoolAlreadyExists,
                    #[codec(index = 11)]
                    #[doc = "Cannot claim rewards before bootstrap finish"]
                    NotFinishedYet,
                    #[codec(index = 12)]
                    #[doc = "no rewards to claim"]
                    NothingToClaim,
                    #[codec(index = 13)]
                    #[doc = "wrong ratio"]
                    WrongRatio,
                    #[codec(index = 14)]
                    #[doc = "no rewards to claim"]
                    BootstrapNotReadyToBeFinished,
                    #[codec(index = 15)]
                    #[doc = "Tokens used in bootstrap cannot be the same"]
                    SameToken,
                    #[codec(index = 16)]
                    #[doc = "Token does not exists"]
                    TokenIdDoesNotExists,
                    #[codec(index = 17)]
                    #[doc = "Token activations failed"]
                    TokensActivationFailed,
                    #[codec(index = 18)]
                    #[doc = "Bootstrap not scheduled"]
                    BootstrapNotSchduled,
                    #[codec(index = 19)]
                    #[doc = "Bootstrap already Finished"]
                    BootstrapFinished,
                    #[codec(index = 20)]
                    #[doc = "Bootstrap can only be updated or cancelled"]
                    #[doc = "BootstrapUpdateBuffer blocks or more before bootstrap start"]
                    TooLateToUpdateBootstrap,
                    #[codec(index = 21)]
                    #[doc = "Bootstrap provisioning blocked by maintenance mode"]
                    ProvisioningBlockedByMaintenanceMode,
                    #[codec(index = 22)]
                    #[doc = "Bootstrap must be pre finalized before it can be finalized"]
                    BootstrapMustBePreFinalized,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Funds provisioned"]
                    Provisioned(::core::primitive::u32, ::core::primitive::u128),
                    #[codec(index = 1)]
                    #[doc = "Funds provisioned using vested tokens"]
                    VestedProvisioned(::core::primitive::u32, ::core::primitive::u128),
                    #[codec(index = 2)]
                    #[doc = "The activation of the rewards liquidity tokens failed"]
                    RewardsLiquidityAcitvationFailed(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 3)]
                    #[doc = "Rewards claimed"]
                    RewardsClaimed(::core::primitive::u32, ::core::primitive::u128),
                    #[codec(index = 4)]
                    #[doc = "account whitelisted"]
                    AccountsWhitelisted,
                    #[codec(index = 5)]
                    #[doc = "bootstrap pre finalization has completed partially"]
                    BootstrapParitallyPreFinalized,
                    #[codec(index = 6)]
                    #[doc = "bootstrap pre finalization has completed, and the bootstrap can now be finalized"]
                    BootstrapReadyToBeFinalized,
                    #[codec(index = 7)]
                    #[doc = "finalization process finished"]
                    BootstrapFinalized,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum BootstrapPhase {
                #[codec(index = 0)]
                BeforeStart,
                #[codec(index = 1)]
                Whitelist,
                #[codec(index = 2)]
                Public,
                #[codec(index = 3)]
                Finished,
            }
        }
        pub mod pallet_collective_mangata {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the collective's membership."]
                    #[doc = ""]
                    #[doc = "- `new_members`: The new member list. Be nice to the chain and provide it sorted."]
                    #[doc = "- `prime`: The prime member whose vote sets the default."]
                    #[doc = "- `old_count`: The upper bound for the previous number of members in storage. Used for"]
                    #[doc = "  weight estimation."]
                    #[doc = ""]
                    #[doc = "The dispatch of this call must be `SetMembersOrigin`."]
                    #[doc = ""]
                    #[doc = "NOTE: Does not enforce the expected `MaxMembers` limit on the amount of members, but"]
                    #[doc = "      the weight estimations rely on it to estimate dispatchable weight."]
                    #[doc = ""]
                    #[doc = "# WARNING:"]
                    #[doc = ""]
                    #[doc = "The `pallet-collective` can also be managed by logic outside of the pallet through the"]
                    #[doc = "implementation of the trait [`ChangeMembers`]."]
                    #[doc = "Any call to `set_members` must be careful that the member set doesn't get out of sync"]
                    #[doc = "with other logic managing the member set."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(MP + N)` where:"]
                    #[doc = "  - `M` old-members-count (code- and governance-bounded)"]
                    #[doc = "  - `N` new-members-count (code- and governance-bounded)"]
                    #[doc = "  - `P` proposals-count (code-bounded)"]
                    set_members {
                        new_members: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                        prime:
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                        old_count: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Dispatch a proposal from a member using the `Member` origin."]
                    #[doc = ""]
                    #[doc = "Origin must be a member of the collective."]
                    #[doc = ""]
                    #[doc = "## Complexity:"]
                    #[doc = "- `O(B + M + P)` where:"]
                    #[doc = "- `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "- `M` members-count (code-bounded)"]
                    #[doc = "- `P` complexity of dispatching `proposal`"]
                    execute {
                        proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Add a new proposal to either be voted on or executed directly."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be member."]
                    #[doc = ""]
                    #[doc = "`threshold` determines whether `proposal` is executed directly (`threshold < 2`)"]
                    #[doc = "or put up for voting."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1)` or `O(B + M + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - branching is influenced by `threshold` where:"]
                    #[doc = "    - `P1` is proposal execution complexity (`threshold < 2`)"]
                    #[doc = "    - `P2` is proposals-count (code-bounded) (`threshold >= 2`)"]
                    propose {
                        #[codec(compact)]
                        threshold: ::core::primitive::u32,
                        proposal: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Add an aye or nay vote for the sender to the given proposal."]
                    #[doc = ""]
                    #[doc = "Requires the sender to be a member."]
                    #[doc = ""]
                    #[doc = "Transaction fees will be waived if the member is voting on any particular proposal"]
                    #[doc = "for the first time and the call is successful. Subsequent vote changes will charge a"]
                    #[doc = "fee."]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(M)` where `M` is members-count (code- and governance-bounded)"]
                    vote {
                        proposal: ::subxt::ext::subxt_core::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        approve: ::core::primitive::bool,
                    },
                    #[codec(index = 5)]
                    #[doc = "Disapprove a proposal, close, and remove it from the system, regardless of its current"]
                    #[doc = "state."]
                    #[doc = ""]
                    #[doc = "Must be called by the Root origin or a foundation account."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "* `proposal_hash`: The hash of the proposal that should be disapproved."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "O(P) where P is the number of max proposals"]
                    disapprove_proposal {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 6)]
                    #[doc = "Close a vote that is either approved, disapproved or whose voting period has ended."]
                    #[doc = ""]
                    #[doc = "May be called by any signed account in order to finish voting and close the proposal."]
                    #[doc = ""]
                    #[doc = "If called before the end of the voting period it will only close the vote if it is"]
                    #[doc = "has enough votes to be approved or disapproved."]
                    #[doc = ""]
                    #[doc = "If called after the end of the voting period abstentions are counted as rejections"]
                    #[doc = "unless there is a prime member set and the prime member cast an approval."]
                    #[doc = ""]
                    #[doc = "If the close operation completes successfully with disapproval, the transaction fee will"]
                    #[doc = "be waived. Otherwise execution of the approved operation will be charged to the caller."]
                    #[doc = ""]
                    #[doc = "+ `proposal_weight_bound`: The maximum amount of weight consumed by executing the closed"]
                    #[doc = "proposal."]
                    #[doc = "+ `length_bound`: The upper bound for the length of the proposal in storage. Checked via"]
                    #[doc = "`storage::read` so it is `size_of::<u32>() == 4` larger than the pure length."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(B + M + P1 + P2)` where:"]
                    #[doc = "  - `B` is `proposal` size in bytes (length-fee-bounded)"]
                    #[doc = "  - `M` is members-count (code- and governance-bounded)"]
                    #[doc = "  - `P1` is the complexity of `proposal` preimage."]
                    #[doc = "  - `P2` is proposal-count (code-bounded)"]
                    close {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        proposal_weight_bound: runtime_types::sp_weights::weight_v2::Weight,
                        #[codec(compact)]
                        length_bound: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Account is not a member"]
                    NotMember,
                    #[codec(index = 1)]
                    #[doc = "Duplicate proposals not allowed"]
                    DuplicateProposal,
                    #[codec(index = 2)]
                    #[doc = "Proposal must exist"]
                    ProposalMissing,
                    #[codec(index = 3)]
                    #[doc = "Mismatched index"]
                    WrongIndex,
                    #[codec(index = 4)]
                    #[doc = "Duplicate vote ignored"]
                    DuplicateVote,
                    #[codec(index = 5)]
                    #[doc = "Members are already initialized!"]
                    AlreadyInitialized,
                    #[codec(index = 6)]
                    #[doc = "The close call was made too early, before the end of the voting."]
                    TooEarly,
                    #[codec(index = 7)]
                    #[doc = "\tTo early to close the proposal, can only close ProposalCloseDelay blocks after proposal"]
                    #[doc = "was proposed unless by a foundation account"]
                    TooEarlyToCloseByNonFoundationAccount,
                    #[codec(index = 8)]
                    #[doc = "There can only be a maximum of `MaxProposals` active proposals."]
                    TooManyProposals,
                    #[codec(index = 9)]
                    #[doc = "The given weight bound for the proposal was too low."]
                    WrongProposalWeight,
                    #[codec(index = 10)]
                    #[doc = "The given length bound for the proposal was too low."]
                    WrongProposalLength,
                    #[codec(index = 11)]
                    #[doc = "Prime account is not a member"]
                    PrimeAccountNotMember,
                    #[codec(index = 12)]
                    #[doc = "Requires foundation account or root"]
                    NotFoundationAccountOrRoot,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A motion (given hash) has been proposed (by given account) with a threshold (given"]
                    #[doc = "`MemberCount`)."]
                    Proposed {
                        account: runtime_types::sp_runtime::account::AccountId20,
                        proposal_index: ::core::primitive::u32,
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        threshold: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "A motion (given hash) has been voted on by given account, leaving"]
                    #[doc = "a tally (yes votes and no votes given respectively as `MemberCount`)."]
                    Voted {
                        account: runtime_types::sp_runtime::account::AccountId20,
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        voted: ::core::primitive::bool,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "A motion was approved by the required threshold."]
                    Approved {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 3)]
                    #[doc = "A motion was not approved by the required threshold."]
                    Disapproved {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 4)]
                    #[doc = "A motion was executed; result will be `Ok` if it returned without error."]
                    Executed {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 5)]
                    #[doc = "A single member did some action; result will be `Ok` if it returned without error."]
                    MemberExecuted {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 6)]
                    #[doc = "A proposal was closed because its threshold was reached or after its duration was up."]
                    Closed {
                        proposal_hash: ::subxt::ext::subxt_core::utils::H256,
                        yes: ::core::primitive::u32,
                        no: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "The members have been changed"]
                    MembersChanged {
                        new_members: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                    },
                    #[codec(index = 8)]
                    #[doc = "The Prime member has been set"]
                    PrimeSet {
                        new_prime:
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                    },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RawOrigin<_0> {
                #[codec(index = 0)]
                Members(::core::primitive::u32, ::core::primitive::u32),
                #[codec(index = 1)]
                Member(_0),
                #[codec(index = 2)]
                _Phantom,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Votes<_0, _1> {
                pub index: ::core::primitive::u32,
                pub threshold: ::core::primitive::u32,
                pub ayes: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
                pub nays: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
                pub end: _1,
            }
        }
        pub mod pallet_crowdloan_rewards {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Associate a native rewards_destination identity with a crowdloan contribution."]
                    #[doc = ""]
                    #[doc = "The caller needs to provide the unassociated relay account and a proof to succeed"]
                    #[doc = "with the association"]
                    #[doc = "The proof is nothing but a signature over the reward_address using the relay keys"]
                    associate_native_identity {
                        reward_account: runtime_types::sp_runtime::account::AccountId20,
                        relay_account: runtime_types::sp_runtime::account::AccountId20,
                        proof: runtime_types::sp_runtime::account::EthereumSignature,
                    },
                    #[codec(index = 1)]
                    #[doc = "Change reward account by submitting proofs from relay accounts"]
                    #[doc = ""]
                    #[doc = "The number of valid proofs needs to be bigger than 'RewardAddressRelayVoteThreshold'"]
                    #[doc = "The account to be changed needs to be submitted as 'previous_account'"]
                    #[doc = "Origin must be RewardAddressChangeOrigin"]
                    change_association_with_relay_keys {
                        reward_account: runtime_types::sp_runtime::account::AccountId20,
                        previous_account: runtime_types::sp_runtime::account::AccountId20,
                        proofs: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            runtime_types::sp_runtime::account::AccountId20,
                            runtime_types::sp_runtime::account::EthereumSignature,
                        )>,
                    },
                    #[codec(index = 2)]
                    #[doc = "Collect rewards from particular crowdloan."]
                    #[doc = "If crowdloan_id is not set current [`CrowdloanId`] id will be used."]
                    #[doc = "Caller is instantly rewarded with [`InitializationPayment`] % of available rewards,"]
                    #[doc = "remaining funds are locked according to schedule(using `pallet_mangata_vesting` configured"]
                    #[doc = "by [`Pallet::<T>::complete_initialization`] call."]
                    claim {
                        crowdloan_id: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Update reward address, proving that the caller owns the current native key"]
                    update_reward_address {
                        new_reward_account: runtime_types::sp_runtime::account::AccountId20,
                        crowdloan_id: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 4)]
                    #[doc = "This extrinsic completes the initialization if some checks are fullfiled. These checks are:"]
                    #[doc = " -The reward contribution money matches the crowdloan pot"]
                    #[doc = " -The end vesting block is higher than the init vesting block"]
                    #[doc = " -The initialization has not complete yet"]
                    complete_initialization {
                        lease_start_block: ::core::primitive::u32,
                        lease_ending_block: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Initialize the reward distribution storage. It shortcuts whenever an error is found"]
                    #[doc = "Sets crowdloan allocation for:"]
                    #[doc = "- current round of crowdloan - if it has not been completed (`[Pallet::<T>::complete_initialization]`)"]
                    #[doc = "- following round of crowdloan rewards payment if previous one has been already"]
                    #[doc = "completed"]
                    set_crowdloan_allocation {
                        crowdloan_allocation_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Initialize the reward distribution storage. It shortcuts whenever an error is found"]
                    #[doc = "This does not enforce any checks other than making sure we dont go over funds"]
                    #[doc = "complete_initialization should perform any additional"]
                    initialize_reward_vec {
                        rewards: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                            ::core::primitive::u128,
                        )>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "User trying to associate a native identity with a relay chain identity for posterior"]
                    #[doc = "reward claiming provided an already associated relay chain identity"]
                    AlreadyAssociated,
                    #[codec(index = 1)]
                    #[doc = "Trying to introduce a batch that goes beyond the limits of the funds"]
                    BatchBeyondFundPot,
                    #[codec(index = 2)]
                    #[doc = "First claim already done"]
                    FirstClaimAlreadyDone,
                    #[codec(index = 3)]
                    #[doc = "The contribution is not high enough to be eligible for rewards"]
                    RewardNotHighEnough,
                    #[codec(index = 4)]
                    #[doc = "User trying to associate a native identity with a relay chain identity for posterior"]
                    #[doc = "reward claiming provided a wrong signature"]
                    InvalidClaimSignature,
                    #[codec(index = 5)]
                    #[doc = "User trying to claim the first free reward provided the wrong signature"]
                    InvalidFreeClaimSignature,
                    #[codec(index = 6)]
                    #[doc = "User trying to claim an award did not have an claim associated with it. This may mean"]
                    #[doc = "they did not contribute to the crowdloan, or they have not yet associated a native id"]
                    #[doc = "with their contribution"]
                    NoAssociatedClaim,
                    #[codec(index = 7)]
                    #[doc = "User trying to claim rewards has already claimed all rewards associated with its"]
                    #[doc = "identity and contribution"]
                    RewardsAlreadyClaimed,
                    #[codec(index = 8)]
                    #[doc = "Reward vec has already been initialized"]
                    RewardVecAlreadyInitialized,
                    #[codec(index = 9)]
                    #[doc = "Reward vec has not yet been fully initialized"]
                    RewardVecNotFullyInitializedYet,
                    #[codec(index = 10)]
                    #[doc = "Rewards should match funds of the pallet"]
                    RewardsDoNotMatchFund,
                    #[codec(index = 11)]
                    #[doc = "Initialize_reward_vec received too many contributors"]
                    TooManyContributors,
                    #[codec(index = 12)]
                    #[doc = "Provided vesting period is not valid"]
                    VestingPeriodNonValid,
                    #[codec(index = 13)]
                    #[doc = "User provided a signature from a non-contributor relay account"]
                    NonContributedAddressProvided,
                    #[codec(index = 14)]
                    #[doc = "User submitted an unsifficient number of proofs to change the reward address"]
                    InsufficientNumberOfValidProofs,
                    #[codec(index = 15)]
                    #[doc = "The mint operation during claim has resulted in err."]
                    #[doc = "This is expected when claiming less than existential desposit on a non-existent account"]
                    #[doc = "Please consider waiting until the EndVestingBlock to attempt this"]
                    ClaimingLessThanED,
                    #[codec(index = 16)]
                    #[doc = "Math overflow"]
                    MathOverflow,
                    #[codec(index = 17)]
                    #[doc = "Period not set"]
                    PeriodNotSet,
                    #[codec(index = 18)]
                    #[doc = "Trying to introduce a batch that goes beyond the limits of the funds"]
                    AllocationDoesNotMatch,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The initial payment of InitializationPayment % was paid"]
                    InitialPaymentMade(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    #[doc = "Someone has proven they made a contribution and associated a native identity with it."]
                    #[doc = "Data is the relay account,  native account and the total amount of _rewards_ that will be paid"]
                    NativeIdentityAssociated(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 2)]
                    #[doc = "A contributor has claimed some rewards."]
                    #[doc = "Data is the account getting paid and the amount of rewards paid."]
                    RewardsPaid(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 3)]
                    #[doc = "A contributor has updated the reward address."]
                    RewardAddressUpdated(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                    ),
                    #[codec(index = 4)]
                    #[doc = "When initializing the reward vec an already initialized account was found"]
                    InitializedAlreadyInitializedAccount(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 5)]
                    #[doc = "When initializing the reward vec an already initialized account was found"]
                    InitializedAccountWithNotEnoughContribution(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                        ::core::primitive::u128,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RewardInfo {
                    pub total_reward: ::core::primitive::u128,
                    pub claimed_reward: ::core::primitive::u128,
                    pub contributed_relay_addresses: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::sp_runtime::account::AccountId20,
                    >,
                }
            }
        }
        pub mod pallet_fee_lock {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AccountFeeLockDataInfo<_0, _1> {
                    pub total_fee_lock_amount: _1,
                    pub last_fee_lock_block: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    update_fee_lock_metadata {
                        period_length: ::core::option::Option<::core::primitive::u32>,
                        fee_lock_amount: ::core::option::Option<::core::primitive::u128>,
                        swap_value_threshold: ::core::option::Option<::core::primitive::u128>,
                        should_be_whitelisted: ::core::option::Option<
                            ::subxt::ext::subxt_core::alloc::vec::Vec<(
                                ::core::primitive::u32,
                                ::core::primitive::bool,
                            )>,
                        >,
                    },
                    #[codec(index = 1)]
                    unlock_fee,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Locks were incorrectly initialized"]
                    FeeLocksIncorrectlyInitialzed,
                    #[codec(index = 1)]
                    #[doc = "Lock metadata is invalid"]
                    InvalidFeeLockMetadata,
                    #[codec(index = 2)]
                    #[doc = "Locks have not been initialzed"]
                    FeeLocksNotInitialized,
                    #[codec(index = 3)]
                    #[doc = "No tokens of the user are fee-locked"]
                    NotFeeLocked,
                    #[codec(index = 4)]
                    #[doc = "The lock cannot be unlocked yet"]
                    CantUnlockFeeYet,
                    #[codec(index = 5)]
                    #[doc = "The limit on the maximum curated tokens for which there is a swap threshold is exceeded"]
                    MaxCuratedTokensLimitExceeded,
                    #[codec(index = 6)]
                    #[doc = "An unexpected failure has occured"]
                    UnexpectedFailure,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    FeeLockMetadataUpdated,
                    #[codec(index = 1)]
                    FeeLockUnlocked(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 2)]
                    FeeLocked {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        lock_amount: ::core::primitive::u128,
                        total_locked: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FeeLockMetadataInfo {
                    pub period_length: ::core::primitive::u32,
                    pub fee_lock_amount: ::core::primitive::u128,
                    pub swap_value_threshold: ::core::primitive::u128,
                    pub whitelisted_tokens:
                        runtime_types::bounded_collections::bounded_btree_set::BoundedBTreeSet<
                            ::core::primitive::u32,
                        >,
                }
            }
        }
        pub mod pallet_grandpa {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                    #[doc = "equivocation proof and validate the given key ownership proof"]
                    #[doc = "against the extracted offender. If both are valid, the offence"]
                    #[doc = "will be reported."]
                    report_equivocation {
                        equivocation_proof: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::sp_consensus_grandpa::EquivocationProof<
                                ::subxt::ext::subxt_core::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_core::Void,
                    },
                    #[codec(index = 1)]
                    #[doc = "Report voter equivocation/misbehavior. This method will verify the"]
                    #[doc = "equivocation proof and validate the given key ownership proof"]
                    #[doc = "against the extracted offender. If both are valid, the offence"]
                    #[doc = "will be reported."]
                    #[doc = ""]
                    #[doc = "This extrinsic must be called unsigned and it is expected that only"]
                    #[doc = "block authors will call it (validated in `ValidateUnsigned`), as such"]
                    #[doc = "if the block author is defined it will be defined as the equivocation"]
                    #[doc = "reporter."]
                    report_equivocation_unsigned {
                        equivocation_proof: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::sp_consensus_grandpa::EquivocationProof<
                                ::subxt::ext::subxt_core::utils::H256,
                                ::core::primitive::u32,
                            >,
                        >,
                        key_owner_proof: runtime_types::sp_core::Void,
                    },
                    #[codec(index = 2)]
                    #[doc = "Note that the current authority set of the GRANDPA finality gadget has stalled."]
                    #[doc = ""]
                    #[doc = "This will trigger a forced authority set change at the beginning of the next session, to"]
                    #[doc = "be enacted `delay` blocks after that. The `delay` should be high enough to safely assume"]
                    #[doc = "that the block signalling the forced change will not be re-orged e.g. 1000 blocks."]
                    #[doc = "The block production rate (which may be slowed down because of finality lagging) should"]
                    #[doc = "be taken into account when choosing the `delay`. The GRANDPA voters based on the new"]
                    #[doc = "authority will start voting on top of `best_finalized_block_number` for new finalized"]
                    #[doc = "blocks. `best_finalized_block_number` should be the highest of the latest finalized"]
                    #[doc = "block of all validators of the new authority set."]
                    #[doc = ""]
                    #[doc = "Only callable by root."]
                    note_stalled {
                        delay: ::core::primitive::u32,
                        best_finalized_block_number: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Attempt to signal GRANDPA pause when the authority set isn't live"]
                    #[doc = "(either paused or already pending pause)."]
                    PauseFailed,
                    #[codec(index = 1)]
                    #[doc = "Attempt to signal GRANDPA resume when the authority set isn't paused"]
                    #[doc = "(either live or already pending resume)."]
                    ResumeFailed,
                    #[codec(index = 2)]
                    #[doc = "Attempt to signal GRANDPA change with one already pending."]
                    ChangePending,
                    #[codec(index = 3)]
                    #[doc = "Cannot signal forced change so soon after last."]
                    TooSoon,
                    #[codec(index = 4)]
                    #[doc = "A key ownership proof provided as part of an equivocation report is invalid."]
                    InvalidKeyOwnershipProof,
                    #[codec(index = 5)]
                    #[doc = "An equivocation proof provided as part of an equivocation report is invalid."]
                    InvalidEquivocationProof,
                    #[codec(index = 6)]
                    #[doc = "A given equivocation report is valid but already previously reported."]
                    DuplicateOffenceReport,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New authority set has been applied."]
                    NewAuthorities {
                        authority_set: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            runtime_types::sp_consensus_grandpa::app::Public,
                            ::core::primitive::u64,
                        )>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Current authority set has been paused."]
                    Paused,
                    #[codec(index = 2)]
                    #[doc = "Current authority set has been resumed."]
                    Resumed,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct StoredPendingChange<_0> {
                pub scheduled_at: _0,
                pub delay: _0,
                pub next_authorities:
                    runtime_types::bounded_collections::weak_bounded_vec::WeakBoundedVec<(
                        runtime_types::sp_consensus_grandpa::app::Public,
                        ::core::primitive::u64,
                    )>,
                pub forced: ::core::option::Option<_0>,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum StoredState<_0> {
                #[codec(index = 0)]
                Live,
                #[codec(index = 1)]
                PendingPause { scheduled_at: _0, delay: _0 },
                #[codec(index = 2)]
                Paused,
                #[codec(index = 3)]
                PendingResume { scheduled_at: _0, delay: _0 },
            }
        }
        pub mod pallet_identity {
            use super::runtime_types;
            pub mod legacy {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct IdentityInfo {
                    pub additional: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        runtime_types::pallet_identity::types::Data,
                        runtime_types::pallet_identity::types::Data,
                    )>,
                    pub display: runtime_types::pallet_identity::types::Data,
                    pub legal: runtime_types::pallet_identity::types::Data,
                    pub web: runtime_types::pallet_identity::types::Data,
                    pub riot: runtime_types::pallet_identity::types::Data,
                    pub email: runtime_types::pallet_identity::types::Data,
                    pub pgp_fingerprint: ::core::option::Option<[::core::primitive::u8; 20usize]>,
                    pub image: runtime_types::pallet_identity::types::Data,
                    pub twitter: runtime_types::pallet_identity::types::Data,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Identity pallet declaration."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Add a registrar to the system."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be `T::RegistrarOrigin`."]
                    #[doc = ""]
                    #[doc = "- `account`: the account of the registrar."]
                    #[doc = ""]
                    #[doc = "Emits `RegistrarAdded` if successful."]
                    add_registrar {
                        account: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Set an account's identity information and reserve the appropriate deposit."]
                    #[doc = ""]
                    #[doc = "If the account already has identity information, the deposit is taken as part payment"]
                    #[doc = "for the new deposit."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `info`: The identity information."]
                    #[doc = ""]
                    #[doc = "Emits `IdentitySet` if successful."]
                    set_identity {
                        info: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::pallet_identity::legacy::IdentityInfo,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Set the sub-accounts of the sender."]
                    #[doc = ""]
                    #[doc = "Payment: Any aggregate balance reserved by previous `set_subs` calls will be returned"]
                    #[doc = "and an amount `SubAccountDeposit` will be reserved for each item in `subs`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "identity."]
                    #[doc = ""]
                    #[doc = "- `subs`: The identity's (new) sub-accounts."]
                    set_subs {
                        subs: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                            runtime_types::sp_runtime::account::AccountId20,
                            runtime_types::pallet_identity::types::Data,
                        )>,
                    },
                    #[codec(index = 3)]
                    #[doc = "Clear an account's identity info and all sub-accounts and return all deposits."]
                    #[doc = ""]
                    #[doc = "Payment: All reserved balances on the account are returned."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "identity."]
                    #[doc = ""]
                    #[doc = "Emits `IdentityCleared` if successful."]
                    clear_identity,
                    #[codec(index = 4)]
                    #[doc = "Request a judgement from a registrar."]
                    #[doc = ""]
                    #[doc = "Payment: At most `max_fee` will be reserved for payment to the registrar if judgement"]
                    #[doc = "given."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                    #[doc = "registered identity."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: The index of the registrar whose judgement is requested."]
                    #[doc = "- `max_fee`: The maximum fee that may be paid. This should just be auto-populated as:"]
                    #[doc = ""]
                    #[doc = "```nocompile"]
                    #[doc = "Self::registrars().get(reg_index).unwrap().fee"]
                    #[doc = "```"]
                    #[doc = ""]
                    #[doc = "Emits `JudgementRequested` if successful."]
                    request_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        #[codec(compact)]
                        max_fee: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Cancel a previous request."]
                    #[doc = ""]
                    #[doc = "Payment: A previously reserved deposit is returned on success."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a"]
                    #[doc = "registered identity."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: The index of the registrar whose judgement is no longer requested."]
                    #[doc = ""]
                    #[doc = "Emits `JudgementUnrequested` if successful."]
                    cancel_request { reg_index: ::core::primitive::u32 },
                    #[codec(index = 6)]
                    #[doc = "Set the fee required for a judgement to be requested from a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `fee`: the new fee."]
                    set_fee {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        #[codec(compact)]
                        fee: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    #[doc = "Change the account associated with a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `new`: the new account ID."]
                    set_account_id {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        new: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "Set the field information for a registrar."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `index`."]
                    #[doc = ""]
                    #[doc = "- `index`: the index of the registrar whose fee is to be set."]
                    #[doc = "- `fields`: the fields that the registrar concerns themselves with."]
                    set_fields {
                        #[codec(compact)]
                        index: ::core::primitive::u32,
                        fields: ::core::primitive::u64,
                    },
                    #[codec(index = 9)]
                    #[doc = "Provide a judgement for an account's identity."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must be the account"]
                    #[doc = "of the registrar whose index is `reg_index`."]
                    #[doc = ""]
                    #[doc = "- `reg_index`: the index of the registrar whose judgement is being made."]
                    #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                    #[doc = "  with a registered identity."]
                    #[doc = "- `judgement`: the judgement of the registrar of index `reg_index` about `target`."]
                    #[doc = "- `identity`: The hash of the [`IdentityInformationProvider`] for that the judgement is"]
                    #[doc = "  provided."]
                    #[doc = ""]
                    #[doc = "Note: Judgements do not apply to a username."]
                    #[doc = ""]
                    #[doc = "Emits `JudgementGiven` if successful."]
                    provide_judgement {
                        #[codec(compact)]
                        reg_index: ::core::primitive::u32,
                        target: runtime_types::sp_runtime::account::AccountId20,
                        judgement: runtime_types::pallet_identity::types::Judgement<
                            ::core::primitive::u128,
                        >,
                        identity: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 10)]
                    #[doc = "Remove an account's identity and sub-account information and slash the deposits."]
                    #[doc = ""]
                    #[doc = "Payment: Reserved balances from `set_subs` and `set_identity` are slashed and handled by"]
                    #[doc = "`Slash`. Verification request deposits are not returned; they should be cancelled"]
                    #[doc = "manually using `cancel_request`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must match `T::ForceOrigin`."]
                    #[doc = ""]
                    #[doc = "- `target`: the account whose identity the judgement is upon. This must be an account"]
                    #[doc = "  with a registered identity."]
                    #[doc = ""]
                    #[doc = "Emits `IdentityKilled` if successful."]
                    kill_identity {
                        target: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 11)]
                    #[doc = "Add the given account to the sender's subs."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    add_sub {
                        sub: runtime_types::sp_runtime::account::AccountId20,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 12)]
                    #[doc = "Alter the associated name of the given sub-account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    rename_sub {
                        sub: runtime_types::sp_runtime::account::AccountId20,
                        data: runtime_types::pallet_identity::types::Data,
                    },
                    #[codec(index = 13)]
                    #[doc = "Remove the given account from the sender's subs."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "sub identity of `sub`."]
                    remove_sub {
                        sub: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 14)]
                    #[doc = "Remove the sender as a sub-account."]
                    #[doc = ""]
                    #[doc = "Payment: Balance reserved by a previous `set_subs` call for one sub will be repatriated"]
                    #[doc = "to the sender (*not* the original depositor)."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have a registered"]
                    #[doc = "super-identity."]
                    #[doc = ""]
                    #[doc = "NOTE: This should not normally be used, but is provided in the case that the non-"]
                    #[doc = "controller of an account is maliciously registered as a sub-account."]
                    quit_sub,
                    #[codec(index = 15)]
                    #[doc = "Add an `AccountId` with permission to grant usernames with a given `suffix` appended."]
                    #[doc = ""]
                    #[doc = "The authority can grant up to `allocation` usernames. To top up their allocation, they"]
                    #[doc = "should just issue (or request via governance) a new `add_username_authority` call."]
                    add_username_authority {
                        authority: runtime_types::sp_runtime::account::AccountId20,
                        suffix: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        allocation: ::core::primitive::u32,
                    },
                    #[codec(index = 16)]
                    #[doc = "Remove `authority` from the username authorities."]
                    remove_username_authority {
                        authority: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 17)]
                    #[doc = "Set the username for `who`. Must be called by a username authority."]
                    #[doc = ""]
                    #[doc = "The authority must have an `allocation`. Users can either pre-sign their usernames or"]
                    #[doc = "accept them later."]
                    #[doc = ""]
                    #[doc = "Usernames must:"]
                    #[doc = "  - Only contain lowercase ASCII characters or digits."]
                    #[doc = "  - When combined with the suffix of the issuing authority be _less than_ the"]
                    #[doc = "    `MaxUsernameLength`."]
                    set_username_for {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        username: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        signature: ::core::option::Option<
                            runtime_types::sp_runtime::account::EthereumSignature,
                        >,
                    },
                    #[codec(index = 18)]
                    #[doc = "Accept a given username that an `authority` granted. The call must include the full"]
                    #[doc = "username, as in `username.suffix`."]
                    accept_username {
                        username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 19)]
                    #[doc = "Remove an expired username approval. The username was approved by an authority but never"]
                    #[doc = "accepted by the user and must now be beyond its expiration. The call must include the"]
                    #[doc = "full username, as in `username.suffix`."]
                    remove_expired_approval {
                        username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 20)]
                    #[doc = "Set a given username as the primary. The username should include the suffix."]
                    set_primary_username {
                        username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 21)]
                    #[doc = "Remove a username that corresponds to an account with no identity. Exists when a user"]
                    #[doc = "gets a username but then calls `clear_identity`."]
                    remove_dangling_username {
                        username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many subs-accounts."]
                    TooManySubAccounts,
                    #[codec(index = 1)]
                    #[doc = "Account isn't found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Account isn't named."]
                    NotNamed,
                    #[codec(index = 3)]
                    #[doc = "Empty index."]
                    EmptyIndex,
                    #[codec(index = 4)]
                    #[doc = "Fee is changed."]
                    FeeChanged,
                    #[codec(index = 5)]
                    #[doc = "No identity found."]
                    NoIdentity,
                    #[codec(index = 6)]
                    #[doc = "Sticky judgement."]
                    StickyJudgement,
                    #[codec(index = 7)]
                    #[doc = "Judgement given."]
                    JudgementGiven,
                    #[codec(index = 8)]
                    #[doc = "Invalid judgement."]
                    InvalidJudgement,
                    #[codec(index = 9)]
                    #[doc = "The index is invalid."]
                    InvalidIndex,
                    #[codec(index = 10)]
                    #[doc = "The target is invalid."]
                    InvalidTarget,
                    #[codec(index = 11)]
                    #[doc = "Maximum amount of registrars reached. Cannot add any more."]
                    TooManyRegistrars,
                    #[codec(index = 12)]
                    #[doc = "Account ID is already named."]
                    AlreadyClaimed,
                    #[codec(index = 13)]
                    #[doc = "Sender is not a sub-account."]
                    NotSub,
                    #[codec(index = 14)]
                    #[doc = "Sub-account isn't owned by sender."]
                    NotOwned,
                    #[codec(index = 15)]
                    #[doc = "The provided judgement was for a different identity."]
                    JudgementForDifferentIdentity,
                    #[codec(index = 16)]
                    #[doc = "Error that occurs when there is an issue paying for judgement."]
                    JudgementPaymentFailed,
                    #[codec(index = 17)]
                    #[doc = "The provided suffix is too long."]
                    InvalidSuffix,
                    #[codec(index = 18)]
                    #[doc = "The sender does not have permission to issue a username."]
                    NotUsernameAuthority,
                    #[codec(index = 19)]
                    #[doc = "The authority cannot allocate any more usernames."]
                    NoAllocation,
                    #[codec(index = 20)]
                    #[doc = "The signature on a username was not valid."]
                    InvalidSignature,
                    #[codec(index = 21)]
                    #[doc = "Setting this username requires a signature, but none was provided."]
                    RequiresSignature,
                    #[codec(index = 22)]
                    #[doc = "The username does not meet the requirements."]
                    InvalidUsername,
                    #[codec(index = 23)]
                    #[doc = "The username is already taken."]
                    UsernameTaken,
                    #[codec(index = 24)]
                    #[doc = "The requested username does not exist."]
                    NoUsername,
                    #[codec(index = 25)]
                    #[doc = "The username cannot be forcefully removed because it can still be accepted."]
                    NotExpired,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A name was set or reset (which will remove all judgements)."]
                    IdentitySet {
                        who: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "A name was cleared, and the given balance returned."]
                    IdentityCleared {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "A name was removed and the given balance slashed."]
                    IdentityKilled {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "A judgement was asked from a registrar."]
                    JudgementRequested {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "A judgement request was retracted."]
                    JudgementUnrequested {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "A judgement was given by a registrar."]
                    JudgementGiven {
                        target: runtime_types::sp_runtime::account::AccountId20,
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "A registrar was added."]
                    RegistrarAdded {
                        registrar_index: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "A sub-identity was added to an identity and the deposit paid."]
                    SubIdentityAdded {
                        sub: runtime_types::sp_runtime::account::AccountId20,
                        main: runtime_types::sp_runtime::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    #[doc = "A sub-identity was removed from an identity and the deposit freed."]
                    SubIdentityRemoved {
                        sub: runtime_types::sp_runtime::account::AccountId20,
                        main: runtime_types::sp_runtime::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "A sub-identity was cleared, and the given deposit repatriated from the"]
                    #[doc = "main identity account to the sub-identity account."]
                    SubIdentityRevoked {
                        sub: runtime_types::sp_runtime::account::AccountId20,
                        main: runtime_types::sp_runtime::account::AccountId20,
                        deposit: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    #[doc = "A username authority was added."]
                    AuthorityAdded {
                        authority: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 11)]
                    #[doc = "A username authority was removed."]
                    AuthorityRemoved {
                        authority: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 12)]
                    #[doc = "A username was set for `who`."]
                    UsernameSet {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 13)]
                    #[doc = "A username was queued, but `who` must accept it prior to `expiration`."]
                    UsernameQueued {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                        expiration: ::core::primitive::u32,
                    },
                    #[codec(index = 14)]
                    #[doc = "A queued username passed its expiration without being claimed and was removed."]
                    PreapprovalExpired {
                        whose: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 15)]
                    #[doc = "A username was set as a primary and can be looked up from `who`."]
                    PrimaryUsernameSet {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                    #[codec(index = 16)]
                    #[doc = "A dangling username (as in, a username corresponding to an account that has removed its"]
                    #[doc = "identity) has been removed."]
                    DanglingUsernameRemoved {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        username: runtime_types::bounded_collections::bounded_vec::BoundedVec<
                            ::core::primitive::u8,
                        >,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AuthorityProperties<_0> {
                    pub suffix: _0,
                    pub allocation: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Data {
                    #[codec(index = 0)]
                    None,
                    #[codec(index = 1)]
                    Raw0([::core::primitive::u8; 0usize]),
                    #[codec(index = 2)]
                    Raw1([::core::primitive::u8; 1usize]),
                    #[codec(index = 3)]
                    Raw2([::core::primitive::u8; 2usize]),
                    #[codec(index = 4)]
                    Raw3([::core::primitive::u8; 3usize]),
                    #[codec(index = 5)]
                    Raw4([::core::primitive::u8; 4usize]),
                    #[codec(index = 6)]
                    Raw5([::core::primitive::u8; 5usize]),
                    #[codec(index = 7)]
                    Raw6([::core::primitive::u8; 6usize]),
                    #[codec(index = 8)]
                    Raw7([::core::primitive::u8; 7usize]),
                    #[codec(index = 9)]
                    Raw8([::core::primitive::u8; 8usize]),
                    #[codec(index = 10)]
                    Raw9([::core::primitive::u8; 9usize]),
                    #[codec(index = 11)]
                    Raw10([::core::primitive::u8; 10usize]),
                    #[codec(index = 12)]
                    Raw11([::core::primitive::u8; 11usize]),
                    #[codec(index = 13)]
                    Raw12([::core::primitive::u8; 12usize]),
                    #[codec(index = 14)]
                    Raw13([::core::primitive::u8; 13usize]),
                    #[codec(index = 15)]
                    Raw14([::core::primitive::u8; 14usize]),
                    #[codec(index = 16)]
                    Raw15([::core::primitive::u8; 15usize]),
                    #[codec(index = 17)]
                    Raw16([::core::primitive::u8; 16usize]),
                    #[codec(index = 18)]
                    Raw17([::core::primitive::u8; 17usize]),
                    #[codec(index = 19)]
                    Raw18([::core::primitive::u8; 18usize]),
                    #[codec(index = 20)]
                    Raw19([::core::primitive::u8; 19usize]),
                    #[codec(index = 21)]
                    Raw20([::core::primitive::u8; 20usize]),
                    #[codec(index = 22)]
                    Raw21([::core::primitive::u8; 21usize]),
                    #[codec(index = 23)]
                    Raw22([::core::primitive::u8; 22usize]),
                    #[codec(index = 24)]
                    Raw23([::core::primitive::u8; 23usize]),
                    #[codec(index = 25)]
                    Raw24([::core::primitive::u8; 24usize]),
                    #[codec(index = 26)]
                    Raw25([::core::primitive::u8; 25usize]),
                    #[codec(index = 27)]
                    Raw26([::core::primitive::u8; 26usize]),
                    #[codec(index = 28)]
                    Raw27([::core::primitive::u8; 27usize]),
                    #[codec(index = 29)]
                    Raw28([::core::primitive::u8; 28usize]),
                    #[codec(index = 30)]
                    Raw29([::core::primitive::u8; 29usize]),
                    #[codec(index = 31)]
                    Raw30([::core::primitive::u8; 30usize]),
                    #[codec(index = 32)]
                    Raw31([::core::primitive::u8; 31usize]),
                    #[codec(index = 33)]
                    Raw32([::core::primitive::u8; 32usize]),
                    #[codec(index = 34)]
                    BlakeTwo256([::core::primitive::u8; 32usize]),
                    #[codec(index = 35)]
                    Sha256([::core::primitive::u8; 32usize]),
                    #[codec(index = 36)]
                    Keccak256([::core::primitive::u8; 32usize]),
                    #[codec(index = 37)]
                    ShaThree256([::core::primitive::u8; 32usize]),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Judgement<_0> {
                    #[codec(index = 0)]
                    Unknown,
                    #[codec(index = 1)]
                    FeePaid(_0),
                    #[codec(index = 2)]
                    Reasonable,
                    #[codec(index = 3)]
                    KnownGood,
                    #[codec(index = 4)]
                    OutOfDate,
                    #[codec(index = 5)]
                    LowQuality,
                    #[codec(index = 6)]
                    Erroneous,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RegistrarInfo<_0, _1, _2> {
                    pub account: _1,
                    pub fee: _0,
                    pub fields: _2,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Registration<_0, _2> {
                    pub judgements: runtime_types::bounded_collections::bounded_vec::BoundedVec<(
                        ::core::primitive::u32,
                        runtime_types::pallet_identity::types::Judgement<_0>,
                    )>,
                    pub deposit: _0,
                    pub info: _2,
                }
            }
        }
        pub mod pallet_issuance {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    init_issuance_config,
                    #[codec(index = 1)]
                    finalize_tge,
                    #[codec(index = 2)]
                    execute_tge {
                        tge_infos: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::pallet_issuance::TgeInfo<
                                runtime_types::sp_runtime::account::AccountId20,
                                ::core::primitive::u128,
                            >,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The issuance config has already been initialized"]
                    IssuanceConfigAlreadyInitialized,
                    #[codec(index = 1)]
                    #[doc = "The issuance config has not been initialized"]
                    IssuanceConfigNotInitialized,
                    #[codec(index = 2)]
                    #[doc = "TGE must be finalized before issuance config is inti"]
                    TGENotFinalized,
                    #[codec(index = 3)]
                    #[doc = "The TGE is already finalized"]
                    TGEIsAlreadyFinalized,
                    #[codec(index = 4)]
                    #[doc = "The issuance config is invalid"]
                    IssuanceConfigInvalid,
                    #[codec(index = 5)]
                    #[doc = "An underflow or an overflow has occured"]
                    MathError,
                    #[codec(index = 6)]
                    #[doc = "unknown pool"]
                    UnknownPool,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Issuance for upcoming session issued"]
                    SessionIssuanceIssued(
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    #[doc = "Issuance for upcoming session calculated and recorded"]
                    SessionIssuanceRecorded(
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 2)]
                    #[doc = "Issuance configuration has been finalized"]
                    IssuanceConfigInitialized(
                        runtime_types::pallet_issuance::IssuanceInfo<::core::primitive::u128>,
                    ),
                    #[codec(index = 3)]
                    #[doc = "TGE has been finalized"]
                    TGEFinalized,
                    #[codec(index = 4)]
                    #[doc = "A TGE instance has failed"]
                    TGEInstanceFailed(
                        runtime_types::pallet_issuance::TgeInfo<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                        >,
                    ),
                    #[codec(index = 5)]
                    #[doc = "A TGE instance has succeeded"]
                    TGEInstanceSucceeded(
                        runtime_types::pallet_issuance::TgeInfo<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                        >,
                    ),
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct IssuanceInfo<_0> {
                pub cap: _0,
                pub issuance_at_init: _0,
                pub linear_issuance_blocks: ::core::primitive::u32,
                pub liquidity_mining_split: runtime_types::sp_arithmetic::per_things::Perbill,
                pub staking_split: runtime_types::sp_arithmetic::per_things::Perbill,
                pub sequencers_split: runtime_types::sp_arithmetic::per_things::Perbill,
                pub total_crowdloan_allocation: _0,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct TgeInfo<_0, _1> {
                pub who: _0,
                pub amount: _1,
            }
        }
        pub mod pallet_maintenance {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    switch_maintenance_mode_on,
                    #[codec(index = 1)]
                    switch_maintenance_mode_off,
                    #[codec(index = 2)]
                    switch_upgradability_in_maintenance_mode_on,
                    #[codec(index = 3)]
                    switch_upgradability_in_maintenance_mode_off,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Timeouts were incorrectly initialized"]
                    NotFoundationAccount,
                    #[codec(index = 1)]
                    #[doc = "Not in maintenance mode"]
                    NotInMaintenanceMode,
                    #[codec(index = 2)]
                    #[doc = "Already in maintenance mode"]
                    AlreadyInMaintenanceMode,
                    #[codec(index = 3)]
                    #[doc = "Already upgradable in maintenance mode"]
                    AlreadyUpgradableInMaintenanceMode,
                    #[codec(index = 4)]
                    #[doc = "Already not upgradable in maintenance mode"]
                    AlreadyNotUpgradableInMaintenanceMode,
                    #[codec(index = 5)]
                    #[doc = "Upgrade blocked by Maintenance"]
                    UpgradeBlockedByMaintenance,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Maintenance mode has been switched on"]
                    MaintenanceModeSwitchedOn(runtime_types::sp_runtime::account::AccountId20),
                    #[codec(index = 1)]
                    #[doc = "Maintenance mode has been switched off"]
                    MaintenanceModeSwitchedOff(runtime_types::sp_runtime::account::AccountId20),
                    #[codec(index = 2)]
                    #[doc = "Upgradablilty in maintenance mode has been switched on"]
                    UpgradabilityInMaintenanceModeSwitchedOn(
                        runtime_types::sp_runtime::account::AccountId20,
                    ),
                    #[codec(index = 3)]
                    #[doc = "Upgradablilty in maintenance mode has been switched off"]
                    UpgradabilityInMaintenanceModeSwitchedOff(
                        runtime_types::sp_runtime::account::AccountId20,
                    ),
                    #[codec(index = 4)]
                    #[doc = "Maintenance mode has been switched on externally"]
                    MaintenanceModeSwitchedOnExternally,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct MaintenanceStatusInfo {
                    pub is_maintenance: ::core::primitive::bool,
                    pub is_upgradable_in_maintenance: ::core::primitive::bool,
                }
            }
        }
        pub mod pallet_membership {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Add a member `who` to the set."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::AddOrigin`."]
                    add_member {
                        who: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Remove a member `who` from the set."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::RemoveOrigin`."]
                    remove_member {
                        who: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "Swap out one member `remove` for another `add`."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::SwapOrigin`."]
                    #[doc = ""]
                    #[doc = "Prime membership is *not* passed from `remove` to `add`, if extant."]
                    swap_member {
                        remove: runtime_types::sp_runtime::account::AccountId20,
                        add: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "Change the membership to a new set, disregarding the existing membership. Be nice and"]
                    #[doc = "pass `members` pre-sorted."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::ResetOrigin`."]
                    reset_members {
                        members: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Swap out the sending member for some other key `new`."]
                    #[doc = ""]
                    #[doc = "May only be called from `Signed` origin of a current member."]
                    #[doc = ""]
                    #[doc = "Prime membership is passed from the origin account to `new`, if extant."]
                    change_key {
                        new: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 5)]
                    #[doc = "Set the prime member. Must be a current member."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::PrimeOrigin`."]
                    set_prime {
                        who: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 6)]
                    #[doc = "Remove the prime member if it exists."]
                    #[doc = ""]
                    #[doc = "May only be called from `T::PrimeOrigin`."]
                    clear_prime,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Already a member."]
                    AlreadyMember,
                    #[codec(index = 1)]
                    #[doc = "Not a member."]
                    NotMember,
                    #[codec(index = 2)]
                    #[doc = "Too many members."]
                    TooManyMembers,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The given member was added; see the transaction for who."]
                    MemberAdded,
                    #[codec(index = 1)]
                    #[doc = "The given member was removed; see the transaction for who."]
                    MemberRemoved,
                    #[codec(index = 2)]
                    #[doc = "Two members were swapped; see the transaction for who."]
                    MembersSwapped,
                    #[codec(index = 3)]
                    #[doc = "The membership was reset; see the transaction for who the new set is."]
                    MembersReset,
                    #[codec(index = 4)]
                    #[doc = "One of the members' keys changed."]
                    KeyChanged,
                    #[codec(index = 5)]
                    #[doc = "Phantom member, never used."]
                    Dummy,
                }
            }
        }
        pub mod pallet_metamask_signature {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    update {
                        name: ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                        version: ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                        chain_id: ::core::option::Option<::core::primitive::u64>,
                        decode_url: ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "there should be some updates"]
                    NothingToUpdate,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    MetadataUpdated {
                        name: ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                        version: ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                        chain_id: ::core::option::Option<::core::primitive::u64>,
                        decode_url: ::core::option::Option<
                            runtime_types::bounded_collections::bounded_vec::BoundedVec<
                                ::core::primitive::u8,
                            >,
                        >,
                    },
                }
            }
        }
        pub mod pallet_multipurpose_liquidity {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Migrates vested liquidity tokens from Vested pallet to MPL. Information about"]
                    #[doc = "unlock schedule is preserved, so whenever one decides to move tokens back to"]
                    #[doc = "Vested pallet tokens can be unlocked."]
                    reserve_vesting_liquidity_tokens_by_vesting_index {
                        liquidity_token_id: ::core::primitive::u32,
                        liquidity_token_vesting_index: ::core::primitive::u32,
                        liquidity_token_unlock_some_amount_or_all:
                            ::core::option::Option<::core::primitive::u128>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Migrates vested MGX from Vested pallet to MPL. Information about unlock schedule is"]
                    #[doc = "preserved, so whenever one decides to move tokens back to Vested pallet tokens can be"]
                    #[doc = "unlocked."]
                    reserve_vesting_native_tokens_by_vesting_index {
                        liquidity_token_vesting_index: ::core::primitive::u32,
                        liquidity_token_unlock_some_amount_or_all:
                            ::core::option::Option<::core::primitive::u128>,
                    },
                    #[codec(index = 2)]
                    reserve_vesting_liquidity_tokens {
                        liquidity_token_id: ::core::primitive::u32,
                        liquidity_token_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    unreserve_and_relock_instance {
                        liquidity_token_id: ::core::primitive::u32,
                        relock_instance_index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The token is not a liquidity token"]
                    NotALiquidityToken,
                    #[codec(index = 1)]
                    #[doc = "The limit on the maximum number of relocks was exceeded"]
                    RelockCountLimitExceeded,
                    #[codec(index = 2)]
                    #[doc = "Provided index for relock is out of bounds"]
                    RelockInstanceIndexOOB,
                    #[codec(index = 3)]
                    #[doc = "Not enough unspend reserves"]
                    NotEnoughUnspentReserves,
                    #[codec(index = 4)]
                    #[doc = "Not enough tokens"]
                    NotEnoughTokens,
                    #[codec(index = 5)]
                    #[doc = "Math error"]
                    MathError,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    VestingTokensReserved(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    TokensRelockedFromReserve(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RelockStatusInfo<_0, _1> {
                    pub amount: _0,
                    pub starting_block: _1,
                    pub ending_block_as_balance: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ReserveStatusInfo<_0> {
                    pub staked_unactivated_reserves: _0,
                    pub activated_unstaked_reserves: _0,
                    pub staked_and_activated_reserves: _0,
                    pub unspent_reserves: _0,
                    pub relock_amount: _0,
                }
            }
        }
        pub mod pallet_proof_of_stake {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Claims liquidity mining rewards"]
                    claim_rewards_all {
                        liquidity_token_id: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "Enables/disables pool for liquidity mining rewards"]
                    update_pool_promotion {
                        liquidity_token_id: ::core::primitive::u32,
                        liquidity_mining_issuance_weight: ::core::primitive::u8,
                    },
                    #[codec(index = 2)]
                    #[doc = "Increases number of tokens used for liquidity mining purposes."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- liquidity_token_id - id of the token"]
                    #[doc = "- amount - amount of the token"]
                    #[doc = "- use_balance_from - where from tokens should be used"]
                    activate_liquidity {
                        liquidity_token_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        use_balance_from: ::core::option::Option<
                            runtime_types::mangata_types::multipurpose_liquidity::ActivateKind,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Decreases number of tokens used for liquidity mining purposes"]
                    deactivate_liquidity {
                        liquidity_token_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Schedules rewards for selected liquidity token"]
                    #[doc = "- tokens - pair of tokens"]
                    #[doc = "- amount - amount of the token"]
                    #[doc = "- schedule_end - id of the last rewarded seession. Rewards will be distributedd equally between sessions in range (now .."]
                    #[doc = "schedule_end). Distribution starts from the *next* session till `schedule_end`."]
                    reward_pool {
                        pool: (::core::primitive::u32, ::core::primitive::u32),
                        token_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        schedule_end: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Increases number of tokens used for liquidity mining purposes."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- liquidity_token_id - id of the token"]
                    #[doc = "- amount - amount of the token"]
                    #[doc = "- use_balance_from - where from tokens should be used. If set to `None` then tokens will"]
                    #[doc = "be taken from available balance"]
                    activate_liquidity_for_3rdparty_rewards {
                        liquidity_token_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        reward_token: ::core::primitive::u32,
                        use_balance_from: ::core::option::Option<
                            runtime_types::pallet_proof_of_stake::ThirdPartyActivationKind<
                                ::core::primitive::u32,
                            >,
                        >,
                    },
                    #[codec(index = 6)]
                    #[doc = "Decreases number of tokens used for liquidity mining purposes."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- liquidity_token_id - id of the token"]
                    #[doc = "- amount - amount of the token"]
                    #[doc = "- use_balance_from - where from tokens should be used"]
                    deactivate_liquidity_for_3rdparty_rewards {
                        liquidity_token_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        reward_token: ::core::primitive::u32,
                    },
                    #[codec(index = 7)]
                    #[doc = "Claims liquidity mining rewards"]
                    #[doc = "- tokens - pair of tokens"]
                    #[doc = "- amount - amount of the token"]
                    #[doc = "- reward_token - id of the token that is rewarded"]
                    claim_3rdparty_rewards {
                        liquidity_token_id: ::core::primitive::u32,
                        reward_token: ::core::primitive::u32,
                    },
                    #[codec(index = 8)]
                    #[doc = "Increases number of tokens used for liquidity mining purposes."]
                    #[doc = ""]
                    #[doc = "Parameters:"]
                    #[doc = "- liquidity_token_id - id of the token"]
                    #[doc = "- amount - amount of the token"]
                    #[doc = "- use_balance_from - where from tokens should be used"]
                    activate_liquidity_for_native_rewards {
                        liquidity_token_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        use_balance_from: ::core::option::Option<
                            runtime_types::mangata_types::multipurpose_liquidity::ActivateKind,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "Decreases number of tokens used for liquidity mining purposes"]
                    deactivate_liquidity_for_native_rewards {
                        liquidity_token_id: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    claim_native_rewards {
                        liquidity_token_id: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Not enought assets"]
                    NotEnoughAssets,
                    #[codec(index = 1)]
                    #[doc = "Math overflow"]
                    MathOverflow,
                    #[codec(index = 2)]
                    #[doc = "Not enough rewards earned"]
                    NotEnoughRewardsEarned,
                    #[codec(index = 3)]
                    #[doc = "Not a promoted pool"]
                    NotAPromotedPool,
                    #[codec(index = 4)]
                    #[doc = "Past time calculation"]
                    PastTimeCalculation,
                    #[codec(index = 5)]
                    LiquidityCheckpointMathError,
                    #[codec(index = 6)]
                    CalculateRewardsMathError,
                    #[codec(index = 7)]
                    MathError,
                    #[codec(index = 8)]
                    CalculateRewardsAllMathError,
                    #[codec(index = 9)]
                    MissingRewardsInfoError,
                    #[codec(index = 10)]
                    DeprecatedExtrinsic,
                    #[codec(index = 11)]
                    #[doc = "Cannot schedule rewards in past"]
                    CannotScheduleRewardsInPast,
                    #[codec(index = 12)]
                    #[doc = "Pool does not exist"]
                    PoolDoesNotExist,
                    #[codec(index = 13)]
                    #[doc = "Too many schedules"]
                    TooManySchedules,
                    #[codec(index = 14)]
                    #[doc = "Too little rewards per session"]
                    TooLittleRewards,
                    #[codec(index = 15)]
                    #[doc = "Too small volume of the pool"]
                    TooSmallVolume,
                    #[codec(index = 16)]
                    LiquidityLockedIn3rdpartyRewards,
                    #[codec(index = 17)]
                    NoThirdPartyPartyRewardsToClaim,
                    #[codec(index = 18)]
                    SoloTokenPromotionForbiddenError,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    PoolPromotionUpdated(
                        ::core::primitive::u32,
                        ::core::option::Option<::core::primitive::u8>,
                    ),
                    #[codec(index = 1)]
                    LiquidityActivated(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 2)]
                    LiquidityDeactivated(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 3)]
                    RewardsClaimed(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 4)]
                    ThirdPartyRewardsClaimed(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 5)]
                    ThirdPartyLiquidityActivated(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 6)]
                    ThirdPartyLiquidityDeactivated(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 7)]
                    ThirdPartySuccessfulPoolPromotion(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PromotedPools {
                    pub weight: ::core::primitive::u8,
                    pub rewards: runtime_types::primitive_types::U256,
                }
            }
            pub mod reward_info {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RewardInfo<_0> {
                    pub activated_amount: _0,
                    pub rewards_not_yet_claimed: _0,
                    pub rewards_already_claimed: _0,
                    pub last_checkpoint: ::core::primitive::u32,
                    pub pool_ratio_at_last_checkpoint: runtime_types::primitive_types::U256,
                    pub missing_at_last_checkpoint: runtime_types::primitive_types::U256,
                }
            }
            pub mod schedule_rewards_calculator {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ActivatedLiquidityPerSchedule<_0> {
                    pub pending_positive: _0,
                    pub pending_negative: _0,
                    pub pending_session_id: ::core::primitive::u32,
                    pub total: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ScheduleRewards<_0> {
                    pub pending: _0,
                    pub pending_session_id: ::core::primitive::u32,
                    pub total: _0,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Schedule {
                pub scheduled_at: ::core::primitive::u32,
                pub last_session: ::core::primitive::u32,
                pub liq_token: ::core::primitive::u32,
                pub reward_token: ::core::primitive::u32,
                pub amount_per_session: ::core::primitive::u128,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SchedulesList {
                pub head: ::core::option::Option<::core::primitive::u64>,
                pub tail: ::core::option::Option<::core::primitive::u64>,
                pub pos: ::core::option::Option<::core::primitive::u64>,
                pub count: ::core::primitive::u64,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum ThirdPartyActivationKind<_0> {
                #[codec(index = 0)]
                ActivateKind(
                    ::core::option::Option<
                        runtime_types::mangata_types::multipurpose_liquidity::ActivateKind,
                    >,
                ),
                #[codec(index = 1)]
                ActivatedLiquidity(_0),
                #[codec(index = 2)]
                NativeRewardsLiquidity,
            }
        }
        pub mod pallet_proxy {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    # [codec (index = 0)] # [doc = "Dispatch the given `call` from an account that the sender is authorised for through"] # [doc = "`add_proxy`."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "Parameters:"] # [doc = "- `real`: The account that the proxy will make a call on behalf of."] # [doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."] # [doc = "- `call`: The call to be made by the `real` account."] proxy { real : runtime_types :: sp_runtime :: account :: AccountId20 , force_proxy_type : :: core :: option :: Option < runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType > , call : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: rollup_runtime :: RuntimeCall > , } , # [codec (index = 1)] # [doc = "Register a proxy account for the sender that is able to make calls on its behalf."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "Parameters:"] # [doc = "- `proxy`: The account that the `caller` would like to make a proxy."] # [doc = "- `proxy_type`: The permissions allowed for this proxy account."] # [doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"] # [doc = "zero."] add_proxy { delegate : runtime_types :: sp_runtime :: account :: AccountId20 , proxy_type : runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType , delay : :: core :: primitive :: u32 , } , # [codec (index = 2)] # [doc = "Unregister a proxy account for the sender."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "Parameters:"] # [doc = "- `proxy`: The account that the `caller` would like to remove as a proxy."] # [doc = "- `proxy_type`: The permissions currently enabled for the removed proxy account."] remove_proxy { delegate : runtime_types :: sp_runtime :: account :: AccountId20 , proxy_type : runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType , delay : :: core :: primitive :: u32 , } , # [codec (index = 3)] # [doc = "Unregister all proxy accounts for the sender."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "WARNING: This may be called on accounts created by `pure`, however if done, then"] # [doc = "the unreserved fees will be inaccessible. **All access to this account will be lost.**"] remove_proxies , # [codec (index = 4)] # [doc = "Spawn a fresh new account that is guaranteed to be otherwise inaccessible, and"] # [doc = "initialize it with a proxy of `proxy_type` for `origin` sender."] # [doc = ""] # [doc = "Requires a `Signed` origin."] # [doc = ""] # [doc = "- `proxy_type`: The type of the proxy that the sender will be registered as over the"] # [doc = "new account. This will almost always be the most permissive `ProxyType` possible to"] # [doc = "allow for maximum flexibility."] # [doc = "- `index`: A disambiguation index, in case this is called multiple times in the same"] # [doc = "transaction (e.g. with `utility::batch`). Unless you're using `batch` you probably just"] # [doc = "want to use `0`."] # [doc = "- `delay`: The announcement period required of the initial proxy. Will generally be"] # [doc = "zero."] # [doc = ""] # [doc = "Fails with `Duplicate` if this has already been called in this transaction, from the"] # [doc = "same sender, with the same parameters."] # [doc = ""] # [doc = "Fails if there are insufficient funds to pay for deposit."] create_pure { proxy_type : runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType , delay : :: core :: primitive :: u32 , index : :: core :: primitive :: u16 , } , # [codec (index = 5)] # [doc = "Removes a previously spawned pure proxy."] # [doc = ""] # [doc = "WARNING: **All access to this account will be lost.** Any funds held in it will be"] # [doc = "inaccessible."] # [doc = ""] # [doc = "Requires a `Signed` origin, and the sender account must have been created by a call to"] # [doc = "`pure` with corresponding parameters."] # [doc = ""] # [doc = "- `spawner`: The account that originally called `pure` to create this account."] # [doc = "- `index`: The disambiguation index originally passed to `pure`. Probably `0`."] # [doc = "- `proxy_type`: The proxy type originally passed to `pure`."] # [doc = "- `height`: The height of the chain when the call to `pure` was processed."] # [doc = "- `ext_index`: The extrinsic index in which the call to `pure` was processed."] # [doc = ""] # [doc = "Fails with `NoPermission` in case the caller is not a previously created pure"] # [doc = "account whose `pure` call has corresponding parameters."] kill_pure { spawner : runtime_types :: sp_runtime :: account :: AccountId20 , proxy_type : runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType , index : :: core :: primitive :: u16 , # [codec (compact)] height : :: core :: primitive :: u32 , # [codec (compact)] ext_index : :: core :: primitive :: u32 , } , # [codec (index = 6)] # [doc = "Publish the hash of a proxy-call that will be made in the future."] # [doc = ""] # [doc = "This must be called some number of blocks before the corresponding `proxy` is attempted"] # [doc = "if the delay associated with the proxy relationship is greater than zero."] # [doc = ""] # [doc = "No more than `MaxPending` announcements may be made at any one time."] # [doc = ""] # [doc = "This will take a deposit of `AnnouncementDepositFactor` as well as"] # [doc = "`AnnouncementDepositBase` if there are no other pending announcements."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_ and a proxy of `real`."] # [doc = ""] # [doc = "Parameters:"] # [doc = "- `real`: The account that the proxy will make a call on behalf of."] # [doc = "- `call_hash`: The hash of the call to be made by the `real` account."] announce { real : runtime_types :: sp_runtime :: account :: AccountId20 , call_hash : :: subxt :: ext :: subxt_core :: utils :: H256 , } , # [codec (index = 7)] # [doc = "Remove a given announcement."] # [doc = ""] # [doc = "May be called by a proxy account to remove a call they previously announced and return"] # [doc = "the deposit."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "Parameters:"] # [doc = "- `real`: The account that the proxy will make a call on behalf of."] # [doc = "- `call_hash`: The hash of the call to be made by the `real` account."] remove_announcement { real : runtime_types :: sp_runtime :: account :: AccountId20 , call_hash : :: subxt :: ext :: subxt_core :: utils :: H256 , } , # [codec (index = 8)] # [doc = "Remove the given announcement of a delegate."] # [doc = ""] # [doc = "May be called by a target (proxied) account to remove a call that one of their delegates"] # [doc = "(`delegate`) has announced they want to execute. The deposit is returned."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "Parameters:"] # [doc = "- `delegate`: The account that previously announced the call."] # [doc = "- `call_hash`: The hash of the call to be made."] reject_announcement { delegate : runtime_types :: sp_runtime :: account :: AccountId20 , call_hash : :: subxt :: ext :: subxt_core :: utils :: H256 , } , # [codec (index = 9)] # [doc = "Dispatch the given `call` from an account that the sender is authorized for through"] # [doc = "`add_proxy`."] # [doc = ""] # [doc = "Removes any corresponding announcement(s)."] # [doc = ""] # [doc = "The dispatch origin for this call must be _Signed_."] # [doc = ""] # [doc = "Parameters:"] # [doc = "- `real`: The account that the proxy will make a call on behalf of."] # [doc = "- `force_proxy_type`: Specify the exact proxy type to be used and checked for this call."] # [doc = "- `call`: The call to be made by the `real` account."] proxy_announced { delegate : runtime_types :: sp_runtime :: account :: AccountId20 , real : runtime_types :: sp_runtime :: account :: AccountId20 , force_proxy_type : :: core :: option :: Option < runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType > , call : :: subxt :: ext :: subxt_core :: alloc :: boxed :: Box < runtime_types :: rollup_runtime :: RuntimeCall > , } , }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "There are too many proxies registered or too many announcements pending."]
                    TooMany,
                    #[codec(index = 1)]
                    #[doc = "Proxy registration not found."]
                    NotFound,
                    #[codec(index = 2)]
                    #[doc = "Sender is not a proxy of the account to be proxied."]
                    NotProxy,
                    #[codec(index = 3)]
                    #[doc = "A call which is incompatible with the proxy type's filter was attempted."]
                    Unproxyable,
                    #[codec(index = 4)]
                    #[doc = "Account is already a proxy."]
                    Duplicate,
                    #[codec(index = 5)]
                    #[doc = "Call may not be made by proxy because it may escalate its privileges."]
                    NoPermission,
                    #[codec(index = 6)]
                    #[doc = "Announcement, if made at all, was made too recently."]
                    Unannounced,
                    #[codec(index = 7)]
                    #[doc = "Cannot add self as proxy."]
                    NoSelfProxy,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    # [codec (index = 0)] # [doc = "A proxy was executed correctly, with the given."] ProxyExecuted { result : :: core :: result :: Result < () , runtime_types :: sp_runtime :: DispatchError > , } , # [codec (index = 1)] # [doc = "A pure account has been created by new proxy with given"] # [doc = "disambiguation index and proxy type."] PureCreated { pure : runtime_types :: sp_runtime :: account :: AccountId20 , who : runtime_types :: sp_runtime :: account :: AccountId20 , proxy_type : runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType , disambiguation_index : :: core :: primitive :: u16 , } , # [codec (index = 2)] # [doc = "An announcement was placed to make a call in the future."] Announced { real : runtime_types :: sp_runtime :: account :: AccountId20 , proxy : runtime_types :: sp_runtime :: account :: AccountId20 , call_hash : :: subxt :: ext :: subxt_core :: utils :: H256 , } , # [codec (index = 3)] # [doc = "A proxy was added."] ProxyAdded { delegator : runtime_types :: sp_runtime :: account :: AccountId20 , delegatee : runtime_types :: sp_runtime :: account :: AccountId20 , proxy_type : runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType , delay : :: core :: primitive :: u32 , } , # [codec (index = 4)] # [doc = "A proxy was removed."] ProxyRemoved { delegator : runtime_types :: sp_runtime :: account :: AccountId20 , delegatee : runtime_types :: sp_runtime :: account :: AccountId20 , proxy_type : runtime_types :: rollup_runtime :: runtime_config :: config :: pallet_proxy :: ProxyType , delay : :: core :: primitive :: u32 , } , }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Announcement<_0, _1, _2> {
                pub real: _0,
                pub call_hash: _1,
                pub height: _2,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ProxyDefinition<_0, _1, _2> {
                pub delegate: _0,
                pub proxy_type: _1,
                pub delay: _2,
            }
        }
        pub mod pallet_rolldown {
            use super::runtime_types;
            pub mod messages {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Cancel<_0> {
                    pub requestId: runtime_types::pallet_rolldown::messages::RequestId,
                    pub updater: _0,
                    pub canceler: _0,
                    pub range: runtime_types::pallet_rolldown::messages::Range,
                    pub hash: ::subxt::ext::subxt_core::utils::H256,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CancelResolution {
                    pub requestId: runtime_types::pallet_rolldown::messages::RequestId,
                    pub l2RequestId: ::core::primitive::u128,
                    pub cancelJustified: ::core::primitive::bool,
                    pub timeStamp: runtime_types::primitive_types::U256,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Chain {
                    #[codec(index = 0)]
                    Ethereum,
                    #[codec(index = 1)]
                    Arbitrum,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Deposit {
                    pub requestId: runtime_types::pallet_rolldown::messages::RequestId,
                    pub depositRecipient: [::core::primitive::u8; 20usize],
                    pub tokenAddress: [::core::primitive::u8; 20usize],
                    pub amount: runtime_types::primitive_types::U256,
                    pub timeStamp: runtime_types::primitive_types::U256,
                    pub ferryTip: runtime_types::primitive_types::U256,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FailedDepositResolution {
                    pub requestId: runtime_types::pallet_rolldown::messages::RequestId,
                    pub originRequestId: ::core::primitive::u128,
                    pub ferry: [::core::primitive::u8; 20usize],
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct L1Update {
                    pub chain: runtime_types::pallet_rolldown::messages::Chain,
                    pub pendingDeposits: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::pallet_rolldown::messages::Deposit,
                    >,
                    pub pendingCancelResolutions: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::pallet_rolldown::messages::CancelResolution,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum Origin {
                    #[codec(index = 0)]
                    L1,
                    #[codec(index = 1)]
                    L2,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Range {
                    pub start: ::core::primitive::u128,
                    pub end: ::core::primitive::u128,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RequestId {
                    pub origin: runtime_types::pallet_rolldown::messages::Origin,
                    pub id: ::core::primitive::u128,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Withdrawal {
                    pub requestId: runtime_types::pallet_rolldown::messages::RequestId,
                    pub withdrawalRecipient: [::core::primitive::u8; 20usize],
                    pub tokenAddress: [::core::primitive::u8; 20usize],
                    pub amount: runtime_types::primitive_types::U256,
                    pub ferryTip: runtime_types::primitive_types::U256,
                }
            }
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum BatchSource {
                    #[codec(index = 0)]
                    Manual,
                    #[codec(index = 1)]
                    AutomaticSizeReached,
                    #[codec(index = 2)]
                    PeriodReached,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    update_l2_from_l1 {
                        requests: runtime_types::pallet_rolldown::messages::L1Update,
                        update_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 2)]
                    force_update_l2_from_l1 {
                        update: runtime_types::pallet_rolldown::messages::L1Update,
                    },
                    #[codec(index = 3)]
                    cancel_requests_from_l1 {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        requests_to_cancel: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    withdraw {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        recipient: [::core::primitive::u8; 20usize],
                        token_address: [::core::primitive::u8; 20usize],
                        amount: ::core::primitive::u128,
                        ferry_tip: ::core::option::Option<::core::primitive::u128>,
                    },
                    #[codec(index = 4)]
                    force_cancel_requests_from_l1 {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        requests_to_cancel: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    create_batch {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        sequencer_account:
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                    },
                    #[codec(index = 7)]
                    set_manual_batch_extra_fee { balance: ::core::primitive::u128 },
                    #[codec(index = 8)]
                    #[doc = "only deposit recipient can initiate refund failed deposit"]
                    refund_failed_deposit {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        request_id: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "Froce create batch and assigns it to provided sequencer"]
                    #[doc = "provided requests range must exists - otherwise `[Error::InvalidRange]` error will be returned"]
                    force_create_batch {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        range: (::core::primitive::u128, ::core::primitive::u128),
                        sequencer_account: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 10)]
                    ferry_deposit {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        request_id: runtime_types::pallet_rolldown::messages::RequestId,
                        deposit_recipient: [::core::primitive::u8; 20usize],
                        token_address: [::core::primitive::u8; 20usize],
                        amount: ::core::primitive::u128,
                        timestamp: ::core::primitive::u128,
                        ferry_tip: ::core::primitive::u128,
                        deposit_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 11)]
                    ferry_deposit_unsafe {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        request_id: runtime_types::pallet_rolldown::messages::RequestId,
                        deposit_recipient: [::core::primitive::u8; 20usize],
                        token_address: [::core::primitive::u8; 20usize],
                        amount: ::core::primitive::u128,
                        timestamp: ::core::primitive::u128,
                        ferry_tip: ::core::primitive::u128,
                    },
                    #[codec(index = 12)]
                    update_l2_from_l1_unsafe {
                        requests: runtime_types::pallet_rolldown::messages::L1Update,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum DisputeRole {
                    #[codec(index = 0)]
                    Canceler,
                    #[codec(index = 1)]
                    Submitter,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    OperationFailed,
                    #[codec(index = 1)]
                    ReadRightsExhausted,
                    #[codec(index = 2)]
                    CancelRightsExhausted,
                    #[codec(index = 3)]
                    EmptyUpdate,
                    #[codec(index = 4)]
                    AddressDeserializationFailure,
                    #[codec(index = 5)]
                    RequestDoesNotExist,
                    #[codec(index = 6)]
                    NotEnoughAssets,
                    #[codec(index = 7)]
                    NotEnoughAssetsForFee,
                    #[codec(index = 8)]
                    BalanceOverflow,
                    #[codec(index = 9)]
                    L1AssetCreationFailed,
                    #[codec(index = 10)]
                    MathOverflow,
                    #[codec(index = 11)]
                    TooManyRequests,
                    #[codec(index = 12)]
                    InvalidUpdate,
                    #[codec(index = 13)]
                    L1AssetNotFound,
                    #[codec(index = 14)]
                    WrongRequestId,
                    #[codec(index = 15)]
                    OnlySelectedSequencerisAllowedToUpdate,
                    #[codec(index = 16)]
                    SequencerLastUpdateStillInDisputePeriod,
                    #[codec(index = 17)]
                    SequencerAwaitingCancelResolution,
                    #[codec(index = 18)]
                    MultipleUpdatesInSingleBlock,
                    #[codec(index = 19)]
                    BlockedByMaintenanceMode,
                    #[codec(index = 20)]
                    UnsupportedAsset,
                    #[codec(index = 21)]
                    InvalidRange,
                    #[codec(index = 22)]
                    NonExistingRequestId,
                    #[codec(index = 23)]
                    UnknownAliasAccount,
                    #[codec(index = 24)]
                    FailedDepositDoesNotExist,
                    #[codec(index = 25)]
                    EmptyBatch,
                    #[codec(index = 26)]
                    TokenDoesNotExist,
                    #[codec(index = 27)]
                    NotEligibleForRefund,
                    #[codec(index = 28)]
                    FerryHashMismatch,
                    #[codec(index = 29)]
                    MintError,
                    #[codec(index = 30)]
                    AssetRegistrationProblem,
                    #[codec(index = 31)]
                    UpdateHashMishmatch,
                    #[codec(index = 32)]
                    AlreadyExecuted,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    L1ReadStored {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        sequencer: runtime_types::sp_runtime::account::AccountId20,
                        dispute_period_end: ::core::primitive::u128,
                        range: runtime_types::pallet_rolldown::messages::Range,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 1)]
                    RequestProcessedOnL2 {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        request_id: ::core::primitive::u128,
                        status: ::core::result::Result<
                            (),
                            runtime_types::pallet_rolldown::L1RequestProcessingError,
                        >,
                    },
                    #[codec(index = 2)]
                    L1ReadCanceled {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        canceled_sequencer_update: ::core::primitive::u128,
                        assigned_id: runtime_types::pallet_rolldown::messages::RequestId,
                    },
                    #[codec(index = 3)]
                    TxBatchCreated {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        source: runtime_types::pallet_rolldown::pallet::BatchSource,
                        assignee: runtime_types::sp_runtime::account::AccountId20,
                        batch_id: ::core::primitive::u128,
                        range: (::core::primitive::u128, ::core::primitive::u128),
                    },
                    #[codec(index = 4)]
                    WithdrawalRequestCreated {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        request_id: runtime_types::pallet_rolldown::messages::RequestId,
                        recipient: [::core::primitive::u8; 20usize],
                        token_address: [::core::primitive::u8; 20usize],
                        amount: ::core::primitive::u128,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                        ferry_tip: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    ManualBatchExtraFeeSet(::core::primitive::u128),
                    #[codec(index = 6)]
                    DepositRefundCreated {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        refunded_request_id: runtime_types::pallet_rolldown::messages::RequestId,
                        ferry:
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                    },
                    #[codec(index = 7)]
                    L1ReadScheduledForExecution {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 8)]
                    L1ReadIgnoredBecauseOfMaintenanceMode {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                    #[codec(index = 9)]
                    DepositFerried {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        deposit: runtime_types::pallet_rolldown::messages::Deposit,
                        deposit_hash: ::subxt::ext::subxt_core::utils::H256,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum L2Request<_0> {
                    #[codec(index = 0)]
                    FailedDepositResolution(
                        runtime_types::pallet_rolldown::messages::FailedDepositResolution,
                    ),
                    #[codec(index = 1)]
                    Cancel(runtime_types::pallet_rolldown::messages::Cancel<_0>),
                    #[codec(index = 2)]
                    Withdrawal(runtime_types::pallet_rolldown::messages::Withdrawal),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct SequencerRights {
                    pub read_rights: ::core::primitive::u128,
                    pub cancel_rights: ::core::primitive::u128,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum L1RequestProcessingError {
                #[codec(index = 0)]
                Overflow,
                #[codec(index = 1)]
                AssetRegistrationProblem,
                #[codec(index = 2)]
                MintError,
                #[codec(index = 3)]
                NotEnoughtCancelRights,
                #[codec(index = 4)]
                WrongCancelRequestId,
                #[codec(index = 5)]
                SequencerNotSlashed,
            }
        }
        pub mod pallet_sequencer_staking {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "provides stake for the purpose of becoming sequencers"]
                    #[doc = ""]
                    #[doc = "- `chain` - chain for which to assign stake_amount"]
                    #[doc = "- `stake_amont` - amount of stake"]
                    #[doc = "- `alias_account` - optional parameter, alias account is eligible to create manual bataches"]
                    #[doc = "                    of updates in pallet-rolldown. Alias account can not be set to another"]
                    #[doc = "                    active sequencer or to some account that is already used as"]
                    #[doc = "                    alias_account for another sequencer"]
                    #[doc = "- `stake_action` - determines what are candidate expectations regarding joining active set,"]
                    #[doc = "\t* 'StakeOnly' - sequencer only provides stake, but does not join active set."]
                    #[doc = "\t* 'StakeAndJoinActiveSet' - sequencer provides stake and joins active set. Fails if"]
                    #[doc = "\t\t\t\t\t\t\t\tcandidate didnt join active set or if candidate is already in active set."]
                    #[doc = "\t\tCandiate can also choose to call `rejoin_active_sequencers` later when there are free seats to"]
                    #[doc = "\t\tjoin active set"]
                    provide_sequencer_stake {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        stake_amount: ::core::primitive::u128,
                        alias_account:
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                        stake_action: runtime_types::pallet_sequencer_staking::StakeAction,
                    },
                    #[codec(index = 1)]
                    leave_active_sequencers {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                    },
                    #[codec(index = 2)]
                    rejoin_active_sequencers {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                    },
                    #[codec(index = 3)]
                    unstake {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                    },
                    #[codec(index = 4)]
                    set_sequencer_configuration {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        minimal_stake_amount: ::core::primitive::u128,
                        slash_fine_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Allows to configure alias_account for active sequencer. This extrinisic can only be called"]
                    #[doc = "by active sequencer"]
                    #[doc = "- `chain` -"]
                    #[doc = "- `alias_account` - optional parameter, alias account is eligible to create manual bataches"]
                    #[doc = "                    of updates in pallet-rolldown. Alias account can not be set to another"]
                    #[doc = "                    active sequencer or to some account that is already used as"]
                    #[doc = "                    alias_account for another sequencer"]
                    set_updater_account_for_sequencer {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        alias_account:
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                    },
                    #[codec(index = 6)]
                    #[doc = "This extrinsic should be used to distribute rewards for sequencer."]
                    #[doc = ""]
                    #[doc = "params:"]
                    #[doc = "- sequencer - account id"]
                    #[doc = "- number_of_sessions - number of rewards periods that should be processed within extrinsic."]
                    payout_sequencer_rewards {
                        sequencer: runtime_types::sp_runtime::account::AccountId20,
                        number_of_sessions: ::core::option::Option<::core::primitive::u32>,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    OperationFailed,
                    #[codec(index = 1)]
                    MathOverflow,
                    #[codec(index = 2)]
                    SequencerIsNotInActiveSet,
                    #[codec(index = 3)]
                    SequencerAlreadyInActiveSet,
                    #[codec(index = 4)]
                    CantUnstakeWhileInActiveSet,
                    #[codec(index = 5)]
                    NotEnoughSequencerStake,
                    #[codec(index = 6)]
                    MaxSequencersLimitReached,
                    #[codec(index = 7)]
                    TestUnstakingError,
                    #[codec(index = 8)]
                    UnknownChainId,
                    #[codec(index = 9)]
                    NoStakeToUnStake,
                    #[codec(index = 10)]
                    AddressInUse,
                    #[codec(index = 11)]
                    AliasAccountIsActiveSequencer,
                    #[codec(index = 12)]
                    SequencerAccountIsActiveSequencerAlias,
                    #[codec(index = 13)]
                    SequencerRoundRewardsDNE,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    SequencersRemovedFromActiveSet(
                        runtime_types::pallet_rolldown::messages::Chain,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                    ),
                    #[codec(index = 1)]
                    SequencerJoinedActiveSet(
                        runtime_types::pallet_rolldown::messages::Chain,
                        runtime_types::sp_runtime::account::AccountId20,
                    ),
                    #[codec(index = 2)]
                    StakeProvided {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        added_stake: ::core::primitive::u128,
                        total_stake: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    StakeRemoved {
                        chain: runtime_types::pallet_rolldown::messages::Chain,
                        removed_stake: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Notify about reward periods that has been paid (sequencer, payout rounds, any rewards left)"]
                    SequencerRewardsDistributed(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::pallet_sequencer_staking::PayoutRounds,
                    ),
                    #[codec(index = 5)]
                    #[doc = "Paid the account the balance as liquid rewards"]
                    Rewarded(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum PayoutRounds {
                #[codec(index = 0)]
                All,
                #[codec(index = 1)]
                Partial(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum StakeAction {
                #[codec(index = 0)]
                StakeOnly,
                #[codec(index = 1)]
                StakeAndJoinActiveSet,
            }
        }
        pub mod pallet_session {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Sets the session key(s) of the function caller to `keys`."]
                    #[doc = "Allows an account to set its session key prior to becoming a validator."]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be signed."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`. Actual cost depends on the number of length of `T::Keys::key_ids()` which is"]
                    #[doc = "  fixed."]
                    set_keys {
                        keys: runtime_types::rollup_runtime::SessionKeys,
                        proof: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    },
                    #[codec(index = 1)]
                    #[doc = "Removes any session key(s) of the function caller."]
                    #[doc = ""]
                    #[doc = "This doesn't take effect until the next session."]
                    #[doc = ""]
                    #[doc = "The dispatch origin of this function must be Signed and the account must be either be"]
                    #[doc = "convertible to a validator ID using the chain's typical addressing system (this usually"]
                    #[doc = "means being a controller account) or directly convertible into a validator ID (which"]
                    #[doc = "usually means being a stash account)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)` in number of key types. Actual cost depends on the number of length of"]
                    #[doc = "  `T::Keys::key_ids()` which is fixed."]
                    purge_keys,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the session pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Invalid ownership proof."]
                    InvalidProof,
                    #[codec(index = 1)]
                    #[doc = "No associated validator ID for account."]
                    NoAssociatedValidatorId,
                    #[codec(index = 2)]
                    #[doc = "Registered duplicate key."]
                    DuplicatedKey,
                    #[codec(index = 3)]
                    #[doc = "No keys are associated with this account."]
                    NoKeys,
                    #[codec(index = 4)]
                    #[doc = "Key setting account is not live, so it's impossible to associate keys."]
                    NoAccount,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New session has happened. Note that the argument is the session index, not the"]
                    #[doc = "block number as the type might suggest."]
                    NewSession {
                        session_index: ::core::primitive::u32,
                    },
                }
            }
        }
        pub mod pallet_sudo_mangata {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    sudo {
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Root` origin."]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Sudo user to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    sudo_unchecked_weight {
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Authenticates the current sudo key and sets the given AccountId (`new`) as the new sudo"]
                    #[doc = "key."]
                    set_key {
                        new: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "Authenticates the sudo key and dispatches a function call with `Signed` origin from"]
                    #[doc = "a given account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    sudo_as {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Permanently removes the sudo key."]
                    #[doc = ""]
                    #[doc = "**This cannot be un-done.**"]
                    remove_key,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the Sudo pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Sender must be the Sudo account."]
                    RequireSudo,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo call just took place."]
                    Sudid {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                    #[codec(index = 1)]
                    #[doc = "The sudo key has been updated."]
                    KeyChanged {
                        old:
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                        new: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "The key was permanently removed."]
                    KeyRemoved,
                    #[codec(index = 3)]
                    #[doc = "A [sudo_as](Pallet::sudo_as) call just took place."]
                    SudoAsDone {
                        sudo_result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_sudo_origin {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Root` origin."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB write (event)."]
                    #[doc = "- Weight of derivative `call` execution + 10,000."]
                    #[doc = "# </weight>"]
                    sudo {
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Root` origin."]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "SudoOrigin to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- The weight of this call is defined by the caller."]
                    #[doc = "# </weight>"]
                    sudo_unchecked_weight {
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                    #[codec(index = 2)]
                    #[doc = "Authenticates the SudoOrigin and dispatches a function call with `Signed` origin from"]
                    #[doc = "a given account."]
                    #[doc = ""]
                    #[doc = "# <weight>"]
                    #[doc = "- O(1)."]
                    #[doc = "- Limited storage reads."]
                    #[doc = "- One DB write (event)."]
                    #[doc = "- Weight of derivative `call` execution + 10,000."]
                    #[doc = "# </weight>"]
                    sudo_as {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the Sudo pallet"]
                pub enum Error {}
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    SuOriginDid(
                        ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    ),
                    #[codec(index = 1)]
                    #[doc = "A sudo just took place. \\[result\\]"]
                    SuOriginDoAsDone(
                        ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    ),
                }
            }
        }
        pub mod pallet_timestamp {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the current time."]
                    #[doc = ""]
                    #[doc = "This call should be invoked exactly once per block. It will panic at the finalization"]
                    #[doc = "phase, if this call hasn't been invoked by that time."]
                    #[doc = ""]
                    #[doc = "The timestamp should be greater than the previous one by the amount specified by"]
                    #[doc = "[`Config::MinimumPeriod`]."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _None_."]
                    #[doc = ""]
                    #[doc = "This dispatch class is _Mandatory_ to ensure it gets executed in the block. Be aware"]
                    #[doc = "that changing the complexity of this call could result exhausting the resources in a"]
                    #[doc = "block to execute any other calls."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)` (Note that implementations of `OnTimestampSet` must also be `O(1)`)"]
                    #[doc = "- 1 storage read and 1 storage mutation (codec `O(1)` because of `DidUpdate::take` in"]
                    #[doc = "  `on_finalize`)"]
                    #[doc = "- 1 event handler `on_timestamp_set`. Must be `O(1)`."]
                    set {
                        #[codec(compact)]
                        now: ::core::primitive::u64,
                    },
                }
            }
        }
        pub mod pallet_transaction_payment {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "A transaction fee `actual_fee`, of which `tip` was added to the minimum inclusion fee,"]
                    #[doc = "has been paid by `who`."]
                    TransactionFeePaid {
                        who: runtime_types::sp_runtime::account::AccountId20,
                        token_id: ::core::primitive::u32,
                        actual_fee: ::core::primitive::u128,
                        tip: ::core::primitive::u128,
                    },
                }
            }
            pub mod types {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FeeDetails<_0> {
                    pub inclusion_fee: ::core::option::Option<
                        runtime_types::pallet_transaction_payment::types::InclusionFee<_0>,
                    >,
                    pub tip: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct InclusionFee<_0> {
                    pub base_fee: _0,
                    pub len_fee: _0,
                    pub adjusted_weight_fee: _0,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RuntimeDispatchInfo<_0, _1> {
                    pub weight: _1,
                    pub class: runtime_types::frame_support::dispatch::DispatchClass,
                    pub partial_fee: _0,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ChargeTransactionPayment(#[codec(compact)] pub ::core::primitive::u128);
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V1Ancient,
                #[codec(index = 1)]
                V2,
            }
        }
        pub mod pallet_treasury {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Put forward a suggestion for spending."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be signed."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = "A deposit proportional to the value is reserved and slashed if the proposal is rejected."]
                    #[doc = "It is returned once the proposal is awarded."]
                    #[doc = ""]
                    #[doc = "### Complexity"]
                    #[doc = "- O(1)"]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::Proposed`] if successful."]
                    propose_spend {
                        #[codec(compact)]
                        value: ::core::primitive::u128,
                        beneficiary: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 1)]
                    #[doc = "Reject a proposed spend."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::RejectOrigin`]."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = "The original deposit will be slashed."]
                    #[doc = ""]
                    #[doc = "### Complexity"]
                    #[doc = "- O(1)"]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::Rejected`] if successful."]
                    reject_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 2)]
                    #[doc = "Approve a proposal."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::ApproveOrigin`]."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "At a later time, the proposal will be allocated to the beneficiary and the original"]
                    #[doc = "deposit will be returned."]
                    #[doc = ""]
                    #[doc = "### Complexity"]
                    #[doc = " - O(1)."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "No events are emitted from this dispatch."]
                    approve_proposal {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Propose and approve a spend of treasury funds."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least `amount`."]
                    #[doc = ""]
                    #[doc = "### Details"]
                    #[doc = "NOTE: For record-keeping purposes, the proposer is deemed to be equivalent to the"]
                    #[doc = "beneficiary."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                    #[doc = "- `beneficiary`: The destination account for the transfer."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::SpendApproved`] if successful."]
                    spend_local {
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 4)]
                    #[doc = "Force a previously approved proposal to be removed from the approval queue."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::RejectOrigin`]."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "The original deposit will no longer be returned."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `proposal_id`: The index of a proposal"]
                    #[doc = ""]
                    #[doc = "### Complexity"]
                    #[doc = "- O(A) where `A` is the number of approvals"]
                    #[doc = ""]
                    #[doc = "### Errors"]
                    #[doc = "- [`Error::ProposalNotApproved`]: The `proposal_id` supplied was not found in the"]
                    #[doc = "  approval queue, i.e., the proposal has not been approved. This could also mean the"]
                    #[doc = "  proposal does not exist altogether, thus there is no way it would have been approved"]
                    #[doc = "  in the first place."]
                    remove_approval {
                        #[codec(compact)]
                        proposal_id: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Propose and approve a spend of treasury funds."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::SpendOrigin`] with the `Success` value being at least"]
                    #[doc = "`amount` of `asset_kind` in the native asset. The amount of `asset_kind` is converted"]
                    #[doc = "for assertion using the [`Config::BalanceConverter`]."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "Create an approved spend for transferring a specific `amount` of `asset_kind` to a"]
                    #[doc = "designated beneficiary. The spend must be claimed using the `payout` dispatchable within"]
                    #[doc = "the [`Config::PayoutPeriod`]."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `asset_kind`: An indicator of the specific asset class to be spent."]
                    #[doc = "- `amount`: The amount to be transferred from the treasury to the `beneficiary`."]
                    #[doc = "- `beneficiary`: The beneficiary of the spend."]
                    #[doc = "- `valid_from`: The block number from which the spend can be claimed. It can refer to"]
                    #[doc = "  the past if the resulting spend has not yet expired according to the"]
                    #[doc = "  [`Config::PayoutPeriod`]. If `None`, the spend can be claimed immediately after"]
                    #[doc = "  approval."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::AssetSpendApproved`] if successful."]
                    spend {
                        asset_kind: ::subxt::ext::subxt_core::alloc::boxed::Box<()>,
                        #[codec(compact)]
                        amount: ::core::primitive::u128,
                        beneficiary: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                        valid_from: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 6)]
                    #[doc = "Claim a spend."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be signed."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "Spends must be claimed within some temporal bounds. A spend may be claimed within one"]
                    #[doc = "[`Config::PayoutPeriod`] from the `valid_from` block."]
                    #[doc = "In case of a payout failure, the spend status must be updated with the `check_status`"]
                    #[doc = "dispatchable before retrying with the current function."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `index`: The spend index."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::Paid`] if successful."]
                    payout { index: ::core::primitive::u32 },
                    #[codec(index = 7)]
                    #[doc = "Check the status of the spend and remove it from the storage if processed."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be signed."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "The status check is a prerequisite for retrying a failed payout."]
                    #[doc = "If a spend has either succeeded or expired, it is removed from the storage by this"]
                    #[doc = "function. In such instances, transaction fees are refunded."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `index`: The spend index."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::PaymentFailed`] if the spend payout has failed."]
                    #[doc = "Emits [`Event::SpendProcessed`] if the spend payout has succeed."]
                    check_status { index: ::core::primitive::u32 },
                    #[codec(index = 8)]
                    #[doc = "Void previously approved spend."]
                    #[doc = ""]
                    #[doc = "## Dispatch Origin"]
                    #[doc = ""]
                    #[doc = "Must be [`Config::RejectOrigin`]."]
                    #[doc = ""]
                    #[doc = "## Details"]
                    #[doc = ""]
                    #[doc = "A spend void is only possible if the payout has not been attempted yet."]
                    #[doc = ""]
                    #[doc = "### Parameters"]
                    #[doc = "- `index`: The spend index."]
                    #[doc = ""]
                    #[doc = "## Events"]
                    #[doc = ""]
                    #[doc = "Emits [`Event::AssetSpendVoided`] if successful."]
                    void_spend { index: ::core::primitive::u32 },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the treasury pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Proposer's balance is too low."]
                    InsufficientProposersBalance,
                    #[codec(index = 1)]
                    #[doc = "No proposal, bounty or spend at that index."]
                    InvalidIndex,
                    #[codec(index = 2)]
                    #[doc = "Too many approvals in the queue."]
                    TooManyApprovals,
                    #[codec(index = 3)]
                    #[doc = "The spend origin is valid but the amount it is allowed to spend is lower than the"]
                    #[doc = "amount to be spent."]
                    InsufficientPermission,
                    #[codec(index = 4)]
                    #[doc = "Proposal has not been approved."]
                    ProposalNotApproved,
                    #[codec(index = 5)]
                    #[doc = "The balance of the asset kind is not convertible to the balance of the native asset."]
                    FailedToConvertBalance,
                    #[codec(index = 6)]
                    #[doc = "The spend has expired and cannot be claimed."]
                    SpendExpired,
                    #[codec(index = 7)]
                    #[doc = "The spend is not yet eligible for payout."]
                    EarlyPayout,
                    #[codec(index = 8)]
                    #[doc = "The payment has already been attempted."]
                    AlreadyAttempted,
                    #[codec(index = 9)]
                    #[doc = "There was some issue with the mechanism of payment."]
                    PayoutError,
                    #[codec(index = 10)]
                    #[doc = "The payout was not yet attempted/claimed."]
                    NotAttempted,
                    #[codec(index = 11)]
                    #[doc = "The payment has neither failed nor succeeded yet."]
                    Inconclusive,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "New proposal."]
                    Proposed {
                        proposal_index: ::core::primitive::u32,
                    },
                    #[codec(index = 1)]
                    #[doc = "We have ended a spend period and will now allocate funds."]
                    Spending {
                        budget_remaining: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Some funds have been allocated."]
                    Awarded {
                        proposal_index: ::core::primitive::u32,
                        award: ::core::primitive::u128,
                        account: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 3)]
                    #[doc = "A proposal was rejected; funds were slashed."]
                    Rejected {
                        proposal_index: ::core::primitive::u32,
                        slashed: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Some of our funds have been burnt."]
                    Burnt {
                        burnt_funds: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    #[doc = "Spending has finished; this is the amount that rolls over until next spend."]
                    Rollover {
                        rollover_balance: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    #[doc = "Some funds have been deposited."]
                    Deposit { value: ::core::primitive::u128 },
                    #[codec(index = 7)]
                    #[doc = "A new spend proposal has been approved."]
                    SpendApproved {
                        proposal_index: ::core::primitive::u32,
                        amount: ::core::primitive::u128,
                        beneficiary: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 8)]
                    #[doc = "The inactive funds of the pallet have been updated."]
                    UpdatedInactive {
                        reactivated: ::core::primitive::u128,
                        deactivated: ::core::primitive::u128,
                    },
                    #[codec(index = 9)]
                    #[doc = "A new asset spend proposal has been approved."]
                    AssetSpendApproved {
                        index: ::core::primitive::u32,
                        asset_kind: (),
                        amount: ::core::primitive::u128,
                        beneficiary: runtime_types::sp_runtime::account::AccountId20,
                        valid_from: ::core::primitive::u32,
                        expire_at: ::core::primitive::u32,
                    },
                    #[codec(index = 10)]
                    #[doc = "An approved spend was voided."]
                    AssetSpendVoided { index: ::core::primitive::u32 },
                    #[codec(index = 11)]
                    #[doc = "A payment happened."]
                    Paid {
                        index: ::core::primitive::u32,
                        payment_id: (),
                    },
                    #[codec(index = 12)]
                    #[doc = "A payment failed and can be retried."]
                    PaymentFailed {
                        index: ::core::primitive::u32,
                        payment_id: (),
                    },
                    #[codec(index = 13)]
                    #[doc = "A spend was processed and removed from the storage. It might have been successfully"]
                    #[doc = "paid or it may have expired."]
                    SpendProcessed { index: ::core::primitive::u32 },
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum PaymentState<_0> {
                #[codec(index = 0)]
                Pending,
                #[codec(index = 1)]
                Attempted { id: _0 },
                #[codec(index = 2)]
                Failed,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Proposal<_0, _1> {
                pub proposer: _0,
                pub value: _1,
                pub beneficiary: _0,
                pub bond: _1,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SpendStatus<_0, _1, _2, _3, _4> {
                pub asset_kind: _0,
                pub amount: _1,
                pub beneficiary: _2,
                pub valid_from: _3,
                pub expire_at: _3,
                pub status: runtime_types::pallet_treasury::PaymentState<_0>,
                #[codec(skip)]
                pub __ignore: ::core::marker::PhantomData<_4>,
            }
        }
        pub mod pallet_utility_mangata {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    #[doc = ""]
                    #[doc = "This will return `Ok` in all circumstances. To determine the success of the batch, an"]
                    #[doc = "event is deposited. If a call failed and the batch was interrupted, then the"]
                    #[doc = "`BatchInterrupted` event is deposited, along with the number of successful calls made"]
                    #[doc = "and the error of the failed call. If all were successful, then the `BatchCompleted`"]
                    #[doc = "event is deposited."]
                    batch {
                        calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 1)]
                    #[doc = "Send a call through an indexed pseudonym of the sender."]
                    #[doc = ""]
                    #[doc = "Filter from origin are passed along. The call will be dispatched with an origin which"]
                    #[doc = "use the same filter as the origin of this call."]
                    #[doc = ""]
                    #[doc = "NOTE: If you need to ensure that any account-based filtering is not honored (i.e."]
                    #[doc = "because you expect `proxy` to have been used prior in the call stack and you do not want"]
                    #[doc = "the call restrictions to apply to any sub-accounts), then use `as_multi_threshold_1`"]
                    #[doc = "in the Multisig pallet instead."]
                    #[doc = ""]
                    #[doc = "NOTE: Prior to version *12, this was called `as_limited_sub`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    as_derivative {
                        index: ::core::primitive::u16,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 2)]
                    #[doc = "Send a batch of dispatch calls and atomically execute them."]
                    #[doc = "The whole transaction will rollback and fail if any of the calls failed."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatched without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    batch_all {
                        calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Dispatches a function call with a provided origin."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(1)."]
                    dispatch_as {
                        as_origin: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::OriginCaller,
                        >,
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 4)]
                    #[doc = "Send a batch of dispatch calls."]
                    #[doc = "Unlike `batch`, it allows errors and won't interrupt."]
                    #[doc = ""]
                    #[doc = "May be called from any origin except `None`."]
                    #[doc = ""]
                    #[doc = "- `calls`: The calls to be dispatched from the same origin. The number of call must not"]
                    #[doc = "  exceed the constant: `batched_calls_limit` (available in constant metadata)."]
                    #[doc = ""]
                    #[doc = "If origin is root then the calls are dispatch without checking origin filter. (This"]
                    #[doc = "includes bypassing `frame_system::Config::BaseCallFilter`)."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- O(C) where C is the number of calls to be batched."]
                    force_batch {
                        calls: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                    },
                    #[codec(index = 5)]
                    #[doc = "Dispatch a function call with a specified weight."]
                    #[doc = ""]
                    #[doc = "This function does not check the weight of the call, and instead allows the"]
                    #[doc = "Root origin to specify the weight of the call."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    with_weight {
                        call: ::subxt::ext::subxt_core::alloc::boxed::Box<
                            runtime_types::rollup_runtime::RuntimeCall,
                        >,
                        weight: runtime_types::sp_weights::weight_v2::Weight,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Too many calls batched."]
                    TooManyCalls,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Batch of dispatches did not complete fully. Index of first failing dispatch given, as"]
                    #[doc = "well as the error."]
                    BatchInterrupted {
                        index: ::core::primitive::u32,
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 1)]
                    #[doc = "Batch of dispatches completed fully with no error."]
                    BatchCompleted,
                    #[codec(index = 2)]
                    #[doc = "Batch of dispatches completed but has errors."]
                    BatchCompletedWithErrors,
                    #[codec(index = 3)]
                    #[doc = "A single item within a Batch of dispatches has completed with no error."]
                    ItemCompleted,
                    #[codec(index = 4)]
                    #[doc = "A single item within a Batch of dispatches has completed with error."]
                    ItemFailed {
                        error: runtime_types::sp_runtime::DispatchError,
                    },
                    #[codec(index = 5)]
                    #[doc = "A call was dispatched."]
                    DispatchedAs {
                        result:
                            ::core::result::Result<(), runtime_types::sp_runtime::DispatchError>,
                    },
                }
            }
        }
        pub mod pallet_vesting_mangata {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Unlock any vested funds of the sender account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_ and the sender must have funds still"]
                    #[doc = "locked under this pallet."]
                    #[doc = ""]
                    #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`."]
                    vest { token_id: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "Unlock any vested funds of a `target` account."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `target`: The account whose vested funds should be unlocked. Must have funds still"]
                    #[doc = "locked under this pallet."]
                    #[doc = ""]
                    #[doc = "Emits either `VestingCompleted` or `VestingUpdated`."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`."]
                    vest_other {
                        token_id: ::core::primitive::u32,
                        target: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 2)]
                    #[doc = "Force a vested transfer."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `source`: The account whose funds should be transferred."]
                    #[doc = "- `target`: The account that should be transferred the vested funds."]
                    #[doc = "- `schedule`: The vesting schedule attached to the transfer."]
                    #[doc = ""]
                    #[doc = "Emits `VestingCreated`."]
                    #[doc = ""]
                    #[doc = "NOTE: This will unlock all schedules through the current block."]
                    #[doc = ""]
                    #[doc = "## Complexity"]
                    #[doc = "- `O(1)`."]
                    force_vested_transfer {
                        token_id: ::core::primitive::u32,
                        source: runtime_types::sp_runtime::account::AccountId20,
                        target: runtime_types::sp_runtime::account::AccountId20,
                        schedule: runtime_types::pallet_vesting_mangata::vesting_info::VestingInfo<
                            ::core::primitive::u128,
                            ::core::primitive::u32,
                        >,
                    },
                    #[codec(index = 3)]
                    #[doc = "Merge two vesting schedules together, creating a new vesting schedule that unlocks over"]
                    #[doc = "the highest possible start and end blocks. If both schedules have already started the"]
                    #[doc = "current block will be used as the schedule start; with the caveat that if one schedule"]
                    #[doc = "is finished by the current block, the other will be treated as the new merged schedule,"]
                    #[doc = "unmodified."]
                    #[doc = ""]
                    #[doc = "NOTE: If `schedule1_index == schedule2_index` this is a no-op."]
                    #[doc = "NOTE: This will unlock all schedules through the current block prior to merging."]
                    #[doc = "NOTE: If both schedules have ended by the current block, no new schedule will be created"]
                    #[doc = "and both will be removed."]
                    #[doc = ""]
                    #[doc = "Merged schedule attributes:"]
                    #[doc = "- `starting_block`: `MAX(schedule1.starting_block, scheduled2.starting_block,"]
                    #[doc = "  current_block)`."]
                    #[doc = "- `ending_block`: `MAX(schedule1.ending_block, schedule2.ending_block)`."]
                    #[doc = "- `locked`: `schedule1.locked_at(current_block) + schedule2.locked_at(current_block)`."]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Signed_."]
                    #[doc = ""]
                    #[doc = "- `schedule1_index`: index of the first schedule to merge."]
                    #[doc = "- `schedule2_index`: index of the second schedule to merge."]
                    merge_schedules {
                        token_id: ::core::primitive::u32,
                        schedule1_index: ::core::primitive::u32,
                        schedule2_index: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    sudo_unlock_all_vesting_tokens {
                        target: runtime_types::sp_runtime::account::AccountId20,
                        token_id: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Force remove a vesting schedule"]
                    #[doc = ""]
                    #[doc = "The dispatch origin for this call must be _Root_."]
                    #[doc = ""]
                    #[doc = "- `target`: An account that has a vesting schedule"]
                    #[doc = "- `schedule_index`: The vesting schedule index that should be removed"]
                    force_remove_vesting_schedule {
                        token_id: ::core::primitive::u32,
                        target: runtime_types::sp_runtime::account::AccountId20,
                        schedule_index: ::core::primitive::u32,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Error for the vesting pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "The account given is not vesting."]
                    NotVesting,
                    #[codec(index = 1)]
                    #[doc = "The account already has `MaxVestingSchedules` count of schedules and thus"]
                    #[doc = "cannot add another one. Consider merging existing schedules in order to add another."]
                    AtMaxVestingSchedules,
                    #[codec(index = 2)]
                    #[doc = "Amount being transferred is too low to create a vesting schedule."]
                    AmountLow,
                    #[codec(index = 3)]
                    #[doc = "An index was out of bounds of the vesting schedules."]
                    ScheduleIndexOutOfBounds,
                    #[codec(index = 4)]
                    #[doc = "Failed to create a new schedule because some parameter was invalid."]
                    InvalidScheduleParams,
                    #[codec(index = 5)]
                    #[doc = "No suitable schedule found"]
                    #[doc = "Perhaps the user could merge vesting schedules and try again"]
                    NoSuitableScheduleFound,
                    #[codec(index = 6)]
                    #[doc = "Sudo is not allowed to unlock tokens"]
                    SudoUnlockIsDisallowed,
                    #[codec(index = 7)]
                    #[doc = "The provided vesting index exceeds the current number of vesting schedules"]
                    InvalidVestingIndex,
                    #[codec(index = 8)]
                    #[doc = "An overflow or underflow has occured"]
                    MathError,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "The amount vested has been updated. This could indicate a change in funds available."]
                    #[doc = "The balance given is the amount which is left unvested (and thus locked)."]
                    VestingUpdated {
                        account: runtime_types::sp_runtime::account::AccountId20,
                        token_id: ::core::primitive::u32,
                        unvested: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "An \\[account\\] has become fully vested."]
                    VestingCompleted {
                        account: runtime_types::sp_runtime::account::AccountId20,
                        token_id: ::core::primitive::u32,
                    },
                }
            }
            pub mod vesting_info {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct VestingInfo<_0, _1> {
                    pub locked: _0,
                    pub per_block: _0,
                    pub starting_block: _1,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Releases {
                #[codec(index = 0)]
                V0,
                #[codec(index = 1)]
                V1,
            }
        }
        pub mod pallet_xyk {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    create_pool {
                        first_asset_id: ::core::primitive::u32,
                        first_asset_amount: ::core::primitive::u128,
                        second_asset_id: ::core::primitive::u32,
                        second_asset_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 1)]
                    #[doc = "Executes sell_asset swap."]
                    #[doc = "First the swap is prevalidated, if it is successful then the extrinsic is accepted. Beyond this point the exchange commission will be charged."]
                    #[doc = "The sold amount of the sold asset is used to determine the bought asset amount."]
                    #[doc = "If the bought asset amount is lower than the min_amount_out then it will fail on slippage."]
                    #[doc = "The percentage exchange commission is still charged even if the swap fails on slippage. Though the swap itself will be a no-op."]
                    #[doc = "The slippage is calculated based upon the sold_asset_amount."]
                    #[doc = "Upon slippage failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                    #[doc = ""]
                    #[doc = ""]
                    #[doc = "# Args:"]
                    #[doc = "- `sold_asset_id` - The token being sold"]
                    #[doc = "- `bought_asset_id` - The token being bought"]
                    #[doc = "- `sold_asset_amount`: The amount of the sold token being sold"]
                    #[doc = "- `min_amount_out` - The minimum amount of bought asset that must be bought in order to not fail on slippage. Slippage failures still charge exchange commission."]
                    sell_asset {
                        sold_asset_id: ::core::primitive::u32,
                        bought_asset_id: ::core::primitive::u32,
                        sold_asset_amount: ::core::primitive::u128,
                        min_amount_out: ::core::primitive::u128,
                    },
                    #[codec(index = 2)]
                    #[doc = "Executes a multiswap sell asset in a series of sell asset atomic swaps."]
                    #[doc = ""]
                    #[doc = "Multiswaps must fee lock instead of paying transaction fees."]
                    #[doc = ""]
                    #[doc = "First the multiswap is prevalidated, if it is successful then the extrinsic is accepted"]
                    #[doc = "and the exchange commission will be charged upon execution on the **first** swap using **sold_asset_amount**."]
                    #[doc = ""]
                    #[doc = "Upon failure of an atomic swap or bad slippage, all the atomic swaps are reverted and the exchange commission is charged."]
                    #[doc = "Upon such a failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                    #[doc = ""]
                    #[doc = "# Args:"]
                    #[doc = "- `swap_token_list` - This list of tokens is the route of the atomic swaps, starting with the asset sold and ends with the asset finally bought"]
                    #[doc = "- `sold_asset_amount`: The amount of the first asset sold"]
                    #[doc = "- `min_amount_out` - The minimum amount of last asset that must be bought in order to not fail on slippage. Slippage failures still charge exchange commission."]
                    multiswap_sell_asset {
                        swap_token_list:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>,
                        sold_asset_amount: ::core::primitive::u128,
                        min_amount_out: ::core::primitive::u128,
                    },
                    #[codec(index = 3)]
                    #[doc = "Executes buy_asset swap."]
                    #[doc = "First the swap is prevalidated, if it is successful then the extrinsic is accepted. Beyond this point the exchange commission will be charged."]
                    #[doc = "The bought of the bought asset is used to determine the sold asset amount."]
                    #[doc = "If the sold asset amount is higher than the max_amount_in then it will fail on slippage."]
                    #[doc = "The percentage exchange commission is still charged even if the swap fails on slippage. Though the swap itself will be a no-op."]
                    #[doc = "The slippage is calculated based upon the sold asset amount."]
                    #[doc = "Upon slippage failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                    #[doc = ""]
                    #[doc = ""]
                    #[doc = "# Args:"]
                    #[doc = "- `sold_asset_id` - The token being sold"]
                    #[doc = "- `bought_asset_id` - The token being bought"]
                    #[doc = "- `bought_asset_amount`: The amount of the bought token being bought"]
                    #[doc = "- `max_amount_in` - The maximum amount of sold asset that must be sold in order to not fail on slippage. Slippage failures still charge exchange commission."]
                    buy_asset {
                        sold_asset_id: ::core::primitive::u32,
                        bought_asset_id: ::core::primitive::u32,
                        bought_asset_amount: ::core::primitive::u128,
                        max_amount_in: ::core::primitive::u128,
                    },
                    #[codec(index = 4)]
                    #[doc = "Executes a multiswap buy asset in a series of buy asset atomic swaps."]
                    #[doc = ""]
                    #[doc = "Multiswaps must fee lock instead of paying transaction fees."]
                    #[doc = ""]
                    #[doc = "First the multiswap is prevalidated, if it is successful then the extrinsic is accepted"]
                    #[doc = "and the exchange commission will be charged upon execution on the *first* swap using *max_amount_in*."]
                    #[doc = "multiswap_buy_asset cannot have two (or more) atomic swaps on the same pool."]
                    #[doc = "multiswap_buy_asset prevaildation only checks for whether there are enough funds to pay for the exchange commission."]
                    #[doc = "Failure to have the required amount of first asset funds will result in failure (and charging of the exchange commission)."]
                    #[doc = ""]
                    #[doc = "Upon failure of an atomic swap or bad slippage, all the atomic swaps are reverted and the exchange commission is charged."]
                    #[doc = "Upon such a failure, the extrinsic is marked \"successful\", but an event for the failure is emitted"]
                    #[doc = ""]
                    #[doc = "# Args:"]
                    #[doc = "- `swap_token_list` - This list of tokens is the route of the atomic swaps, starting with the asset sold and ends with the asset finally bought"]
                    #[doc = "- `bought_asset_amount`: The amount of the last asset bought"]
                    #[doc = "- `max_amount_in` - The maximum amount of first asset that can be sold in order to not fail on slippage. Slippage failures still charge exchange commission."]
                    multiswap_buy_asset {
                        swap_token_list:
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>,
                        bought_asset_amount: ::core::primitive::u128,
                        max_amount_in: ::core::primitive::u128,
                    },
                    #[codec(index = 5)]
                    mint_liquidity_using_vesting_native_tokens_by_vesting_index {
                        native_asset_vesting_index: ::core::primitive::u32,
                        vesting_native_asset_unlock_some_amount_or_all:
                            ::core::option::Option<::core::primitive::u128>,
                        second_asset_id: ::core::primitive::u32,
                        expected_second_asset_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 6)]
                    mint_liquidity_using_vesting_native_tokens {
                        vesting_native_asset_amount: ::core::primitive::u128,
                        second_asset_id: ::core::primitive::u32,
                        expected_second_asset_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 7)]
                    mint_liquidity {
                        first_asset_id: ::core::primitive::u32,
                        second_asset_id: ::core::primitive::u32,
                        first_asset_amount: ::core::primitive::u128,
                        expected_second_asset_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 8)]
                    compound_rewards {
                        liquidity_asset_id: ::core::primitive::u32,
                        amount_permille: runtime_types::sp_arithmetic::per_things::Permill,
                    },
                    #[codec(index = 9)]
                    provide_liquidity_with_conversion {
                        liquidity_asset_id: ::core::primitive::u32,
                        provided_asset_id: ::core::primitive::u32,
                        provided_asset_amount: ::core::primitive::u128,
                    },
                    #[codec(index = 10)]
                    burn_liquidity {
                        first_asset_id: ::core::primitive::u32,
                        second_asset_id: ::core::primitive::u32,
                        liquidity_asset_amount: ::core::primitive::u128,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Errors"]
                pub enum Error {
                    #[codec(index = 0)]
                    #[doc = "Pool already Exists"]
                    PoolAlreadyExists,
                    #[codec(index = 1)]
                    #[doc = "Not enought assets"]
                    NotEnoughAssets,
                    #[codec(index = 2)]
                    #[doc = "No such pool exists"]
                    NoSuchPool,
                    #[codec(index = 3)]
                    #[doc = "No such liquidity asset exists"]
                    NoSuchLiquidityAsset,
                    #[codec(index = 4)]
                    #[doc = "Not enought reserve"]
                    NotEnoughReserve,
                    #[codec(index = 5)]
                    #[doc = "Zero amount is not supported"]
                    ZeroAmount,
                    #[codec(index = 6)]
                    #[doc = "Insufficient input amount"]
                    InsufficientInputAmount,
                    #[codec(index = 7)]
                    #[doc = "Insufficient output amount"]
                    InsufficientOutputAmount,
                    #[codec(index = 8)]
                    #[doc = "Asset ids cannot be the same"]
                    SameAsset,
                    #[codec(index = 9)]
                    #[doc = "Asset already exists"]
                    AssetAlreadyExists,
                    #[codec(index = 10)]
                    #[doc = "Asset does not exists"]
                    AssetDoesNotExists,
                    #[codec(index = 11)]
                    #[doc = "Division by zero"]
                    DivisionByZero,
                    #[codec(index = 12)]
                    #[doc = "Unexpected failure"]
                    UnexpectedFailure,
                    #[codec(index = 13)]
                    #[doc = "Unexpected failure"]
                    NotPairedWithNativeAsset,
                    #[codec(index = 14)]
                    #[doc = "Second asset amount exceeded expectations"]
                    SecondAssetAmountExceededExpectations,
                    #[codec(index = 15)]
                    #[doc = "Math overflow"]
                    MathOverflow,
                    #[codec(index = 16)]
                    #[doc = "Liquidity token creation failed"]
                    LiquidityTokenCreationFailed,
                    #[codec(index = 17)]
                    #[doc = "Not enough rewards earned"]
                    NotEnoughRewardsEarned,
                    #[codec(index = 18)]
                    #[doc = "Not a promoted pool"]
                    NotAPromotedPool,
                    #[codec(index = 19)]
                    #[doc = "Past time calculation"]
                    PastTimeCalculation,
                    #[codec(index = 20)]
                    #[doc = "Pool already promoted"]
                    PoolAlreadyPromoted,
                    #[codec(index = 21)]
                    #[doc = "Sold Amount too low"]
                    SoldAmountTooLow,
                    #[codec(index = 22)]
                    #[doc = "Asset id is blacklisted"]
                    FunctionNotAvailableForThisToken,
                    #[codec(index = 23)]
                    #[doc = "Pool considting of passed tokens id is blacklisted"]
                    DisallowedPool,
                    #[codec(index = 24)]
                    LiquidityCheckpointMathError,
                    #[codec(index = 25)]
                    CalculateRewardsMathError,
                    #[codec(index = 26)]
                    CalculateCumulativeWorkMaxRatioMathError,
                    #[codec(index = 27)]
                    CalculateRewardsAllMathError,
                    #[codec(index = 28)]
                    NoRights,
                    #[codec(index = 29)]
                    MultiswapShouldBeAtleastTwoHops,
                    #[codec(index = 30)]
                    MultiBuyAssetCantHaveSamePoolAtomicSwaps,
                    #[codec(index = 31)]
                    MultiSwapCantHaveSameTokenConsequetively,
                    #[codec(index = 32)]
                    #[doc = "Trading blocked by maintenance mode"]
                    TradingBlockedByMaintenanceMode,
                    #[codec(index = 33)]
                    PoolIsEmpty,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    PoolCreated(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    AssetsSwapped(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 2)]
                    SellAssetFailedDueToSlippage(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 3)]
                    BuyAssetFailedDueToSlippage(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 4)]
                    LiquidityMinted(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 5)]
                    LiquidityBurned(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 6)]
                    PoolPromotionUpdated(
                        ::core::primitive::u32,
                        ::core::option::Option<::core::primitive::u8>,
                    ),
                    #[codec(index = 7)]
                    LiquidityActivated(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 8)]
                    LiquidityDeactivated(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 9)]
                    RewardsClaimed(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 10)]
                    MultiSwapAssetFailedOnAtomicSwap(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>,
                        ::core::primitive::u128,
                        runtime_types::sp_runtime::ModuleError,
                    ),
                }
            }
        }
        pub mod parachain_staking {
            use super::runtime_types;
            pub mod pallet {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AggregatorMetadataType<_0, _1> {
                    pub token_collator_map: ::subxt::ext::subxt_core::utils::KeyedVec<_1, _0>,
                    pub approved_candidates: ::subxt::ext::subxt_core::alloc::vec::Vec<_0>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Bond<_0, _1, _2> {
                    pub owner: _0,
                    pub amount: _1,
                    pub liquidity_token: _2,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "Contains a variant per dispatchable extrinsic that this pallet has."]
                pub enum Call {
                    #[codec(index = 0)]
                    #[doc = "Set the total number of collator candidates selected per round"]
                    #[doc = "- changes are not applied until the start of the next round"]
                    set_total_selected { new: ::core::primitive::u32 },
                    #[codec(index = 1)]
                    #[doc = "Set the commission for all collators"]
                    set_collator_commission {
                        new: runtime_types::sp_arithmetic::per_things::Perbill,
                    },
                    #[codec(index = 2)]
                    #[doc = "Join the set of collator candidates"]
                    join_candidates {
                        bond: ::core::primitive::u128,
                        liquidity_token: ::core::primitive::u32,
                        use_balance_from: ::core::option::Option<
                            runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                        >,
                        candidate_count: ::core::primitive::u32,
                        liquidity_token_count: ::core::primitive::u32,
                    },
                    #[codec(index = 3)]
                    #[doc = "Request to leave the set of candidates. If successful, the account is immediately"]
                    #[doc = "removed from the candidate pool to prevent selection as a collator."]
                    schedule_leave_candidates {
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 4)]
                    #[doc = "Execute leave candidates request"]
                    execute_leave_candidates {
                        candidate: runtime_types::sp_runtime::account::AccountId20,
                        candidate_delegation_count: ::core::primitive::u32,
                    },
                    #[codec(index = 5)]
                    #[doc = "Cancel open request to leave candidates"]
                    #[doc = "- only callable by collator account"]
                    #[doc = "- result upon successful call is the candidate is active in the candidate pool"]
                    cancel_leave_candidates {
                        candidate_count: ::core::primitive::u32,
                    },
                    #[codec(index = 6)]
                    #[doc = "Temporarily leave the set of collator candidates without unbonding"]
                    go_offline,
                    #[codec(index = 7)]
                    #[doc = "Rejoin the set of collator candidates if previously had called `go_offline`"]
                    go_online,
                    #[codec(index = 8)]
                    #[doc = "Request by collator candidate to increase self bond by `more`"]
                    schedule_candidate_bond_more {
                        more: ::core::primitive::u128,
                        use_balance_from: ::core::option::Option<
                            runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                        >,
                    },
                    #[codec(index = 9)]
                    #[doc = "Request by collator candidate to decrease self bond by `less`"]
                    schedule_candidate_bond_less { less: ::core::primitive::u128 },
                    #[codec(index = 10)]
                    #[doc = "Execute pending request to adjust the collator candidate self bond"]
                    execute_candidate_bond_request {
                        candidate: runtime_types::sp_runtime::account::AccountId20,
                        use_balance_from: ::core::option::Option<
                            runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                        >,
                    },
                    #[codec(index = 11)]
                    #[doc = "Cancel pending request to adjust the collator candidate self bond"]
                    cancel_candidate_bond_request,
                    #[codec(index = 12)]
                    #[doc = "If caller is not a delegator and not a collator, then join the set of delegators"]
                    #[doc = "If caller is a delegator, then makes delegation to change their delegation state"]
                    delegate {
                        collator: runtime_types::sp_runtime::account::AccountId20,
                        amount: ::core::primitive::u128,
                        use_balance_from: ::core::option::Option<
                            runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                        >,
                        candidate_delegation_count: ::core::primitive::u32,
                        delegation_count: ::core::primitive::u32,
                    },
                    #[codec(index = 13)]
                    #[doc = "Request to leave the set of delegators. If successful, the caller is scheduled"]
                    #[doc = "to be allowed to exit. Success forbids future delegator actions until the request is"]
                    #[doc = "invoked or cancelled."]
                    schedule_leave_delegators,
                    #[codec(index = 14)]
                    #[doc = "Execute the right to exit the set of delegators and revoke all ongoing delegations."]
                    execute_leave_delegators {
                        delegator: runtime_types::sp_runtime::account::AccountId20,
                        delegation_count: ::core::primitive::u32,
                    },
                    #[codec(index = 15)]
                    #[doc = "Cancel a pending request to exit the set of delegators. Success clears the pending exit"]
                    #[doc = "request (thereby resetting the delay upon another `leave_delegators` call)."]
                    cancel_leave_delegators,
                    #[codec(index = 16)]
                    #[doc = "Request to revoke an existing delegation. If successful, the delegation is scheduled"]
                    #[doc = "to be allowed to be revoked via the `execute_delegation_request` extrinsic."]
                    schedule_revoke_delegation {
                        collator: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 17)]
                    #[doc = "Request to bond more for delegators wrt a specific collator candidate."]
                    schedule_delegator_bond_more {
                        candidate: runtime_types::sp_runtime::account::AccountId20,
                        more: ::core::primitive::u128,
                        use_balance_from: ::core::option::Option<
                            runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                        >,
                    },
                    #[codec(index = 18)]
                    #[doc = "Request bond less for delegators wrt a specific collator candidate."]
                    schedule_delegator_bond_less {
                        candidate: runtime_types::sp_runtime::account::AccountId20,
                        less: ::core::primitive::u128,
                    },
                    #[codec(index = 19)]
                    #[doc = "Execute pending request to change an existing delegation"]
                    execute_delegation_request {
                        delegator: runtime_types::sp_runtime::account::AccountId20,
                        candidate: runtime_types::sp_runtime::account::AccountId20,
                        use_balance_from: ::core::option::Option<
                            runtime_types::mangata_types::multipurpose_liquidity::BondKind,
                        >,
                    },
                    #[codec(index = 20)]
                    #[doc = "Cancel request to change an existing delegation."]
                    cancel_delegation_request {
                        candidate: runtime_types::sp_runtime::account::AccountId20,
                    },
                    #[codec(index = 21)]
                    #[doc = "Enables new staking token to be used for staking. Only tokens paired with MGX can be"]
                    #[doc = "used. Caller can pass the id of token for which MGX paired pool already exists or"]
                    #[doc = "liquidity token id itself. **Root only**"]
                    add_staking_liquidity_token {
                        paired_or_liquidity_token:
                            runtime_types::parachain_staking::pallet::PairedOrLiquidityToken<
                                ::core::primitive::u32,
                            >,
                        current_liquidity_tokens: ::core::primitive::u32,
                    },
                    #[codec(index = 22)]
                    #[doc = "Removes previously added liquidity token"]
                    remove_staking_liquidity_token {
                        paired_or_liquidity_token:
                            runtime_types::parachain_staking::pallet::PairedOrLiquidityToken<
                                ::core::primitive::u32,
                            >,
                        current_liquidity_tokens: ::core::primitive::u32,
                    },
                    #[codec(index = 23)]
                    #[doc = "Modifies aggregator metadata by extending or reducing list of approved candidates"]
                    #[doc = "Account may only become aggregator only if its not collator or delegator at the moment"]
                    aggregator_update_metadata {
                        collator_candidates: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_runtime::account::AccountId20,
                        >,
                        action: runtime_types::parachain_staking::MetadataUpdateAction,
                    },
                    #[codec(index = 24)]
                    #[doc = "Assigns/replaces the candidate that given collator wants to aggregate under"]
                    update_candidate_aggregator {
                        maybe_aggregator:
                            ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                    },
                    #[codec(index = 25)]
                    #[doc = "This extrinsic should be used to distribute rewards for collator and assodiated"]
                    #[doc = "delegators. As round rewards are processed in random order its impossible predict"]
                    #[doc = "how many delegators (and assodiated transfer extrinsic calls) will be required so"]
                    #[doc = "worst case scenario (delegators_count = MaxCollatorCandidates) is assumed."]
                    #[doc = ""]
                    #[doc = "params:"]
                    #[doc = "- collator - account id"]
                    #[doc = "- limit - number of rewards periods that should be processed within extrinsic. Note"]
                    #[doc = "that limit assumes worst case scenario of (delegators_count = MaxCollatorCandidates)"]
                    #[doc = "so as a result, `limit` or more session round rewards may be distributed"]
                    payout_collator_rewards {
                        collator: runtime_types::sp_runtime::account::AccountId20,
                        number_of_sesisons: ::core::option::Option<::core::primitive::u32>,
                    },
                    #[codec(index = 26)]
                    #[doc = "Payout delegator rewards only for particular round. Collators should rather use"]
                    #[doc = "[`Pallet::payout_collator_rewards`] but if collator is inresponsive one can claim"]
                    #[doc = "particular delegator rewards manually."]
                    payout_delegator_reward {
                        round: ::core::primitive::u32,
                        collator: runtime_types::sp_runtime::account::AccountId20,
                        delegator: runtime_types::sp_runtime::account::AccountId20,
                    },
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum CandidateBondChange {
                    #[codec(index = 0)]
                    Increase,
                    #[codec(index = 1)]
                    Decrease,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CandidateBondRequest<_0> {
                    pub amount: _0,
                    pub change: runtime_types::parachain_staking::pallet::CandidateBondChange,
                    pub when_executable: ::core::primitive::u32,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CollatorCandidate<_0, _1, _2> {
                    pub id: _0,
                    pub bond: _1,
                    pub liquidity_token: _2,
                    pub delegators: runtime_types::parachain_staking::set::OrderedSet<_0>,
                    pub top_delegations: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::parachain_staking::pallet::Bond<_0, _1, _2>,
                    >,
                    pub bottom_delegations: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::parachain_staking::pallet::Bond<_0, _1, _2>,
                    >,
                    pub total_counted: _1,
                    pub total_backing: _1,
                    pub request: ::core::option::Option<
                        runtime_types::parachain_staking::pallet::CandidateBondRequest<_1>,
                    >,
                    pub state: runtime_types::parachain_staking::pallet::CollatorStatus,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct CollatorSnapshot<_0, _1, _2> {
                    pub bond: _1,
                    pub delegations: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        runtime_types::parachain_staking::pallet::Bond<_0, _1, _2>,
                    >,
                    pub total: _1,
                    pub liquidity_token: _2,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum CollatorStatus {
                    #[codec(index = 0)]
                    Active,
                    #[codec(index = 1)]
                    Idle,
                    #[codec(index = 2)]
                    Leaving(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum DelegationChange {
                    #[codec(index = 0)]
                    Revoke,
                    #[codec(index = 1)]
                    Increase,
                    #[codec(index = 2)]
                    Decrease,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct DelegationRequest<_0, _1> {
                    pub collator: _0,
                    pub amount: _1,
                    pub when_executable: ::core::primitive::u32,
                    pub action: runtime_types::parachain_staking::pallet::DelegationChange,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Delegator<_0, _1, _2> {
                    pub id: _0,
                    pub delegations: runtime_types::parachain_staking::set::OrderedSet<
                        runtime_types::parachain_staking::pallet::Bond<_0, _1, _2>,
                    >,
                    pub requests:
                        runtime_types::parachain_staking::pallet::PendingDelegationRequests<_0, _1>,
                    pub status: runtime_types::parachain_staking::pallet::DelegatorStatus,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum DelegatorAdded<_0> {
                    #[codec(index = 0)]
                    AddedToTop { new_total: _0 },
                    #[codec(index = 1)]
                    AddedToBottom,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum DelegatorStatus {
                    #[codec(index = 0)]
                    Active,
                    #[codec(index = 1)]
                    Leaving(::core::primitive::u32),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Error` enum of this pallet."]
                pub enum Error {
                    #[codec(index = 0)]
                    DelegatorDNE,
                    #[codec(index = 1)]
                    DelegatorDNEinTopNorBottom,
                    #[codec(index = 2)]
                    DelegatorDNEInDelegatorSet,
                    #[codec(index = 3)]
                    CandidateDNE,
                    #[codec(index = 4)]
                    DelegationDNE,
                    #[codec(index = 5)]
                    DelegatorExists,
                    #[codec(index = 6)]
                    CandidateExists,
                    #[codec(index = 7)]
                    CandidateBondBelowMin,
                    #[codec(index = 8)]
                    InsufficientBalance,
                    #[codec(index = 9)]
                    DelegationBelowMin,
                    #[codec(index = 10)]
                    AlreadyOffline,
                    #[codec(index = 11)]
                    AlreadyActive,
                    #[codec(index = 12)]
                    DelegatorAlreadyLeaving,
                    #[codec(index = 13)]
                    DelegatorNotLeaving,
                    #[codec(index = 14)]
                    DelegatorCannotLeaveYet,
                    #[codec(index = 15)]
                    CannotDelegateIfLeaving,
                    #[codec(index = 16)]
                    CandidateAlreadyLeaving,
                    #[codec(index = 17)]
                    CandidateNotLeaving,
                    #[codec(index = 18)]
                    CandidateCannotLeaveYet,
                    #[codec(index = 19)]
                    CannotGoOnlineIfLeaving,
                    #[codec(index = 20)]
                    ExceedMaxDelegationsPerDelegator,
                    #[codec(index = 21)]
                    AlreadyDelegatedCandidate,
                    #[codec(index = 22)]
                    InvalidSchedule,
                    #[codec(index = 23)]
                    CannotSetBelowMin,
                    #[codec(index = 24)]
                    NoWritingSameValue,
                    #[codec(index = 25)]
                    TooLowCandidateCountWeightHintJoinCandidates,
                    #[codec(index = 26)]
                    TooLowCandidateCountWeightHintCancelLeaveCandidates,
                    #[codec(index = 27)]
                    TooLowCandidateCountToLeaveCandidates,
                    #[codec(index = 28)]
                    TooLowDelegationCountToDelegate,
                    #[codec(index = 29)]
                    TooLowCandidateDelegationCountToDelegate,
                    #[codec(index = 30)]
                    TooLowDelegationCountToLeaveDelegators,
                    #[codec(index = 31)]
                    PendingCandidateRequestsDNE,
                    #[codec(index = 32)]
                    PendingCandidateRequestAlreadyExists,
                    #[codec(index = 33)]
                    PendingCandidateRequestNotDueYet,
                    #[codec(index = 34)]
                    PendingDelegationRequestDNE,
                    #[codec(index = 35)]
                    PendingDelegationRequestAlreadyExists,
                    #[codec(index = 36)]
                    PendingDelegationRequestNotDueYet,
                    #[codec(index = 37)]
                    StakingLiquidityTokenNotListed,
                    #[codec(index = 38)]
                    TooLowCurrentStakingLiquidityTokensCount,
                    #[codec(index = 39)]
                    StakingLiquidityTokenAlreadyListed,
                    #[codec(index = 40)]
                    ExceedMaxCollatorCandidates,
                    #[codec(index = 41)]
                    ExceedMaxTotalDelegatorsPerCandidate,
                    #[codec(index = 42)]
                    CandidateNotAggregating,
                    #[codec(index = 43)]
                    CandidateNotAggregatingUnderAggregator,
                    #[codec(index = 44)]
                    CandidateAlreadyApprovedByAggregator,
                    #[codec(index = 45)]
                    AggregatorExists,
                    #[codec(index = 46)]
                    CollatorRoundRewardsDNE,
                    #[codec(index = 47)]
                    DelegatorRewardsDNE,
                    #[codec(index = 48)]
                    AggregatorDNE,
                    #[codec(index = 49)]
                    TargettedAggregatorSameAsCurrent,
                    #[codec(index = 50)]
                    CandidateNotApprovedByAggregator,
                    #[codec(index = 51)]
                    AggregatorLiquidityTokenTaken,
                    #[codec(index = 52)]
                    IncorrectRewardDelegatorCount,
                    #[codec(index = 53)]
                    MathError,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                #[doc = "The `Event` enum of this pallet"]
                pub enum Event {
                    #[codec(index = 0)]
                    #[doc = "Starting Block, Round, Number of Collators Selected, Total Balance"]
                    NewRound(
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u32,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 1)]
                    #[doc = "Account, Amount Locked, New Total Amt Locked"]
                    JoinedCollatorCandidates(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 2)]
                    #[doc = "Round, Collator Account, Total Exposed Amount (includes all delegations)"]
                    CollatorChosen(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 3)]
                    #[doc = "Candidate, Amount To Increase, Round at which request can be executed by caller"]
                    CandidateBondMoreRequested(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 4)]
                    #[doc = "Candidate, Amount To Decrease, Round at which request can be executed by caller"]
                    CandidateBondLessRequested(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 5)]
                    #[doc = "Candidate, Amount, New Bond Total"]
                    CandidateBondedMore(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 6)]
                    #[doc = "Candidate, Amount, New Bond"]
                    CandidateBondedLess(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 7)]
                    #[doc = "Round Offline, Candidate"]
                    CandidateWentOffline(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                    ),
                    #[codec(index = 8)]
                    #[doc = "Round Online, Candidate"]
                    CandidateBackOnline(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                    ),
                    #[codec(index = 9)]
                    #[doc = "Round At Which Exit Is Allowed, Candidate, Scheduled Exit"]
                    CandidateScheduledExit(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 10)]
                    #[doc = "Candidate"]
                    CancelledCandidateExit(runtime_types::sp_runtime::account::AccountId20),
                    #[codec(index = 11)]
                    #[doc = "Candidate, Cancelled Request"]
                    CancelledCandidateBondChange(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::parachain_staking::pallet::CandidateBondRequest<
                            ::core::primitive::u128,
                        >,
                    ),
                    #[codec(index = 12)]
                    #[doc = "Ex-Candidate, Amount Unlocked, New Total Amt Locked"]
                    CandidateLeft(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 13)]
                    #[doc = "Delegator, Candidate, Amount to be increased, Round at which can be executed"]
                    DelegationIncreaseScheduled(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 14)]
                    #[doc = "Delegator, Candidate, Amount to be decreased, Round at which can be executed"]
                    DelegationDecreaseScheduled(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 15)]
                    DelegationIncreased(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::bool,
                    ),
                    #[codec(index = 16)]
                    DelegationDecreased(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::bool,
                    ),
                    #[codec(index = 17)]
                    #[doc = "Round, Delegator, Scheduled Exit"]
                    DelegatorExitScheduled(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 18)]
                    #[doc = "Round, Delegator, Candidate, Scheduled Exit"]
                    DelegationRevocationScheduled(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u32,
                    ),
                    #[codec(index = 19)]
                    #[doc = "Delegator, Amount Unstaked"]
                    DelegatorLeft(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 20)]
                    #[doc = "Delegator, Candidate, Amount Unstaked"]
                    DelegationRevoked(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 21)]
                    #[doc = "Delegator"]
                    DelegatorExitCancelled(runtime_types::sp_runtime::account::AccountId20),
                    #[codec(index = 22)]
                    #[doc = "Delegator, Cancelled Request"]
                    CancelledDelegationRequest(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::parachain_staking::pallet::DelegationRequest<
                            runtime_types::sp_runtime::account::AccountId20,
                            ::core::primitive::u128,
                        >,
                    ),
                    #[codec(index = 23)]
                    #[doc = "Delegator, Amount Locked, Candidate, Delegator Position with New Total Counted if in Top"]
                    Delegation(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::parachain_staking::pallet::DelegatorAdded<
                            ::core::primitive::u128,
                        >,
                    ),
                    #[codec(index = 24)]
                    #[doc = "Delegator, Candidate, Amount Unstaked, New Total Amt Staked for Candidate"]
                    DelegatorLeftCandidate(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 25)]
                    #[doc = "Session index, Delegator, Collator, Due reward (as per counted delegation for collator)"]
                    DelegatorDueReward(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 26)]
                    #[doc = "Paid the account (delegator or collator) the balance as liquid rewards"]
                    Rewarded(
                        ::core::primitive::u32,
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 27)]
                    #[doc = "Notify about reward periods that has been paid (collator, payout rounds, any rewards left)"]
                    CollatorRewardsDistributed(
                        runtime_types::sp_runtime::account::AccountId20,
                        runtime_types::parachain_staking::PayoutRounds,
                    ),
                    #[codec(index = 28)]
                    #[doc = "Staking expectations set"]
                    StakeExpectationsSet(
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                        ::core::primitive::u128,
                    ),
                    #[codec(index = 29)]
                    #[doc = "Set total selected candidates to this value [old, new]"]
                    TotalSelectedSet(::core::primitive::u32, ::core::primitive::u32),
                    #[codec(index = 30)]
                    #[doc = "Set collator commission to this value [old, new]"]
                    CollatorCommissionSet(
                        runtime_types::sp_arithmetic::per_things::Perbill,
                        runtime_types::sp_arithmetic::per_things::Perbill,
                    ),
                    #[codec(index = 31)]
                    #[doc = "A candidate updated aggregator"]
                    CandidateAggregatorUpdated(
                        runtime_types::sp_runtime::account::AccountId20,
                        ::core::option::Option<runtime_types::sp_runtime::account::AccountId20>,
                    ),
                    #[codec(index = 32)]
                    #[doc = "An agggregator's metadata has been updated"]
                    AggregatorMetadataUpdated(runtime_types::sp_runtime::account::AccountId20),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum PairedOrLiquidityToken<_0> {
                    #[codec(index = 0)]
                    Paired(_0),
                    #[codec(index = 1)]
                    Liquidity(_0),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct PendingDelegationRequests<_0, _1> {
                    pub requests: ::subxt::ext::subxt_core::utils::KeyedVec<
                        _0,
                        runtime_types::parachain_staking::pallet::DelegationRequest<_0, _1>,
                    >,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RoundCollatorRewardInfoType<_0, _1> {
                    pub collator_reward: _1,
                    pub delegator_rewards: ::subxt::ext::subxt_core::utils::KeyedVec<_0, _1>,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct RoundInfo<_0> {
                    pub current: ::core::primitive::u32,
                    pub first: _0,
                    pub length: ::core::primitive::u32,
                }
            }
            pub mod set {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct OrderedSet<_0>(pub ::subxt::ext::subxt_core::alloc::vec::Vec<_0>);
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum MetadataUpdateAction {
                #[codec(index = 0)]
                ExtendApprovedCollators,
                #[codec(index = 1)]
                RemoveApprovedCollators,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum PayoutRounds {
                #[codec(index = 0)]
                All,
                #[codec(index = 1)]
                Partial(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u32>),
            }
        }
        pub mod primitive_types {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct U256(pub [::core::primitive::u64; 4usize]);
        }
        pub mod rollup_runtime {
            use super::runtime_types;
            pub mod runtime_config {
                use super::runtime_types;
                pub mod config {
                    use super::runtime_types;
                    pub mod pallet_proxy {
                        use super::runtime_types;
                        #[derive(
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                            :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                            :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                            :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                            Clone,
                            Debug,
                            PartialEq,
                        )]
                        #[allow(non_snake_case)]
                        # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                        #[codec(dumb_trait_bound)]
                        #[decode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                        )]
                        #[encode_as_type(
                            crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                        )]
                        pub enum ProxyType {
                            #[codec(index = 0)]
                            AutoCompound,
                        }
                    }
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum OriginCaller {
                #[codec(index = 0)]
                system(
                    runtime_types::frame_support::dispatch::RawOrigin<
                        runtime_types::sp_runtime::account::AccountId20,
                    >,
                ),
                #[codec(index = 63)]
                Council(
                    runtime_types::pallet_collective_mangata::RawOrigin<
                        runtime_types::sp_runtime::account::AccountId20,
                    >,
                ),
                #[codec(index = 2)]
                Void(runtime_types::sp_core::Void),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Runtime;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RuntimeCall {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Call),
                #[codec(index = 2)]
                Timestamp(runtime_types::pallet_timestamp::pallet::Call),
                #[codec(index = 4)]
                Utility(runtime_types::pallet_utility_mangata::pallet::Call),
                #[codec(index = 5)]
                Proxy(runtime_types::pallet_proxy::pallet::Call),
                #[codec(index = 6)]
                Maintenance(runtime_types::pallet_maintenance::pallet::Call),
                #[codec(index = 7)]
                Rolldown(runtime_types::pallet_rolldown::pallet::Call),
                #[codec(index = 8)]
                Metamask(runtime_types::pallet_metamask_signature::pallet::Call),
                #[codec(index = 10)]
                Tokens(runtime_types::orml_tokens::module::Call),
                #[codec(index = 13)]
                Xyk(runtime_types::pallet_xyk::pallet::Call),
                #[codec(index = 14)]
                ProofOfStake(runtime_types::pallet_proof_of_stake::pallet::Call),
                #[codec(index = 15)]
                FeeLock(runtime_types::pallet_fee_lock::pallet::Call),
                #[codec(index = 17)]
                Vesting(runtime_types::pallet_vesting_mangata::pallet::Call),
                #[codec(index = 18)]
                Crowdloan(runtime_types::pallet_crowdloan_rewards::pallet::Call),
                #[codec(index = 19)]
                Issuance(runtime_types::pallet_issuance::pallet::Call),
                #[codec(index = 20)]
                MultiPurposeLiquidity(runtime_types::pallet_multipurpose_liquidity::pallet::Call),
                #[codec(index = 21)]
                Bootstrap(runtime_types::pallet_bootstrap::pallet::Call),
                #[codec(index = 30)]
                ParachainStaking(runtime_types::parachain_staking::pallet::Call),
                #[codec(index = 31)]
                SequencerStaking(runtime_types::pallet_sequencer_staking::pallet::Call),
                #[codec(index = 32)]
                Session(runtime_types::pallet_session::pallet::Call),
                #[codec(index = 34)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Call),
                #[codec(index = 53)]
                AssetRegistry(runtime_types::orml_asset_registry::module::Call),
                #[codec(index = 60)]
                Treasury(runtime_types::pallet_treasury::pallet::Call),
                #[codec(index = 61)]
                Sudo(runtime_types::pallet_sudo_mangata::pallet::Call),
                #[codec(index = 62)]
                SudoOrigin(runtime_types::pallet_sudo_origin::pallet::Call),
                #[codec(index = 63)]
                Council(runtime_types::pallet_collective_mangata::pallet::Call),
                #[codec(index = 64)]
                Identity(runtime_types::pallet_identity::pallet::Call),
                #[codec(index = 65)]
                FoundationMembers(runtime_types::pallet_membership::pallet::Call),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RuntimeError {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Error),
                #[codec(index = 4)]
                Utility(runtime_types::pallet_utility_mangata::pallet::Error),
                #[codec(index = 5)]
                Proxy(runtime_types::pallet_proxy::pallet::Error),
                #[codec(index = 6)]
                Maintenance(runtime_types::pallet_maintenance::pallet::Error),
                #[codec(index = 7)]
                Rolldown(runtime_types::pallet_rolldown::pallet::Error),
                #[codec(index = 8)]
                Metamask(runtime_types::pallet_metamask_signature::pallet::Error),
                #[codec(index = 10)]
                Tokens(runtime_types::orml_tokens::module::Error),
                #[codec(index = 13)]
                Xyk(runtime_types::pallet_xyk::pallet::Error),
                #[codec(index = 14)]
                ProofOfStake(runtime_types::pallet_proof_of_stake::pallet::Error),
                #[codec(index = 15)]
                FeeLock(runtime_types::pallet_fee_lock::pallet::Error),
                #[codec(index = 17)]
                Vesting(runtime_types::pallet_vesting_mangata::pallet::Error),
                #[codec(index = 18)]
                Crowdloan(runtime_types::pallet_crowdloan_rewards::pallet::Error),
                #[codec(index = 19)]
                Issuance(runtime_types::pallet_issuance::pallet::Error),
                #[codec(index = 20)]
                MultiPurposeLiquidity(runtime_types::pallet_multipurpose_liquidity::pallet::Error),
                #[codec(index = 21)]
                Bootstrap(runtime_types::pallet_bootstrap::pallet::Error),
                #[codec(index = 30)]
                ParachainStaking(runtime_types::parachain_staking::pallet::Error),
                #[codec(index = 31)]
                SequencerStaking(runtime_types::pallet_sequencer_staking::pallet::Error),
                #[codec(index = 32)]
                Session(runtime_types::pallet_session::pallet::Error),
                #[codec(index = 34)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Error),
                #[codec(index = 53)]
                AssetRegistry(runtime_types::orml_asset_registry::module::Error),
                #[codec(index = 60)]
                Treasury(runtime_types::pallet_treasury::pallet::Error),
                #[codec(index = 61)]
                Sudo(runtime_types::pallet_sudo_mangata::pallet::Error),
                #[codec(index = 62)]
                SudoOrigin(runtime_types::pallet_sudo_origin::pallet::Error),
                #[codec(index = 63)]
                Council(runtime_types::pallet_collective_mangata::pallet::Error),
                #[codec(index = 64)]
                Identity(runtime_types::pallet_identity::pallet::Error),
                #[codec(index = 65)]
                FoundationMembers(runtime_types::pallet_membership::pallet::Error),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum RuntimeEvent {
                #[codec(index = 0)]
                System(runtime_types::frame_system::pallet::Event),
                #[codec(index = 4)]
                Utility(runtime_types::pallet_utility_mangata::pallet::Event),
                #[codec(index = 5)]
                Proxy(runtime_types::pallet_proxy::pallet::Event),
                #[codec(index = 6)]
                Maintenance(runtime_types::pallet_maintenance::pallet::Event),
                #[codec(index = 7)]
                Rolldown(runtime_types::pallet_rolldown::pallet::Event),
                #[codec(index = 8)]
                Metamask(runtime_types::pallet_metamask_signature::pallet::Event),
                #[codec(index = 10)]
                Tokens(runtime_types::orml_tokens::module::Event),
                #[codec(index = 11)]
                TransactionPayment(runtime_types::pallet_transaction_payment::pallet::Event),
                #[codec(index = 13)]
                Xyk(runtime_types::pallet_xyk::pallet::Event),
                #[codec(index = 14)]
                ProofOfStake(runtime_types::pallet_proof_of_stake::pallet::Event),
                #[codec(index = 15)]
                FeeLock(runtime_types::pallet_fee_lock::pallet::Event),
                #[codec(index = 17)]
                Vesting(runtime_types::pallet_vesting_mangata::pallet::Event),
                #[codec(index = 18)]
                Crowdloan(runtime_types::pallet_crowdloan_rewards::pallet::Event),
                #[codec(index = 19)]
                Issuance(runtime_types::pallet_issuance::pallet::Event),
                #[codec(index = 20)]
                MultiPurposeLiquidity(runtime_types::pallet_multipurpose_liquidity::pallet::Event),
                #[codec(index = 21)]
                Bootstrap(runtime_types::pallet_bootstrap::pallet::Event),
                #[codec(index = 30)]
                ParachainStaking(runtime_types::parachain_staking::pallet::Event),
                #[codec(index = 31)]
                SequencerStaking(runtime_types::pallet_sequencer_staking::pallet::Event),
                #[codec(index = 32)]
                Session(runtime_types::pallet_session::pallet::Event),
                #[codec(index = 34)]
                Grandpa(runtime_types::pallet_grandpa::pallet::Event),
                #[codec(index = 53)]
                AssetRegistry(runtime_types::orml_asset_registry::module::Event),
                #[codec(index = 60)]
                Treasury(runtime_types::pallet_treasury::pallet::Event),
                #[codec(index = 61)]
                Sudo(runtime_types::pallet_sudo_mangata::pallet::Event),
                #[codec(index = 62)]
                SudoOrigin(runtime_types::pallet_sudo_origin::pallet::Event),
                #[codec(index = 63)]
                Council(runtime_types::pallet_collective_mangata::pallet::Event),
                #[codec(index = 64)]
                Identity(runtime_types::pallet_identity::pallet::Event),
                #[codec(index = 65)]
                FoundationMembers(runtime_types::pallet_membership::pallet::Event),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SessionKeys {
                pub aura: runtime_types::sp_consensus_aura::sr25519::app_sr25519::Public,
                pub grandpa: runtime_types::sp_consensus_grandpa::app::Public,
            }
        }
        pub mod sp_arithmetic {
            use super::runtime_types;
            pub mod fixed_point {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct FixedU128(pub ::core::primitive::u128);
            }
            pub mod per_things {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Perbill(pub ::core::primitive::u32);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Percent(pub ::core::primitive::u8);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Permill(pub ::core::primitive::u32);
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum ArithmeticError {
                #[codec(index = 0)]
                Underflow,
                #[codec(index = 1)]
                Overflow,
                #[codec(index = 2)]
                DivisionByZero,
            }
        }
        pub mod sp_consensus_aura {
            use super::runtime_types;
            pub mod sr25519 {
                use super::runtime_types;
                pub mod app_sr25519 {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Public(pub runtime_types::sp_core::sr25519::Public);
                }
            }
        }
        pub mod sp_consensus_grandpa {
            use super::runtime_types;
            pub mod app {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Public(pub runtime_types::sp_core::ed25519::Public);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Signature(pub runtime_types::sp_core::ed25519::Signature);
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Equivocation<_0, _1> {
                #[codec(index = 0)]
                Prevote(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_consensus_grandpa::app::Public,
                        runtime_types::finality_grandpa::Prevote<_0, _1>,
                        runtime_types::sp_consensus_grandpa::app::Signature,
                    >,
                ),
                #[codec(index = 1)]
                Precommit(
                    runtime_types::finality_grandpa::Equivocation<
                        runtime_types::sp_consensus_grandpa::app::Public,
                        runtime_types::finality_grandpa::Precommit<_0, _1>,
                        runtime_types::sp_consensus_grandpa::app::Signature,
                    >,
                ),
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct EquivocationProof<_0, _1> {
                pub set_id: ::core::primitive::u64,
                pub equivocation: runtime_types::sp_consensus_grandpa::Equivocation<_0, _1>,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct OpaqueKeyOwnershipProof(
                pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
            );
        }
        pub mod sp_consensus_slots {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct Slot(pub ::core::primitive::u64);
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: CompactAs,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct SlotDuration(pub ::core::primitive::u64);
        }
        pub mod sp_core {
            use super::runtime_types;
            pub mod crypto {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct KeyTypeId(pub [::core::primitive::u8; 4usize]);
            }
            pub mod ecdsa {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Signature(pub [::core::primitive::u8; 65usize]);
            }
            pub mod ed25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Signature(pub [::core::primitive::u8; 64usize]);
            }
            pub mod seed {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ShufflingSeed {
                    pub seed: ::subxt::ext::subxt_core::utils::H256,
                    pub proof: ::subxt::ext::subxt_core::utils::H512,
                }
            }
            pub mod sr25519 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Public(pub [::core::primitive::u8; 32usize]);
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct OpaqueMetadata(
                pub ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
            );
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum Void {}
        }
        pub mod sp_inherents {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct CheckInherentsResult {
                pub okay: ::core::primitive::bool,
                pub fatal_error: ::core::primitive::bool,
                pub errors: runtime_types::sp_inherents::InherentData,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct InherentData {
                pub data: ::subxt::ext::subxt_core::utils::KeyedVec<
                    [::core::primitive::u8; 8usize],
                    ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                >,
            }
        }
        pub mod sp_runtime {
            use super::runtime_types;
            pub mod account {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct AccountId20(pub [::core::primitive::u8; 20usize]);
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct EthereumSignature(pub runtime_types::sp_core::ecdsa::Signature);
            }
            pub mod generic {
                use super::runtime_types;
                pub mod block {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Block<_0, _1> {
                        pub header: _0,
                        pub extrinsics: ::subxt::ext::subxt_core::alloc::vec::Vec<_1>,
                    }
                }
                pub mod digest {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Digest {
                        pub logs: ::subxt::ext::subxt_core::alloc::vec::Vec<
                            runtime_types::sp_runtime::generic::digest::DigestItem,
                        >,
                    }
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum DigestItem {
                        #[codec(index = 6)]
                        PreRuntime(
                            [::core::primitive::u8; 4usize],
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 4)]
                        Consensus(
                            [::core::primitive::u8; 4usize],
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 5)]
                        Seal(
                            [::core::primitive::u8; 4usize],
                            ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                        ),
                        #[codec(index = 0)]
                        Other(::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>),
                        #[codec(index = 8)]
                        RuntimeEnvironmentUpdated,
                    }
                }
                pub mod era {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub enum Era {
                        #[codec(index = 0)]
                        Immortal,
                        #[codec(index = 1)]
                        Mortal1(::core::primitive::u8),
                        #[codec(index = 2)]
                        Mortal2(::core::primitive::u8),
                        #[codec(index = 3)]
                        Mortal3(::core::primitive::u8),
                        #[codec(index = 4)]
                        Mortal4(::core::primitive::u8),
                        #[codec(index = 5)]
                        Mortal5(::core::primitive::u8),
                        #[codec(index = 6)]
                        Mortal6(::core::primitive::u8),
                        #[codec(index = 7)]
                        Mortal7(::core::primitive::u8),
                        #[codec(index = 8)]
                        Mortal8(::core::primitive::u8),
                        #[codec(index = 9)]
                        Mortal9(::core::primitive::u8),
                        #[codec(index = 10)]
                        Mortal10(::core::primitive::u8),
                        #[codec(index = 11)]
                        Mortal11(::core::primitive::u8),
                        #[codec(index = 12)]
                        Mortal12(::core::primitive::u8),
                        #[codec(index = 13)]
                        Mortal13(::core::primitive::u8),
                        #[codec(index = 14)]
                        Mortal14(::core::primitive::u8),
                        #[codec(index = 15)]
                        Mortal15(::core::primitive::u8),
                        #[codec(index = 16)]
                        Mortal16(::core::primitive::u8),
                        #[codec(index = 17)]
                        Mortal17(::core::primitive::u8),
                        #[codec(index = 18)]
                        Mortal18(::core::primitive::u8),
                        #[codec(index = 19)]
                        Mortal19(::core::primitive::u8),
                        #[codec(index = 20)]
                        Mortal20(::core::primitive::u8),
                        #[codec(index = 21)]
                        Mortal21(::core::primitive::u8),
                        #[codec(index = 22)]
                        Mortal22(::core::primitive::u8),
                        #[codec(index = 23)]
                        Mortal23(::core::primitive::u8),
                        #[codec(index = 24)]
                        Mortal24(::core::primitive::u8),
                        #[codec(index = 25)]
                        Mortal25(::core::primitive::u8),
                        #[codec(index = 26)]
                        Mortal26(::core::primitive::u8),
                        #[codec(index = 27)]
                        Mortal27(::core::primitive::u8),
                        #[codec(index = 28)]
                        Mortal28(::core::primitive::u8),
                        #[codec(index = 29)]
                        Mortal29(::core::primitive::u8),
                        #[codec(index = 30)]
                        Mortal30(::core::primitive::u8),
                        #[codec(index = 31)]
                        Mortal31(::core::primitive::u8),
                        #[codec(index = 32)]
                        Mortal32(::core::primitive::u8),
                        #[codec(index = 33)]
                        Mortal33(::core::primitive::u8),
                        #[codec(index = 34)]
                        Mortal34(::core::primitive::u8),
                        #[codec(index = 35)]
                        Mortal35(::core::primitive::u8),
                        #[codec(index = 36)]
                        Mortal36(::core::primitive::u8),
                        #[codec(index = 37)]
                        Mortal37(::core::primitive::u8),
                        #[codec(index = 38)]
                        Mortal38(::core::primitive::u8),
                        #[codec(index = 39)]
                        Mortal39(::core::primitive::u8),
                        #[codec(index = 40)]
                        Mortal40(::core::primitive::u8),
                        #[codec(index = 41)]
                        Mortal41(::core::primitive::u8),
                        #[codec(index = 42)]
                        Mortal42(::core::primitive::u8),
                        #[codec(index = 43)]
                        Mortal43(::core::primitive::u8),
                        #[codec(index = 44)]
                        Mortal44(::core::primitive::u8),
                        #[codec(index = 45)]
                        Mortal45(::core::primitive::u8),
                        #[codec(index = 46)]
                        Mortal46(::core::primitive::u8),
                        #[codec(index = 47)]
                        Mortal47(::core::primitive::u8),
                        #[codec(index = 48)]
                        Mortal48(::core::primitive::u8),
                        #[codec(index = 49)]
                        Mortal49(::core::primitive::u8),
                        #[codec(index = 50)]
                        Mortal50(::core::primitive::u8),
                        #[codec(index = 51)]
                        Mortal51(::core::primitive::u8),
                        #[codec(index = 52)]
                        Mortal52(::core::primitive::u8),
                        #[codec(index = 53)]
                        Mortal53(::core::primitive::u8),
                        #[codec(index = 54)]
                        Mortal54(::core::primitive::u8),
                        #[codec(index = 55)]
                        Mortal55(::core::primitive::u8),
                        #[codec(index = 56)]
                        Mortal56(::core::primitive::u8),
                        #[codec(index = 57)]
                        Mortal57(::core::primitive::u8),
                        #[codec(index = 58)]
                        Mortal58(::core::primitive::u8),
                        #[codec(index = 59)]
                        Mortal59(::core::primitive::u8),
                        #[codec(index = 60)]
                        Mortal60(::core::primitive::u8),
                        #[codec(index = 61)]
                        Mortal61(::core::primitive::u8),
                        #[codec(index = 62)]
                        Mortal62(::core::primitive::u8),
                        #[codec(index = 63)]
                        Mortal63(::core::primitive::u8),
                        #[codec(index = 64)]
                        Mortal64(::core::primitive::u8),
                        #[codec(index = 65)]
                        Mortal65(::core::primitive::u8),
                        #[codec(index = 66)]
                        Mortal66(::core::primitive::u8),
                        #[codec(index = 67)]
                        Mortal67(::core::primitive::u8),
                        #[codec(index = 68)]
                        Mortal68(::core::primitive::u8),
                        #[codec(index = 69)]
                        Mortal69(::core::primitive::u8),
                        #[codec(index = 70)]
                        Mortal70(::core::primitive::u8),
                        #[codec(index = 71)]
                        Mortal71(::core::primitive::u8),
                        #[codec(index = 72)]
                        Mortal72(::core::primitive::u8),
                        #[codec(index = 73)]
                        Mortal73(::core::primitive::u8),
                        #[codec(index = 74)]
                        Mortal74(::core::primitive::u8),
                        #[codec(index = 75)]
                        Mortal75(::core::primitive::u8),
                        #[codec(index = 76)]
                        Mortal76(::core::primitive::u8),
                        #[codec(index = 77)]
                        Mortal77(::core::primitive::u8),
                        #[codec(index = 78)]
                        Mortal78(::core::primitive::u8),
                        #[codec(index = 79)]
                        Mortal79(::core::primitive::u8),
                        #[codec(index = 80)]
                        Mortal80(::core::primitive::u8),
                        #[codec(index = 81)]
                        Mortal81(::core::primitive::u8),
                        #[codec(index = 82)]
                        Mortal82(::core::primitive::u8),
                        #[codec(index = 83)]
                        Mortal83(::core::primitive::u8),
                        #[codec(index = 84)]
                        Mortal84(::core::primitive::u8),
                        #[codec(index = 85)]
                        Mortal85(::core::primitive::u8),
                        #[codec(index = 86)]
                        Mortal86(::core::primitive::u8),
                        #[codec(index = 87)]
                        Mortal87(::core::primitive::u8),
                        #[codec(index = 88)]
                        Mortal88(::core::primitive::u8),
                        #[codec(index = 89)]
                        Mortal89(::core::primitive::u8),
                        #[codec(index = 90)]
                        Mortal90(::core::primitive::u8),
                        #[codec(index = 91)]
                        Mortal91(::core::primitive::u8),
                        #[codec(index = 92)]
                        Mortal92(::core::primitive::u8),
                        #[codec(index = 93)]
                        Mortal93(::core::primitive::u8),
                        #[codec(index = 94)]
                        Mortal94(::core::primitive::u8),
                        #[codec(index = 95)]
                        Mortal95(::core::primitive::u8),
                        #[codec(index = 96)]
                        Mortal96(::core::primitive::u8),
                        #[codec(index = 97)]
                        Mortal97(::core::primitive::u8),
                        #[codec(index = 98)]
                        Mortal98(::core::primitive::u8),
                        #[codec(index = 99)]
                        Mortal99(::core::primitive::u8),
                        #[codec(index = 100)]
                        Mortal100(::core::primitive::u8),
                        #[codec(index = 101)]
                        Mortal101(::core::primitive::u8),
                        #[codec(index = 102)]
                        Mortal102(::core::primitive::u8),
                        #[codec(index = 103)]
                        Mortal103(::core::primitive::u8),
                        #[codec(index = 104)]
                        Mortal104(::core::primitive::u8),
                        #[codec(index = 105)]
                        Mortal105(::core::primitive::u8),
                        #[codec(index = 106)]
                        Mortal106(::core::primitive::u8),
                        #[codec(index = 107)]
                        Mortal107(::core::primitive::u8),
                        #[codec(index = 108)]
                        Mortal108(::core::primitive::u8),
                        #[codec(index = 109)]
                        Mortal109(::core::primitive::u8),
                        #[codec(index = 110)]
                        Mortal110(::core::primitive::u8),
                        #[codec(index = 111)]
                        Mortal111(::core::primitive::u8),
                        #[codec(index = 112)]
                        Mortal112(::core::primitive::u8),
                        #[codec(index = 113)]
                        Mortal113(::core::primitive::u8),
                        #[codec(index = 114)]
                        Mortal114(::core::primitive::u8),
                        #[codec(index = 115)]
                        Mortal115(::core::primitive::u8),
                        #[codec(index = 116)]
                        Mortal116(::core::primitive::u8),
                        #[codec(index = 117)]
                        Mortal117(::core::primitive::u8),
                        #[codec(index = 118)]
                        Mortal118(::core::primitive::u8),
                        #[codec(index = 119)]
                        Mortal119(::core::primitive::u8),
                        #[codec(index = 120)]
                        Mortal120(::core::primitive::u8),
                        #[codec(index = 121)]
                        Mortal121(::core::primitive::u8),
                        #[codec(index = 122)]
                        Mortal122(::core::primitive::u8),
                        #[codec(index = 123)]
                        Mortal123(::core::primitive::u8),
                        #[codec(index = 124)]
                        Mortal124(::core::primitive::u8),
                        #[codec(index = 125)]
                        Mortal125(::core::primitive::u8),
                        #[codec(index = 126)]
                        Mortal126(::core::primitive::u8),
                        #[codec(index = 127)]
                        Mortal127(::core::primitive::u8),
                        #[codec(index = 128)]
                        Mortal128(::core::primitive::u8),
                        #[codec(index = 129)]
                        Mortal129(::core::primitive::u8),
                        #[codec(index = 130)]
                        Mortal130(::core::primitive::u8),
                        #[codec(index = 131)]
                        Mortal131(::core::primitive::u8),
                        #[codec(index = 132)]
                        Mortal132(::core::primitive::u8),
                        #[codec(index = 133)]
                        Mortal133(::core::primitive::u8),
                        #[codec(index = 134)]
                        Mortal134(::core::primitive::u8),
                        #[codec(index = 135)]
                        Mortal135(::core::primitive::u8),
                        #[codec(index = 136)]
                        Mortal136(::core::primitive::u8),
                        #[codec(index = 137)]
                        Mortal137(::core::primitive::u8),
                        #[codec(index = 138)]
                        Mortal138(::core::primitive::u8),
                        #[codec(index = 139)]
                        Mortal139(::core::primitive::u8),
                        #[codec(index = 140)]
                        Mortal140(::core::primitive::u8),
                        #[codec(index = 141)]
                        Mortal141(::core::primitive::u8),
                        #[codec(index = 142)]
                        Mortal142(::core::primitive::u8),
                        #[codec(index = 143)]
                        Mortal143(::core::primitive::u8),
                        #[codec(index = 144)]
                        Mortal144(::core::primitive::u8),
                        #[codec(index = 145)]
                        Mortal145(::core::primitive::u8),
                        #[codec(index = 146)]
                        Mortal146(::core::primitive::u8),
                        #[codec(index = 147)]
                        Mortal147(::core::primitive::u8),
                        #[codec(index = 148)]
                        Mortal148(::core::primitive::u8),
                        #[codec(index = 149)]
                        Mortal149(::core::primitive::u8),
                        #[codec(index = 150)]
                        Mortal150(::core::primitive::u8),
                        #[codec(index = 151)]
                        Mortal151(::core::primitive::u8),
                        #[codec(index = 152)]
                        Mortal152(::core::primitive::u8),
                        #[codec(index = 153)]
                        Mortal153(::core::primitive::u8),
                        #[codec(index = 154)]
                        Mortal154(::core::primitive::u8),
                        #[codec(index = 155)]
                        Mortal155(::core::primitive::u8),
                        #[codec(index = 156)]
                        Mortal156(::core::primitive::u8),
                        #[codec(index = 157)]
                        Mortal157(::core::primitive::u8),
                        #[codec(index = 158)]
                        Mortal158(::core::primitive::u8),
                        #[codec(index = 159)]
                        Mortal159(::core::primitive::u8),
                        #[codec(index = 160)]
                        Mortal160(::core::primitive::u8),
                        #[codec(index = 161)]
                        Mortal161(::core::primitive::u8),
                        #[codec(index = 162)]
                        Mortal162(::core::primitive::u8),
                        #[codec(index = 163)]
                        Mortal163(::core::primitive::u8),
                        #[codec(index = 164)]
                        Mortal164(::core::primitive::u8),
                        #[codec(index = 165)]
                        Mortal165(::core::primitive::u8),
                        #[codec(index = 166)]
                        Mortal166(::core::primitive::u8),
                        #[codec(index = 167)]
                        Mortal167(::core::primitive::u8),
                        #[codec(index = 168)]
                        Mortal168(::core::primitive::u8),
                        #[codec(index = 169)]
                        Mortal169(::core::primitive::u8),
                        #[codec(index = 170)]
                        Mortal170(::core::primitive::u8),
                        #[codec(index = 171)]
                        Mortal171(::core::primitive::u8),
                        #[codec(index = 172)]
                        Mortal172(::core::primitive::u8),
                        #[codec(index = 173)]
                        Mortal173(::core::primitive::u8),
                        #[codec(index = 174)]
                        Mortal174(::core::primitive::u8),
                        #[codec(index = 175)]
                        Mortal175(::core::primitive::u8),
                        #[codec(index = 176)]
                        Mortal176(::core::primitive::u8),
                        #[codec(index = 177)]
                        Mortal177(::core::primitive::u8),
                        #[codec(index = 178)]
                        Mortal178(::core::primitive::u8),
                        #[codec(index = 179)]
                        Mortal179(::core::primitive::u8),
                        #[codec(index = 180)]
                        Mortal180(::core::primitive::u8),
                        #[codec(index = 181)]
                        Mortal181(::core::primitive::u8),
                        #[codec(index = 182)]
                        Mortal182(::core::primitive::u8),
                        #[codec(index = 183)]
                        Mortal183(::core::primitive::u8),
                        #[codec(index = 184)]
                        Mortal184(::core::primitive::u8),
                        #[codec(index = 185)]
                        Mortal185(::core::primitive::u8),
                        #[codec(index = 186)]
                        Mortal186(::core::primitive::u8),
                        #[codec(index = 187)]
                        Mortal187(::core::primitive::u8),
                        #[codec(index = 188)]
                        Mortal188(::core::primitive::u8),
                        #[codec(index = 189)]
                        Mortal189(::core::primitive::u8),
                        #[codec(index = 190)]
                        Mortal190(::core::primitive::u8),
                        #[codec(index = 191)]
                        Mortal191(::core::primitive::u8),
                        #[codec(index = 192)]
                        Mortal192(::core::primitive::u8),
                        #[codec(index = 193)]
                        Mortal193(::core::primitive::u8),
                        #[codec(index = 194)]
                        Mortal194(::core::primitive::u8),
                        #[codec(index = 195)]
                        Mortal195(::core::primitive::u8),
                        #[codec(index = 196)]
                        Mortal196(::core::primitive::u8),
                        #[codec(index = 197)]
                        Mortal197(::core::primitive::u8),
                        #[codec(index = 198)]
                        Mortal198(::core::primitive::u8),
                        #[codec(index = 199)]
                        Mortal199(::core::primitive::u8),
                        #[codec(index = 200)]
                        Mortal200(::core::primitive::u8),
                        #[codec(index = 201)]
                        Mortal201(::core::primitive::u8),
                        #[codec(index = 202)]
                        Mortal202(::core::primitive::u8),
                        #[codec(index = 203)]
                        Mortal203(::core::primitive::u8),
                        #[codec(index = 204)]
                        Mortal204(::core::primitive::u8),
                        #[codec(index = 205)]
                        Mortal205(::core::primitive::u8),
                        #[codec(index = 206)]
                        Mortal206(::core::primitive::u8),
                        #[codec(index = 207)]
                        Mortal207(::core::primitive::u8),
                        #[codec(index = 208)]
                        Mortal208(::core::primitive::u8),
                        #[codec(index = 209)]
                        Mortal209(::core::primitive::u8),
                        #[codec(index = 210)]
                        Mortal210(::core::primitive::u8),
                        #[codec(index = 211)]
                        Mortal211(::core::primitive::u8),
                        #[codec(index = 212)]
                        Mortal212(::core::primitive::u8),
                        #[codec(index = 213)]
                        Mortal213(::core::primitive::u8),
                        #[codec(index = 214)]
                        Mortal214(::core::primitive::u8),
                        #[codec(index = 215)]
                        Mortal215(::core::primitive::u8),
                        #[codec(index = 216)]
                        Mortal216(::core::primitive::u8),
                        #[codec(index = 217)]
                        Mortal217(::core::primitive::u8),
                        #[codec(index = 218)]
                        Mortal218(::core::primitive::u8),
                        #[codec(index = 219)]
                        Mortal219(::core::primitive::u8),
                        #[codec(index = 220)]
                        Mortal220(::core::primitive::u8),
                        #[codec(index = 221)]
                        Mortal221(::core::primitive::u8),
                        #[codec(index = 222)]
                        Mortal222(::core::primitive::u8),
                        #[codec(index = 223)]
                        Mortal223(::core::primitive::u8),
                        #[codec(index = 224)]
                        Mortal224(::core::primitive::u8),
                        #[codec(index = 225)]
                        Mortal225(::core::primitive::u8),
                        #[codec(index = 226)]
                        Mortal226(::core::primitive::u8),
                        #[codec(index = 227)]
                        Mortal227(::core::primitive::u8),
                        #[codec(index = 228)]
                        Mortal228(::core::primitive::u8),
                        #[codec(index = 229)]
                        Mortal229(::core::primitive::u8),
                        #[codec(index = 230)]
                        Mortal230(::core::primitive::u8),
                        #[codec(index = 231)]
                        Mortal231(::core::primitive::u8),
                        #[codec(index = 232)]
                        Mortal232(::core::primitive::u8),
                        #[codec(index = 233)]
                        Mortal233(::core::primitive::u8),
                        #[codec(index = 234)]
                        Mortal234(::core::primitive::u8),
                        #[codec(index = 235)]
                        Mortal235(::core::primitive::u8),
                        #[codec(index = 236)]
                        Mortal236(::core::primitive::u8),
                        #[codec(index = 237)]
                        Mortal237(::core::primitive::u8),
                        #[codec(index = 238)]
                        Mortal238(::core::primitive::u8),
                        #[codec(index = 239)]
                        Mortal239(::core::primitive::u8),
                        #[codec(index = 240)]
                        Mortal240(::core::primitive::u8),
                        #[codec(index = 241)]
                        Mortal241(::core::primitive::u8),
                        #[codec(index = 242)]
                        Mortal242(::core::primitive::u8),
                        #[codec(index = 243)]
                        Mortal243(::core::primitive::u8),
                        #[codec(index = 244)]
                        Mortal244(::core::primitive::u8),
                        #[codec(index = 245)]
                        Mortal245(::core::primitive::u8),
                        #[codec(index = 246)]
                        Mortal246(::core::primitive::u8),
                        #[codec(index = 247)]
                        Mortal247(::core::primitive::u8),
                        #[codec(index = 248)]
                        Mortal248(::core::primitive::u8),
                        #[codec(index = 249)]
                        Mortal249(::core::primitive::u8),
                        #[codec(index = 250)]
                        Mortal250(::core::primitive::u8),
                        #[codec(index = 251)]
                        Mortal251(::core::primitive::u8),
                        #[codec(index = 252)]
                        Mortal252(::core::primitive::u8),
                        #[codec(index = 253)]
                        Mortal253(::core::primitive::u8),
                        #[codec(index = 254)]
                        Mortal254(::core::primitive::u8),
                        #[codec(index = 255)]
                        Mortal255(::core::primitive::u8),
                    }
                }
                pub mod header_ver {
                    use super::runtime_types;
                    #[derive(
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                        :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                        :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                        :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                        Clone,
                        Debug,
                        PartialEq,
                    )]
                    #[allow(non_snake_case)]
                    # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                    #[codec(dumb_trait_bound)]
                    #[decode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                    )]
                    #[encode_as_type(
                        crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                    )]
                    pub struct Header<_0> {
                        pub parent_hash: ::subxt::ext::subxt_core::utils::H256,
                        #[codec(compact)]
                        pub number: _0,
                        pub state_root: ::subxt::ext::subxt_core::utils::H256,
                        pub extrinsics_root: ::subxt::ext::subxt_core::utils::H256,
                        pub digest: runtime_types::sp_runtime::generic::digest::Digest,
                        pub seed: runtime_types::sp_core::seed::ShufflingSeed,
                        pub count: _0,
                    }
                }
            }
            pub mod transaction_validity {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum InvalidTransaction {
                    #[codec(index = 0)]
                    Call,
                    #[codec(index = 1)]
                    Payment,
                    #[codec(index = 2)]
                    NonNativePayment,
                    #[codec(index = 3)]
                    NonNativePaymentCalculation,
                    #[codec(index = 4)]
                    Future,
                    #[codec(index = 5)]
                    Stale,
                    #[codec(index = 6)]
                    BadProof,
                    #[codec(index = 7)]
                    AncientBirthBlock,
                    #[codec(index = 8)]
                    ExhaustsResources,
                    #[codec(index = 9)]
                    Custom(::core::primitive::u8),
                    #[codec(index = 10)]
                    BadMandatory,
                    #[codec(index = 11)]
                    MandatoryValidation,
                    #[codec(index = 12)]
                    BadSigner,
                    #[codec(index = 13)]
                    SwapPrevalidation,
                    #[codec(index = 14)]
                    ProcessFeeLock,
                    #[codec(index = 15)]
                    UnlockFee,
                    #[codec(index = 16)]
                    TippingNotAllowedForSwaps,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum TransactionSource {
                    #[codec(index = 0)]
                    InBlock,
                    #[codec(index = 1)]
                    Local,
                    #[codec(index = 2)]
                    External,
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum TransactionValidityError {
                    #[codec(index = 0)]
                    Invalid(runtime_types::sp_runtime::transaction_validity::InvalidTransaction),
                    #[codec(index = 1)]
                    Unknown(runtime_types::sp_runtime::transaction_validity::UnknownTransaction),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub enum UnknownTransaction {
                    #[codec(index = 0)]
                    CannotLookup,
                    #[codec(index = 1)]
                    NoUnsignedValidator,
                    #[codec(index = 2)]
                    Custom(::core::primitive::u8),
                }
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct ValidTransaction {
                    pub priority: ::core::primitive::u64,
                    pub requires: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >,
                    pub provides: ::subxt::ext::subxt_core::alloc::vec::Vec<
                        ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                    >,
                    pub longevity: ::core::primitive::u64,
                    pub propagate: ::core::primitive::bool,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum DispatchError {
                #[codec(index = 0)]
                Other,
                #[codec(index = 1)]
                CannotLookup,
                #[codec(index = 2)]
                BadOrigin,
                #[codec(index = 3)]
                Module(runtime_types::sp_runtime::ModuleError),
                #[codec(index = 4)]
                ConsumerRemaining,
                #[codec(index = 5)]
                NoProviders,
                #[codec(index = 6)]
                TooManyConsumers,
                #[codec(index = 7)]
                Token(runtime_types::sp_runtime::TokenError),
                #[codec(index = 8)]
                Arithmetic(runtime_types::sp_arithmetic::ArithmeticError),
                #[codec(index = 9)]
                Transactional(runtime_types::sp_runtime::TransactionalError),
                #[codec(index = 10)]
                Exhausted,
                #[codec(index = 11)]
                Corruption,
                #[codec(index = 12)]
                Unavailable,
                #[codec(index = 13)]
                RootNotAllowed,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum ExtrinsicInclusionMode {
                #[codec(index = 0)]
                AllExtrinsics,
                #[codec(index = 1)]
                OnlyInherents,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct ModuleError {
                pub index: ::core::primitive::u8,
                pub error: [::core::primitive::u8; 4usize],
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum TokenError {
                #[codec(index = 0)]
                FundsUnavailable,
                #[codec(index = 1)]
                OnlyProvider,
                #[codec(index = 2)]
                BelowMinimum,
                #[codec(index = 3)]
                CannotCreate,
                #[codec(index = 4)]
                UnknownAsset,
                #[codec(index = 5)]
                Frozen,
                #[codec(index = 6)]
                Unsupported,
                #[codec(index = 7)]
                CannotCreateHold,
                #[codec(index = 8)]
                NotExpendable,
                #[codec(index = 9)]
                Blocked,
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub enum TransactionalError {
                #[codec(index = 0)]
                LimitReached,
                #[codec(index = 1)]
                NoLayer,
            }
        }
        pub mod sp_version {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RuntimeVersion {
                pub spec_name: ::subxt::ext::subxt_core::alloc::string::String,
                pub impl_name: ::subxt::ext::subxt_core::alloc::string::String,
                pub authoring_version: ::core::primitive::u32,
                pub spec_version: ::core::primitive::u32,
                pub impl_version: ::core::primitive::u32,
                pub apis: ::subxt::ext::subxt_core::alloc::vec::Vec<(
                    [::core::primitive::u8; 8usize],
                    ::core::primitive::u32,
                )>,
                pub transaction_version: ::core::primitive::u32,
                pub state_version: ::core::primitive::u8,
            }
        }
        pub mod sp_weights {
            use super::runtime_types;
            pub mod weight_v2 {
                use super::runtime_types;
                #[derive(
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                    :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                    :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                    :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                    Clone,
                    Debug,
                    PartialEq,
                )]
                #[allow(non_snake_case)]
                # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
                #[codec(dumb_trait_bound)]
                #[decode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode"
                )]
                #[encode_as_type(
                    crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode"
                )]
                pub struct Weight {
                    #[codec(compact)]
                    pub ref_time: ::core::primitive::u64,
                    #[codec(compact)]
                    pub proof_size: ::core::primitive::u64,
                }
            }
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RuntimeDbWeight {
                pub read: ::core::primitive::u64,
                pub write: ::core::primitive::u64,
            }
        }
        pub mod xyk_runtime_api {
            use super::runtime_types;
            #[derive(
                :: subxt :: ext :: subxt_core :: ext :: codec :: Decode,
                :: subxt :: ext :: subxt_core :: ext :: codec :: Encode,
                :: subxt :: ext :: subxt_core :: ext :: scale_decode :: DecodeAsType,
                :: subxt :: ext :: subxt_core :: ext :: scale_encode :: EncodeAsType,
                Clone,
                Debug,
                PartialEq,
            )]
            #[allow(non_snake_case)]
            # [codec (crate = :: subxt :: ext :: subxt_core :: ext :: codec)]
            #[codec(dumb_trait_bound)]
            #[decode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_decode")]
            #[encode_as_type(crate_path = ":: subxt :: ext :: subxt_core :: ext :: scale_encode")]
            pub struct RpcAssetMetadata<_0> {
                pub token_id: _0,
                pub decimals: ::core::primitive::u32,
                pub name: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
                pub symbol: ::subxt::ext::subxt_core::alloc::vec::Vec<::core::primitive::u8>,
            }
        }
    }
}
