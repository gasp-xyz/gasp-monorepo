language: typescript
type: application

toolchain:
  node:
    version: 18.20.4

fileGroups:
  sources:
    - 'src/**/*'
    - 'package.json'
    - 'tsconfig.json'
    - '.env'
    - '.env.template'
  tests:
    - 'tests/**/*'
    - 'vitest.config.ts'
    - 'env.test'

env:
  SERVICE_NAME: ferry-deposit
  IMAGE_BUILD_REPOSITORY: europe-docker.pkg.dev/direct-pixel-353917/gaspxyz/ferry-deposit
  DOCKERHUB_REPOSITORY: gaspxyz/ferry-deposit

tasks:
  build:
    command: yarn build
    inputs: ['@globs(sources)']
    outputs: ['build']
  
  build-image-local:
    command: docker buildx build -t gaspxyz/ferry-deposit:local -f Dockerfile --load .
    inputs: ['@globs(sources)', 'Dockerfile', '.dockerignore']

  buildkit-build-and-push-image-digests:
    command: >
      docker buildx build --platform linux/amd64,linux/arm64
      --cache-from type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache
      --cache-to type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache,mode=max
      --output type=image,push=true,push-by-digest=true,name=${IMAGE_BUILD_REPOSITORY}
      --metadata-file ${SERVICE_NAME}-buildkit-metadata.json ./
    inputs: ["@globs(sources)", "Dockerfile", '.dockerignore']
    outputs: ['${SERVICE_NAME}-buildkit-metadata.json']
    options:
      outputStyle: stream
      cache: true
      internal: true
      retryCount: 3

  build-image-ci:
    script: |
      set -ex
      IMAGE_DIGEST=$(jq -r '."containerimage.digest"' ${SERVICE_NAME}-buildkit-metadata.json)
  
      docker buildx imagetools create \
        --tag ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci} \
        --tag ${DOCKERHUB_REPOSITORY}:${IMAGE_TAG:-ci} \
        ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST}
  
      echo "Successfully created ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci} from existing digests"
    deps: ['buildkit-build-and-push-image-digests']
    inputs: ['${SERVICE_NAME}-buildkit-metadata.json']
    options:
      cache: false

  # lint:
  #   command: 'yarn lint'
  #   inputs: ['@globs(sources)', '@globs(tests)', 'biome.json']

  release:
    command: 'yarn run release'
    options:
      cache: false
      runInCI: false
