// Code generated - DO NOT EDIT.
// This file is a generated binding and any manual changes will be lost.

package contractMangataServiceManager

import (
	"errors"
	"math/big"
	"strings"

	ethereum "github.com/ethereum/go-ethereum"
	"github.com/ethereum/go-ethereum/accounts/abi"
	"github.com/ethereum/go-ethereum/accounts/abi/bind"
	"github.com/ethereum/go-ethereum/common"
	"github.com/ethereum/go-ethereum/core/types"
	"github.com/ethereum/go-ethereum/event"
)

// Reference imports to suppress errors if they are not otherwise used.
var (
	_ = errors.New
	_ = big.NewInt
	_ = strings.NewReader
	_ = ethereum.NotFound
	_ = bind.Bind
	_ = common.Big1
	_ = types.BloomLookup
	_ = event.NewSubscription
	_ = abi.ConvertType
)

// BN254G1Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G1Point struct {
	X *big.Int
	Y *big.Int
}

// BN254G2Point is an auto generated low-level Go binding around an user-defined struct.
type BN254G2Point struct {
	X [2]*big.Int
	Y [2]*big.Int
}

// IBLSSignatureCheckerNonSignerStakesAndSignature is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerNonSignerStakesAndSignature struct {
	NonSignerQuorumBitmapIndices []uint32
	NonSignerPubkeys             []BN254G1Point
	QuorumApks                   []BN254G1Point
	ApkG2                        BN254G2Point
	Sigma                        BN254G1Point
	QuorumApkIndices             []uint32
	TotalStakeIndices            []uint32
	NonSignerStakeIndices        [][]uint32
}

// IBLSSignatureCheckerQuorumStakeTotals is an auto generated low-level Go binding around an user-defined struct.
type IBLSSignatureCheckerQuorumStakeTotals struct {
	SignedStakeForQuorum []*big.Int
	TotalStakeForQuorum  []*big.Int
}

// ContractMangataServiceManagerMetaData contains all meta data concerning the ContractMangataServiceManager contract.
var ContractMangataServiceManagerMetaData = &bind.MetaData{
	ABI: "[{\"inputs\":[{\"internalType\":\"contractIBLSRegistryCoordinatorWithIndices\",\"name\":\"_registryCoordinator\",\"type\":\"address\"},{\"internalType\":\"contractISlasher\",\"name\":\"_slasher\",\"type\":\"address\"},{\"internalType\":\"contractIMangataTaskManager\",\"name\":\"_taskManager\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"contractIPauserRegistry\",\"name\":\"pauserRegistry\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"contractIPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"PauserRegistrySet\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"blsPubkeyRegistry\",\"outputs\":[{\"internalType\":\"contractIBLSPubkeyRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"},{\"internalType\":\"uint32\",\"name\":\"referenceBlockNumber\",\"type\":\"uint32\"},{\"components\":[{\"internalType\":\"uint32[]\",\"name\":\"nonSignerQuorumBitmapIndices\",\"type\":\"uint32[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"nonSignerPubkeys\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point[]\",\"name\":\"quorumApks\",\"type\":\"tuple[]\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"},{\"internalType\":\"uint32[]\",\"name\":\"quorumApkIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[]\",\"name\":\"totalStakeIndices\",\"type\":\"uint32[]\"},{\"internalType\":\"uint32[][]\",\"name\":\"nonSignerStakeIndices\",\"type\":\"uint32[][]\"}],\"internalType\":\"structIBLSSignatureChecker.NonSignerStakesAndSignature\",\"name\":\"nonSignerStakesAndSignature\",\"type\":\"tuple\"}],\"name\":\"checkSignatures\",\"outputs\":[{\"components\":[{\"internalType\":\"uint96[]\",\"name\":\"signedStakeForQuorum\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"totalStakeForQuorum\",\"type\":\"uint96[]\"}],\"internalType\":\"structIBLSSignatureChecker.QuorumStakeTotals\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operatorAddr\",\"type\":\"address\"}],\"name\":\"freezeOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"_pauserRegistry\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"initialOwner\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauseAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"index\",\"type\":\"uint8\"}],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pauserRegistry\",\"outputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"contractIRegistryCoordinator\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contractIPauserRegistry\",\"name\":\"newPauserRegistry\",\"type\":\"address\"}],\"name\":\"setPauserRegistry\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"slasher\",\"outputs\":[{\"internalType\":\"contractISlasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakeRegistry\",\"outputs\":[{\"internalType\":\"contractIStakeRegistry\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"taskManager\",\"outputs\":[{\"internalType\":\"contractIMangataTaskManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"msgHash\",\"type\":\"bytes32\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"apk\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"X\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"Y\",\"type\":\"uint256[2]\"}],\"internalType\":\"structBN254.G2Point\",\"name\":\"apkG2\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"X\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"Y\",\"type\":\"uint256\"}],\"internalType\":\"structBN254.G1Point\",\"name\":\"sigma\",\"type\":\"tuple\"}],\"name\":\"trySignatureAndApkVerification\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"pairingSuccessful\",\"type\":\"bool\"},{\"internalType\":\"bool\",\"name\":\"siganatureIsValid\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"newPausedStatus\",\"type\":\"uint256\"}],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}]",
	Bin: "0x6101206040523480156200001257600080fd5b5060405162002ede38038062002ede833981016040819052620000359162000246565b828281806001600160a01b03166080816001600160a01b031681525050806001600160a01b031663683048356040518163ffffffff1660e01b8152600401602060405180830381865afa15801562000091573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620000b791906200029a565b6001600160a01b031660a0816001600160a01b031681525050806001600160a01b0316633561deb16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200010f573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200013591906200029a565b6001600160a01b0390811660c052821660e05250620001536200016b565b50506001600160a01b03166101005250620002c19050565b600054610100900460ff1615620001d85760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156200022b576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b6001600160a01b03811681146200024357600080fd5b50565b6000806000606084860312156200025c57600080fd5b835162000269816200022d565b60208501519093506200027c816200022d565b60408501519092506200028f816200022d565b809150509250925092565b600060208284031215620002ad57600080fd5b8151620002ba816200022d565b9392505050565b60805160a05160c05160e05161010051612bb562000329600039600081816102c501526106c4015260006102ec015260008181610182015261096501526000818161023301528181610f73015261111401526000818161025a0152610dc70152612bb56000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806368304835116100ad5780638da5cb5b116100715780638da5cb5b146102b8578063a50a640e146102c0578063b1344271146102e7578063f2fde38b1461030e578063fabc1cbc1461032157600080fd5b8063683048351461022e5780636d14a987146102555780636efb46361461027c578063715018a61461029d578063886f1195146102a557600080fd5b806338c8ee64116100f457806338c8ee64146101bc578063485cc955146101cf578063595c6a67146101e25780635ac86ab7146101ea5780635c975abb1461021d57600080fd5b806310d67a2f14610126578063136439dd1461013b578063171f1d5b1461014e5780633561deb11461017d575b600080fd5b61013961013436600461224d565b610334565b005b610139610149366004612271565b6103f0565b61016161015c3660046123ef565b61052f565b6040805192151583529015156020830152015b60405180910390f35b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b6040516001600160a01b039091168152602001610174565b6101396101ca36600461224d565b6106b9565b6101396101dd366004612440565b610748565b610139610867565b61020d6101f8366004612479565b606654600160ff9092169190911b9081161490565b6040519015158152602001610174565b606654604051908152602001610174565b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b61028f61028a366004612752565b61092e565b604051610174929190612845565b6101396113a7565b6065546101a4906001600160a01b031681565b6101a46113bb565b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b6101a47f000000000000000000000000000000000000000000000000000000000000000081565b61013961031c36600461224d565b6113d4565b61013961032f366004612271565b61144a565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610387573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ab919061288e565b6001600160a01b0316336001600160a01b0316146103e45760405162461bcd60e51b81526004016103db906128ab565b60405180910390fd5b6103ed816115a6565b50565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa158015610438573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061045c91906128f5565b6104785760405162461bcd60e51b81526004016103db90612917565b606654818116146104f15760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e70617573653a20696e76616c696420617474656d70742060448201527f746f20756e70617573652066756e6374696f6e616c697479000000000000000060648201526084016103db565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d906020015b60405180910390a250565b60008060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001878760000151886020015188600001516000600281106105775761057761295f565b60200201518951600160200201518a6020015160006002811061059c5761059c61295f565b60200201518b602001516001600281106105b8576105b861295f565b602090810291909101518c518d8301516040516106159a99989796959401988952602089019790975260408801959095526060870193909352608086019190915260a085015260c084015260e08301526101008201526101200190565b6040516020818303038152906040528051906020012060001c6106389190612975565b90506106ab61065161064a888461169d565b8690611734565b6106596117c8565b6106a16106928561068c604080518082018252600080825260209182015281518083019092526001825260029082015290565b9061169d565b61069b8c611888565b90611734565b886201d4c0611918565b909890975095505050505050565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103ed5760405162461bcd60e51b815260206004820152602e60248201527f6f6e6c795461736b4d616e616765723a206e6f742066726f6d206d616e67617460448201526d30903a30b9b59036b0b730b3b2b960911b60648201526084016103db565b600054610100900460ff16158080156107685750600054600160ff909116105b806107825750303b158015610782575060005460ff166001145b6107e55760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084016103db565b6000805460ff191660011790558015610808576000805461ff0019166101001790555b610813836000611b3c565b61081c82611c26565b8015610862576000805461ff0019169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b60655460405163237dfb4760e11b81523360048201526001600160a01b03909116906346fbf68e90602401602060405180830381865afa1580156108af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108d391906128f5565b6108ef5760405162461bcd60e51b81526004016103db90612917565b600019606681905560405190815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2565b60408051808201909152606080825260208201526040805180820190915260008082526020820181905290815b86811015610b58577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c1af6b248989848181106109a4576109a461295f565b9050013560f81c60f81b60f81c888860a0015185815181106109c8576109c861295f565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa158015610a24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a489190612997565b6001600160401b031916610a7886604001518381518110610a6b57610a6b61295f565b6020026020010151611c78565b67ffffffffffffffff191614610b145760405162461bcd60e51b81526020600482015260616024820152600080516020612b6083398151915260448201527f7265733a2071756f72756d41706b206861736820696e2073746f72616765206460648201527f6f6573206e6f74206d617463682070726f76696465642071756f72756d2061706084820152606b60f81b60a482015260c4016103db565b610b4485604001518281518110610b2d57610b2d61295f565b60200260200101518361173490919063ffffffff16565b915080610b50816129d8565b91505061095b565b506040805180820190915260608082526020820152866001600160401b03811115610b8557610b8561228a565b604051908082528060200260200182016040528015610bae578160200160208202803683370190505b506020820152866001600160401b03811115610bcc57610bcc61228a565b604051908082528060200260200182016040528015610bf5578160200160208202803683370190505b5081526020850151516000906001600160401b03811115610c1857610c1861228a565b604051908082528060200260200182016040528015610c41578160200160208202803683370190505b50905060008660200151516001600160401b03811115610c6357610c6361228a565b604051908082528060200260200182016040528015610c8c578160200160208202803683370190505b5090506000610cd08b8b8080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250611cbb92505050565b905060005b886020015151811015610f3b57610cfb89602001518281518110610a6b57610a6b61295f565b848281518110610d0d57610d0d61295f565b60209081029190910101528015610dc55783610d2a6001836129f3565b81518110610d3a57610d3a61295f565b602002602001015160001c848281518110610d5757610d5761295f565b602002602001015160001c11610dc5576040805162461bcd60e51b8152602060048201526024810191909152600080516020612b6083398151915260448201527f7265733a206e6f6e5369676e65725075626b657973206e6f7420736f7274656460648201526084016103db565b7f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316633064620d858381518110610e0657610e0661295f565b60200260200101518c8c600001518581518110610e2557610e2561295f565b60200260200101516040518463ffffffff1660e01b8152600401610e629392919092835263ffffffff918216602084015216604082015260600190565b602060405180830381865afa158015610e7f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ea39190612a0a565b6001600160c01b0316838281518110610ebe57610ebe61295f565b602002602001018181525050610f27610f20610ef484868581518110610ee657610ee661295f565b602002602001015116611e24565b610f1a8c602001518581518110610f0d57610f0d61295f565b6020026020010151611e55565b90611ef0565b8790611734565b955080610f33816129d8565b915050610cd5565b505060005b60ff81168a111561127b5760008b8b8360ff16818110610f6257610f6261295f565b9050013560f81c60f81b60f81c90507f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663c8294c56828c8c60c001518660ff1681518110610fbb57610fbb61295f565b60209081029190910101516040516001600160e01b031960e086901b16815260ff909316600484015263ffffffff9182166024840152166044820152606401602060405180830381865afa158015611017573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061103b9190612a33565b85602001518360ff16815181106110545761105461295f565b6001600160601b03909216602092830291909101820152850151805160ff84169081106110835761108361295f565b602002602001015185600001518360ff16815181106110a4576110a461295f565b60200260200101906001600160601b031690816001600160601b03168152505060005b8960200151518163ffffffff16101561127157600061110d858363ffffffff16815181106110f7576110f761295f565b60200260200101518460ff161c60019081161490565b1561125e577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663a43cde89848e898663ffffffff168151811061115b5761115b61295f565b60200260200101518f60e001518960ff168151811061117c5761117c61295f565b60200260200101518663ffffffff168151811061119b5761119b61295f565b60209081029190910101516040516001600160e01b031960e087901b16815260ff909416600485015263ffffffff92831660248501526044840191909152166064820152608401602060405180830381865afa1580156111ff573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112239190612a33565b8751805160ff871690811061123a5761123a61295f565b6020026020010181815161124e9190612a5c565b6001600160601b03169052506001015b508061126981612a84565b9150506110c7565b5050600101610f40565b50506000806112948c868a606001518b6080015161052f565b91509150816113055760405162461bcd60e51b81526020600482015260436024820152600080516020612b6083398151915260448201527f7265733a2070616972696e6720707265636f6d70696c652063616c6c206661696064820152621b195960ea1b608482015260a4016103db565b806113665760405162461bcd60e51b81526020600482015260396024820152600080516020612b6083398151915260448201527f7265733a207369676e617475726520697320696e76616c69640000000000000060648201526084016103db565b50506000878260405160200161137d929190612aa8565b60408051808303601f190181529190528051602090910120929b929a509198505050505050505050565b6113af611fd5565b6113b96000611c26565b565b60006113cf6033546001600160a01b031690565b905090565b6113dc611fd5565b6001600160a01b0381166114415760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016103db565b6103ed81611c26565b606560009054906101000a90046001600160a01b03166001600160a01b031663eab66d7a6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561149d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114c1919061288e565b6001600160a01b0316336001600160a01b0316146114f15760405162461bcd60e51b81526004016103db906128ab565b60665419811960665419161461156f5760405162461bcd60e51b815260206004820152603860248201527f5061757361626c652e756e70617573653a20696e76616c696420617474656d7060448201527f7420746f2070617573652066756e6374696f6e616c697479000000000000000060648201526084016103db565b606681905560405181815233907f3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c90602001610524565b6001600160a01b0381166116345760405162461bcd60e51b815260206004820152604960248201527f5061757361626c652e5f73657450617573657252656769737472793a206e657760448201527f50617573657252656769737472792063616e6e6f7420626520746865207a65726064820152686f206164647265737360b81b608482015260a4016103db565b606554604080516001600160a01b03928316815291831660208301527f6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6910160405180910390a1606580546001600160a01b0319166001600160a01b0392909216919091179055565b60408051808201909152600080825260208201526116b961215e565b835181526020808501519082015260408082018490526000908360608460076107d05a03fa90508080156116ec576116ee565bfe5b508061172c5760405162461bcd60e51b815260206004820152600d60248201526c1958cb5b5d5b0b59985a5b1959609a1b60448201526064016103db565b505092915050565b604080518082019091526000808252602082015261175061217c565b835181526020808501518183015283516040808401919091529084015160608301526000908360808460066107d05a03fa90508080156116ec57508061172c5760405162461bcd60e51b815260206004820152600d60248201526c1958cb5859190b59985a5b1959609a1b60448201526064016103db565b6117d061219a565b50604080516080810182527f198e9393920d483a7260bfb731fb5d25f1aa493335a9e71297e485b7aef312c28183019081527f1800deef121f1e76426a00665e5c4479674322d4f75edadd46debd5cd992f6ed6060830152815281518083019092527f275dc4a288d1afb3cbb1ac09187524c7db36395df7be3b99e673b13a075a65ec82527f1d9befcd05a5323e6da4d435f3b617cdb3af83285c2df711ef39c01571827f9d60208381019190915281019190915290565b6040805180820190915260008082526020820152600080806118b8600080516020612b4083398151915286612975565b90505b6118c481612034565b9093509150600080516020612b408339815191528283098314156118fe576040805180820190915290815260208101919091529392505050565b600080516020612b408339815191526001820890506118bb565b60408051808201825286815260208082018690528251808401909352868352820184905260009182919061194a6121bf565b60005b6002811015611b0f576000611963826006612af0565b90508482600281106119775761197761295f565b60200201515183611989836000612b0f565b600c81106119995761199961295f565b60200201528482600281106119b0576119b061295f565b602002015160200151838260016119c79190612b0f565b600c81106119d7576119d761295f565b60200201528382600281106119ee576119ee61295f565b6020020151515183611a01836002612b0f565b600c8110611a1157611a1161295f565b6020020152838260028110611a2857611a2861295f565b6020020151516001602002015183611a41836003612b0f565b600c8110611a5157611a5161295f565b6020020152838260028110611a6857611a6861295f565b602002015160200151600060028110611a8357611a8361295f565b602002015183611a94836004612b0f565b600c8110611aa457611aa461295f565b6020020152838260028110611abb57611abb61295f565b602002015160200151600160028110611ad657611ad661295f565b602002015183611ae7836005612b0f565b600c8110611af757611af761295f565b60200201525080611b07816129d8565b91505061194d565b50611b186121de565b60006020826101808560088cfa9151919c9115159b50909950505050505050505050565b6065546001600160a01b0316158015611b5d57506001600160a01b03821615155b611bdf5760405162461bcd60e51b815260206004820152604760248201527f5061757361626c652e5f696e697469616c697a655061757365723a205f696e6960448201527f7469616c697a6550617573657228292063616e206f6e6c792062652063616c6c6064820152666564206f6e636560c81b608482015260a4016103db565b606681905560405181815233907fab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d9060200160405180910390a2611c22826115a6565b5050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b600081600001518260200151604051602001611c9e929190918252602082015260400190565b604051602081830303815290604052805190602001209050919050565b600061010082511115611d2f5760405162461bcd60e51b815260206004820152603660248201527f4269746d61705574696c732e62797465734172726179546f4269746d61703a206044820152756279746573417272617920697320746f6f206c6f6e6760501b60648201526084016103db565b8151611d3d57506000919050565b60008083600081518110611d5357611d5361295f565b0160200151600160f89190911c81901b92505b8451811015611e1b57848181518110611d8157611d8161295f565b0160200151600160f89190911c1b915082821615611e075760405162461bcd60e51b815260206004820152603a60248201527f4269746d61705574696c732e62797465734172726179546f4269746d61703a2060448201527f72657065617420656e74727920696e206279746573417272617900000000000060648201526084016103db565b91811791611e14816129d8565b9050611d66565b50909392505050565b6000805b8215611e4f57611e396001846129f3565b9092169180611e4781612b27565b915050611e28565b92915050565b60408051808201909152600080825260208201528151158015611e7a57506020820151155b15611e98575050604080518082019091526000808252602082015290565b604051806040016040528083600001518152602001600080516020612b408339815191528460200151611ecb9190612975565b611ee390600080516020612b408339815191526129f3565b905292915050565b919050565b60408051808201909152600080825260208201526102008261ffff1610611f4c5760405162461bcd60e51b815260206004820152601060248201526f7363616c61722d746f6f2d6c6172676560801b60448201526064016103db565b8161ffff1660011415611f60575081611e4f565b6040805180820190915260008082526020820181905284906001905b8161ffff168661ffff161115611fca57600161ffff871660ff83161c81161415611fad57611faa8484611734565b93505b611fb78384611734565b92506201fffe600192831b169101611f7c565b509195945050505050565b33611fde6113bb565b6001600160a01b0316146113b95760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064016103db565b60008080600080516020612b408339815191526003600080516020612b4083398151915286600080516020612b408339815191528889090908905060006120aa827f0c19139cb84c680a6e14116da060561765e05aa45a1c72a34f082305b61f3f52600080516020612b408339815191526120b6565b91959194509092505050565b6000806120c16121de565b6120c96121fc565b602080825281810181905260408201819052606082018890526080820187905260a082018690528260c08360056107d05a03fa92508280156116ec5750826121535760405162461bcd60e51b815260206004820152601a60248201527f424e3235342e6578704d6f643a2063616c6c206661696c75726500000000000060448201526064016103db565b505195945050505050565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806121ad61221a565b81526020016121ba61221a565b905290565b604051806101800160405280600c906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060c001604052806006906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b6001600160a01b03811681146103ed57600080fd5b60006020828403121561225f57600080fd5b813561226a81612238565b9392505050565b60006020828403121561228357600080fd5b5035919050565b634e487b7160e01b600052604160045260246000fd5b604080519081016001600160401b03811182821017156122c2576122c261228a565b60405290565b60405161010081016001600160401b03811182821017156122c2576122c261228a565b604051601f8201601f191681016001600160401b03811182821017156123135761231361228a565b604052919050565b60006040828403121561232d57600080fd5b6123356122a0565b9050813581526020820135602082015292915050565b600082601f83011261235c57600080fd5b604051604081018181106001600160401b038211171561237e5761237e61228a565b806040525080604084018581111561239557600080fd5b845b81811015611fca578035835260209283019201612397565b6000608082840312156123c157600080fd5b6123c96122a0565b90506123d5838361234b565b81526123e4836040840161234b565b602082015292915050565b600080600080610120858703121561240657600080fd5b84359350612417866020870161231b565b925061242686606087016123af565b91506124358660e0870161231b565b905092959194509250565b6000806040838503121561245357600080fd5b823561245e81612238565b9150602083013561246e81612238565b809150509250929050565b60006020828403121561248b57600080fd5b813560ff8116811461226a57600080fd5b803563ffffffff81168114611eeb57600080fd5b60006001600160401b038211156124c9576124c961228a565b5060051b60200190565b600082601f8301126124e457600080fd5b813560206124f96124f4836124b0565b6122eb565b82815260059290921b8401810191818101908684111561251857600080fd5b8286015b8481101561253a5761252d8161249c565b835291830191830161251c565b509695505050505050565b600082601f83011261255657600080fd5b813560206125666124f4836124b0565b82815260069290921b8401810191818101908684111561258557600080fd5b8286015b8481101561253a5761259b888261231b565b835291830191604001612589565b600082601f8301126125ba57600080fd5b813560206125ca6124f4836124b0565b82815260059290921b840181019181810190868411156125e957600080fd5b8286015b8481101561253a5780356001600160401b0381111561260c5760008081fd5b61261a8986838b01016124d3565b8452509183019183016125ed565b6000610180828403121561263b57600080fd5b6126436122c8565b905081356001600160401b038082111561265c57600080fd5b612668858386016124d3565b8352602084013591508082111561267e57600080fd5b61268a85838601612545565b602084015260408401359150808211156126a357600080fd5b6126af85838601612545565b60408401526126c185606086016123af565b60608401526126d38560e0860161231b565b60808401526101208401359150808211156126ed57600080fd5b6126f9858386016124d3565b60a084015261014084013591508082111561271357600080fd5b61271f858386016124d3565b60c084015261016084013591508082111561273957600080fd5b50612746848285016125a9565b60e08301525092915050565b60008060008060006080868803121561276a57600080fd5b8535945060208601356001600160401b038082111561278857600080fd5b818801915088601f83011261279c57600080fd5b8135818111156127ab57600080fd5b8960208285010111156127bd57600080fd5b60208301965094506127d16040890161249c565b935060608801359150808211156127e757600080fd5b506127f488828901612628565b9150509295509295909350565b600081518084526020808501945080840160005b8381101561283a5781516001600160601b031687529582019590820190600101612815565b509495945050505050565b60408152600083516040808401526128606080840182612801565b90506020850151603f1984830301606085015261287d8282612801565b925050508260208301529392505050565b6000602082840312156128a057600080fd5b815161226a81612238565b6020808252602a908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526939903ab73830bab9b2b960b11b606082015260800190565b60006020828403121561290757600080fd5b8151801515811461226a57600080fd5b60208082526028908201527f6d73672e73656e646572206973206e6f74207065726d697373696f6e6564206160408201526739903830bab9b2b960c11b606082015260800190565b634e487b7160e01b600052603260045260246000fd5b60008261299257634e487b7160e01b600052601260045260246000fd5b500690565b6000602082840312156129a957600080fd5b815167ffffffffffffffff198116811461226a57600080fd5b634e487b7160e01b600052601160045260246000fd5b60006000198214156129ec576129ec6129c2565b5060010190565b600082821015612a0557612a056129c2565b500390565b600060208284031215612a1c57600080fd5b81516001600160c01b038116811461226a57600080fd5b600060208284031215612a4557600080fd5b81516001600160601b038116811461226a57600080fd5b60006001600160601b0383811690831681811015612a7c57612a7c6129c2565b039392505050565b600063ffffffff80831681811415612a9e57612a9e6129c2565b6001019392505050565b63ffffffff60e01b8360e01b1681526000600482018351602080860160005b83811015612ae357815185529382019390820190600101612ac7565b5092979650505050505050565b6000816000190483118215151615612b0a57612b0a6129c2565b500290565b60008219821115612b2257612b226129c2565b500190565b600061ffff80831681811415612a9e57612a9e6129c256fe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47424c535369676e6174757265436865636b65722e636865636b5369676e617475a26469706673582212205ef1020dbb2f6558c4c217bb1aeb12597b87558eed537ae08e4793163ff6f6d664736f6c634300080c0033",
}

// ContractMangataServiceManagerABI is the input ABI used to generate the binding from.
// Deprecated: Use ContractMangataServiceManagerMetaData.ABI instead.
var ContractMangataServiceManagerABI = ContractMangataServiceManagerMetaData.ABI

// ContractMangataServiceManagerBin is the compiled bytecode used for deploying new contracts.
// Deprecated: Use ContractMangataServiceManagerMetaData.Bin instead.
var ContractMangataServiceManagerBin = ContractMangataServiceManagerMetaData.Bin

// DeployContractMangataServiceManager deploys a new Ethereum contract, binding an instance of ContractMangataServiceManager to it.
func DeployContractMangataServiceManager(auth *bind.TransactOpts, backend bind.ContractBackend, _registryCoordinator common.Address, _slasher common.Address, _taskManager common.Address) (common.Address, *types.Transaction, *ContractMangataServiceManager, error) {
	parsed, err := ContractMangataServiceManagerMetaData.GetAbi()
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	if parsed == nil {
		return common.Address{}, nil, nil, errors.New("GetABI returned nil")
	}

	address, tx, contract, err := bind.DeployContract(auth, *parsed, common.FromHex(ContractMangataServiceManagerBin), backend, _registryCoordinator, _slasher, _taskManager)
	if err != nil {
		return common.Address{}, nil, nil, err
	}
	return address, tx, &ContractMangataServiceManager{ContractMangataServiceManagerCaller: ContractMangataServiceManagerCaller{contract: contract}, ContractMangataServiceManagerTransactor: ContractMangataServiceManagerTransactor{contract: contract}, ContractMangataServiceManagerFilterer: ContractMangataServiceManagerFilterer{contract: contract}}, nil
}

// ContractMangataServiceManager is an auto generated Go binding around an Ethereum contract.
type ContractMangataServiceManager struct {
	ContractMangataServiceManagerCaller     // Read-only binding to the contract
	ContractMangataServiceManagerTransactor // Write-only binding to the contract
	ContractMangataServiceManagerFilterer   // Log filterer for contract events
}

// ContractMangataServiceManagerCaller is an auto generated read-only Go binding around an Ethereum contract.
type ContractMangataServiceManagerCaller struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMangataServiceManagerTransactor is an auto generated write-only Go binding around an Ethereum contract.
type ContractMangataServiceManagerTransactor struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMangataServiceManagerFilterer is an auto generated log filtering Go binding around an Ethereum contract events.
type ContractMangataServiceManagerFilterer struct {
	contract *bind.BoundContract // Generic contract wrapper for the low level calls
}

// ContractMangataServiceManagerSession is an auto generated Go binding around an Ethereum contract,
// with pre-set call and transact options.
type ContractMangataServiceManagerSession struct {
	Contract     *ContractMangataServiceManager // Generic contract binding to set the session for
	CallOpts     bind.CallOpts                  // Call options to use throughout this session
	TransactOpts bind.TransactOpts              // Transaction auth options to use throughout this session
}

// ContractMangataServiceManagerCallerSession is an auto generated read-only Go binding around an Ethereum contract,
// with pre-set call options.
type ContractMangataServiceManagerCallerSession struct {
	Contract *ContractMangataServiceManagerCaller // Generic contract caller binding to set the session for
	CallOpts bind.CallOpts                        // Call options to use throughout this session
}

// ContractMangataServiceManagerTransactorSession is an auto generated write-only Go binding around an Ethereum contract,
// with pre-set transact options.
type ContractMangataServiceManagerTransactorSession struct {
	Contract     *ContractMangataServiceManagerTransactor // Generic contract transactor binding to set the session for
	TransactOpts bind.TransactOpts                        // Transaction auth options to use throughout this session
}

// ContractMangataServiceManagerRaw is an auto generated low-level Go binding around an Ethereum contract.
type ContractMangataServiceManagerRaw struct {
	Contract *ContractMangataServiceManager // Generic contract binding to access the raw methods on
}

// ContractMangataServiceManagerCallerRaw is an auto generated low-level read-only Go binding around an Ethereum contract.
type ContractMangataServiceManagerCallerRaw struct {
	Contract *ContractMangataServiceManagerCaller // Generic read-only contract binding to access the raw methods on
}

// ContractMangataServiceManagerTransactorRaw is an auto generated low-level write-only Go binding around an Ethereum contract.
type ContractMangataServiceManagerTransactorRaw struct {
	Contract *ContractMangataServiceManagerTransactor // Generic write-only contract binding to access the raw methods on
}

// NewContractMangataServiceManager creates a new instance of ContractMangataServiceManager, bound to a specific deployed contract.
func NewContractMangataServiceManager(address common.Address, backend bind.ContractBackend) (*ContractMangataServiceManager, error) {
	contract, err := bindContractMangataServiceManager(address, backend, backend, backend)
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManager{ContractMangataServiceManagerCaller: ContractMangataServiceManagerCaller{contract: contract}, ContractMangataServiceManagerTransactor: ContractMangataServiceManagerTransactor{contract: contract}, ContractMangataServiceManagerFilterer: ContractMangataServiceManagerFilterer{contract: contract}}, nil
}

// NewContractMangataServiceManagerCaller creates a new read-only instance of ContractMangataServiceManager, bound to a specific deployed contract.
func NewContractMangataServiceManagerCaller(address common.Address, caller bind.ContractCaller) (*ContractMangataServiceManagerCaller, error) {
	contract, err := bindContractMangataServiceManager(address, caller, nil, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManagerCaller{contract: contract}, nil
}

// NewContractMangataServiceManagerTransactor creates a new write-only instance of ContractMangataServiceManager, bound to a specific deployed contract.
func NewContractMangataServiceManagerTransactor(address common.Address, transactor bind.ContractTransactor) (*ContractMangataServiceManagerTransactor, error) {
	contract, err := bindContractMangataServiceManager(address, nil, transactor, nil)
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManagerTransactor{contract: contract}, nil
}

// NewContractMangataServiceManagerFilterer creates a new log filterer instance of ContractMangataServiceManager, bound to a specific deployed contract.
func NewContractMangataServiceManagerFilterer(address common.Address, filterer bind.ContractFilterer) (*ContractMangataServiceManagerFilterer, error) {
	contract, err := bindContractMangataServiceManager(address, nil, nil, filterer)
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManagerFilterer{contract: contract}, nil
}

// bindContractMangataServiceManager binds a generic wrapper to an already deployed contract.
func bindContractMangataServiceManager(address common.Address, caller bind.ContractCaller, transactor bind.ContractTransactor, filterer bind.ContractFilterer) (*bind.BoundContract, error) {
	parsed, err := ContractMangataServiceManagerMetaData.GetAbi()
	if err != nil {
		return nil, err
	}
	return bind.NewBoundContract(address, *parsed, caller, transactor, filterer), nil
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMangataServiceManager *ContractMangataServiceManagerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMangataServiceManager.Contract.ContractMangataServiceManagerCaller.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMangataServiceManager *ContractMangataServiceManagerRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.ContractMangataServiceManagerTransactor.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMangataServiceManager *ContractMangataServiceManagerRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.ContractMangataServiceManagerTransactor.contract.Transact(opts, method, params...)
}

// Call invokes the (constant) contract method with params as input values and
// sets the output to result. The result type might be a single field for simple
// returns, a slice of interfaces for anonymous returns and a struct for named
// returns.
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerRaw) Call(opts *bind.CallOpts, result *[]interface{}, method string, params ...interface{}) error {
	return _ContractMangataServiceManager.Contract.contract.Call(opts, result, method, params...)
}

// Transfer initiates a plain transaction to move funds to the contract, calling
// its default method if one is available.
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorRaw) Transfer(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.contract.Transfer(opts)
}

// Transact invokes the (paid) contract method with params as input values.
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorRaw) Transact(opts *bind.TransactOpts, method string, params ...interface{}) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.contract.Transact(opts, method, params...)
}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) BlsPubkeyRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "blsPubkeyRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) BlsPubkeyRegistry() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.BlsPubkeyRegistry(&_ContractMangataServiceManager.CallOpts)
}

// BlsPubkeyRegistry is a free data retrieval call binding the contract method 0x3561deb1.
//
// Solidity: function blsPubkeyRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) BlsPubkeyRegistry() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.BlsPubkeyRegistry(&_ContractMangataServiceManager.CallOpts)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) view returns((uint96[],uint96[]), bytes32)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) CheckSignatures(opts *bind.CallOpts, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "checkSignatures", msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature)

	if err != nil {
		return *new(IBLSSignatureCheckerQuorumStakeTotals), *new([32]byte), err
	}

	out0 := *abi.ConvertType(out[0], new(IBLSSignatureCheckerQuorumStakeTotals)).(*IBLSSignatureCheckerQuorumStakeTotals)
	out1 := *abi.ConvertType(out[1], new([32]byte)).(*[32]byte)

	return out0, out1, err

}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) view returns((uint96[],uint96[]), bytes32)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractMangataServiceManager.Contract.CheckSignatures(&_ContractMangataServiceManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature)
}

// CheckSignatures is a free data retrieval call binding the contract method 0x6efb4636.
//
// Solidity: function checkSignatures(bytes32 msgHash, bytes quorumNumbers, uint32 referenceBlockNumber, (uint32[],(uint256,uint256)[],(uint256,uint256)[],(uint256[2],uint256[2]),(uint256,uint256),uint32[],uint32[],uint32[][]) nonSignerStakesAndSignature) view returns((uint96[],uint96[]), bytes32)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) CheckSignatures(msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, nonSignerStakesAndSignature IBLSSignatureCheckerNonSignerStakesAndSignature) (IBLSSignatureCheckerQuorumStakeTotals, [32]byte, error) {
	return _ContractMangataServiceManager.Contract.CheckSignatures(&_ContractMangataServiceManager.CallOpts, msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) Owner(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "owner")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) Owner() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.Owner(&_ContractMangataServiceManager.CallOpts)
}

// Owner is a free data retrieval call binding the contract method 0x8da5cb5b.
//
// Solidity: function owner() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) Owner() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.Owner(&_ContractMangataServiceManager.CallOpts)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) Paused(opts *bind.CallOpts, index uint8) (bool, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "paused", index)

	if err != nil {
		return *new(bool), err
	}

	out0 := *abi.ConvertType(out[0], new(bool)).(*bool)

	return out0, err

}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) Paused(index uint8) (bool, error) {
	return _ContractMangataServiceManager.Contract.Paused(&_ContractMangataServiceManager.CallOpts, index)
}

// Paused is a free data retrieval call binding the contract method 0x5ac86ab7.
//
// Solidity: function paused(uint8 index) view returns(bool)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) Paused(index uint8) (bool, error) {
	return _ContractMangataServiceManager.Contract.Paused(&_ContractMangataServiceManager.CallOpts, index)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) Paused0(opts *bind.CallOpts) (*big.Int, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "paused0")

	if err != nil {
		return *new(*big.Int), err
	}

	out0 := *abi.ConvertType(out[0], new(*big.Int)).(**big.Int)

	return out0, err

}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) Paused0() (*big.Int, error) {
	return _ContractMangataServiceManager.Contract.Paused0(&_ContractMangataServiceManager.CallOpts)
}

// Paused0 is a free data retrieval call binding the contract method 0x5c975abb.
//
// Solidity: function paused() view returns(uint256)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) Paused0() (*big.Int, error) {
	return _ContractMangataServiceManager.Contract.Paused0(&_ContractMangataServiceManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) PauserRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "pauserRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) PauserRegistry() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.PauserRegistry(&_ContractMangataServiceManager.CallOpts)
}

// PauserRegistry is a free data retrieval call binding the contract method 0x886f1195.
//
// Solidity: function pauserRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) PauserRegistry() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.PauserRegistry(&_ContractMangataServiceManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) RegistryCoordinator(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "registryCoordinator")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.RegistryCoordinator(&_ContractMangataServiceManager.CallOpts)
}

// RegistryCoordinator is a free data retrieval call binding the contract method 0x6d14a987.
//
// Solidity: function registryCoordinator() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) RegistryCoordinator() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.RegistryCoordinator(&_ContractMangataServiceManager.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) Slasher(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "slasher")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) Slasher() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.Slasher(&_ContractMangataServiceManager.CallOpts)
}

// Slasher is a free data retrieval call binding the contract method 0xb1344271.
//
// Solidity: function slasher() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) Slasher() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.Slasher(&_ContractMangataServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) StakeRegistry(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "stakeRegistry")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) StakeRegistry() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.StakeRegistry(&_ContractMangataServiceManager.CallOpts)
}

// StakeRegistry is a free data retrieval call binding the contract method 0x68304835.
//
// Solidity: function stakeRegistry() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) StakeRegistry() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.StakeRegistry(&_ContractMangataServiceManager.CallOpts)
}

// TaskManager is a free data retrieval call binding the contract method 0xa50a640e.
//
// Solidity: function taskManager() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) TaskManager(opts *bind.CallOpts) (common.Address, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "taskManager")

	if err != nil {
		return *new(common.Address), err
	}

	out0 := *abi.ConvertType(out[0], new(common.Address)).(*common.Address)

	return out0, err

}

// TaskManager is a free data retrieval call binding the contract method 0xa50a640e.
//
// Solidity: function taskManager() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) TaskManager() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.TaskManager(&_ContractMangataServiceManager.CallOpts)
}

// TaskManager is a free data retrieval call binding the contract method 0xa50a640e.
//
// Solidity: function taskManager() view returns(address)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) TaskManager() (common.Address, error) {
	return _ContractMangataServiceManager.Contract.TaskManager(&_ContractMangataServiceManager.CallOpts)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCaller) TrySignatureAndApkVerification(opts *bind.CallOpts, msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	var out []interface{}
	err := _ContractMangataServiceManager.contract.Call(opts, &out, "trySignatureAndApkVerification", msgHash, apk, apkG2, sigma)

	outstruct := new(struct {
		PairingSuccessful bool
		SiganatureIsValid bool
	})
	if err != nil {
		return *outstruct, err
	}

	outstruct.PairingSuccessful = *abi.ConvertType(out[0], new(bool)).(*bool)
	outstruct.SiganatureIsValid = *abi.ConvertType(out[1], new(bool)).(*bool)

	return *outstruct, err

}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractMangataServiceManager.Contract.TrySignatureAndApkVerification(&_ContractMangataServiceManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// TrySignatureAndApkVerification is a free data retrieval call binding the contract method 0x171f1d5b.
//
// Solidity: function trySignatureAndApkVerification(bytes32 msgHash, (uint256,uint256) apk, (uint256[2],uint256[2]) apkG2, (uint256,uint256) sigma) view returns(bool pairingSuccessful, bool siganatureIsValid)
func (_ContractMangataServiceManager *ContractMangataServiceManagerCallerSession) TrySignatureAndApkVerification(msgHash [32]byte, apk BN254G1Point, apkG2 BN254G2Point, sigma BN254G1Point) (struct {
	PairingSuccessful bool
	SiganatureIsValid bool
}, error) {
	return _ContractMangataServiceManager.Contract.TrySignatureAndApkVerification(&_ContractMangataServiceManager.CallOpts, msgHash, apk, apkG2, sigma)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operatorAddr) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactor) FreezeOperator(opts *bind.TransactOpts, operatorAddr common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.contract.Transact(opts, "freezeOperator", operatorAddr)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operatorAddr) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) FreezeOperator(operatorAddr common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.FreezeOperator(&_ContractMangataServiceManager.TransactOpts, operatorAddr)
}

// FreezeOperator is a paid mutator transaction binding the contract method 0x38c8ee64.
//
// Solidity: function freezeOperator(address operatorAddr) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorSession) FreezeOperator(operatorAddr common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.FreezeOperator(&_ContractMangataServiceManager.TransactOpts, operatorAddr)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactor) Initialize(opts *bind.TransactOpts, _pauserRegistry common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.contract.Transact(opts, "initialize", _pauserRegistry, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) Initialize(_pauserRegistry common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.Initialize(&_ContractMangataServiceManager.TransactOpts, _pauserRegistry, initialOwner)
}

// Initialize is a paid mutator transaction binding the contract method 0x485cc955.
//
// Solidity: function initialize(address _pauserRegistry, address initialOwner) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorSession) Initialize(_pauserRegistry common.Address, initialOwner common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.Initialize(&_ContractMangataServiceManager.TransactOpts, _pauserRegistry, initialOwner)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactor) Pause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMangataServiceManager.contract.Transact(opts, "pause", newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.Pause(&_ContractMangataServiceManager.TransactOpts, newPausedStatus)
}

// Pause is a paid mutator transaction binding the contract method 0x136439dd.
//
// Solidity: function pause(uint256 newPausedStatus) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorSession) Pause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.Pause(&_ContractMangataServiceManager.TransactOpts, newPausedStatus)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactor) PauseAll(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMangataServiceManager.contract.Transact(opts, "pauseAll")
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) PauseAll() (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.PauseAll(&_ContractMangataServiceManager.TransactOpts)
}

// PauseAll is a paid mutator transaction binding the contract method 0x595c6a67.
//
// Solidity: function pauseAll() returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorSession) PauseAll() (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.PauseAll(&_ContractMangataServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactor) RenounceOwnership(opts *bind.TransactOpts) (*types.Transaction, error) {
	return _ContractMangataServiceManager.contract.Transact(opts, "renounceOwnership")
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.RenounceOwnership(&_ContractMangataServiceManager.TransactOpts)
}

// RenounceOwnership is a paid mutator transaction binding the contract method 0x715018a6.
//
// Solidity: function renounceOwnership() returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorSession) RenounceOwnership() (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.RenounceOwnership(&_ContractMangataServiceManager.TransactOpts)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactor) SetPauserRegistry(opts *bind.TransactOpts, newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.contract.Transact(opts, "setPauserRegistry", newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.SetPauserRegistry(&_ContractMangataServiceManager.TransactOpts, newPauserRegistry)
}

// SetPauserRegistry is a paid mutator transaction binding the contract method 0x10d67a2f.
//
// Solidity: function setPauserRegistry(address newPauserRegistry) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorSession) SetPauserRegistry(newPauserRegistry common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.SetPauserRegistry(&_ContractMangataServiceManager.TransactOpts, newPauserRegistry)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactor) TransferOwnership(opts *bind.TransactOpts, newOwner common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.contract.Transact(opts, "transferOwnership", newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.TransferOwnership(&_ContractMangataServiceManager.TransactOpts, newOwner)
}

// TransferOwnership is a paid mutator transaction binding the contract method 0xf2fde38b.
//
// Solidity: function transferOwnership(address newOwner) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorSession) TransferOwnership(newOwner common.Address) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.TransferOwnership(&_ContractMangataServiceManager.TransactOpts, newOwner)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactor) Unpause(opts *bind.TransactOpts, newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMangataServiceManager.contract.Transact(opts, "unpause", newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.Unpause(&_ContractMangataServiceManager.TransactOpts, newPausedStatus)
}

// Unpause is a paid mutator transaction binding the contract method 0xfabc1cbc.
//
// Solidity: function unpause(uint256 newPausedStatus) returns()
func (_ContractMangataServiceManager *ContractMangataServiceManagerTransactorSession) Unpause(newPausedStatus *big.Int) (*types.Transaction, error) {
	return _ContractMangataServiceManager.Contract.Unpause(&_ContractMangataServiceManager.TransactOpts, newPausedStatus)
}

// ContractMangataServiceManagerInitializedIterator is returned from FilterInitialized and is used to iterate over the raw logs and unpacked data for Initialized events raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerInitializedIterator struct {
	Event *ContractMangataServiceManagerInitialized // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMangataServiceManagerInitializedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMangataServiceManagerInitialized)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMangataServiceManagerInitialized)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMangataServiceManagerInitializedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMangataServiceManagerInitializedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMangataServiceManagerInitialized represents a Initialized event raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerInitialized struct {
	Version uint8
	Raw     types.Log // Blockchain specific contextual infos
}

// FilterInitialized is a free log retrieval operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) FilterInitialized(opts *bind.FilterOpts) (*ContractMangataServiceManagerInitializedIterator, error) {

	logs, sub, err := _ContractMangataServiceManager.contract.FilterLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManagerInitializedIterator{contract: _ContractMangataServiceManager.contract, event: "Initialized", logs: logs, sub: sub}, nil
}

// WatchInitialized is a free log subscription operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) WatchInitialized(opts *bind.WatchOpts, sink chan<- *ContractMangataServiceManagerInitialized) (event.Subscription, error) {

	logs, sub, err := _ContractMangataServiceManager.contract.WatchLogs(opts, "Initialized")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMangataServiceManagerInitialized)
				if err := _ContractMangataServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseInitialized is a log parse operation binding the contract event 0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498.
//
// Solidity: event Initialized(uint8 version)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) ParseInitialized(log types.Log) (*ContractMangataServiceManagerInitialized, error) {
	event := new(ContractMangataServiceManagerInitialized)
	if err := _ContractMangataServiceManager.contract.UnpackLog(event, "Initialized", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMangataServiceManagerOwnershipTransferredIterator is returned from FilterOwnershipTransferred and is used to iterate over the raw logs and unpacked data for OwnershipTransferred events raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerOwnershipTransferredIterator struct {
	Event *ContractMangataServiceManagerOwnershipTransferred // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMangataServiceManagerOwnershipTransferredIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMangataServiceManagerOwnershipTransferred)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMangataServiceManagerOwnershipTransferred)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMangataServiceManagerOwnershipTransferredIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMangataServiceManagerOwnershipTransferredIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMangataServiceManagerOwnershipTransferred represents a OwnershipTransferred event raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerOwnershipTransferred struct {
	PreviousOwner common.Address
	NewOwner      common.Address
	Raw           types.Log // Blockchain specific contextual infos
}

// FilterOwnershipTransferred is a free log retrieval operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) FilterOwnershipTransferred(opts *bind.FilterOpts, previousOwner []common.Address, newOwner []common.Address) (*ContractMangataServiceManagerOwnershipTransferredIterator, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractMangataServiceManager.contract.FilterLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManagerOwnershipTransferredIterator{contract: _ContractMangataServiceManager.contract, event: "OwnershipTransferred", logs: logs, sub: sub}, nil
}

// WatchOwnershipTransferred is a free log subscription operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) WatchOwnershipTransferred(opts *bind.WatchOpts, sink chan<- *ContractMangataServiceManagerOwnershipTransferred, previousOwner []common.Address, newOwner []common.Address) (event.Subscription, error) {

	var previousOwnerRule []interface{}
	for _, previousOwnerItem := range previousOwner {
		previousOwnerRule = append(previousOwnerRule, previousOwnerItem)
	}
	var newOwnerRule []interface{}
	for _, newOwnerItem := range newOwner {
		newOwnerRule = append(newOwnerRule, newOwnerItem)
	}

	logs, sub, err := _ContractMangataServiceManager.contract.WatchLogs(opts, "OwnershipTransferred", previousOwnerRule, newOwnerRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMangataServiceManagerOwnershipTransferred)
				if err := _ContractMangataServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseOwnershipTransferred is a log parse operation binding the contract event 0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0.
//
// Solidity: event OwnershipTransferred(address indexed previousOwner, address indexed newOwner)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) ParseOwnershipTransferred(log types.Log) (*ContractMangataServiceManagerOwnershipTransferred, error) {
	event := new(ContractMangataServiceManagerOwnershipTransferred)
	if err := _ContractMangataServiceManager.contract.UnpackLog(event, "OwnershipTransferred", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMangataServiceManagerPausedIterator is returned from FilterPaused and is used to iterate over the raw logs and unpacked data for Paused events raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerPausedIterator struct {
	Event *ContractMangataServiceManagerPaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMangataServiceManagerPausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMangataServiceManagerPaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMangataServiceManagerPaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMangataServiceManagerPausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMangataServiceManagerPausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMangataServiceManagerPaused represents a Paused event raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerPaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterPaused is a free log retrieval operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) FilterPaused(opts *bind.FilterOpts, account []common.Address) (*ContractMangataServiceManagerPausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMangataServiceManager.contract.FilterLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManagerPausedIterator{contract: _ContractMangataServiceManager.contract, event: "Paused", logs: logs, sub: sub}, nil
}

// WatchPaused is a free log subscription operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) WatchPaused(opts *bind.WatchOpts, sink chan<- *ContractMangataServiceManagerPaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMangataServiceManager.contract.WatchLogs(opts, "Paused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMangataServiceManagerPaused)
				if err := _ContractMangataServiceManager.contract.UnpackLog(event, "Paused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePaused is a log parse operation binding the contract event 0xab40a374bc51de372200a8bc981af8c9ecdc08dfdaef0bb6e09f88f3c616ef3d.
//
// Solidity: event Paused(address indexed account, uint256 newPausedStatus)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) ParsePaused(log types.Log) (*ContractMangataServiceManagerPaused, error) {
	event := new(ContractMangataServiceManagerPaused)
	if err := _ContractMangataServiceManager.contract.UnpackLog(event, "Paused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMangataServiceManagerPauserRegistrySetIterator is returned from FilterPauserRegistrySet and is used to iterate over the raw logs and unpacked data for PauserRegistrySet events raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerPauserRegistrySetIterator struct {
	Event *ContractMangataServiceManagerPauserRegistrySet // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMangataServiceManagerPauserRegistrySetIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMangataServiceManagerPauserRegistrySet)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMangataServiceManagerPauserRegistrySet)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMangataServiceManagerPauserRegistrySetIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMangataServiceManagerPauserRegistrySetIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMangataServiceManagerPauserRegistrySet represents a PauserRegistrySet event raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerPauserRegistrySet struct {
	PauserRegistry    common.Address
	NewPauserRegistry common.Address
	Raw               types.Log // Blockchain specific contextual infos
}

// FilterPauserRegistrySet is a free log retrieval operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) FilterPauserRegistrySet(opts *bind.FilterOpts) (*ContractMangataServiceManagerPauserRegistrySetIterator, error) {

	logs, sub, err := _ContractMangataServiceManager.contract.FilterLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManagerPauserRegistrySetIterator{contract: _ContractMangataServiceManager.contract, event: "PauserRegistrySet", logs: logs, sub: sub}, nil
}

// WatchPauserRegistrySet is a free log subscription operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) WatchPauserRegistrySet(opts *bind.WatchOpts, sink chan<- *ContractMangataServiceManagerPauserRegistrySet) (event.Subscription, error) {

	logs, sub, err := _ContractMangataServiceManager.contract.WatchLogs(opts, "PauserRegistrySet")
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMangataServiceManagerPauserRegistrySet)
				if err := _ContractMangataServiceManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParsePauserRegistrySet is a log parse operation binding the contract event 0x6e9fcd539896fca60e8b0f01dd580233e48a6b0f7df013b89ba7f565869acdb6.
//
// Solidity: event PauserRegistrySet(address pauserRegistry, address newPauserRegistry)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) ParsePauserRegistrySet(log types.Log) (*ContractMangataServiceManagerPauserRegistrySet, error) {
	event := new(ContractMangataServiceManagerPauserRegistrySet)
	if err := _ContractMangataServiceManager.contract.UnpackLog(event, "PauserRegistrySet", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}

// ContractMangataServiceManagerUnpausedIterator is returned from FilterUnpaused and is used to iterate over the raw logs and unpacked data for Unpaused events raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerUnpausedIterator struct {
	Event *ContractMangataServiceManagerUnpaused // Event containing the contract specifics and raw log

	contract *bind.BoundContract // Generic contract to use for unpacking event data
	event    string              // Event name to use for unpacking event data

	logs chan types.Log        // Log channel receiving the found contract events
	sub  ethereum.Subscription // Subscription for errors, completion and termination
	done bool                  // Whether the subscription completed delivering logs
	fail error                 // Occurred error to stop iteration
}

// Next advances the iterator to the subsequent event, returning whether there
// are any more events found. In case of a retrieval or parsing error, false is
// returned and Error() can be queried for the exact failure.
func (it *ContractMangataServiceManagerUnpausedIterator) Next() bool {
	// If the iterator failed, stop iterating
	if it.fail != nil {
		return false
	}
	// If the iterator completed, deliver directly whatever's available
	if it.done {
		select {
		case log := <-it.logs:
			it.Event = new(ContractMangataServiceManagerUnpaused)
			if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
				it.fail = err
				return false
			}
			it.Event.Raw = log
			return true

		default:
			return false
		}
	}
	// Iterator still in progress, wait for either a data or an error event
	select {
	case log := <-it.logs:
		it.Event = new(ContractMangataServiceManagerUnpaused)
		if err := it.contract.UnpackLog(it.Event, it.event, log); err != nil {
			it.fail = err
			return false
		}
		it.Event.Raw = log
		return true

	case err := <-it.sub.Err():
		it.done = true
		it.fail = err
		return it.Next()
	}
}

// Error returns any retrieval or parsing error occurred during filtering.
func (it *ContractMangataServiceManagerUnpausedIterator) Error() error {
	return it.fail
}

// Close terminates the iteration process, releasing any pending underlying
// resources.
func (it *ContractMangataServiceManagerUnpausedIterator) Close() error {
	it.sub.Unsubscribe()
	return nil
}

// ContractMangataServiceManagerUnpaused represents a Unpaused event raised by the ContractMangataServiceManager contract.
type ContractMangataServiceManagerUnpaused struct {
	Account         common.Address
	NewPausedStatus *big.Int
	Raw             types.Log // Blockchain specific contextual infos
}

// FilterUnpaused is a free log retrieval operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) FilterUnpaused(opts *bind.FilterOpts, account []common.Address) (*ContractMangataServiceManagerUnpausedIterator, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMangataServiceManager.contract.FilterLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return &ContractMangataServiceManagerUnpausedIterator{contract: _ContractMangataServiceManager.contract, event: "Unpaused", logs: logs, sub: sub}, nil
}

// WatchUnpaused is a free log subscription operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) WatchUnpaused(opts *bind.WatchOpts, sink chan<- *ContractMangataServiceManagerUnpaused, account []common.Address) (event.Subscription, error) {

	var accountRule []interface{}
	for _, accountItem := range account {
		accountRule = append(accountRule, accountItem)
	}

	logs, sub, err := _ContractMangataServiceManager.contract.WatchLogs(opts, "Unpaused", accountRule)
	if err != nil {
		return nil, err
	}
	return event.NewSubscription(func(quit <-chan struct{}) error {
		defer sub.Unsubscribe()
		for {
			select {
			case log := <-logs:
				// New log arrived, parse the event and forward to the user
				event := new(ContractMangataServiceManagerUnpaused)
				if err := _ContractMangataServiceManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
					return err
				}
				event.Raw = log

				select {
				case sink <- event:
				case err := <-sub.Err():
					return err
				case <-quit:
					return nil
				}
			case err := <-sub.Err():
				return err
			case <-quit:
				return nil
			}
		}
	}), nil
}

// ParseUnpaused is a log parse operation binding the contract event 0x3582d1828e26bf56bd801502bc021ac0bc8afb57c826e4986b45593c8fad389c.
//
// Solidity: event Unpaused(address indexed account, uint256 newPausedStatus)
func (_ContractMangataServiceManager *ContractMangataServiceManagerFilterer) ParseUnpaused(log types.Log) (*ContractMangataServiceManagerUnpaused, error) {
	event := new(ContractMangataServiceManagerUnpaused)
	if err := _ContractMangataServiceManager.contract.UnpackLog(event, "Unpaused", log); err != nil {
		return nil, err
	}
	event.Raw = log
	return event, nil
}
