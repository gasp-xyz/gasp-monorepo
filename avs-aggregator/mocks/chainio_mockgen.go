// Code generated by MockGen. DO NOT EDIT.
// Source: ./core/chainio (interfaces: AvsReaderer,AvsSubscriberer,AvsWriterer,EthRpcClientsInterface)
//
// Generated by this command:
//
//	mockgen -package mocks -destination ./mocks/chainio_mockgen.go ./core/chainio AvsReaderer,AvsSubscriberer,AvsWriterer,EthRpcClientsInterface
//

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	big "math/big"
	reflect "reflect"

	avsregistry "github.com/Layr-Labs/eigensdk-go/chainio/clients/avsregistry"
	bls "github.com/Layr-Labs/eigensdk-go/crypto/bls"
	types "github.com/Layr-Labs/eigensdk-go/types"
	ethereum "github.com/ethereum/go-ethereum"
	bind "github.com/ethereum/go-ethereum/accounts/abi/bind"
	common "github.com/ethereum/go-ethereum/common"
	types0 "github.com/ethereum/go-ethereum/core/types"
	event "github.com/ethereum/go-ethereum/event"
	contractDelegationManager "github.com/gasp-xyz/gasp-monorepo/avs-aggregator/bindings/DelegationManager"
	contractFinalizerTaskManager "github.com/gasp-xyz/gasp-monorepo/avs-aggregator/bindings/FinalizerTaskManager"
	contractStakeRegistry "github.com/gasp-xyz/gasp-monorepo/avs-aggregator/bindings/StakeRegistry"
	types1 "github.com/gasp-xyz/gasp-monorepo/avs-aggregator/types"
	gomock "go.uber.org/mock/gomock"
)

// MockAvsReaderer is a mock of AvsReaderer interface.
type MockAvsReaderer struct {
	ctrl     *gomock.Controller
	recorder *MockAvsReadererMockRecorder
	isgomock struct{}
}

// MockAvsReadererMockRecorder is the mock recorder for MockAvsReaderer.
type MockAvsReadererMockRecorder struct {
	mock *MockAvsReaderer
}

// NewMockAvsReaderer creates a new mock instance.
func NewMockAvsReaderer(ctrl *gomock.Controller) *MockAvsReaderer {
	mock := &MockAvsReaderer{ctrl: ctrl}
	mock.recorder = &MockAvsReadererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvsReaderer) EXPECT() *MockAvsReadererMockRecorder {
	return m.recorder
}

// BalanceAt mocks base method.
func (m *MockAvsReaderer) BalanceAt(ctx context.Context, account common.Address, blockNumber *big.Int) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BalanceAt", ctx, account, blockNumber)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BalanceAt indicates an expected call of BalanceAt.
func (mr *MockAvsReadererMockRecorder) BalanceAt(ctx, account, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BalanceAt", reflect.TypeOf((*MockAvsReaderer)(nil).BalanceAt), ctx, account, blockNumber)
}

// ChainID mocks base method.
func (m *MockAvsReaderer) ChainID(ctx context.Context) (*big.Int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainID", ctx)
	ret0, _ := ret[0].(*big.Int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainID indicates an expected call of ChainID.
func (mr *MockAvsReadererMockRecorder) ChainID(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainID", reflect.TypeOf((*MockAvsReaderer)(nil).ChainID), ctx)
}

// ChainRdBatchNonce mocks base method.
func (m *MockAvsReaderer) ChainRdBatchNonce(ctx context.Context, chainIndex uint8) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ChainRdBatchNonce", ctx, chainIndex)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ChainRdBatchNonce indicates an expected call of ChainRdBatchNonce.
func (mr *MockAvsReadererMockRecorder) ChainRdBatchNonce(ctx, chainIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ChainRdBatchNonce", reflect.TypeOf((*MockAvsReaderer)(nil).ChainRdBatchNonce), ctx, chainIndex)
}

// CheckSignatures mocks base method.
func (m *MockAvsReaderer) CheckSignatures(ctx context.Context, msgHash [32]byte, quorumNumbers []byte, referenceBlockNumber uint32, nonSignerStakesAndSignature contractFinalizerTaskManager.IBLSSignatureCheckerNonSignerStakesAndSignature) (contractFinalizerTaskManager.IBLSSignatureCheckerQuorumStakeTotals, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckSignatures", ctx, msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature)
	ret0, _ := ret[0].(contractFinalizerTaskManager.IBLSSignatureCheckerQuorumStakeTotals)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckSignatures indicates an expected call of CheckSignatures.
func (mr *MockAvsReadererMockRecorder) CheckSignatures(ctx, msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckSignatures", reflect.TypeOf((*MockAvsReaderer)(nil).CheckSignatures), ctx, msgHash, quorumNumbers, referenceBlockNumber, nonSignerStakesAndSignature)
}

// DelegationManagerAddress mocks base method.
func (m *MockAvsReaderer) DelegationManagerAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DelegationManagerAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// DelegationManagerAddress indicates an expected call of DelegationManagerAddress.
func (mr *MockAvsReadererMockRecorder) DelegationManagerAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DelegationManagerAddress", reflect.TypeOf((*MockAvsReaderer)(nil).DelegationManagerAddress))
}

// FilterNewOpTaskCreated mocks base method.
func (m *MockAvsReaderer) FilterNewOpTaskCreated(opts *bind.FilterOpts, taskIndex []uint32) (*contractFinalizerTaskManager.ContractFinalizerTaskManagerNewOpTaskCreatedIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterNewOpTaskCreated", opts, taskIndex)
	ret0, _ := ret[0].(*contractFinalizerTaskManager.ContractFinalizerTaskManagerNewOpTaskCreatedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterNewOpTaskCreated indicates an expected call of FilterNewOpTaskCreated.
func (mr *MockAvsReadererMockRecorder) FilterNewOpTaskCreated(opts, taskIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterNewOpTaskCreated", reflect.TypeOf((*MockAvsReaderer)(nil).FilterNewOpTaskCreated), opts, taskIndex)
}

// FilterNewRdTaskCreated mocks base method.
func (m *MockAvsReaderer) FilterNewRdTaskCreated(opts *bind.FilterOpts, taskIndex []uint32) (*contractFinalizerTaskManager.ContractFinalizerTaskManagerNewRdTaskCreatedIterator, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FilterNewRdTaskCreated", opts, taskIndex)
	ret0, _ := ret[0].(*contractFinalizerTaskManager.ContractFinalizerTaskManagerNewRdTaskCreatedIterator)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FilterNewRdTaskCreated indicates an expected call of FilterNewRdTaskCreated.
func (mr *MockAvsReadererMockRecorder) FilterNewRdTaskCreated(opts, taskIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FilterNewRdTaskCreated", reflect.TypeOf((*MockAvsReaderer)(nil).FilterNewRdTaskCreated), opts, taskIndex)
}

// GetFirstFilterNewOpTaskCreated mocks base method.
func (m *MockAvsReaderer) GetFirstFilterNewOpTaskCreated(opts *bind.FilterOpts, taskIndex []uint32) (contractFinalizerTaskManager.IFinalizerTaskManagerOpTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstFilterNewOpTaskCreated", opts, taskIndex)
	ret0, _ := ret[0].(contractFinalizerTaskManager.IFinalizerTaskManagerOpTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstFilterNewOpTaskCreated indicates an expected call of GetFirstFilterNewOpTaskCreated.
func (mr *MockAvsReadererMockRecorder) GetFirstFilterNewOpTaskCreated(opts, taskIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstFilterNewOpTaskCreated", reflect.TypeOf((*MockAvsReaderer)(nil).GetFirstFilterNewOpTaskCreated), opts, taskIndex)
}

// GetFirstFilterNewRdTaskCreated mocks base method.
func (m *MockAvsReaderer) GetFirstFilterNewRdTaskCreated(opts *bind.FilterOpts, taskIndex []uint32) (contractFinalizerTaskManager.IFinalizerTaskManagerRdTask, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFirstFilterNewRdTaskCreated", opts, taskIndex)
	ret0, _ := ret[0].(contractFinalizerTaskManager.IFinalizerTaskManagerRdTask)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFirstFilterNewRdTaskCreated indicates an expected call of GetFirstFilterNewRdTaskCreated.
func (mr *MockAvsReadererMockRecorder) GetFirstFilterNewRdTaskCreated(opts, taskIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFirstFilterNewRdTaskCreated", reflect.TypeOf((*MockAvsReaderer)(nil).GetFirstFilterNewRdTaskCreated), opts, taskIndex)
}

// GetNonSigningOperatorPubKeys mocks base method.
func (m *MockAvsReaderer) GetNonSigningOperatorPubKeys(event contractFinalizerTaskManager.ContractFinalizerTaskManagerRdTaskResponded) ([]*bls.G1Point, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNonSigningOperatorPubKeys", event)
	ret0, _ := ret[0].([]*bls.G1Point)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetNonSigningOperatorPubKeys indicates an expected call of GetNonSigningOperatorPubKeys.
func (mr *MockAvsReadererMockRecorder) GetNonSigningOperatorPubKeys(event any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNonSigningOperatorPubKeys", reflect.TypeOf((*MockAvsReaderer)(nil).GetNonSigningOperatorPubKeys), event)
}

// GetOperatorIdList mocks base method.
func (m *MockAvsReaderer) GetOperatorIdList(opts *bind.CallOpts, quorum types.QuorumNum, blockNumber uint32) ([]types.Bytes32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorIdList", opts, quorum, blockNumber)
	ret0, _ := ret[0].([]types.Bytes32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorIdList indicates an expected call of GetOperatorIdList.
func (mr *MockAvsReadererMockRecorder) GetOperatorIdList(opts, quorum, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorIdList", reflect.TypeOf((*MockAvsReaderer)(nil).GetOperatorIdList), opts, quorum, blockNumber)
}

// GetOperatorsAvsStateAtBlock mocks base method.
func (m *MockAvsReaderer) GetOperatorsAvsStateAtBlock(ctx context.Context, registryCoordinatorAddr common.Address, quorumNumbers types.QuorumNums, blockNumber uint32) (map[types.Bytes32]types1.OperatorAvsState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorsAvsStateAtBlock", ctx, registryCoordinatorAddr, quorumNumbers, blockNumber)
	ret0, _ := ret[0].(map[types.Bytes32]types1.OperatorAvsState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorsAvsStateAtBlock indicates an expected call of GetOperatorsAvsStateAtBlock.
func (mr *MockAvsReadererMockRecorder) GetOperatorsAvsStateAtBlock(ctx, registryCoordinatorAddr, quorumNumbers, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorsAvsStateAtBlock", reflect.TypeOf((*MockAvsReaderer)(nil).GetOperatorsAvsStateAtBlock), ctx, registryCoordinatorAddr, quorumNumbers, blockNumber)
}

// GetOperatorsFromIds mocks base method.
func (m *MockAvsReaderer) GetOperatorsFromIds(opts *bind.CallOpts, registryCoordinatorAddr common.Address, operatorIds []types.Bytes32) ([]common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorsFromIds", opts, registryCoordinatorAddr, operatorIds)
	ret0, _ := ret[0].([]common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorsFromIds indicates an expected call of GetOperatorsFromIds.
func (mr *MockAvsReadererMockRecorder) GetOperatorsFromIds(opts, registryCoordinatorAddr, operatorIds any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorsFromIds", reflect.TypeOf((*MockAvsReaderer)(nil).GetOperatorsFromIds), opts, registryCoordinatorAddr, operatorIds)
}

// GetRdTaskRespondedEvents mocks base method.
func (m *MockAvsReaderer) GetRdTaskRespondedEvents(ctx context.Context, blocksAgo uint32) ([]contractFinalizerTaskManager.ContractFinalizerTaskManagerRdTaskResponded, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetRdTaskRespondedEvents", ctx, blocksAgo)
	ret0, _ := ret[0].([]contractFinalizerTaskManager.ContractFinalizerTaskManagerRdTaskResponded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetRdTaskRespondedEvents indicates an expected call of GetRdTaskRespondedEvents.
func (mr *MockAvsReadererMockRecorder) GetRdTaskRespondedEvents(ctx, blocksAgo any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetRdTaskRespondedEvents", reflect.TypeOf((*MockAvsReaderer)(nil).GetRdTaskRespondedEvents), ctx, blocksAgo)
}

// GetTypedOperatorsStakesForQuorumAtBlock mocks base method.
func (m *MockAvsReaderer) GetTypedOperatorsStakesForQuorumAtBlock(ctx context.Context, registryCoordinatorAddr common.Address, quorumNumbers types.QuorumNums, operatorAddr []common.Address, blockNumber uint32) (map[types.Bytes32]types1.OperatorAvsState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTypedOperatorsStakesForQuorumAtBlock", ctx, registryCoordinatorAddr, quorumNumbers, operatorAddr, blockNumber)
	ret0, _ := ret[0].(map[types.Bytes32]types1.OperatorAvsState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTypedOperatorsStakesForQuorumAtBlock indicates an expected call of GetTypedOperatorsStakesForQuorumAtBlock.
func (mr *MockAvsReadererMockRecorder) GetTypedOperatorsStakesForQuorumAtBlock(ctx, registryCoordinatorAddr, quorumNumbers, operatorAddr, blockNumber any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTypedOperatorsStakesForQuorumAtBlock", reflect.TypeOf((*MockAvsReaderer)(nil).GetTypedOperatorsStakesForQuorumAtBlock), ctx, registryCoordinatorAddr, quorumNumbers, operatorAddr, blockNumber)
}

// IdToTaskStatus mocks base method.
func (m *MockAvsReaderer) IdToTaskStatus(ctx context.Context, taskType uint8, taskIndex uint32) (uint8, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IdToTaskStatus", ctx, taskType, taskIndex)
	ret0, _ := ret[0].(uint8)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IdToTaskStatus indicates an expected call of IdToTaskStatus.
func (mr *MockAvsReadererMockRecorder) IdToTaskStatus(ctx, taskType, taskIndex any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IdToTaskStatus", reflect.TypeOf((*MockAvsReaderer)(nil).IdToTaskStatus), ctx, taskType, taskIndex)
}

// IsTaskPending mocks base method.
func (m *MockAvsReaderer) IsTaskPending(ctx context.Context) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsTaskPending", ctx)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// IsTaskPending indicates an expected call of IsTaskPending.
func (mr *MockAvsReadererMockRecorder) IsTaskPending(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsTaskPending", reflect.TypeOf((*MockAvsReaderer)(nil).IsTaskPending), ctx)
}

// LastCompletedOpTaskCreatedBlock mocks base method.
func (m *MockAvsReaderer) LastCompletedOpTaskCreatedBlock(ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCompletedOpTaskCreatedBlock", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastCompletedOpTaskCreatedBlock indicates an expected call of LastCompletedOpTaskCreatedBlock.
func (mr *MockAvsReadererMockRecorder) LastCompletedOpTaskCreatedBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCompletedOpTaskCreatedBlock", reflect.TypeOf((*MockAvsReaderer)(nil).LastCompletedOpTaskCreatedBlock), ctx)
}

// LastCompletedOpTaskCreatedBlockAtBlock mocks base method.
func (m *MockAvsReaderer) LastCompletedOpTaskCreatedBlockAtBlock(ctx context.Context, atBlock uint64) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastCompletedOpTaskCreatedBlockAtBlock", ctx, atBlock)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastCompletedOpTaskCreatedBlockAtBlock indicates an expected call of LastCompletedOpTaskCreatedBlockAtBlock.
func (mr *MockAvsReadererMockRecorder) LastCompletedOpTaskCreatedBlockAtBlock(ctx, atBlock any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastCompletedOpTaskCreatedBlockAtBlock", reflect.TypeOf((*MockAvsReaderer)(nil).LastCompletedOpTaskCreatedBlockAtBlock), ctx, atBlock)
}

// LastOpTaskCreatedBlock mocks base method.
func (m *MockAvsReaderer) LastOpTaskCreatedBlock(ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastOpTaskCreatedBlock", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastOpTaskCreatedBlock indicates an expected call of LastOpTaskCreatedBlock.
func (mr *MockAvsReadererMockRecorder) LastOpTaskCreatedBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastOpTaskCreatedBlock", reflect.TypeOf((*MockAvsReaderer)(nil).LastOpTaskCreatedBlock), ctx)
}

// LastRdTaskCreatedBlock mocks base method.
func (m *MockAvsReaderer) LastRdTaskCreatedBlock(ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LastRdTaskCreatedBlock", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LastRdTaskCreatedBlock indicates an expected call of LastRdTaskCreatedBlock.
func (mr *MockAvsReadererMockRecorder) LastRdTaskCreatedBlock(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LastRdTaskCreatedBlock", reflect.TypeOf((*MockAvsReaderer)(nil).LastRdTaskCreatedBlock), ctx)
}

// LatestOpTaskNum mocks base method.
func (m *MockAvsReaderer) LatestOpTaskNum(ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestOpTaskNum", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestOpTaskNum indicates an expected call of LatestOpTaskNum.
func (mr *MockAvsReadererMockRecorder) LatestOpTaskNum(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestOpTaskNum", reflect.TypeOf((*MockAvsReaderer)(nil).LatestOpTaskNum), ctx)
}

// LatestRdTaskNum mocks base method.
func (m *MockAvsReaderer) LatestRdTaskNum(ctx context.Context) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LatestRdTaskNum", ctx)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// LatestRdTaskNum indicates an expected call of LatestRdTaskNum.
func (mr *MockAvsReadererMockRecorder) LatestRdTaskNum(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LatestRdTaskNum", reflect.TypeOf((*MockAvsReaderer)(nil).LatestRdTaskNum), ctx)
}

// ParseMinimumStakeForQuorumUpdated mocks base method.
func (m *MockAvsReaderer) ParseMinimumStakeForQuorumUpdated(log types0.Log) (*contractStakeRegistry.ContractStakeRegistryMinimumStakeForQuorumUpdated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseMinimumStakeForQuorumUpdated", log)
	ret0, _ := ret[0].(*contractStakeRegistry.ContractStakeRegistryMinimumStakeForQuorumUpdated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseMinimumStakeForQuorumUpdated indicates an expected call of ParseMinimumStakeForQuorumUpdated.
func (mr *MockAvsReadererMockRecorder) ParseMinimumStakeForQuorumUpdated(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseMinimumStakeForQuorumUpdated", reflect.TypeOf((*MockAvsReaderer)(nil).ParseMinimumStakeForQuorumUpdated), log)
}

// ParseOpTaskCompleted mocks base method.
func (m *MockAvsReaderer) ParseOpTaskCompleted(log types0.Log) (*contractFinalizerTaskManager.ContractFinalizerTaskManagerOpTaskCompleted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseOpTaskCompleted", log)
	ret0, _ := ret[0].(*contractFinalizerTaskManager.ContractFinalizerTaskManagerOpTaskCompleted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOpTaskCompleted indicates an expected call of ParseOpTaskCompleted.
func (mr *MockAvsReadererMockRecorder) ParseOpTaskCompleted(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOpTaskCompleted", reflect.TypeOf((*MockAvsReaderer)(nil).ParseOpTaskCompleted), log)
}

// ParseOperatorSharesDecreased mocks base method.
func (m *MockAvsReaderer) ParseOperatorSharesDecreased(log types0.Log) (*contractDelegationManager.ContractDelegationManagerOperatorSharesDecreased, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseOperatorSharesDecreased", log)
	ret0, _ := ret[0].(*contractDelegationManager.ContractDelegationManagerOperatorSharesDecreased)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOperatorSharesDecreased indicates an expected call of ParseOperatorSharesDecreased.
func (mr *MockAvsReadererMockRecorder) ParseOperatorSharesDecreased(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOperatorSharesDecreased", reflect.TypeOf((*MockAvsReaderer)(nil).ParseOperatorSharesDecreased), log)
}

// ParseOperatorSharesIncreased mocks base method.
func (m *MockAvsReaderer) ParseOperatorSharesIncreased(log types0.Log) (*contractDelegationManager.ContractDelegationManagerOperatorSharesIncreased, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseOperatorSharesIncreased", log)
	ret0, _ := ret[0].(*contractDelegationManager.ContractDelegationManagerOperatorSharesIncreased)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOperatorSharesIncreased indicates an expected call of ParseOperatorSharesIncreased.
func (mr *MockAvsReadererMockRecorder) ParseOperatorSharesIncreased(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOperatorSharesIncreased", reflect.TypeOf((*MockAvsReaderer)(nil).ParseOperatorSharesIncreased), log)
}

// ParseOperatorStakeUpdate mocks base method.
func (m *MockAvsReaderer) ParseOperatorStakeUpdate(log types0.Log) (*contractStakeRegistry.ContractStakeRegistryOperatorStakeUpdate, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseOperatorStakeUpdate", log)
	ret0, _ := ret[0].(*contractStakeRegistry.ContractStakeRegistryOperatorStakeUpdate)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseOperatorStakeUpdate indicates an expected call of ParseOperatorStakeUpdate.
func (mr *MockAvsReadererMockRecorder) ParseOperatorStakeUpdate(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseOperatorStakeUpdate", reflect.TypeOf((*MockAvsReaderer)(nil).ParseOperatorStakeUpdate), log)
}

// ParsePauseTrackingOpState mocks base method.
func (m *MockAvsReaderer) ParsePauseTrackingOpState(log types0.Log) (*contractFinalizerTaskManager.ContractFinalizerTaskManagerPauseTrackingOpState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParsePauseTrackingOpState", log)
	ret0, _ := ret[0].(*contractFinalizerTaskManager.ContractFinalizerTaskManagerPauseTrackingOpState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParsePauseTrackingOpState indicates an expected call of ParsePauseTrackingOpState.
func (mr *MockAvsReadererMockRecorder) ParsePauseTrackingOpState(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParsePauseTrackingOpState", reflect.TypeOf((*MockAvsReaderer)(nil).ParsePauseTrackingOpState), log)
}

// ParseRdTaskCompleted mocks base method.
func (m *MockAvsReaderer) ParseRdTaskCompleted(log types0.Log) (*contractFinalizerTaskManager.ContractFinalizerTaskManagerRdTaskCompleted, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRdTaskCompleted", log)
	ret0, _ := ret[0].(*contractFinalizerTaskManager.ContractFinalizerTaskManagerRdTaskCompleted)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRdTaskCompleted indicates an expected call of ParseRdTaskCompleted.
func (mr *MockAvsReadererMockRecorder) ParseRdTaskCompleted(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRdTaskCompleted", reflect.TypeOf((*MockAvsReaderer)(nil).ParseRdTaskCompleted), log)
}

// ParseResumeTrackingOpState mocks base method.
func (m *MockAvsReaderer) ParseResumeTrackingOpState(log types0.Log) (*contractFinalizerTaskManager.ContractFinalizerTaskManagerResumeTrackingOpState, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseResumeTrackingOpState", log)
	ret0, _ := ret[0].(*contractFinalizerTaskManager.ContractFinalizerTaskManagerResumeTrackingOpState)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseResumeTrackingOpState indicates an expected call of ParseResumeTrackingOpState.
func (mr *MockAvsReadererMockRecorder) ParseResumeTrackingOpState(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseResumeTrackingOpState", reflect.TypeOf((*MockAvsReaderer)(nil).ParseResumeTrackingOpState), log)
}

// ParseStrategyMultiplierUpdated mocks base method.
func (m *MockAvsReaderer) ParseStrategyMultiplierUpdated(log types0.Log) (*contractStakeRegistry.ContractStakeRegistryStrategyMultiplierUpdated, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseStrategyMultiplierUpdated", log)
	ret0, _ := ret[0].(*contractStakeRegistry.ContractStakeRegistryStrategyMultiplierUpdated)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseStrategyMultiplierUpdated indicates an expected call of ParseStrategyMultiplierUpdated.
func (mr *MockAvsReadererMockRecorder) ParseStrategyMultiplierUpdated(log any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseStrategyMultiplierUpdated", reflect.TypeOf((*MockAvsReaderer)(nil).ParseStrategyMultiplierUpdated), log)
}

// RegistryCoordinatorAddress mocks base method.
func (m *MockAvsReaderer) RegistryCoordinatorAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RegistryCoordinatorAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// RegistryCoordinatorAddress indicates an expected call of RegistryCoordinatorAddress.
func (mr *MockAvsReadererMockRecorder) RegistryCoordinatorAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RegistryCoordinatorAddress", reflect.TypeOf((*MockAvsReaderer)(nil).RegistryCoordinatorAddress))
}

// StakeRegistryAddress mocks base method.
func (m *MockAvsReaderer) StakeRegistryAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StakeRegistryAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// StakeRegistryAddress indicates an expected call of StakeRegistryAddress.
func (mr *MockAvsReadererMockRecorder) StakeRegistryAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StakeRegistryAddress", reflect.TypeOf((*MockAvsReaderer)(nil).StakeRegistryAddress))
}

// TaskManagerAddress mocks base method.
func (m *MockAvsReaderer) TaskManagerAddress() common.Address {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskManagerAddress")
	ret0, _ := ret[0].(common.Address)
	return ret0
}

// TaskManagerAddress indicates an expected call of TaskManagerAddress.
func (mr *MockAvsReadererMockRecorder) TaskManagerAddress() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskManagerAddress", reflect.TypeOf((*MockAvsReaderer)(nil).TaskManagerAddress))
}

// TaskResponseWindowBlock mocks base method.
func (m *MockAvsReaderer) TaskResponseWindowBlock(opts *bind.CallOpts) (uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "TaskResponseWindowBlock", opts)
	ret0, _ := ret[0].(uint32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// TaskResponseWindowBlock indicates an expected call of TaskResponseWindowBlock.
func (mr *MockAvsReadererMockRecorder) TaskResponseWindowBlock(opts any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "TaskResponseWindowBlock", reflect.TypeOf((*MockAvsReaderer)(nil).TaskResponseWindowBlock), opts)
}

// MockAvsSubscriberer is a mock of AvsSubscriberer interface.
type MockAvsSubscriberer struct {
	ctrl     *gomock.Controller
	recorder *MockAvsSubscribererMockRecorder
	isgomock struct{}
}

// MockAvsSubscribererMockRecorder is the mock recorder for MockAvsSubscriberer.
type MockAvsSubscribererMockRecorder struct {
	mock *MockAvsSubscriberer
}

// NewMockAvsSubscriberer creates a new mock instance.
func NewMockAvsSubscriberer(ctrl *gomock.Controller) *MockAvsSubscriberer {
	mock := &MockAvsSubscriberer{ctrl: ctrl}
	mock.recorder = &MockAvsSubscribererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvsSubscriberer) EXPECT() *MockAvsSubscribererMockRecorder {
	return m.recorder
}

// ParseRdTaskResponded mocks base method.
func (m *MockAvsSubscriberer) ParseRdTaskResponded(rawLog types0.Log) (*contractFinalizerTaskManager.ContractFinalizerTaskManagerRdTaskResponded, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseRdTaskResponded", rawLog)
	ret0, _ := ret[0].(*contractFinalizerTaskManager.ContractFinalizerTaskManagerRdTaskResponded)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseRdTaskResponded indicates an expected call of ParseRdTaskResponded.
func (mr *MockAvsSubscribererMockRecorder) ParseRdTaskResponded(rawLog any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseRdTaskResponded", reflect.TypeOf((*MockAvsSubscriberer)(nil).ParseRdTaskResponded), rawLog)
}

// StreamQueryWithHistory mocks base method.
func (m *MockAvsSubscriberer) StreamQueryWithHistory(ctx context.Context, q *ethereum.FilterQuery) (chan types0.Log, ethereum.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "StreamQueryWithHistory", ctx, q)
	ret0, _ := ret[0].(chan types0.Log)
	ret1, _ := ret[1].(ethereum.Subscription)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// StreamQueryWithHistory indicates an expected call of StreamQueryWithHistory.
func (mr *MockAvsSubscribererMockRecorder) StreamQueryWithHistory(ctx, q any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StreamQueryWithHistory", reflect.TypeOf((*MockAvsSubscriberer)(nil).StreamQueryWithHistory), ctx, q)
}

// SubscribeToNewRdTasks mocks base method.
func (m *MockAvsSubscriberer) SubscribeToNewRdTasks(newTaskCreatedChan chan *contractFinalizerTaskManager.ContractFinalizerTaskManagerNewRdTaskCreated) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToNewRdTasks", newTaskCreatedChan)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeToNewRdTasks indicates an expected call of SubscribeToNewRdTasks.
func (mr *MockAvsSubscribererMockRecorder) SubscribeToNewRdTasks(newTaskCreatedChan any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToNewRdTasks", reflect.TypeOf((*MockAvsSubscriberer)(nil).SubscribeToNewRdTasks), newTaskCreatedChan)
}

// SubscribeToOpTaskCompleted mocks base method.
func (m *MockAvsSubscriberer) SubscribeToOpTaskCompleted(opTaskCompletionLogs chan *contractFinalizerTaskManager.ContractFinalizerTaskManagerOpTaskCompleted) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToOpTaskCompleted", opTaskCompletionLogs)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToOpTaskCompleted indicates an expected call of SubscribeToOpTaskCompleted.
func (mr *MockAvsSubscribererMockRecorder) SubscribeToOpTaskCompleted(opTaskCompletionLogs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToOpTaskCompleted", reflect.TypeOf((*MockAvsSubscriberer)(nil).SubscribeToOpTaskCompleted), opTaskCompletionLogs)
}

// SubscribeToOperatorStakeUpdate mocks base method.
func (m *MockAvsSubscriberer) SubscribeToOperatorStakeUpdate(updateLogs chan *contractStakeRegistry.ContractStakeRegistryOperatorStakeUpdate) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToOperatorStakeUpdate", updateLogs)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToOperatorStakeUpdate indicates an expected call of SubscribeToOperatorStakeUpdate.
func (mr *MockAvsSubscribererMockRecorder) SubscribeToOperatorStakeUpdate(updateLogs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToOperatorStakeUpdate", reflect.TypeOf((*MockAvsSubscriberer)(nil).SubscribeToOperatorStakeUpdate), updateLogs)
}

// SubscribeToRdTaskResponses mocks base method.
func (m *MockAvsSubscriberer) SubscribeToRdTaskResponses(taskResponseLogs chan *contractFinalizerTaskManager.ContractFinalizerTaskManagerRdTaskResponded) event.Subscription {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToRdTaskResponses", taskResponseLogs)
	ret0, _ := ret[0].(event.Subscription)
	return ret0
}

// SubscribeToRdTaskResponses indicates an expected call of SubscribeToRdTaskResponses.
func (mr *MockAvsSubscribererMockRecorder) SubscribeToRdTaskResponses(taskResponseLogs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToRdTaskResponses", reflect.TypeOf((*MockAvsSubscriberer)(nil).SubscribeToRdTaskResponses), taskResponseLogs)
}

// SubscribeToResumeTrackingOpState mocks base method.
func (m *MockAvsSubscriberer) SubscribeToResumeTrackingOpState(resumeLogs chan *contractFinalizerTaskManager.ContractFinalizerTaskManagerResumeTrackingOpState) (event.Subscription, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SubscribeToResumeTrackingOpState", resumeLogs)
	ret0, _ := ret[0].(event.Subscription)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SubscribeToResumeTrackingOpState indicates an expected call of SubscribeToResumeTrackingOpState.
func (mr *MockAvsSubscribererMockRecorder) SubscribeToResumeTrackingOpState(resumeLogs any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SubscribeToResumeTrackingOpState", reflect.TypeOf((*MockAvsSubscriberer)(nil).SubscribeToResumeTrackingOpState), resumeLogs)
}

// MockAvsWriterer is a mock of AvsWriterer interface.
type MockAvsWriterer struct {
	ctrl     *gomock.Controller
	recorder *MockAvsWritererMockRecorder
	isgomock struct{}
}

// MockAvsWritererMockRecorder is the mock recorder for MockAvsWriterer.
type MockAvsWritererMockRecorder struct {
	mock *MockAvsWriterer
}

// NewMockAvsWriterer creates a new mock instance.
func NewMockAvsWriterer(ctrl *gomock.Controller) *MockAvsWriterer {
	mock := &MockAvsWriterer{ctrl: ctrl}
	mock.recorder = &MockAvsWritererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvsWriterer) EXPECT() *MockAvsWritererMockRecorder {
	return m.recorder
}

// CancelPendingTask mocks base method.
func (m *MockAvsWriterer) CancelPendingTask(ctx context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CancelPendingTask", ctx)
	ret0, _ := ret[0].(error)
	return ret0
}

// CancelPendingTask indicates an expected call of CancelPendingTask.
func (mr *MockAvsWritererMockRecorder) CancelPendingTask(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CancelPendingTask", reflect.TypeOf((*MockAvsWriterer)(nil).CancelPendingTask), ctx)
}

// EjectOperators mocks base method.
func (m *MockAvsWriterer) EjectOperators(ctx context.Context, operators []common.Address, quorumNumbers [][]uint8) (*types0.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EjectOperators", ctx, operators, quorumNumbers)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EjectOperators indicates an expected call of EjectOperators.
func (mr *MockAvsWritererMockRecorder) EjectOperators(ctx, operators, quorumNumbers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EjectOperators", reflect.TypeOf((*MockAvsWriterer)(nil).EjectOperators), ctx, operators, quorumNumbers)
}

// SendAggregatedOpTaskResponse mocks base method.
func (m *MockAvsWriterer) SendAggregatedOpTaskResponse(ctx context.Context, task contractFinalizerTaskManager.IFinalizerTaskManagerOpTask, taskResponse contractFinalizerTaskManager.IFinalizerTaskManagerOpTaskResponse, nonSignerStakesAndSignature contractFinalizerTaskManager.IBLSSignatureCheckerNonSignerStakesAndSignature) (*types0.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAggregatedOpTaskResponse", ctx, task, taskResponse, nonSignerStakesAndSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAggregatedOpTaskResponse indicates an expected call of SendAggregatedOpTaskResponse.
func (mr *MockAvsWritererMockRecorder) SendAggregatedOpTaskResponse(ctx, task, taskResponse, nonSignerStakesAndSignature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAggregatedOpTaskResponse", reflect.TypeOf((*MockAvsWriterer)(nil).SendAggregatedOpTaskResponse), ctx, task, taskResponse, nonSignerStakesAndSignature)
}

// SendAggregatedRdTaskResponse mocks base method.
func (m *MockAvsWriterer) SendAggregatedRdTaskResponse(ctx context.Context, task contractFinalizerTaskManager.IFinalizerTaskManagerRdTask, taskResponse contractFinalizerTaskManager.IFinalizerTaskManagerRdTaskResponse, nonSignerStakesAndSignature contractFinalizerTaskManager.IBLSSignatureCheckerNonSignerStakesAndSignature) (*types0.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendAggregatedRdTaskResponse", ctx, task, taskResponse, nonSignerStakesAndSignature)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendAggregatedRdTaskResponse indicates an expected call of SendAggregatedRdTaskResponse.
func (mr *MockAvsWritererMockRecorder) SendAggregatedRdTaskResponse(ctx, task, taskResponse, nonSignerStakesAndSignature any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendAggregatedRdTaskResponse", reflect.TypeOf((*MockAvsWriterer)(nil).SendAggregatedRdTaskResponse), ctx, task, taskResponse, nonSignerStakesAndSignature)
}

// SendNewOpTask mocks base method.
func (m *MockAvsWriterer) SendNewOpTask(ctx context.Context, quorumThresholdPercentage uint32, quorumNumbers types.QuorumNums) (contractFinalizerTaskManager.IFinalizerTaskManagerOpTask, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNewOpTask", ctx, quorumThresholdPercentage, quorumNumbers)
	ret0, _ := ret[0].(contractFinalizerTaskManager.IFinalizerTaskManagerOpTask)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendNewOpTask indicates an expected call of SendNewOpTask.
func (mr *MockAvsWritererMockRecorder) SendNewOpTask(ctx, quorumThresholdPercentage, quorumNumbers any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNewOpTask", reflect.TypeOf((*MockAvsWriterer)(nil).SendNewOpTask), ctx, quorumThresholdPercentage, quorumNumbers)
}

// SendNewRdTask mocks base method.
func (m *MockAvsWriterer) SendNewRdTask(ctx context.Context, chainToUpdate uint8, chainBatchIdToUpdate uint32) (contractFinalizerTaskManager.IFinalizerTaskManagerRdTask, uint32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendNewRdTask", ctx, chainToUpdate, chainBatchIdToUpdate)
	ret0, _ := ret[0].(contractFinalizerTaskManager.IFinalizerTaskManagerRdTask)
	ret1, _ := ret[1].(uint32)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// SendNewRdTask indicates an expected call of SendNewRdTask.
func (mr *MockAvsWritererMockRecorder) SendNewRdTask(ctx, chainToUpdate, chainBatchIdToUpdate any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendNewRdTask", reflect.TypeOf((*MockAvsWriterer)(nil).SendNewRdTask), ctx, chainToUpdate, chainBatchIdToUpdate)
}

// MockEthRpcClientsInterface is a mock of EthRpcClientsInterface interface.
type MockEthRpcClientsInterface struct {
	ctrl     *gomock.Controller
	recorder *MockEthRpcClientsInterfaceMockRecorder
	isgomock struct{}
}

// MockEthRpcClientsInterfaceMockRecorder is the mock recorder for MockEthRpcClientsInterface.
type MockEthRpcClientsInterfaceMockRecorder struct {
	mock *MockEthRpcClientsInterface
}

// NewMockEthRpcClientsInterface creates a new mock instance.
func NewMockEthRpcClientsInterface(ctrl *gomock.Controller) *MockEthRpcClientsInterface {
	mock := &MockEthRpcClientsInterface{ctrl: ctrl}
	mock.recorder = &MockEthRpcClientsInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEthRpcClientsInterface) EXPECT() *MockEthRpcClientsInterfaceMockRecorder {
	return m.recorder
}

// AvsRegistryChainReader mocks base method.
func (m *MockEthRpcClientsInterface) AvsRegistryChainReader() *avsregistry.ChainReader {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvsRegistryChainReader")
	ret0, _ := ret[0].(*avsregistry.ChainReader)
	return ret0
}

// AvsRegistryChainReader indicates an expected call of AvsRegistryChainReader.
func (mr *MockEthRpcClientsInterfaceMockRecorder) AvsRegistryChainReader() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvsRegistryChainReader", reflect.TypeOf((*MockEthRpcClientsInterface)(nil).AvsRegistryChainReader))
}

// AvsRegistryChainSubscriber mocks base method.
func (m *MockEthRpcClientsInterface) AvsRegistryChainSubscriber() *avsregistry.ChainSubscriber {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AvsRegistryChainSubscriber")
	ret0, _ := ret[0].(*avsregistry.ChainSubscriber)
	return ret0
}

// AvsRegistryChainSubscriber indicates an expected call of AvsRegistryChainSubscriber.
func (mr *MockEthRpcClientsInterfaceMockRecorder) AvsRegistryChainSubscriber() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AvsRegistryChainSubscriber", reflect.TypeOf((*MockEthRpcClientsInterface)(nil).AvsRegistryChainSubscriber))
}

// BlockNumber mocks base method.
func (m *MockEthRpcClientsInterface) BlockNumber(ctx context.Context) (uint64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BlockNumber", ctx)
	ret0, _ := ret[0].(uint64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// BlockNumber indicates an expected call of BlockNumber.
func (mr *MockEthRpcClientsInterfaceMockRecorder) BlockNumber(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BlockNumber", reflect.TypeOf((*MockEthRpcClientsInterface)(nil).BlockNumber), ctx)
}

// GetOperatorFromId mocks base method.
func (m *MockEthRpcClientsInterface) GetOperatorFromId(opts *bind.CallOpts, operatorId types.Bytes32) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorFromId", opts, operatorId)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorFromId indicates an expected call of GetOperatorFromId.
func (mr *MockEthRpcClientsInterfaceMockRecorder) GetOperatorFromId(opts, operatorId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorFromId", reflect.TypeOf((*MockEthRpcClientsInterface)(nil).GetOperatorFromId), opts, operatorId)
}

// GetOperatorId mocks base method.
func (m *MockEthRpcClientsInterface) GetOperatorId(opts *bind.CallOpts, operatorAddress common.Address) ([32]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOperatorId", opts, operatorAddress)
	ret0, _ := ret[0].([32]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOperatorId indicates an expected call of GetOperatorId.
func (mr *MockEthRpcClientsInterfaceMockRecorder) GetOperatorId(opts, operatorAddress any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOperatorId", reflect.TypeOf((*MockEthRpcClientsInterface)(nil).GetOperatorId), opts, operatorAddress)
}

// SenderAddress mocks base method.
func (m *MockEthRpcClientsInterface) SenderAddress(ctx context.Context) (common.Address, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SenderAddress", ctx)
	ret0, _ := ret[0].(common.Address)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SenderAddress indicates an expected call of SenderAddress.
func (mr *MockEthRpcClientsInterfaceMockRecorder) SenderAddress(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SenderAddress", reflect.TypeOf((*MockEthRpcClientsInterface)(nil).SenderAddress), ctx)
}

// UpdateStakesOfEntireOperatorSetForQuorums mocks base method.
func (m *MockEthRpcClientsInterface) UpdateStakesOfEntireOperatorSetForQuorums(ctx context.Context, operatorsPerQuorum [][]common.Address, quorumNumbers types.QuorumNums, waitForReceipt bool) (*types0.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStakesOfEntireOperatorSetForQuorums", ctx, operatorsPerQuorum, quorumNumbers, waitForReceipt)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStakesOfEntireOperatorSetForQuorums indicates an expected call of UpdateStakesOfEntireOperatorSetForQuorums.
func (mr *MockEthRpcClientsInterfaceMockRecorder) UpdateStakesOfEntireOperatorSetForQuorums(ctx, operatorsPerQuorum, quorumNumbers, waitForReceipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStakesOfEntireOperatorSetForQuorums", reflect.TypeOf((*MockEthRpcClientsInterface)(nil).UpdateStakesOfEntireOperatorSetForQuorums), ctx, operatorsPerQuorum, quorumNumbers, waitForReceipt)
}

// UpdateStakesOfOperatorSubsetForAllQuorums mocks base method.
func (m *MockEthRpcClientsInterface) UpdateStakesOfOperatorSubsetForAllQuorums(ctx context.Context, operators []common.Address, waitForReceipt bool) (*types0.Receipt, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStakesOfOperatorSubsetForAllQuorums", ctx, operators, waitForReceipt)
	ret0, _ := ret[0].(*types0.Receipt)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateStakesOfOperatorSubsetForAllQuorums indicates an expected call of UpdateStakesOfOperatorSubsetForAllQuorums.
func (mr *MockEthRpcClientsInterfaceMockRecorder) UpdateStakesOfOperatorSubsetForAllQuorums(ctx, operators, waitForReceipt any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStakesOfOperatorSubsetForAllQuorums", reflect.TypeOf((*MockEthRpcClientsInterface)(nil).UpdateStakesOfOperatorSubsetForAllQuorums), ctx, operators, waitForReceipt)
}
