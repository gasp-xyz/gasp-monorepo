// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_vesting_mangata
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-11-29, STEPS: `50`, REPEAT: 20, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("rollup-local"), DB CACHE: 1024

// Executed Command:
// target/release/rollup-node
// benchmark
// pallet
// -l=info,runtime::collective=warn,xyk=warn
// --chain
// rollup-local
// --wasm-execution
// compiled
// --pallet
// *
// --extrinsic
// *
// --steps
// 50
// --repeat
// 20
// --template
// ./templates/module-weight-template.hbs
// --output
// ./benchmarks/

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_vesting_mangata.
pub trait WeightInfo {
	fn vest_locked(l: u32, s: u32, ) -> Weight;
	fn vest_unlocked(l: u32, s: u32, ) -> Weight;
	fn vest_other_locked(l: u32, s: u32, ) -> Weight;
	fn vest_other_unlocked(l: u32, s: u32, ) -> Weight;
	fn force_vested_transfer(l: u32, s: u32, ) -> Weight;
	fn not_unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
	fn unlocking_merge_schedules(l: u32, s: u32, ) -> Weight;
}

/// Weights for pallet_vesting_mangata using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_vesting_mangata::WeightInfo for ModuleWeight<T> {
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn vest_locked(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(48_790_361, 0))
			// Standard Error: 6_465
			.saturating_add((Weight::from_parts(129_444, 0)).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:1)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn vest_unlocked(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(58_308_969, 0))
			// Standard Error: 5_599
			.saturating_add((Weight::from_parts(63_862, 0)).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn vest_other_locked(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(48_645_506, 0))
			// Standard Error: 5_906
			.saturating_add((Weight::from_parts(130_885, 0)).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:1)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn vest_other_unlocked(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(57_649_149, 0))
			// Standard Error: 7_493
			.saturating_add((Weight::from_parts(93_628, 0)).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:0)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	fn force_vested_transfer(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(76_379_944, 0))
			// Standard Error: 8_498
			.saturating_add((Weight::from_parts(213_964, 0)).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn not_unlocking_merge_schedules(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(48_430_012, 0))
			// Standard Error: 7_536
			.saturating_add((Weight::from_parts(152_659, 0)).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn unlocking_merge_schedules(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(48_230_930, 0))
			// Standard Error: 7_453
			.saturating_add((Weight::from_parts(179_511, 0)).saturating_mul(s as u64))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn vest_locked(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(48_790_361, 0))
			// Standard Error: 6_465
			.saturating_add((Weight::from_parts(129_444, 0)).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:1)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn vest_unlocked(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(58_308_969, 0))
			// Standard Error: 5_599
			.saturating_add((Weight::from_parts(63_862, 0)).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn vest_other_locked(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(48_645_506, 0))
			// Standard Error: 5_906
			.saturating_add((Weight::from_parts(130_885, 0)).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:1)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn vest_other_unlocked(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(57_649_149, 0))
			// Standard Error: 7_493
			.saturating_add((Weight::from_parts(93_628, 0)).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:0)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	fn force_vested_transfer(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(76_379_944, 0))
			// Standard Error: 8_498
			.saturating_add((Weight::from_parts(213_964, 0)).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn not_unlocking_merge_schedules(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(48_430_012, 0))
			// Standard Error: 7_536
			.saturating_add((Weight::from_parts(152_659, 0)).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `Vesting::Vesting` (r:1 w:1)
	// Proof: `Vesting::Vesting` (`max_values`: None, `max_size`: Some(1857), added: 4332, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Locks` (r:1 w:0)
	// Proof: `Tokens::Locks` (`max_values`: None, `max_size`: Some(1249), added: 3724, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn unlocking_merge_schedules(_l: u32, s: u32, ) -> Weight {
		(Weight::from_parts(48_230_930, 0))
			// Standard Error: 7_453
			.saturating_add((Weight::from_parts(179_511, 0)).saturating_mul(s as u64))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
}
