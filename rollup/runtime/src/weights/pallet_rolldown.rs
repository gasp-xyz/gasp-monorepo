// This file is part of Mangata.

// Copyright (C) 2020-2022 Mangata Foundation.
// SPDX-License-Identifier: GPL-3.0-or-later WITH Classpath-exception-2.0

// This program is free software: you can redistribute it and/or modify
// it under the terms of the GNU General Public License as published by
// the Free Software Foundation, either version 3 of the License, or
// (at your option) any later version.

// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
// GNU General Public License for more details.

// You should have received a copy of the GNU General Public License
// along with this program. If not, see <https://www.gnu.org/licenses/>.

//! Autogenerated weights for pallet_rolldown
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-10-29, STEPS: `2`, REPEAT: 2, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! EXECUTION: , WASM-EXECUTION: Compiled, CHAIN: Some("rollup-local"), DB CACHE: 1024

// Executed Command:
// /home/striker/work/mangata-ws/mangata-node/scripts/..//target/release/rollup-node
// benchmark
// pallet
// --chain
// rollup-local
// --execution
// wasm
// --wasm-execution
// compiled
// --pallet
// pallet_rolldown
// --extrinsic
// *
// --steps
// 2
// --repeat
// 2
// --output
// ./benchmarks/pallet_rolldown_weights.rs
// --template
// ./templates/module-weight-template.hbs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(clippy::unnecessary_cast)]

use frame_support::{traits::Get, weights::{Weight, constants::RocksDbWeight}};
use sp_std::marker::PhantomData;

/// Weight functions needed for pallet_rolldown.
pub trait WeightInfo {
	fn set_manual_batch_extra_fee() -> Weight;
	fn create_batch() -> Weight;
	fn force_create_batch() -> Weight;
	fn update_l2_from_l1(x: u32, ) -> Weight;
	fn update_l2_from_l1_unsafe(x: u32, ) -> Weight;
	fn force_update_l2_from_l1(x: u32, ) -> Weight;
	fn cancel_requests_from_l1() -> Weight;
	fn force_cancel_requests_from_l1() -> Weight;
	fn withdraw() -> Weight;
	fn refund_failed_deposit() -> Weight;
	fn ferry_deposit() -> Weight;
	fn ferry_deposit_unsafe() -> Weight;
	fn process_deposit() -> Weight;
	fn process_cancel_resolution() -> Weight;
	fn load_next_update_from_execution_queue() -> Weight{
		(Weight::from_parts(22_558_000, 0))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn schedule_request_for_execution_if_dispute_period_has_passsed() -> Weight{
		(Weight::from_parts(22_558_000, 0))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn maybe_create_batch() -> Weight{
		(Weight::from_parts(22_558_000, 0))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	fn execute_requests_from_execute_queue() -> Weight{
		(Weight::from_parts(22_558_000, 0))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
}

/// Weights for pallet_rolldown using the Mangata node and recommended hardware.
pub struct ModuleWeight<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_rolldown::WeightInfo for ModuleWeight<T> {
	// Storage: `Rolldown::ManualBatchExtraFee` (r:0 w:1)
	// Proof: `Rolldown::ManualBatchExtraFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_manual_batch_extra_fee() -> Weight {
		(Weight::from_parts(22_558_000, 0))
			.saturating_add(T::DbWeight::get().writes(1 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::AliasAccount` (r:1 w:0)
	// Proof: `SequencerStaking::AliasAccount` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::ManualBatchExtraFee` (r:1 w:0)
	// Proof: `Rolldown::ManualBatchExtraFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2RequestsBatchLast` (r:1 w:1)
	// Proof: `Rolldown::L2RequestsBatchLast` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2OriginRequestId` (r:1 w:0)
	// Proof: `Rolldown::L2OriginRequestId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2Requests` (r:1 w:0)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2RequestsBatch` (r:0 w:1)
	// Proof: `Rolldown::L2RequestsBatch` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	fn create_batch() -> Weight {
		(Weight::from_parts(58_178_000, 0))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2Requests` (r:1 w:0)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2RequestsBatchLast` (r:1 w:1)
	// Proof: `Rolldown::L2RequestsBatchLast` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2RequestsBatch` (r:0 w:1)
	// Proof: `Rolldown::L2RequestsBatch` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	fn force_create_batch() -> Weight {
		(Weight::from_parts(28_495_000, 0))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::SelectedSequencer` (r:1 w:0)
	// Proof: `SequencerStaking::SelectedSequencer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::PendingSequencerUpdates` (r:1 w:1)
	// Proof: `Rolldown::PendingSequencerUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::CurrentRound` (r:1 w:0)
	// Proof: `SequencerStaking::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::AwardedPts` (r:1 w:1)
	// Proof: `SequencerStaking::AwardedPts` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::Points` (r:1 w:1)
	// Proof: `SequencerStaking::Points` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::LastUpdateBySequencer` (r:0 w:1)
	// Proof: `Rolldown::LastUpdateBySequencer` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn update_l2_from_l1(x: u32, ) -> Weight {
		(Weight::from_parts(53_903_308, 0))
			// Standard Error: 63_247
			.saturating_add((Weight::from_parts(1_544_095, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::SelectedSequencer` (r:1 w:0)
	// Proof: `SequencerStaking::SelectedSequencer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::PendingSequencerUpdates` (r:1 w:1)
	// Proof: `Rolldown::PendingSequencerUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::CurrentRound` (r:1 w:0)
	// Proof: `SequencerStaking::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::AwardedPts` (r:1 w:1)
	// Proof: `SequencerStaking::AwardedPts` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::Points` (r:1 w:1)
	// Proof: `SequencerStaking::Points` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::LastUpdateBySequencer` (r:0 w:1)
	// Proof: `Rolldown::LastUpdateBySequencer` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn update_l2_from_l1_unsafe(x: u32, ) -> Weight {
		(Weight::from_parts(53_063_762, 0))
			// Standard Error: 117_584
			.saturating_add((Weight::from_parts(1_073_368, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(8 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::MaxAcceptedRequestIdOnl2` (r:1 w:1)
	// Proof: `Rolldown::MaxAcceptedRequestIdOnl2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::LastScheduledUpdateIdInExecutionQueue` (r:1 w:1)
	// Proof: `Rolldown::LastScheduledUpdateIdInExecutionQueue` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::UpdatesExecutionQueue` (r:0 w:1)
	// Proof: `Rolldown::UpdatesExecutionQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_update_l2_from_l1(x: u32, ) -> Weight {
		(Weight::from_parts(20_052_424, 0))
			// Standard Error: 16_144
			.saturating_add((Weight::from_parts(362_787, 0)).saturating_mul(x as u64))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::PendingSequencerUpdates` (r:1 w:1)
	// Proof: `Rolldown::PendingSequencerUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2OriginRequestId` (r:1 w:1)
	// Proof: `Rolldown::L2OriginRequestId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::AwaitingCancelResolution` (r:1 w:1)
	// Proof: `Rolldown::AwaitingCancelResolution` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2Requests` (r:0 w:1)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_requests_from_l1() -> Weight {
		(Weight::from_parts(39_181_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(5 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::PendingSequencerUpdates` (r:1 w:1)
	// Proof: `Rolldown::PendingSequencerUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::ActiveSequencers` (r:1 w:0)
	// Proof: `SequencerStaking::ActiveSequencers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_cancel_requests_from_l1() -> Weight {
		(Weight::from_parts(26_120_000, 0))
			.saturating_add(T::DbWeight::get().reads(4 as u64))
			.saturating_add(T::DbWeight::get().writes(2 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::L1AssetToId` (r:1 w:0)
	// Proof: `AssetRegistry::L1AssetToId` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:3 w:3)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2OriginRequestId` (r:1 w:1)
	// Proof: `Rolldown::L2OriginRequestId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::TotalNumberOfWithdrawals` (r:1 w:1)
	// Proof: `Rolldown::TotalNumberOfWithdrawals` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2Requests` (r:0 w:1)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn withdraw() -> Weight {
		(Weight::from_parts(75_988_000, 0))
			.saturating_add(T::DbWeight::get().reads(9 as u64))
			.saturating_add(T::DbWeight::get().writes(8 as u64))
	}
	// Storage: `Rolldown::FailedL1Deposits` (r:1 w:1)
	// Proof: `Rolldown::FailedL1Deposits` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::FerriedDeposits` (r:1 w:0)
	// Proof: `Rolldown::FerriedDeposits` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2OriginRequestId` (r:1 w:1)
	// Proof: `Rolldown::L2OriginRequestId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2Requests` (r:0 w:1)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn refund_failed_deposit() -> Weight {
		(Weight::from_parts(27_309_000, 0))
			.saturating_add(T::DbWeight::get().reads(3 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::L1AssetToId` (r:1 w:0)
	// Proof: `AssetRegistry::L1AssetToId` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::FerriedDeposits` (r:0 w:1)
	// Proof: `Rolldown::FerriedDeposits` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn ferry_deposit() -> Weight {
		(Weight::from_parts(56_991_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::L1AssetToId` (r:1 w:0)
	// Proof: `AssetRegistry::L1AssetToId` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::FerriedDeposits` (r:0 w:1)
	// Proof: `Rolldown::FerriedDeposits` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn ferry_deposit_unsafe() -> Weight {
		(Weight::from_parts(62_927_000, 0))
			.saturating_add(T::DbWeight::get().reads(5 as u64))
			.saturating_add(T::DbWeight::get().writes(4 as u64))
	}
	// Storage: `AssetRegistry::L1AssetToId` (r:1 w:0)
	// Proof: `AssetRegistry::L1AssetToId` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::FerriedDeposits` (r:1 w:0)
	// Proof: `Rolldown::FerriedDeposits` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn process_deposit() -> Weight {
		(Weight::from_parts(48_680_000, 0))
			.saturating_add(T::DbWeight::get().reads(6 as u64))
			.saturating_add(T::DbWeight::get().writes(3 as u64))
	}
	// Storage: `Rolldown::L2Requests` (r:1 w:0)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::ActiveSequencers` (r:1 w:1)
	// Proof: `SequencerStaking::ActiveSequencers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::AwaitingCancelResolution` (r:1 w:1)
	// Proof: `Rolldown::AwaitingCancelResolution` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::SequencerStake` (r:1 w:1)
	// Proof: `SequencerStaking::SequencerStake` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::SlashFineAmount` (r:1 w:0)
	// Proof: `SequencerStaking::SlashFineAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::MinimalStakeAmount` (r:1 w:0)
	// Proof: `SequencerStaking::MinimalStakeAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::NextSequencerIndex` (r:1 w:1)
	// Proof: `SequencerStaking::NextSequencerIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::SelectedSequencer` (r:1 w:1)
	// Proof: `SequencerStaking::SelectedSequencer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn process_cancel_resolution() -> Weight {
		(Weight::from_parts(97_360_000, 0))
			.saturating_add(T::DbWeight::get().reads(12 as u64))
			.saturating_add(T::DbWeight::get().writes(9 as u64))
	}
}

// For backwards compatibility and tests
impl WeightInfo for () {
	// Storage: `Rolldown::ManualBatchExtraFee` (r:0 w:1)
	// Proof: `Rolldown::ManualBatchExtraFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	fn set_manual_batch_extra_fee() -> Weight {
		(Weight::from_parts(22_558_000, 0))
			.saturating_add(RocksDbWeight::get().writes(1 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::AliasAccount` (r:1 w:0)
	// Proof: `SequencerStaking::AliasAccount` (`max_values`: None, `max_size`: Some(57), added: 2532, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::ManualBatchExtraFee` (r:1 w:0)
	// Proof: `Rolldown::ManualBatchExtraFee` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2RequestsBatchLast` (r:1 w:1)
	// Proof: `Rolldown::L2RequestsBatchLast` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2OriginRequestId` (r:1 w:0)
	// Proof: `Rolldown::L2OriginRequestId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2Requests` (r:1 w:0)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2RequestsBatch` (r:0 w:1)
	// Proof: `Rolldown::L2RequestsBatch` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	fn create_batch() -> Weight {
		(Weight::from_parts(58_178_000, 0))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2Requests` (r:1 w:0)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2RequestsBatchLast` (r:1 w:1)
	// Proof: `Rolldown::L2RequestsBatchLast` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2RequestsBatch` (r:0 w:1)
	// Proof: `Rolldown::L2RequestsBatch` (`max_values`: None, `max_size`: Some(89), added: 2564, mode: `MaxEncodedLen`)
	fn force_create_batch() -> Weight {
		(Weight::from_parts(28_495_000, 0))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::SelectedSequencer` (r:1 w:0)
	// Proof: `SequencerStaking::SelectedSequencer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::PendingSequencerUpdates` (r:1 w:1)
	// Proof: `Rolldown::PendingSequencerUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::CurrentRound` (r:1 w:0)
	// Proof: `SequencerStaking::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::AwardedPts` (r:1 w:1)
	// Proof: `SequencerStaking::AwardedPts` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::Points` (r:1 w:1)
	// Proof: `SequencerStaking::Points` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::LastUpdateBySequencer` (r:0 w:1)
	// Proof: `Rolldown::LastUpdateBySequencer` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn update_l2_from_l1(x: u32, ) -> Weight {
		(Weight::from_parts(53_903_308, 0))
			// Standard Error: 63_247
			.saturating_add((Weight::from_parts(1_544_095, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::SelectedSequencer` (r:1 w:0)
	// Proof: `SequencerStaking::SelectedSequencer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::PendingSequencerUpdates` (r:1 w:1)
	// Proof: `Rolldown::PendingSequencerUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::CurrentRound` (r:1 w:0)
	// Proof: `SequencerStaking::CurrentRound` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::AwardedPts` (r:1 w:1)
	// Proof: `SequencerStaking::AwardedPts` (`max_values`: None, `max_size`: Some(44), added: 2519, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::Points` (r:1 w:1)
	// Proof: `SequencerStaking::Points` (`max_values`: None, `max_size`: Some(16), added: 2491, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::LastUpdateBySequencer` (r:0 w:1)
	// Proof: `Rolldown::LastUpdateBySequencer` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	fn update_l2_from_l1_unsafe(x: u32, ) -> Weight {
		(Weight::from_parts(53_063_762, 0))
			// Standard Error: 117_584
			.saturating_add((Weight::from_parts(1_073_368, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(8 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::MaxAcceptedRequestIdOnl2` (r:1 w:1)
	// Proof: `Rolldown::MaxAcceptedRequestIdOnl2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::LastScheduledUpdateIdInExecutionQueue` (r:1 w:1)
	// Proof: `Rolldown::LastScheduledUpdateIdInExecutionQueue` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::UpdatesExecutionQueue` (r:0 w:1)
	// Proof: `Rolldown::UpdatesExecutionQueue` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_update_l2_from_l1(x: u32, ) -> Weight {
		(Weight::from_parts(20_052_424, 0))
			// Standard Error: 16_144
			.saturating_add((Weight::from_parts(362_787, 0)).saturating_mul(x as u64))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::PendingSequencerUpdates` (r:1 w:1)
	// Proof: `Rolldown::PendingSequencerUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2OriginRequestId` (r:1 w:1)
	// Proof: `Rolldown::L2OriginRequestId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::AwaitingCancelResolution` (r:1 w:1)
	// Proof: `Rolldown::AwaitingCancelResolution` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2Requests` (r:0 w:1)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn cancel_requests_from_l1() -> Weight {
		(Weight::from_parts(39_181_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(5 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::PendingSequencerUpdates` (r:1 w:1)
	// Proof: `Rolldown::PendingSequencerUpdates` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::ActiveSequencers` (r:1 w:0)
	// Proof: `SequencerStaking::ActiveSequencers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn force_cancel_requests_from_l1() -> Weight {
		(Weight::from_parts(26_120_000, 0))
			.saturating_add(RocksDbWeight::get().reads(4 as u64))
			.saturating_add(RocksDbWeight::get().writes(2 as u64))
	}
	// Storage: `Maintenance::MaintenanceStatus` (r:1 w:0)
	// Proof: `Maintenance::MaintenanceStatus` (`max_values`: Some(1), `max_size`: Some(2), added: 497, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::L1AssetToId` (r:1 w:0)
	// Proof: `AssetRegistry::L1AssetToId` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:3 w:3)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2OriginRequestId` (r:1 w:1)
	// Proof: `Rolldown::L2OriginRequestId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::TotalNumberOfWithdrawals` (r:1 w:1)
	// Proof: `Rolldown::TotalNumberOfWithdrawals` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2Requests` (r:0 w:1)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn withdraw() -> Weight {
		(Weight::from_parts(75_988_000, 0))
			.saturating_add(RocksDbWeight::get().reads(9 as u64))
			.saturating_add(RocksDbWeight::get().writes(8 as u64))
	}
	// Storage: `Rolldown::FailedL1Deposits` (r:1 w:1)
	// Proof: `Rolldown::FailedL1Deposits` (`max_values`: None, `max_size`: Some(85), added: 2560, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::FerriedDeposits` (r:1 w:0)
	// Proof: `Rolldown::FerriedDeposits` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::L2OriginRequestId` (r:1 w:1)
	// Proof: `Rolldown::L2OriginRequestId` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::L2Requests` (r:0 w:1)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn refund_failed_deposit() -> Weight {
		(Weight::from_parts(27_309_000, 0))
			.saturating_add(RocksDbWeight::get().reads(3 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::L1AssetToId` (r:1 w:0)
	// Proof: `AssetRegistry::L1AssetToId` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::FerriedDeposits` (r:0 w:1)
	// Proof: `Rolldown::FerriedDeposits` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn ferry_deposit() -> Weight {
		(Weight::from_parts(56_991_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `Rolldown::LastProcessedRequestOnL2` (r:1 w:0)
	// Proof: `Rolldown::LastProcessedRequestOnL2` (`max_values`: None, `max_size`: Some(33), added: 2508, mode: `MaxEncodedLen`)
	// Storage: `AssetRegistry::L1AssetToId` (r:1 w:0)
	// Proof: `AssetRegistry::L1AssetToId` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::FerriedDeposits` (r:0 w:1)
	// Proof: `Rolldown::FerriedDeposits` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	fn ferry_deposit_unsafe() -> Weight {
		(Weight::from_parts(62_927_000, 0))
			.saturating_add(RocksDbWeight::get().reads(5 as u64))
			.saturating_add(RocksDbWeight::get().writes(4 as u64))
	}
	// Storage: `AssetRegistry::L1AssetToId` (r:1 w:0)
	// Proof: `AssetRegistry::L1AssetToId` (`max_values`: None, `max_size`: Some(41), added: 2516, mode: `MaxEncodedLen`)
	// Storage: `Rolldown::FerriedDeposits` (r:1 w:0)
	// Proof: `Rolldown::FerriedDeposits` (`max_values`: None, `max_size`: Some(69), added: 2544, mode: `MaxEncodedLen`)
	// Storage: `Tokens::NextCurrencyId` (r:1 w:0)
	// Proof: `Tokens::NextCurrencyId` (`max_values`: Some(1), `max_size`: Some(4), added: 499, mode: `MaxEncodedLen`)
	// Storage: `Tokens::Accounts` (r:1 w:1)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `System::Account` (r:1 w:1)
	// Proof: `System::Account` (`max_values`: None, `max_size`: Some(52), added: 2527, mode: `MaxEncodedLen`)
	fn process_deposit() -> Weight {
		(Weight::from_parts(48_680_000, 0))
			.saturating_add(RocksDbWeight::get().reads(6 as u64))
			.saturating_add(RocksDbWeight::get().writes(3 as u64))
	}
	// Storage: `Rolldown::L2Requests` (r:1 w:0)
	// Proof: `Rolldown::L2Requests` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::ActiveSequencers` (r:1 w:1)
	// Proof: `SequencerStaking::ActiveSequencers` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::SequencersRights` (r:1 w:1)
	// Proof: `Rolldown::SequencersRights` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `Rolldown::AwaitingCancelResolution` (r:1 w:1)
	// Proof: `Rolldown::AwaitingCancelResolution` (`max_values`: None, `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::SequencerStake` (r:1 w:1)
	// Proof: `SequencerStaking::SequencerStake` (`max_values`: None, `max_size`: Some(53), added: 2528, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::SlashFineAmount` (r:1 w:0)
	// Proof: `SequencerStaking::SlashFineAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `Tokens::Accounts` (r:2 w:2)
	// Proof: `Tokens::Accounts` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	// Storage: `Tokens::TotalIssuance` (r:1 w:1)
	// Proof: `Tokens::TotalIssuance` (`max_values`: None, `max_size`: Some(28), added: 2503, mode: `MaxEncodedLen`)
	// Storage: `SequencerStaking::MinimalStakeAmount` (r:1 w:0)
	// Proof: `SequencerStaking::MinimalStakeAmount` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::NextSequencerIndex` (r:1 w:1)
	// Proof: `SequencerStaking::NextSequencerIndex` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	// Storage: `SequencerStaking::SelectedSequencer` (r:1 w:1)
	// Proof: `SequencerStaking::SelectedSequencer` (`max_values`: Some(1), `max_size`: None, mode: `Measured`)
	fn process_cancel_resolution() -> Weight {
		(Weight::from_parts(97_360_000, 0))
			.saturating_add(RocksDbWeight::get().reads(12 as u64))
			.saturating_add(RocksDbWeight::get().writes(9 as u64))
	}
}
