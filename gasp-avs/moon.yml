type: application
language: rust
toolchain:
  rust:
    version: 1.78.0
tags:
  - 'rust-channel-1.78.0'

env:
  CARGO_TERM_COLOR: always
  SCCACHE_GCS_KEY_PREFIX: gasp-avs
  IMAGE_BUILD_REPOSITORY: europe-docker.pkg.dev/direct-pixel-353917/gaspxyz/gasp-avs
  DOCKERHUB_REPOSITORY: gaspxyz/gasp-avs
  IMAGE_BUILD_ROLLUP_NODE_REPOSITORY: europe-docker.pkg.dev/direct-pixel-353917/gaspxyz/rollup-node

fileGroups:
  sources:
    - 'src/**/*'
    - 'bindings/**/*'
    - 'Cargo.toml'

tasks:
  prepare-toolchain:
    command: rustup show
    options:
      cache: false

  build:
    command: cargo build --release
    inputs: ['@globs(sources)']
    outputs: ['target/release/main']

  build-image-local:
    command: 'docker buildx build --build-arg ROLLUP_NODE_VERSION=local -t gaspxyz/gasp-avs:local --load .'
    options:
      envFile: '/.env'
    deps: ['gasp-node:build-image-local']
    inputs: ['@globs(sources)', 'Dockerfile']

  buildkit-build-and-push-image-digests-with-gasp-node-standard-runtime:
    command: >
      docker buildx build --platform linux/amd64,linux/arm64
      --cache-from type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache
      --cache-to type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache,mode=max
      --output type=image,push=true,push-by-digest=true,name=${IMAGE_BUILD_REPOSITORY}
      --build-arg ROLLUP_NODE_REPOSITORY=${IMAGE_BUILD_ROLLUP_NODE_REPOSITORY}
      --build-arg ROLLUP_NODE_VERSION=${IMAGE_TAG:-ci}
      --metadata-file gasp-avs-with-gasp-node-standard-runtime-buildkit-metadata.json -f Dockerfile ./
    inputs: ["@globs(sources)", "Dockerfile"]
    outputs: ['gasp-avs-with-gasp-node-standard-runtime-buildkit-metadata.json']
    options:
      outputStyle: stream
      cache: true
      internal: true
      retryCount: 3

  buildkit-build-and-push-image-digests-with-gasp-node-fast-runtime:
    command: >
      docker buildx build --platform linux/amd64,linux/arm64
      --cache-from type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache
      --cache-to type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache,mode=max
      --output type=image,push=true,push-by-digest=true,name=${IMAGE_BUILD_REPOSITORY}
      --build-arg ROLLUP_NODE_REPOSITORY=${IMAGE_BUILD_ROLLUP_NODE_REPOSITORY}
      --build-arg ROLLUP_NODE_VERSION=${IMAGE_TAG:-ci}-fast
      --metadata-file gasp-avs-with-gasp-node-fast-runtime-buildkit-metadata.json -f Dockerfile ./
    inputs: ["@globs(sources)", "Dockerfile"]
    outputs: ['gasp-avs-with-gasp-node-fast-runtime-buildkit-metadata.json']
    options:
      outputStyle: stream
      cache: true
      internal: true
      retryCount: 3
  buildkit-build-and-push-image-digests-with-gasp-node-unlocked-runtime:
    command: >
      docker buildx build --platform linux/amd64,linux/arm64
      --cache-from type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache
      --cache-to type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache,mode=max
      --output type=image,push=true,push-by-digest=true,name=${IMAGE_BUILD_REPOSITORY}
      --build-arg ROLLUP_NODE_REPOSITORY=${IMAGE_BUILD_ROLLUP_NODE_REPOSITORY}
      --build-arg ROLLUP_NODE_VERSION=${IMAGE_TAG:-ci}-unlocked
      --metadata-file gasp-avs-with-gasp-node-unlocked-runtime-buildkit-metadata.json -f Dockerfile ./
    inputs: ["@globs(sources)", "Dockerfile"]
    outputs: ['gasp-avs-with-gasp-node-unlocked-runtime-buildkit-metadata.json']
    options:
      outputStyle: stream
      cache: true
      internal: true
      retryCount: 3
  build-image-ci:
    script: |
      set -ex
      IMAGE_DIGEST_STANDARD_RUNTIME=$(jq -r '."containerimage.digest"' gasp-avs-with-gasp-node-standard-runtime-buildkit-metadata.json)
      IMAGE_DIGEST_FAST_RUNTIME=$(jq -r '."containerimage.digest"' gasp-avs-with-gasp-node-fast-runtime-buildkit-metadata.json)
      IMAGE_DIGEST_UNLOCKED_RUNTIME=$(jq -r '."containerimage.digest"' gasp-avs-with-gasp-node-unlocked-runtime-buildkit-metadata.json)

      docker buildx imagetools create \
        --tag ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci} \
        --tag ${DOCKERHUB_REPOSITORY}:${IMAGE_TAG:-ci} \
        ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST_STANDARD_RUNTIME}

      echo "Successfully created ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci} from existing digests"

      docker buildx imagetools create \
        --tag ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci}-fast \
        --tag ${DOCKERHUB_REPOSITORY}:${IMAGE_TAG:-ci}-fast \
        ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST_FAST_RUNTIME}

      echo "Successfully created ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci}-fast from existing digests"

      docker buildx imagetools create \
        --tag ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci}-unlocked \
        --tag ${DOCKERHUB_REPOSITORY}:${IMAGE_TAG:-ci}-unlocked \
        ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST_UNLOCKED_RUNTIME}

      echo "Successfully created ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci}-unlocked from existing digests"

    deps: 
      - gasp-node:build-image-ci
      - buildkit-build-and-push-image-digests-with-gasp-node-standard-runtime
      - buildkit-build-and-push-image-digests-with-gasp-node-fast-runtime
      - buildkit-build-and-push-image-digests-with-gasp-node-unlocked-runtime
    inputs: 
      - 'gasp-avs-with-gasp-node-standard-runtime-buildkit-metadata.json'
      - 'gasp-avs-with-gasp-node-fast-runtime-buildkit-metadata.json'
      - 'gasp-avs-with-gasp-node-unlocked-runtime-buildkit-metadata.json'
    options:
      cache: false
      runDepsInParallel: false

  format-gasp-avs:
    command: cargo fmt --all -- --check
    inputs: ['@globs(sources)', 'tests/**/*']

  lint-gasp-avs:
    command: cargo clippy
    inputs: ['@globs(sources)', 'tests/**/*']

  test-gasp-avs:
    command: cargo test
    inputs: ['@globs(sources)', 'tests/**/*']

  release:
    command: 'yarn run release'
    options:
      cache: false
      runInCI: false
