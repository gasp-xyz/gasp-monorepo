on:
  workflow_call:
    inputs:
      rust-version:
        type: string
        required: false
        default: 1.78.0
      version:
        description: Version to be assigned to the built image
        required: true
        type: string
      cache-version:
        default: 1
        description: Cache version variable to be used to invalidate cache when needed
        required: false
        type: number
      cache-enabled:
        default: true
        description: Enable caching
        required: false
        type: boolean

env:
  SKIP_WASM_BUILD: 1

jobs:
  rust-fmt-check:
    name: Formatting check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.rust-version }}
          override: true
          components: rustfmt, clippy
      - uses: arduino/setup-protoc@v3
      - name: Check formatting
        working-directory: avs-finalizer
        run: cargo fmt --all -- --check

  clippy-check:
    name: Clippy check
    runs-on: compile-eigen-gke
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.rust-version }}
          override: true
          components: rustfmt, clippy
      - uses: arduino/setup-protoc@v3

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Cache the Cargo dependencies
        if: inputs.cache-enabled
        id: cache-cargo
        run: |
          CACHE_KEY="cargo-rollup-clippy-cache-${{ inputs.cache-version }}-${{ hashFiles('**/Cargo.lock') }}"
          ARCHIVE_NAME="cache_archive.tar.zst"
          CACHE_FOUND=false

          # Download and extract cache
          if gcloud storage cp "gs://mangata-node-ci-cache/${CACHE_KEY}/${ARCHIVE_NAME}" - | zstd -d | tar -xf - -C / ; then
            CACHE_FOUND=true
          fi

          # Set output to indicate if cache was found
          echo "cache_found=${CACHE_FOUND}" >> $GITHUB_OUTPUT

      - name: Run sccache-cache only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Set Rust caching env vars only on non-release runs & skip wasm
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Run clippy check
        working-directory: avs-finalizer
        run: cargo clippy -- -D warnings

      - name: Upload new cache
        if: always() && inputs.cache-enabled && steps.cache-cargo.outputs.cache_found == 'false' && success()
        run: |
          CACHE_KEY="cargo-rollup-clippy-cache-${{ inputs.cache-version }}-${{ hashFiles('**/Cargo.lock') }}"
          ARCHIVE_NAME="cache_archive.tar.zst"
          CACHE_PATHS=(
            "${{ github.workspace }}/avs-finalizer/target"
            "$HOME/.cargo/bin/"
            "$HOME/.cargo/registry/index/"
            "$HOME/.cargo/registry/cache/"
            "$HOME/.cargo/git/db/"
          )

          # Create a single compressed tar archive
          echo "Starting compression at $(date)"
          SECONDS=0
          tar -cf - "${CACHE_PATHS[@]}" | zstd -T0 -19 > "$ARCHIVE_NAME"
          echo "Compression completed in $SECONDS seconds"

          # Get and log the archive size
          ARCHIVE_SIZE=$(du -h "$ARCHIVE_NAME" | cut -f1)
          echo "Archive size: $ARCHIVE_SIZE"

          # Upload the single archive to Google Cloud Storage
          echo "Starting upload at $(date)"
          SECONDS=0
          gcloud storage cp "$ARCHIVE_NAME" "gs://mangata-node-ci-cache/${CACHE_KEY}/${ARCHIVE_NAME}"
          echo "Upload completed in $SECONDS seconds"

          # Clean up the local archive
          rm "$ARCHIVE_NAME"

  tests:
    name: Run tests
    runs-on: compile-eigen-gke
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.rust-version }}
          override: true
          components: rustfmt, clippy
      - uses: arduino/setup-protoc@v3

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Cache the Cargo dependencies
        if: inputs.cache-enabled
        id: cache-cargo
        run: |
          CACHE_KEY="cargo-rollup-clippy-cache-${{ inputs.cache-version }}-${{ hashFiles('**/Cargo.lock') }}"
          ARCHIVE_NAME="cache_archive.tar.zst"
          CACHE_FOUND=false

          # Download and extract cache
          if gcloud storage cp "gs://mangata-node-ci-cache/${CACHE_KEY}/${ARCHIVE_NAME}" - | zstd -d | tar -xf - -C / ; then
            CACHE_FOUND=true
          fi

          # Set output to indicate if cache was found
          echo "cache_found=${CACHE_FOUND}" >> $GITHUB_OUTPUT

      - name: Run sccache-cache only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Set Rust caching env vars only on non-release runs & skip wasm
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV

      - name: Run tests
        working-directory: avs-finalizer
        run: cargo test

      - name: Upload new cache
        if: always() && inputs.cache-enabled && steps.cache-cargo.outputs.cache_found == 'false' && success()
        run: |
          CACHE_KEY="cargo-rollup-clippy-cache-${{ inputs.cache-version }}-${{ hashFiles('**/Cargo.lock') }}"
          ARCHIVE_NAME="cache_archive.tar.zst"
          CACHE_PATHS=(
            "${{ github.workspace }}/avs-finalizer/target"
            "$HOME/.cargo/bin/"
            "$HOME/.cargo/registry/index/"
            "$HOME/.cargo/registry/cache/"
            "$HOME/.cargo/git/db/"
          )

          # Create a single compressed tar archive
          echo "Starting compression at $(date)"
          SECONDS=0
          tar -cf - "${CACHE_PATHS[@]}" | zstd -T0 -19 > "$ARCHIVE_NAME"
          echo "Compression completed in $SECONDS seconds"

          # Get and log the archive size
          ARCHIVE_SIZE=$(du -h "$ARCHIVE_NAME" | cut -f1)
          echo "Archive size: $ARCHIVE_SIZE"

          # Upload the single archive to Google Cloud Storage
          echo "Starting upload at $(date)"
          SECONDS=0
          gcloud storage cp "$ARCHIVE_NAME" "gs://mangata-node-ci-cache/${CACHE_KEY}/${ARCHIVE_NAME}"
          echo "Upload completed in $SECONDS seconds"

          # Clean up the local archive
          rm "$ARCHIVE_NAME"

  build-avs-finalizer-image:
    name: Build avs-finalizer Docker image
    runs-on: compile-eigen-gke
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ inputs.rust-version }}
          override: true
          components: rustfmt, clippy
      - uses: arduino/setup-protoc@v3

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}

      - name: Cache the Cargo dependencies
        if: inputs.cache-enabled
        id: cache-cargo
        run: |
          CACHE_KEY="cargo-rollup-clippy-cache-${{ inputs.cache-version }}-${{ hashFiles('**/Cargo.lock') }}"
          ARCHIVE_NAME="cache_archive.tar.zst"
          CACHE_FOUND=false

          # Download and extract cache
          if gcloud storage cp "gs://mangata-node-ci-cache/${CACHE_KEY}/${ARCHIVE_NAME}" - | zstd -d | tar -xf - -C / ; then
            CACHE_FOUND=true
          fi

          # Set output to indicate if cache was found
          echo "cache_found=${CACHE_FOUND}" >> $GITHUB_OUTPUT

      - name: Run sccache-cache only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        uses: mozilla-actions/sccache-action@v0.0.3
      - name: Set Rust caching env vars only on non-release runs & skip wasm
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GHA_ENABLED=true" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
