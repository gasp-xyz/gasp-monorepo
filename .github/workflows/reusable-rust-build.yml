on:
  workflow_call:
    inputs:
      rust-version:
        type: string
        required: false
        default: 1.78.0
      version:
        description: Version to be assigned to the built image
        required: true
        type: string
      cache-version:
        default: 1
        description: Cache version variable to be used to invalidate cache when needed
        required: false
        type: number
      cache-enabled:
        default: true
        description: Enable caching
        required: false
        type: boolean
      service_folder:
        description: service folder to be built
        required: true
        type: string
      docker_image_repository:
        description: Docker image repository
        required: true
        type: string
      finalizer_fast_runtime:
        description: Use `rollup-node` with fast runtime when building `avs-finalizer` image
        required: false
        type: boolean
        default: false
      cargo_tests_enabled:
        description: Run cargo test
        required: false
        type: boolean
        default: true
      cargo_clippy_check_enabled:
        description: Run cargo clippy
        required: false
        type: boolean
        default: true

env:
  SKIP_WASM_BUILD: 1

jobs:
  rustfmt-check:
    name: "[${{ inputs.service_folder }}] Formatting check"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          toolchain: ${{ inputs.rust-version }}
          cache-workspaces: ${{ inputs.service_folder }}
      - uses: arduino/setup-protoc@v3
      - name: Check formatting
        working-directory: ${{ inputs.service_folder }}
        run: cargo fmt --all -- --check

  clippy-check:
    name: "[${{ inputs.service_folder }}] Clippy check"
    if: inputs.cargo_clippy_check_enabled
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          toolchain: ${{ inputs.rust-version }}
          cache-workspaces: ${{ inputs.service_folder }}
      - uses: arduino/setup-protoc@v3

      - name: Run clippy check
        working-directory: ${{ inputs.service_folder }}
        run: cargo clippy
  
  cargo-test:
    name: "[${{ inputs.service_folder }}] Run cargo tests"
    if: inputs.cargo_tests_enabled
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions-rust-lang/setup-rust-toolchain@v1.10.1
        with:
          toolchain: ${{ inputs.rust-version }}
          cache-workspaces: ${{ inputs.service_folder }}
      - uses: arduino/setup-protoc@v3

      - name: Run cargo test
        working-directory: ${{ inputs.service_folder }}
        run: cargo test

  docker-image-build:
    name: "[${{ inputs.service_folder }}] [${{ matrix.platform.name }}] image${{ inputs.finalizer_fast_runtime && ' with fast runtime' || '' }}"
    strategy:
      matrix:
        platform:
          - name: amd64
            runner: compile-gke
          - name: arm64
            runner: compile-gke-arm
    runs-on: ${{ matrix.platform.runner }}
    env:
      JOB_CACHE_PREFIX: ${{ inputs.service_folder }}-${{ matrix.platform.name }}${{ inputs.finalizer_fast_runtime && 'fast' || 'regular' }}-${{ inputs.cache-version }}
      SERVICE_FOLDER: ${{ inputs.service_folder }}
      DOCKER_IMAGE_REPOSITORY: ${{ inputs.docker_image_repository }}
      CACHE_ARCHIVE_NAME: cache_archive.tar.zst
      IMAGE_TAG: ${{ inputs.version }}${{ inputs.finalizer_fast_runtime && '-fast' || '' }}
    steps:
      - uses: actions/checkout@v4
    
      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_REPOSITORY }}
          tags: ${{ env.DOCKER_IMAGE_REPOSITORY }}:${{ env.IMAGE_TAG }}

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
              
      - run: curl -LJO https://github.com/reproducible-containers/buildkit-cache-dance/archive/refs/tags/v3.1.2.tar.gz && tar xvf buildkit-cache-dance-3.1.2.tar.gz
      - run: docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2

      - name: Download cargo build cache
        if: inputs.cache-enabled
        id: cache
        run: |
          set -x
          CACHE_KEY="${{ env.JOB_CACHE_PREFIX }}-${{ hashFiles('**/Cargo.lock') }}"
          ARCHIVE_NAME="${{ env.CACHE_ARCHIVE_NAME }}"
          CACHE_FOUND=false
      
          if gcloud storage cp "gs://mangata-node-ci-cache/$CACHE_KEY/$ARCHIVE_NAME" - | zstd -d | tar -xf - ; then
            echo "Injecting buildkit mount cache into Docker system"
            node ./buildkit-cache-dance-3.1.2/dist/index.js --cache-map '{"usr-local-cargo-registry": "/usr/local/cargo/registry", "usr-local-cargo-git": "/usr/local/cargo/git", "app-target": "/app/target"}'
            
            CACHE_FOUND=true
          fi
      
          echo "cache_found=$CACHE_FOUND" >> $GITHUB_OUTPUT
          echo "cache_key=$CACHE_KEY" >> $GITHUB_OUTPUT
      
      - name: Build and push by digest
        id: build
        uses: docker/build-push-action@v6
        with:
          context: ${{ env.SERVICE_FOLDER }}
          platforms: linux/${{ matrix.platform.name }}
          labels: ${{ steps.meta.outputs.labels }}
          outputs: type=image,name=${{ env.DOCKER_IMAGE_REPOSITORY }},push-by-digest=true,name-canonical=true,push=true
          build-args: ROLLUP_NODE_VERSION=eth-rollup-develop${{ inputs.finalizer_fast_runtime && '-fast' || '' }}
      
      - name: Export digest
        run: |
          mkdir -p /tmp/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "/tmp/digests/${digest#sha256:}"
      
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.service_folder }}-${{ inputs.finalizer_fast_runtime && 'fast' || 'regular' }}-linux-${{ matrix.platform.name }}
          path: /tmp/digests/*
          if-no-files-found: error
          retention-days: 1
      
      - name: Upload cargo build cache
        if: inputs.cache-enabled && steps.cache.outputs.cache_found == 'false'
        shell: bash
        run: |
          set -x
        
          echo "Extracting buildkit cache from Docker system"
          node ./buildkit-cache-dance-3.1.2/dist/index.js --extract --cache-map '{"usr-local-cargo-registry": "/usr/local/cargo/registry", "usr-local-cargo-git": "/usr/local/cargo/git", "app-target": "/app/target"}'
          
          CACHE_KEY="${{ steps.cache.outputs.cache_key }}"
          ARCHIVE_NAME="${{ env.CACHE_ARCHIVE_NAME }}"
          CACHE_PATHS=(
            "usr-local-cargo-registry"
            "usr-local-cargo-git"
            "app-target"
          )
      
            SECONDS=0; tar -cf - "${CACHE_PATHS[@]}" | zstd -T0 -5 > "$ARCHIVE_NAME"
            echo "Compression completed in $SECONDS seconds" && echo "Archive size: $(du -h "$ARCHIVE_NAME" | cut -f1)"
      
            SECONDS=0; gcloud storage cp "$ARCHIVE_NAME" "gs://mangata-node-ci-cache/$CACHE_KEY/$ARCHIVE_NAME"
            echo "Upload completed in $SECONDS seconds"

  multiplatform-docker-image-compiation-and-push:
    name: "[${{ inputs.service_folder }}] Generate multiplatform Docker image manifest"
    needs: [docker-image-build]
    runs-on: ubuntu-latest
    env:
      DOCKER_IMAGE_REPOSITORY: ${{ inputs.docker_image_repository }}
      IMAGE_TAG: ${{ inputs.version }}${{ inputs.finalizer_fast_runtime && '-fast' || '' }}
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: /tmp/digests
          pattern: ${{ inputs.service_folder }}-${{ inputs.finalizer_fast_runtime && 'fast' || 'regular' }}-*
          merge-multiple: true
      
      - uses: docker/setup-buildx-action@v3
      - run: docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
      
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.DOCKER_IMAGE_REPOSITORY }}
          tags: type=raw,value=${{ env.IMAGE_TAG }}
      
      - name: Create manifest list and push
        working-directory: /tmp/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf '${{ env.DOCKER_IMAGE_REPOSITORY }}@sha256:%s ' *)          
      
      - name: Inspect image
        run: docker buildx imagetools inspect ${{ env.DOCKER_IMAGE_REPOSITORY }}:${{ steps.meta.outputs.version }}