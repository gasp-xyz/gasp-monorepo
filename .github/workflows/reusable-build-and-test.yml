name: Build and test

on:
  workflow_call:
    inputs:
      version:
        description: Version to be assigned to the built image
        required: true
        type: string

permissions:
  contents: read
  id-token: write
  security-events: write

env:
  MOON_COLOR: 2

jobs:
  contracts-build-and-test:
    name: '[contracts] Build and test'
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - uses: foundry-rs/foundry-toolchain@v1
          
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'contracts/.python-version'
          cache: pip
      - run: pip install -r requirements.txt
        working-directory: contracts
  
      - uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: false
          cache: false
      
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - run: docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
      - run: docker buildx create --use
        
      - run: corepack enable && corepack prepare yarn@4.6.0 --activate
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'contracts/.nvmrc'
          cache: 'yarn'
          cache-dependency-path: "./contracts/yarn.lock"
      - run: cd contracts && yarn install --immutable

      - run: moon ci :contracts-check :contracts-build-image-ci
        env:
          IMAGE_TAG: ${{ inputs.version }}
      
      - uses: appthrust/moon-ci-retrospect@v1
        if: success() || failure()

      - name: Make static analysis of contracts
        uses: crytic/slither-action@v0.4.0
        id: slither
        with:
          target: contracts
          sarif: results.sarif
          fail-on: none
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.slither.outputs.sarif }}

  build-and-test-stash:
    name: '[stash] Build and test'
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: stash
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version-file: 'stash/.nvmrc'
          cache: 'yarn'
          cache-dependency-path: "./stash/yarn.lock"

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - uses: mdgreenwald/mozilla-sops-action@v1.6.0

      - run: yarn install --immutable
      - run: sops exec-env frontend.enc.env 'yarn run build'
      - run: sops exec-env frontend.enc.env 'yarn run test:unit'

  build-and-check-services:
    name: '[AVS] Build and test'
    runs-on: beast-gke
    # runs-on: gasp-monorepo-large-32core
    container:
      image: gaspxyz/rust-builder:multi-1.77-nightly-2024-01-20-slim
      env:
        DOCKER_HOST: "unix:///run/docker/docker.sock"
      volumes:
        - /run/docker:/run/docker
    strategy: 
      matrix:
        include:
          - prefix: main-group
            moon-targets: >-
              :format 
              :lint 
              :test 
              :build-image-ci 
          - prefix: avs-and-node-group
            moon-targets: >-
              :format-gasp-avs
              :format-gasp-node
              :lint-gasp-avs
              :lint-gasp-node
              :test-gasp-avs
              :test-gasp-node
              :benchmark-tests-gasp-node
              :build-image-ci-gasp-avs
              :build-image-ci-gasp-node
          # - prefix: coverage-and-benchmark-group
          #   moon-targets: :coverage-gasp-node :benchmark-tests-gasp-node
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      # Fix to avoid git errors when running inside the container
      - run: git config --global --add safe.directory $GITHUB_WORKSPACE

      - uses: moonrepo/setup-rust@v1
        name: Setup 1.82.0 rust toolchain
        with:
          channel: 1.82.0
          targets: wasm32-unknown-unknown
          components: rustfmt,clippy,rust-src
          cache: ${{ (matrix.prefix == 'main-group') && true || false }}
          target-dirs: 'sequencer/target,updater/target'
      - uses: moonrepo/setup-rust@v1
        name: Setup 1.78.0 rust toolchain
        with:
          channel: 1.78.0
          targets: wasm32-unknown-unknown
          components: rustfmt,clippy,rust-src
          cache: ${{ (matrix.prefix == 'avs-and-node-group') && true || false }}
          target-dirs: 'gasp-avs/target'
      - uses: moonrepo/setup-rust@v1
        name: Setup nightly-2024-01-20 rust toolchain
        with:
          channel: nightly-2024-01-20
          targets: wasm32-unknown-unknown
          components: rustfmt,clippy,rust-src
          cache: ${{ (matrix.prefix == 'avs-and-node-group') && true || false }}
          # bins: cargo-tarpaulin@0.26.1
          target-dirs: 'gasp-node/target'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - uses: moonrepo/setup-toolchain@v0
        with:
          cache: false
          auto-install: false

      - name: Setup toolchains for services
        run: moon ci :prepare-toolchain --concurrency 1
      
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - uses: mozilla-actions/sccache-action@v0.0.5
      - name: Set Rust caching env vars
        run: |
          echo "SCCACHE_GCS_BUCKET=mangata-node-ci-cache" >> $GITHUB_ENV
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PREFIX=monorepo-${{ matrix.prefix }}" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      
      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3
      - run: docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
      - run: docker buildx create --use
      
      - run: moon ci --color ${{ matrix.moon-targets }}
        env:
          IMAGE_TAG: ${{ inputs.version }}

      - uses: appthrust/moon-ci-retrospect@v1
        if: success() || failure()
      - uses: moonrepo/run-report-action@v1
        if: success() || failure()
        with:
          access-token: ${{ secrets.BOT_USER_GITHUB_TOKEN }}
          matrix: ${{ toJSON(matrix) }}

  # gasp-node-coverage-report:
  #   name: '[gasp-node] Coverage report'
  #   runs-on: beast-gke
  #   steps:
  #     - uses: actions/checkout@v4
  #       with:
  #         fetch-depth: 0

  #     - uses: moonrepo/setup-rust@v1
  #       with:
  #         channel: nightly-2024-01-20
  #         targets: wasm32-unknown-unknown
  #         components: rust-src
  #         bins: cargo-tarpaulin@0.26.1
  #         cache: true
  #         target-dirs: 'gasp-node/target'
      
  #     - uses: moonrepo/setup-toolchain@v0
  #       with:
  #         auto-install: true
  #         cache: false

  #     - uses: google-github-actions/auth@v2
  #       id: auth
  #       with:
  #         workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
  #         service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
  #     - uses: google-github-actions/setup-gcloud@v2
  #     - uses: mozilla-actions/sccache-action@v0.0.5
  #     - name: Set Rust caching env vars
  #       run: |
  #         echo "SCCACHE_GCS_BUCKET=mangata-node-ci-cache" >> $GITHUB_ENV
  #         echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
  #         echo "SCCACHE_GCS_KEY_PREFIX=gasp-node-coverage" >> $GITHUB_ENV
  #         echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
  #         echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      
  #     - run: moon ci :coverage-gasp-node
  #     # - run: moon ci :coverage-gasp-node :benchmark-tests-gasp-node

  #     - name: Upload to codecov.io
  #       uses: codecov/codecov-action@v5
  #       with:
  #         token: ${{ secrets.ORG_CODECOV_TOKEN }}
  #         fail_ci_if_error: false

  gasp-node-runtime-benchmarks:
    name: '[gasp-node] Runtime benchmarks'
    runs-on: [performance-gke]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - uses: moonrepo/setup-rust@v1
        with:
          channel: nightly-2024-01-20
          targets: wasm32-unknown-unknown
          components: rust-src
          cache: true
          target-dirs: 'gasp-node/target'

      - uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: true
          cache: true
          proto-version: 0.46.1

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - uses: mozilla-actions/sccache-action@v0.0.5
      - name: Set Rust caching env vars
        run: |
          echo "SCCACHE_GCS_BUCKET=mangata-node-ci-cache" >> $GITHUB_ENV
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PREFIX=gasp-node-runtime-benchmarks" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      
      - run: moon ci :run-runtime-benchmarks
  
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.ORG_CODECOV_TOKEN }}
          fail_ci_if_error: false

  helmfile-lint:
    name: '[Helmfile] Lint and validate Helmfile configuration'
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ops/helmfiles
    env:
      IMAGE_TAG: ${{ inputs.version }}
      ENVIRONMENT: lint
    steps:
      - uses: actions/checkout@v4
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v2.0.0
        with:
          helmfile-version: v0.169.1
          helm-version: v3.16.2
          install-kubectl: no
          additional-helm-plugins: https://github.com/jkroepke/helm-secrets --version v4.1.1,https://github.com/aslafy-z/helm-git --version 1.3.0
      - name: Install kubeconform
        run: curl -L https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz | tar xzv && sudo mv kubeconform /usr/local/bin/

      - run: helmfile lint -e fungible
      - run: helmfile template -e fungible | kubeconform -kubernetes-version 1.30.0 -skip ServiceMonitor -strict
