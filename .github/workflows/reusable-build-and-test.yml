name: Build and test

on:
  workflow_call:
    inputs:
      version:
        description: Version to be assigned to the built image
        required: true
        type: string

permissions:
  contents: read
  id-token: write

jobs:
  build-foundry-deployer-image:
    name: Build foundry deployer Docker image with smart contracts code
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      
      - uses: foundry-rs/foundry-toolchain@v1
      - name: Install `contracts` deps
        working-directory: contracts
        run: forge install
      
      - run: |
          docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
          docker buildx create --use
          docker buildx build --push --platform linux/amd64 -t mangatasolutions/anvil:${{ inputs.version }} -f contracts/Dockerfile contracts

  build-avs-aggregator-image:
    name: Build avs-aggregator Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
      - run: |
          docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
          docker buildx create --use
          docker buildx build --push --platform linux/amd64,linux/arm64 -t mangatasolutions/avs-aggregator:${{ inputs.version }} -f avs-aggregator/Dockerfile .
  build-avs-finalizer-image:
    name: Build avs-finalizer Docker image
    uses: ./.github/workflows/reusable-rust-build.yml
    secrets: inherit
    with:
      version: ${{ inputs.version }}
  build-rollup-updater-image:
    name: Build rollup-updater Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
          docker buildx create --use
          # docker buildx build --push --platform linux/amd64,linux/arm64 -t mangatasolutions/rollup-updater:${{ inputs.version }} ./rollup-updater
          docker buildx build --push --platform linux/amd64 -t mangatasolutions/rollup-updater:${{ inputs.version }} ./rollup-updater
  build-rollup-sequencer-image:
    name: Build rollup-sequencer Docker image
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: |
          docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
          docker buildx create --use
          # docker buildx build --push --platform linux/amd64,linux/arm64 -t mangatasolutions/rollup-sequencer:${{ inputs.version }} ./rollup-sequencer
          docker buildx build --push --platform linux/amd64 -t mangatasolutions/rollup-sequencer:${{ inputs.version }} ./rollup-sequencer

  helmfile-lint:
    name: Lint and validate Helmfile configuration
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ops/helmfiles
    env:
      IMAGE_TAG: ${{ inputs.version }}
      ENVIRONMENT: lint
    steps:
      - uses: actions/checkout@v4
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v1.3.0
        with:
          helmfile-version: v0.166.0
          helm-version: v3.15.2
          install-kubectl: no
          additional-helm-plugins: https://github.com/jkroepke/helm-secrets --version v4.1.1,https://github.com/aslafy-z/helm-git --version 0.14.0
      - name: Install kubeconform 
        run: curl -L https://github.com/yannh/kubeconform/releases/download/v0.6.6/kubeconform-linux-amd64.tar.gz | tar xzv && sudo mv kubeconform /usr/local/bin/
      
      - run: helmfile lint -e fungible
      - run: helmfile template -e fungible | kubeconform -kubernetes-version 1.28.0 -skip ServiceMonitor -strict
