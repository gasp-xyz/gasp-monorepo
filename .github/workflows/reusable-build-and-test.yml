name: Build and test

on:
  workflow_call:
    inputs:
      version:
        description: Version to be assigned to the built image
        required: true
        type: string

permissions:
  contents: read
  id-token: write
  security-events: write

jobs:
  contracts-build-and-test:
    name: '[contracts] Build and test'
    runs-on: ubuntu-24.04
    permissions:
      security-events: write
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
          fetch-depth: 0
      
      - uses: foundry-rs/foundry-toolchain@v1
          
      - uses: actions/setup-python@v5
        with:
          python-version-file: 'contracts/.python-version'
          cache: pip
      - run: pip install -r requirements.txt
        working-directory: contracts
  
      - uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: true
          proto-version: 0.46.1
      
      - run: docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
      - run: docker buildx create --use
        
      - uses: oven-sh/setup-bun@v2
        with:
          bun-version: "1.2.2"
      - run: cd contracts && bun install

      - run: moon ci :contracts-check :contracts-build-image-ci
      
      - uses: appthrust/moon-ci-retrospect@v1
        if: success() || failure()

      - name: Make static analysis of contracts
        uses: crytic/slither-action@v0.4.0
        id: slither
        with:
          target: contracts
          sarif: results.sarif
          fail-on: none
      
      - name: Upload SARIF file
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ steps.slither.outputs.sarif }}

  build-and-test-stash:
    name: '[stash] Build and test'
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: stash
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'yarn'
          cache-dependency-path: "./stash/yarn.lock"

      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - uses: mdgreenwald/mozilla-sops-action@v1.6.0

      - run: yarn install --immutable
      - run: sops exec-env frontend.enc.env 'yarn run build'
      - run: sops exec-env frontend.enc.env 'yarn run test:unit'

  build-and-check-services:
    name: '[AVS] Build and test'
    runs-on: compile-gke
    # runs-on: gasp-monorepo-large-32core
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0
      
      # - uses: moonrepo/setup-rust@v1
      #   with:
      #     channel: 1.82.0
      #     targets: wasm32-unknown-unknown
      #     components: rustfmt,clippy,rust-src
      #     cache: true

      - uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: true
          proto-version: 0.46.1
      - name: Setup Rust toolchains for all services
        run: | 
          moon gasp-avs:prepare-toolchain
          moon gasp-node:prepare-toolchain
          moon sequencer:prepare-toolchain
      
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: pip
      - run: pip install cargo-zigbuild
      
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - name: Install sccache-cache
        uses: mozilla-actions/sccache-action@v0.0.5
      - name: Set Rust caching env vars
        run: |
          echo "SCCACHE_GCS_BUCKET=mangata-node-ci-cache" >> $GITHUB_ENV
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PREFIX=gasp-monorepo" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      
      - run: docker login -u ${{ secrets.ORG_DOCKERHUB_USERNAME }} -p ${{ secrets.ORG_DOCKERHUB_TOKEN }}
      - run: docker buildx create --use
      - run: moon ci :format :lint :test :build-image-ci
        env:
          IMAGE_TAG: ${{ inputs.version }}
      
      - uses: appthrust/moon-ci-retrospect@v1
        if: success() || failure()
      - uses: moonrepo/run-report-action@v1
        if: success() || failure()
        with:
          access-token: ${{ secrets.BOT_USER_GITHUB_TOKEN }}

  gasp-node-coverage-report:
    name: '[gasp-node] Coverage report'
    runs-on: compile-gke
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: moonrepo/setup-rust@v1
        with:
          channel: nightly-2024-01-20
          targets: wasm32-unknown-unknown
          components: rust-src
          bins: cargo-tarpaulin@0.26.1
          cache: false
      - uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: true
      
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - uses: mozilla-actions/sccache-action@v0.0.5
      - name: Set Rust caching env vars
        run: |
          echo "SCCACHE_GCS_BUCKET=mangata-node-ci-cache" >> $GITHUB_ENV
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PREFIX=gasp-monorepo" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      
      - run: moon ci gasp-node:coverage gasp-node:benchmark-tests

      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.ORG_CODECOV_TOKEN }}
          fail_ci_if_error: false

  gasp-node-runtime-benchmarks:
    name: '[gasp-node] Runtime benchmarks'
    runs-on: [performance-gke]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
  
      - uses: moonrepo/setup-rust@v1
        with:
          channel: nightly-2024-01-20
          targets: wasm32-unknown-unknown
          components: rust-src
          cache: true
      - uses: moonrepo/setup-toolchain@v0
        with:
          auto-install: true
      
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2
      - uses: mozilla-actions/sccache-action@v0.0.5
      - name: Set Rust caching env vars
        run: |
          echo "SCCACHE_GCS_BUCKET=mangata-node-ci-cache" >> $GITHUB_ENV
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PREFIX=gasp-monorepo" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV
      
      - run: moon ci gasp-node:run-runtime-benchmarks
  
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.ORG_CODECOV_TOKEN }}
          fail_ci_if_error: false

  helmfile-lint:
    name: '[Helmfile] Lint and validate Helmfile configuration'
    runs-on: ubuntu-24.04
    defaults:
      run:
        working-directory: ops/helmfiles
    env:
      IMAGE_TAG: ${{ inputs.version }}
      ENVIRONMENT: lint
    steps:
      - uses: actions/checkout@v4
      - name: Setup helmfile
        uses: mamezou-tech/setup-helmfile@v2.0.0
        with:
          helmfile-version: v0.169.1
          helm-version: v3.16.2
          install-kubectl: no
          additional-helm-plugins: https://github.com/jkroepke/helm-secrets --version v4.1.1,https://github.com/aslafy-z/helm-git --version 1.3.0
      - name: Install kubeconform
        run: curl -L https://github.com/yannh/kubeconform/releases/download/v0.6.7/kubeconform-linux-amd64.tar.gz | tar xzv && sudo mv kubeconform /usr/local/bin/

      - run: helmfile lint -e fungible
      - run: helmfile template -e fungible | kubeconform -kubernetes-version 1.30.0 -skip ServiceMonitor -strict
