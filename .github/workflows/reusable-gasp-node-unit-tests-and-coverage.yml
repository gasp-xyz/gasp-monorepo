name: '[gasp-node] Unit tests and coverage'

on:
  workflow_call:
    inputs:
      version:
        description: Version to be assigned to the built image
        required: true
        type: string
      branch:
        default: ci
        description: Branch that given job relates to, that value will be used to tag docker image gaspxyz/rollup-node:<BRANCH_NAME>
        required: true
        type: string
      builder_image:
        default: mangatasolutions/node-builder:multi-1.77-nightly-2024-01-20
        description: Docker image used for Rust builds
        required: false
        type: string
      cache-version:
        default: 2
        description: Cache version variable to be used to invalidate cache when needed
        required: false
        type: number
      cache-enabled:
        default: true
        description: Enable cargo build cache
        required: false
        type: boolean

permissions:
  contents: read
  checks: write
  id-token: write

env:
  NODE_DOCKER_IMAGE_REPOSITORY: gaspxyz/rollup-node

defaults:
  run:
    working-directory: gasp-node

jobs:
  unit-test:
    name: '[gasp-node] Unit tests'
    runs-on: [compile-gke]
    container:
      image: ${{ inputs.builder_image }}
    env:
      JOB_CACHE_PREFIX: gasp-node-unit-tests-cache-${{ inputs.cache-version }}
      CACHE_ARCHIVE_NAME: cache_archive.tar.zst
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2

      - name: Download cargo build cache
        if: inputs.cache-enabled
        id: cache
        run: |
          set -x
          CACHE_KEY="${{ env.JOB_CACHE_PREFIX }}-${{ hashFiles('**/Cargo.lock') }}"
          ARCHIVE_NAME="${{ env.CACHE_ARCHIVE_NAME }}"
          CACHE_FOUND=false

          if gcloud storage cp "gs://mangata-node-ci-cache/$CACHE_KEY/$ARCHIVE_NAME" - | zstd -d | tar -xf - -C / ; then
            CACHE_FOUND=true
          fi

          echo "cache_found=$CACHE_FOUND" >> $GITHUB_OUTPUT
          echo "cache_key=$CACHE_KEY" >> $GITHUB_OUTPUT

      - name: Install sccache-cache only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        uses: mozilla-actions/sccache-action@v0.0.5
      - name: Set Rust caching env vars only on non-release run
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GCS_BUCKET=mangata-node-ci-cache" >> $GITHUB_ENV
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PREFIX=${{ env.JOB_CACHE_PREFIX }}" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV

      - name: Run unit tests
        run: cargo test -j2

      - name: Upload cargo build cache
        if: inputs.cache-enabled && steps.cache.outputs.cache_found == 'false'
        shell: bash
        run: |
          set -x
          CACHE_KEY="${{ steps.cache.outputs.cache_key }}"
          ARCHIVE_NAME="${{ env.CACHE_ARCHIVE_NAME }}"
          CACHE_PATHS=(
            "./target"
            "/usr/local/cargo/bin/"
            "/usr/local/cargo/registry/index/"
            "/usr/local/cargo/registry/cache/"
            "/usr/local/cargo/git/db/"
          )

            SECONDS=0; tar -cf - "${CACHE_PATHS[@]}" | zstd -T0 -5 > "$ARCHIVE_NAME"
            echo "Compression completed in $SECONDS seconds" && echo "Archive size: $(du -h "$ARCHIVE_NAME" | cut -f1)"

            SECONDS=0; gcloud storage cp "$ARCHIVE_NAME" "gs://mangata-node-ci-cache/$CACHE_KEY/$ARCHIVE_NAME"
            echo "Upload completed in $SECONDS seconds"

      - name: Fix permissions on self-hosted runner
        if: always()
        run: chown -R 1100:1100 $GITHUB_WORKSPACE

  coverage-report:
    name: '[gasp-node] Coverage report'
    runs-on: [compile-gke]
    container:
      image: ${{ inputs.builder_image }}
      options: --security-opt seccomp=unconfined
    env:
      JOB_CACHE_PREFIX: gasp-node-coverage-job-cache-${{ inputs.cache-version }}
      CACHE_ARCHIVE_NAME: cache_archive.tar.zst
    steps:
      - uses: actions/checkout@v4
      - uses: google-github-actions/auth@v2
        id: auth
        with:
          workload_identity_provider: ${{ secrets.GCP_WORKLOAD_IDENTITY_PROVIDER }}
          service_account: ${{ secrets.GCP_SERVICE_ACCOUNT }}
      - uses: google-github-actions/setup-gcloud@v2

      - name: Download cargo build cache
        if: inputs.cache-enabled
        id: cache
        run: |
          set -x
          CACHE_KEY="${{ env.JOB_CACHE_PREFIX }}-${{ hashFiles('**/Cargo.lock') }}"
          ARCHIVE_NAME="${{ env.CACHE_ARCHIVE_NAME }}"
          CACHE_FOUND=false

          if gcloud storage cp "gs://mangata-node-ci-cache/$CACHE_KEY/$ARCHIVE_NAME" - | zstd -d | tar -xf - -C / ; then
            CACHE_FOUND=true
          fi

          echo "cache_found=$CACHE_FOUND" >> $GITHUB_OUTPUT
          echo "cache_key=$CACHE_KEY" >> $GITHUB_OUTPUT

      - name: Install sccache-cache only on non-release runs
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        uses: mozilla-actions/sccache-action@v0.0.5
      - name: Set Rust caching env vars only on non-release run
        if: github.event_name != 'release' && github.event_name != 'workflow_dispatch'
        run: |
          echo "SCCACHE_GCS_BUCKET=mangata-node-ci-cache" >> $GITHUB_ENV
          echo "SCCACHE_GCS_RW_MODE=READ_WRITE" >> $GITHUB_ENV
          echo "SCCACHE_GCS_KEY_PREFIX=${{ env.JOB_CACHE_PREFIX }}" >> $GITHUB_ENV
          echo "RUSTC_WRAPPER=sccache" >> $GITHUB_ENV
          echo "CARGO_INCREMENTAL=0" >> $GITHUB_ENV

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin@0.26.1 --locked --force
      - name: Generate coverage report with cargo-tarpaulin
        run: cargo tarpaulin --timeout 120 --workspace -e rollup-runtime-integration-test rollup-node rollup-runtime --exclude-files **/mock.rs **/weights.rs **/weights/* --out Xml
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.ORG_CODECOV_TOKEN }}
          fail_ci_if_error: false

      - name: Upload cargo build cache
        if: inputs.cache-enabled && steps.cache.outputs.cache_found == 'false'
        shell: bash
        run: |
          set -x
          CACHE_KEY="${{ steps.cache.outputs.cache_key }}"
          ARCHIVE_NAME="${{ env.CACHE_ARCHIVE_NAME }}"
          CACHE_PATHS=(
            "./target"
            "/usr/local/cargo/bin/"
            "/usr/local/cargo/registry/index/"
            "/usr/local/cargo/registry/cache/"
            "/usr/local/cargo/git/db/"
          )

            SECONDS=0; tar -cf - "${CACHE_PATHS[@]}" | zstd -T0 -5 > "$ARCHIVE_NAME"
            echo "Compression completed in $SECONDS seconds" && echo "Archive size: $(du -h "$ARCHIVE_NAME" | cut -f1)"

            SECONDS=0; gcloud storage cp "$ARCHIVE_NAME" "gs://mangata-node-ci-cache/$CACHE_KEY/$ARCHIVE_NAME"
            echo "Upload completed in $SECONDS seconds"

      - name: Fix permissions on self-hosted runner
        if: always()
        run: chown -R 1100:1100 $GITHUB_WORKSPACE
