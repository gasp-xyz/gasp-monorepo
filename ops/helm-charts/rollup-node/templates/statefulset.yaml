apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "node.name" . }}
  labels: {{- include "node.labels" . | nindent 4 }}
    service: {{ include "node.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "node.selectorLabels" . | nindent 6 }}
      service: {{ include "node.name" . }}
  serviceName: {{ include "node.name" . }}
  template:
    metadata:
      {{- if .Values.podAnnotations }}
      annotations:
      {{- with .Values.podAnnotations }}
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- end }}
      labels:
        {{- include "node.labels" . | nindent 8 }}
        service: {{ include "node.name" . }}
    spec:
      {{- if .Values.extraInitContainers }}
      initContainers:
        {{- with .Values.extraInitContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      {{- end }}
      containers:
        - name: node
          image: "{{ .Values.image.repository}}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          {{- if .Values.command }}
          command:
            {{- range .Values.command }}
            - {{ . }}
            {{- end }}
          {{- end }}
          {{- if .Values.args }}
          args:
            {{- range .Values.args }}
            - {{ . }}
            {{- end }}
          {{- end }}
          ports:
            - containerPort: {{ .Values.rpcPort }}
              name: rpc
          {{- if .Values.prometheus.enabled }}
            - containerPort: {{ .Values.prometheus.port }}
              name: prometheus
          {{- end }}
          {{- if or .Values.env .Values.envSecrets }}
          env:
            {{- range $key, $val := .Values.env }}
            - name: {{ $key }}
              value: {{ $val }}
            {{- end }}
            {{- range $key, $val := .Values.envSecrets }}
            - name: {{ $key }}
              valueFrom:
                secretKeyRef:
                  name: "{{ include "node.name" $ }}-secret"
                  key: {{ $key }}
            {{- end }}
          {{- end }}
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.data.storageEnabled }}
            - mountPath: {{ .Values.data.mountPath }}
              name: data
            {{- end }}
          {{- if .Values.enableStartupProbe }}
          startupProbe:
            failureThreshold: 30
            periodSeconds: 10
            httpGet:
              path: /health
              port: rpc
          {{- end }}
        {{- with .Values.extraContainers }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
      terminationGracePeriodSeconds: {{ .Values.terminationGracePeriodSeconds }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
      {{- toYaml . | nindent 10 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
      {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
      {{- toYaml . | nindent 8 }}
      {{- end }}
  {{- if .Values.data.storageEnabled }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: {{ .Values.data.storageClass }}
        accessModes: ["ReadWriteOnce"]
        {{- if or .Values.data.kubernetesVolumeSnapshot .Values.data.kubernetesVolumeToClone }}
        dataSource:
          {{- if .Values.data.kubernetesVolumeSnapshot }}
          name: {{ .Values.data.kubernetesVolumeSnapshot }}
          kind: VolumeSnapshot
          apiGroup: snapshot.storage.k8s.io
          {{- else }}
          name: {{ .Values.data.kubernetesVolumeToClone }}
          kind: PersistentVolumeClaim
          {{- end }}
        {{- end }}
        resources:
          requests:
            storage: {{ .Values.data.storageSize }}
  {{- end }}
