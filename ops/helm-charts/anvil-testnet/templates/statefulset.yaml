{{ $name :=  "anvil" }}
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ $name }}
  labels: {{- include "anvil.labels" . | nindent 4 }}
    service: {{ $name }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "anvil.selectorLabels" . | nindent 6 }}
      service: {{ $name }}
  serviceName: {{ $name }}
  template:
    metadata:
      labels:
        {{- include "anvil.labels" . | nindent 8 }}
        service: {{ $name }}
    spec:
      initContainers:
        - name: init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          command: ["/bin/sh"]
          environment:
            - name: ENV_SELECTOR
              value: {{ .Values.envSelector }}
          args:
            - -c
            - |
              # Start anvil to dump the state
              anvil --dump-state {{ .Values.dataMountPath }}/anvil-state.json &

              # Deploy all contracts
              forge script script/MultiStage.s.sol \
                --rpc-url http://localhost:8545 \
                --private-key {{ .Values.privateKey }} \
                --broadcact -v

              # Stop anvil
              pkill anvil
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            - mountPath: {{ .Values.dataMountPath }}
              name: data
      {{- end }}
      containers:
        - name: {{ $name }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          ports:
            - containerPort: 8545
              name: rpc
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          volumeMounts:
            {{- if .Values.enablePersistence }}
            - mountPath: {{ .Values.dataMountPath }}
              name: data
            {{- end }}
  {{- if .Values.enablePersistence }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: {{ .Values.storageClass }}
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.storageSize }}
  {{- end }}
