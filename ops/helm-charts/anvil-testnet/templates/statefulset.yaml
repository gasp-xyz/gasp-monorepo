apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: {{ include "anvil.name" . }}
  labels: {{- include "anvil.labels" . | nindent 4 }}
    service: {{ include "anvil.name" . }}
spec:
  replicas: 1
  selector:
    matchLabels:
      {{- include "anvil.selectorLabels" . | nindent 6 }}
      service: {{ include "anvil.name" . }}
  serviceName: {{ include "anvil.name" . }}
  template:
    metadata:
      labels:
        {{- include "anvil.labels" . | nindent 8 }}
        service: {{ include "anvil.name" . }}
    spec:
      initContainers:
        - name: init
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          command: ["/bin/sh"]
          env:
            - name: ENV_SELECTOR
              value: {{ .Values.envSelector }}
          args:
            - -c
            - |
              set -ex
              if [ ! -f {{ .Values.dataMountPath }}/anvil-state.json ]; then
                # Start anvil to dump the state
                anvil --state {{ .Values.dataMountPath }}/anvil-state.json &

                # Deploy all contracts
                forge script script/MultiStage.s.sol \
                  --rpc-url http://localhost:8545 \
                  --private-key {{ .Values.privateKey }} \
                  --broadcast -v

                # Stop anvil
                pkill anvil
              fi
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.enablePersistence }}
          volumeMounts:
            - mountPath: {{ .Values.dataMountPath }}
              name: data
          {{- end }}
      containers:
        - name: anvil
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag }}"
          imagePullPolicy: Always
          command:
            - anvil
            - --host
            - 0.0.0.0
            - --state
            - "{{ .Values.dataMountPath }}/anvil-state.json"
          ports:
            - containerPort: 8545
              name: rpc
          resources:
          {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.enablePersistence }}
          volumeMounts:
            - mountPath: {{ .Values.dataMountPath }}
              name: data
          {{- end }}
  {{- if .Values.enablePersistence }}
  volumeClaimTemplates:
    - metadata:
        name: data
      spec:
        storageClassName: {{ .Values.storageClass }}
        accessModes: ["ReadWriteOnce"]
        resources:
          requests:
            storage: {{ .Values.storageSize }}
  {{- end }}
