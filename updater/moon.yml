type: application
language: rust
toolchain:
  rust:
    version: '1.82.0'
tags:
  - 'rust-channel-1.82.0'

env:
  CARGO_TERM_COLOR: 'always'
  SCCACHE_GCS_KEY_PREFIX: updater
  SERVICE_NAME: updater
  IMAGE_BUILD_REPOSITORY: europe-docker.pkg.dev/direct-pixel-353917/gaspxyz/updater
  DOCKERHUB_REPOSITORY: gaspxyz/updater

fileGroups:
  sources:
    - 'bindings/**/*'
    - 'src/**/*'
    - 'Cargo.toml'

tasks:
  prepare-toolchain:
    command: rustup show
    options:
      cache: false

  build:
    command: cargo build --release
    inputs: ['@globs(sources)']
    outputs: ['target/release/main']
    env:
      SCCACHE_GCS_KEY_PREFIX: updater-release
  
  build-image-local:
    script: 'docker buildx build -t gaspxyz/updater:local -t gaspxyz/updater:localbase --load .'
    inputs: ['@globs(sources)', 'Dockerfile']

  buildkit-build-and-push-image-digests:
    command: >
      docker buildx build --platform linux/amd64,linux/arm64
      --cache-from type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache
      --cache-to type=registry,ref=${IMAGE_BUILD_REPOSITORY}:buildcache,mode=max
      --output type=image,push=true,push-by-digest=true,name=${IMAGE_BUILD_REPOSITORY}
      --metadata-file ${SERVICE_NAME}-buildkit-metadata.json ./
    inputs: ["@globs(sources)", "Dockerfile", '.dockerignore']
    outputs: ['${SERVICE_NAME}-buildkit-metadata.json']
    options:
      outputStyle: stream
      cache: true
      internal: true

  build-image-ci:
    script: |
      set -ex
      IMAGE_DIGEST=$(jq -r '."containerimage.digest"' ${SERVICE_NAME}-buildkit-metadata.json)
  
      docker buildx imagetools create \
        --tag ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci} \
        --tag ${DOCKERHUB_REPOSITORY}:${IMAGE_TAG:-ci} \
        ${IMAGE_BUILD_REPOSITORY}@${IMAGE_DIGEST}
  
      echo "Successfully created ${IMAGE_BUILD_REPOSITORY}:${IMAGE_TAG:-ci} from existing digests"
    deps: ['buildkit-build-and-push-image-digests']
    inputs: ['${SERVICE_NAME}-buildkit-metadata.json']
    options:
      cache: false

  format:
    command: cargo fmt --all -- --check
    inputs: ['@globs(sources)']

  lint:
    command: cargo clippy
    inputs: ['@globs(sources)']

  test:
    command: cargo test
    inputs: ['@globs(sources)']

  release:
    command: 'yarn run release'
    options:
      cache: false
      runInCI: false
