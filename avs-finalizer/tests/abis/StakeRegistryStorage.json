{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "minimumStake",
          "type": "uint96"
        }
      ],
      "name": "MinimumStakeForQuorumUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint96",
          "name": "stake",
          "type": "uint96"
        }
      ],
      "name": "OperatorStakeUpdate",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "QuorumCreated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "contract IStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyAddedToQuorum",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "contract IStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "multiplier",
          "type": "uint256"
        }
      ],
      "name": "StrategyMultiplierUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "contract IStrategy",
          "name": "strategy",
          "type": "address"
        }
      ],
      "name": "StrategyRemovedFromQuorum",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "MAX_WEIGHING_FUNCTION_LENGTH",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WEIGHTING_DIVISOR",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "components": [
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "multiplier",
              "type": "uint96"
            }
          ],
          "internalType": "struct IStakeRegistry.StrategyParams[]",
          "name": "strategyParams",
          "type": "tuple[]"
        }
      ],
      "name": "addStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "delegation",
      "outputs": [
        {
          "internalType": "contract IDelegationManager",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "quorumNumbers",
          "type": "bytes"
        }
      ],
      "name": "deregisterOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "getCurrentStake",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "getCurrentTotalStake",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "getLatestStakeUpdate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "updateBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "nextUpdateBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "stake",
              "type": "uint96"
            }
          ],
          "internalType": "struct IStakeRegistry.StakeUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        }
      ],
      "name": "getStakeAtBlockNumber",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStakeAtBlockNumberAndIndex",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "getStakeHistory",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "updateBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "nextUpdateBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "stake",
              "type": "uint96"
            }
          ],
          "internalType": "struct IStakeRegistry.StakeUpdate[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getStakeUpdateAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "updateBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "nextUpdateBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "stake",
              "type": "uint96"
            }
          ],
          "internalType": "struct IStakeRegistry.StakeUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        }
      ],
      "name": "getStakeUpdateIndexAtBlockNumber",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTotalStakeAtBlockNumberFromIndex",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "getTotalStakeHistoryLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        },
        {
          "internalType": "bytes",
          "name": "quorumNumbers",
          "type": "bytes"
        }
      ],
      "name": "getTotalStakeIndicesAtBlockNumber",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getTotalStakeUpdateAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "updateBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "nextUpdateBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint96",
              "name": "stake",
              "type": "uint96"
            }
          ],
          "internalType": "struct IStakeRegistry.StakeUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint96",
          "name": "minimumStake",
          "type": "uint96"
        },
        {
          "components": [
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "multiplier",
              "type": "uint96"
            }
          ],
          "internalType": "struct IStakeRegistry.StrategyParams[]",
          "name": "strategyParams",
          "type": "tuple[]"
        }
      ],
      "name": "initializeQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "name": "minimumStakeForQuorum",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint256[]",
          "name": "strategyIndices",
          "type": "uint256[]"
        },
        {
          "internalType": "uint96[]",
          "name": "newMultipliers",
          "type": "uint96[]"
        }
      ],
      "name": "modifyStrategyParams",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "quorumNumbers",
          "type": "bytes"
        }
      ],
      "name": "registerOperator",
      "outputs": [
        {
          "internalType": "uint96[]",
          "name": "",
          "type": "uint96[]"
        },
        {
          "internalType": "uint96[]",
          "name": "",
          "type": "uint96[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint256[]",
          "name": "indicesToRemove",
          "type": "uint256[]"
        }
      ],
      "name": "removeStrategies",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategiesPerQuorum",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "strategyParams",
      "outputs": [
        {
          "internalType": "contract IStrategy",
          "name": "strategy",
          "type": "address"
        },
        {
          "internalType": "uint96",
          "name": "multiplier",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "strategyParamsByIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "multiplier",
              "type": "uint96"
            }
          ],
          "internalType": "struct IStakeRegistry.StrategyParams",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "strategyParamsLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "quorumNumbers",
          "type": "bytes"
        }
      ],
      "name": "updateOperatorStake",
      "outputs": [
        {
          "internalType": "uint192",
          "name": "",
          "type": "uint192"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "weightOfOperatorForQuorum",
      "outputs": [
        {
          "internalType": "uint96",
          "name": "",
          "type": "uint96"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "MAX_WEIGHING_FUNCTION_LENGTH()": "7c172347",
    "WEIGHTING_DIVISOR()": "5e5a6775",
    "addStrategies(uint8,(address,uint96)[])": "c601527d",
    "delegation()": "df5cf723",
    "deregisterOperator(bytes32,bytes)": "bd29b8cd",
    "getCurrentStake(bytes32,uint8)": "5401ed27",
    "getCurrentTotalStake(uint8)": "d5eccc05",
    "getLatestStakeUpdate(bytes32,uint8)": "f851e198",
    "getStakeAtBlockNumber(bytes32,uint8,uint32)": "fa28c627",
    "getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)": "f2be94ae",
    "getStakeHistory(bytes32,uint8)": "2cd95940",
    "getStakeUpdateAtIndex(uint8,bytes32,uint256)": "ac6bfb03",
    "getStakeUpdateIndexAtBlockNumber(bytes32,uint8,uint32)": "dd9846b9",
    "getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)": "c8294c56",
    "getTotalStakeHistoryLength(uint8)": "0491b41c",
    "getTotalStakeIndicesAtBlockNumber(uint32,bytes)": "81c07502",
    "getTotalStakeUpdateAtIndex(uint8,uint256)": "b6904b78",
    "initializeQuorum(uint8,uint96,(address,uint96)[])": "ff694a77",
    "minimumStakeForQuorum(uint8)": "c46778a5",
    "modifyStrategyParams(uint8,uint256[],uint96[])": "20b66298",
    "registerOperator(address,bytes32,bytes)": "25504777",
    "registryCoordinator()": "6d14a987",
    "removeStrategies(uint8,uint256[])": "5f1f2d77",
    "strategiesPerQuorum(uint8,uint256)": "9f3ccf65",
    "strategyParams(uint8,uint256)": "08732461",
    "strategyParamsByIndex(uint8,uint256)": "adc804da",
    "strategyParamsLength(uint8)": "3ca5a5f5",
    "updateOperatorStake(address,bytes32,bytes)": "66acfefe",
    "weightOfOperatorForQuorum(uint8,address)": "1f9b74e0"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"}],\"name\":\"MinimumStakeForQuorumUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"name\":\"OperatorStakeUpdate\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"QuorumCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyAddedToQuorum\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"}],\"name\":\"StrategyMultiplierUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"}],\"name\":\"StrategyRemovedFromQuorum\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"MAX_WEIGHING_FUNCTION_LENGTH\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WEIGHTING_DIVISOR\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"}],\"name\":\"addStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"delegation\",\"outputs\":[{\"internalType\":\"contract IDelegationManager\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getCurrentStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getCurrentTotalStake\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getLatestStakeUpdate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getStakeAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeAtBlockNumberAndIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getStakeHistory\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getStakeUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getStakeUpdateIndexAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTotalStakeAtBlockNumberFromIndex\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getTotalStakeHistoryLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"getTotalStakeIndicesAtBlockNumber\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getTotalStakeUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"updateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"nextUpdateBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint96\",\"name\":\"stake\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StakeUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint96\",\"name\":\"minimumStake\",\"type\":\"uint96\"},{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams[]\",\"name\":\"strategyParams\",\"type\":\"tuple[]\"}],\"name\":\"initializeQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"name\":\"minimumStakeForQuorum\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"strategyIndices\",\"type\":\"uint256[]\"},{\"internalType\":\"uint96[]\",\"name\":\"newMultipliers\",\"type\":\"uint96[]\"}],\"name\":\"modifyStrategyParams\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"},{\"internalType\":\"uint96[]\",\"name\":\"\",\"type\":\"uint96[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256[]\",\"name\":\"indicesToRemove\",\"type\":\"uint256[]\"}],\"name\":\"removeStrategies\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategiesPerQuorum\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"strategyParams\",\"outputs\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"strategyParamsByIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"contract IStrategy\",\"name\":\"strategy\",\"type\":\"address\"},{\"internalType\":\"uint96\",\"name\":\"multiplier\",\"type\":\"uint96\"}],\"internalType\":\"struct IStakeRegistry.StrategyParams\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"strategyParamsLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"updateOperatorStake\",\"outputs\":[{\"internalType\":\"uint192\",\"name\":\"\",\"type\":\"uint192\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"weightOfOperatorForQuorum\",\"outputs\":[{\"internalType\":\"uint96\",\"name\":\"\",\"type\":\"uint96\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"deregisterOperator(bytes32,bytes)\":{\"details\":\"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already deregistered         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\",\"params\":{\"operatorId\":\"The id of the operator to deregister.\",\"quorumNumbers\":\"The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber.\"}},\"getCurrentStake(bytes32,uint8)\":{\"details\":\"Function returns weight of **0** in the event that the operator has no stake history\"},\"getCurrentTotalStake(uint8)\":{\"details\":\"Will revert if `_totalStakeHistory[quorumNumber]` is empty.\"},\"getLatestStakeUpdate(bytes32,uint8)\":{\"details\":\"Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history\"},\"getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators\",\"params\":{\"blockNumber\":\"Block number to make sure the stake is from.\",\"index\":\"Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\",\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getStakeHistory(bytes32,uint8)\":{\"params\":{\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getStakeUpdateAtIndex(uint8,bytes32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.\",\"params\":{\"index\":\"Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.\",\"operatorId\":\"The id of the operator of interest.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)\":{\"details\":\"Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators\",\"params\":{\"blockNumber\":\"Block number to make sure the stake is from.\",\"index\":\"Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"getTotalStakeUpdateAtIndex(uint8,uint256)\":{\"params\":{\"index\":\"Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.\",\"quorumNumber\":\"The quorum number to get the stake for.\"}},\"modifyStrategyParams(uint8,uint256[],uint96[])\":{\"params\":{\"newMultipliers\":\"are the new multipliers for the strategies\",\"quorumNumber\":\"is the quorum number to change the strategy for\",\"strategyIndices\":\"are the indices of the strategies to change\"}},\"registerOperator(address,bytes32,bytes)\":{\"details\":\"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already registered\",\"params\":{\"operator\":\"The address of the operator to register.\",\"operatorId\":\"The id of the operator to register.\",\"quorumNumbers\":\"The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber.\"},\"returns\":{\"_0\":\"The operator's current stake for each quorum, and the total stake for each quorum\"}},\"removeStrategies(uint8,uint256[])\":{\"details\":\"higher indices should be *first* in the list of @param indicesToRemove, since otherwise the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove\",\"params\":{\"quorumNumber\":\".\"}},\"updateOperatorStake(address,bytes32,bytes)\":{\"returns\":{\"_0\":\"A bitmap of quorums where the operator no longer meets the minimum stake and should be deregistered.\"}},\"weightOfOperatorForQuorum(uint8,address)\":{\"details\":\"reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`\"}},\"title\":\"Storage variables for the `StakeRegistry` contract.\",\"version\":1},\"userdoc\":{\"events\":{\"MinimumStakeForQuorumUpdated(uint8,uint96)\":{\"notice\":\"emitted when the minimum stake for a quorum is updated\"},\"OperatorStakeUpdate(bytes32,uint8,uint96)\":{\"notice\":\"emitted whenever the stake of `operator` is updated\"},\"QuorumCreated(uint8)\":{\"notice\":\"emitted when a new quorum is created\"},\"StrategyAddedToQuorum(uint8,address)\":{\"notice\":\"emitted when `strategy` has been added to the array at `strategyParams[quorumNumber]`\"},\"StrategyMultiplierUpdated(uint8,address,uint256)\":{\"notice\":\"emitted when `strategy` has its `multiplier` updated in the array at `strategyParams[quorumNumber]`\"},\"StrategyRemovedFromQuorum(uint8,address)\":{\"notice\":\"emitted when `strategy` has removed from the array at `strategyParams[quorumNumber]`\"}},\"kind\":\"user\",\"methods\":{\"MAX_WEIGHING_FUNCTION_LENGTH()\":{\"notice\":\"Maximum length of dynamic arrays in the `strategyParams` mapping.\"},\"WEIGHTING_DIVISOR()\":{\"notice\":\"Constant used as a divisor in calculating weights.\"},\"addStrategies(uint8,(address,uint96)[])\":{\"notice\":\"Adds new strategies and the associated multipliers to the @param quorumNumber.\"},\"delegation()\":{\"notice\":\"The address of the Delegation contract for EigenLayer.\"},\"deregisterOperator(bytes32,bytes)\":{\"notice\":\"Deregisters the operator with `operatorId` for the specified `quorumNumbers`.\"},\"getCurrentStake(bytes32,uint8)\":{\"notice\":\"Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`\"},\"getCurrentTotalStake(uint8)\":{\"notice\":\"Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`.\"},\"getLatestStakeUpdate(bytes32,uint8)\":{\"notice\":\"Returns the most recent stake weight for the `operatorId` for a certain quorum\"},\"getStakeAtBlockNumber(bytes32,uint8,uint32)\":{\"notice\":\"Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`\"},\"getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)\":{\"notice\":\"Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry  corresponds to the operator's stake at `blockNumber`. Reverts otherwise.\"},\"getStakeHistory(bytes32,uint8)\":{\"notice\":\"Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\"},\"getStakeUpdateAtIndex(uint8,bytes32,uint256)\":{\"notice\":\"Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array.\"},\"getStakeUpdateIndexAtBlockNumber(bytes32,uint8,uint32)\":{\"notice\":\"Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`\"},\"getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)\":{\"notice\":\"Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the  `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`.  Reverts otherwise.\"},\"getTotalStakeIndicesAtBlockNumber(uint32,bytes)\":{\"notice\":\"Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`\"},\"getTotalStakeUpdateAtIndex(uint8,uint256)\":{\"notice\":\"Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`.\"},\"initializeQuorum(uint8,uint96,(address,uint96)[])\":{\"notice\":\"Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake\"},\"minimumStakeForQuorum(uint8)\":{\"notice\":\"In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]` evaluated by this contract's 'VoteWeigher' logic.\"},\"modifyStrategyParams(uint8,uint256[],uint96[])\":{\"notice\":\"This function is used for modifying the weights of strategies that are already in the mapping strategyParams for a specific\"},\"registerOperator(address,bytes32,bytes)\":{\"notice\":\"Registers the `operator` with `operatorId` for the specified `quorumNumbers`.\"},\"registryCoordinator()\":{\"notice\":\"the coordinator contract that this registry is associated with\"},\"removeStrategies(uint8,uint256[])\":{\"notice\":\"This function is used for removing strategies and their associated weights from the\"},\"strategyParams(uint8,uint256)\":{\"notice\":\"mapping from quorum number to the list of strategies considered and their corresponding multipliers for that specific quorum\"},\"strategyParamsByIndex(uint8,uint256)\":{\"notice\":\"Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`\"},\"strategyParamsLength(uint8)\":{\"notice\":\"Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`.\"},\"updateOperatorStake(address,bytes32,bytes)\":{\"notice\":\"Called by the registry coordinator to update an operator's stake for one or more quorums. If the operator no longer has the minimum stake required for a quorum, they are added to the\"},\"weightOfOperatorForQuorum(uint8,address)\":{\"notice\":\"This function computes the total weight of the @param operator in the quorum @param quorumNumber.\"}},\"notice\":\"This storage contract is separate from the logic to simplify the upgrade process.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/StakeRegistryStorage.sol\":\"StakeRegistryStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer-scripts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/script/\",\":@eigenlayer/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBeaconChainOracle.sol\":{\"keccak256\":\"0x0fef07aa6179c77198f1514e12e628aa1c876e04f9c181ec853a322179e5be00\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://51438325876cc2d4c77f58488a7e27b488015d1b663c50be6a5cafbd73b9c983\",\"dweb:/ipfs/QmViCuGoYZzi6wtXA8PPKigqVv3KMuNxEVQ1Td9dGqjL18\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0x6808a4feea1bde54f60f9816251f8552d05f0340d87e9a57523ffacdecdb7dfb\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://24dd16f797a63f918428e52b22a821deda75cae1a6728c003375e3ad15fcb22e\",\"dweb:/ipfs/QmNidYeCGhstsjnZm4Mb6LMmRSNbRAx21nUCng1SMbuBqt\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IETHPOSDeposit.sol\":{\"keccak256\":\"0x2e60e5f4b0da0a0a4e2a07c63141120998559970c21deac743ea0c64a60a880c\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://e635c346bde5b7ade9bcf35bc733081520cb86015be4fbc6e761e6e9482c4c91\",\"dweb:/ipfs/QmRoeazEnbFn5SPSWAkoFK2gSN9DMp3hJAnrLWuL2sKutz\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPod.sol\":{\"keccak256\":\"0xb50c36ad96b6679bb80fd8331f949cbfbcba0f529026e1421a4d2bae64396eba\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5719181d780120f1e688c0da276992a8caf185815917f453b3550537c31ed4cc\",\"dweb:/ipfs/QmYprRC5ZEXhz3zAUND5E8Xjn6s5TL8ZF8QbnndVq7aVPR\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol\":{\"keccak256\":\"0xd8a64dbed03d3a5cdbefe1af75968f2dde07f973749c2ef5197bf7187c3e448c\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://27ccc7c1fd9352e9f9b357c9063d255dc0ed9583f43db09f786ac7497d7846b8\",\"dweb:/ipfs/QmeJzuJkE9m2NUNwZSp4tGZEZmih1LeucePup8hzMVDRbG\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPausable.sol\":{\"keccak256\":\"0x98cffc894842947377e24c1d375813a1120dd73a84c29782ab68404e109cb34f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b3474f6c350ceaee57cbdfb08fb48835d0c6e81ae8ebfbb9667899584a139324\",\"dweb:/ipfs/QmWELKtksdtWxQbqAccd8yGyhKqrgPZXTADKR7BuT27Zg5\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol\":{\"keccak256\":\"0x9de8dd682bc0d812bbd6583c0231cbf35448d5eff58b74a93efa64cb9a768c49\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c00d6c675b9c72b092d287fe85fd37782588df32b8eb59ab4c7db7a86be25e7d\",\"dweb:/ipfs/QmeYokY3HhAdbBaCPdHg3PgQEdRCDFEJy3Wf7VtgHBkQSx\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x5e52482a31d94401a8502f3014c4aada1142b4450fc0596dff8e1866a85fe092\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://17dc326c9361bc1453379f26545963557b2883b0c88bc07d4477e04dbcc0cc8c\",\"dweb:/ipfs/QmZXT7A816W5JH2ymirE2ETaJttqztFCsEL22AV8oEfCK9\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISlasher.sol\":{\"keccak256\":\"0x45dfaa2cfdde87f48a6ee38bb6fb739847aef7cf3f6137bdcd8c8a330559ec79\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://1b7f6bd75b42fcaa91ceb7140cb2c41926a1fe6ee2d3161e4fe6186b181ba232\",\"dweb:/ipfs/QmZjbdKiSs33C9i3GDc3sdD39Pz4YPkDoKftowoUF4kHmY\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0xc530c6a944b70051fd0dac0222de9a4b5baadeaf94ad194daac6ad8d2ace7420\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://3767df0364ce835b52e786d2851431eb9223fe4747602107505477e162231d73\",\"dweb:/ipfs/QmZkH5bKUygQrJomndNaQqkefVRW4rRefCa8HPJ5HMczxJ\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol\":{\"keccak256\":\"0xc40998ca52abf38829f8ee99a28c5eed741361194d8774e84783c75a74902674\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://2d03e87c279200f81ec9031ca1dc839e65829952e375748de0ed95a3d6861234\",\"dweb:/ipfs/QmQEhmNMQXxqmjFJdgrDceEYqwJQ4AWJR5TxgDy1ZMSrqN\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/BeaconChainProofs.sol\":{\"keccak256\":\"0x70d89b05c1c5f47b74a07fbb5a2c05e606fed494e749ea98a9915b7be73df377\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://db1d3bfaee69aef53c8b12b492a17584e6d1ac94610cb8b38aad33e1cdd81af7\",\"dweb:/ipfs/QmfVsMTj1hcf9fMEm5RzvtcBN4dMcAKFBgUUDsNDr5XFpq\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Endian.sol\":{\"keccak256\":\"0xf3b72653ba2567a978d4612703fa5f71c5fcd015d8dac7818468f22772d90a9d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cee9d09370d968138d775c39525db4cd0768d60d17be7685519de12444e7dd2f\",\"dweb:/ipfs/QmUdGh8wpMei3edKiEWA6S96s9dRt4ekZKJ4nau356X8xQ\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Merkle.sol\":{\"keccak256\":\"0x606eabfdc2241dab76f7c6e6754324ae9eb12b0a5068984d2c11e2cd2fa94d98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a69c88393e9cf58ab066b75c75134b8c7cd51c242b726767cd8ec7e7d8351916\",\"dweb:/ipfs/QmaNMz951WD5JZeQs5yav29mZn2E6fvdFm5u3moMupRzSM\"]},\"lib/eigenlayer-middleware/src/StakeRegistryStorage.sol\":{\"keccak256\":\"0x23df9a79c886917d6f581ed8fd7dc573ff01e6215cd2721a75b3c285e6a75d89\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://86f455a0a23e7ad55f5dca08dacf591eec9963959df812351f21a8d84b9d2988\",\"dweb:/ipfs/QmNbZ8emJWZXDHDw7z2GrH7sc8gdpMNEQaYWE3KKNjrAmM\"]},\"lib/eigenlayer-middleware/src/interfaces/IBLSApkRegistry.sol\":{\"keccak256\":\"0xfc84df26fafb537f309a85194e88543d593762ef737f148193bb88312a4703a7\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://4c3108311624eb32f162f34ae505ff0b24bfac37bc3586695ae1c3846be8d48d\",\"dweb:/ipfs/QmRtD8nic2vG2kRfVRDaL3WMgc8NLU7PiEx3zMZaX68msh\"]},\"lib/eigenlayer-middleware/src/interfaces/IIndexRegistry.sol\":{\"keccak256\":\"0x66ea31c35539fd47a94b874ac9339bc178f9cea3dfee932fd6deec51945f59cf\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://48e0e16f4973a68487165cf35c178badd55c0d2c2e592c698723108694072637\",\"dweb:/ipfs/QmUG3aFym2i2bsUFD8YbicCEM6hLh1TsgM4XR89rkEUYzy\"]},\"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol\":{\"keccak256\":\"0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25\",\"dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY\"]},\"lib/eigenlayer-middleware/src/interfaces/IRegistryCoordinator.sol\":{\"keccak256\":\"0xaa994bdacd0d8718b4a9c018debece071e28a0906a3f041d53f1874eb882fad9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0f175cfc849fb4ac38d1629e6f87c1d7b39bd5eb2bc62e6d40d57a9ec34a62db\",\"dweb:/ipfs/QmQhgQNjZaYYzEpk2X732ZKPfTbFGr8y8RLhDWizZSQLxi\"]},\"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol\":{\"keccak256\":\"0xa990d3cff41340b37d8e5218627f8f83cd60acbce5e1846af28f6d65db0e2b2f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://68cc70d64f757e21c8a5d67b93d17543a160a8507a7b29f77bba4d2dc6f2a9c3\",\"dweb:/ipfs/QmUjzs5cA3k86w7Cewbei7kUNfRymuEidEbEy9hKQe22Ve\"]},\"lib/eigenlayer-middleware/src/libraries/BN254.sol\":{\"keccak256\":\"0x40a9a94aaa705b67d1c4efdccb8e1ff8ccf41d1ce20639f6cd6fd27d84891417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b7a07633fc3fce4d2eac8dc16ee2cf138e34583e1822d3d705d7c567667bf49\",\"dweb:/ipfs/QmVWYp64T71yKnT2Bpoq4wj7bADUKmjW8w5uzhCTh5Bs91\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8",
              "indexed": true
            },
            {
              "internalType": "uint96",
              "name": "minimumStake",
              "type": "uint96",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "MinimumStakeForQuorumUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8",
              "indexed": false
            },
            {
              "internalType": "uint96",
              "name": "stake",
              "type": "uint96",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "OperatorStakeUpdate",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8",
              "indexed": true
            }
          ],
          "type": "event",
          "name": "QuorumCreated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8",
              "indexed": true
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "StrategyAddedToQuorum",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8",
              "indexed": true
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address",
              "indexed": false
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "StrategyMultiplierUpdated",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8",
              "indexed": true
            },
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "StrategyRemovedFromQuorum",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "MAX_WEIGHING_FUNCTION_LENGTH",
          "outputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "WEIGHTING_DIVISOR",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "struct IStakeRegistry.StrategyParams[]",
              "name": "strategyParams",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "contract IStrategy",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "multiplier",
                  "type": "uint96"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "addStrategies"
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "delegation",
          "outputs": [
            {
              "internalType": "contract IDelegationManager",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "quorumNumbers",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deregisterOperator"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getCurrentStake",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getCurrentTotalStake",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getLatestStakeUpdate",
          "outputs": [
            {
              "internalType": "struct IStakeRegistry.StakeUpdate",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "updateBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "nextUpdateBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "stake",
                  "type": "uint96"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStakeAtBlockNumber",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStakeAtBlockNumberAndIndex",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStakeHistory",
          "outputs": [
            {
              "internalType": "struct IStakeRegistry.StakeUpdate[]",
              "name": "",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "updateBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "nextUpdateBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "stake",
                  "type": "uint96"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStakeUpdateAtIndex",
          "outputs": [
            {
              "internalType": "struct IStakeRegistry.StakeUpdate",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "updateBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "nextUpdateBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "stake",
                  "type": "uint96"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getStakeUpdateIndexAtBlockNumber",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTotalStakeAtBlockNumberFromIndex",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTotalStakeHistoryLength",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            },
            {
              "internalType": "bytes",
              "name": "quorumNumbers",
              "type": "bytes"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTotalStakeIndicesAtBlockNumber",
          "outputs": [
            {
              "internalType": "uint32[]",
              "name": "",
              "type": "uint32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getTotalStakeUpdateAtIndex",
          "outputs": [
            {
              "internalType": "struct IStakeRegistry.StakeUpdate",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "updateBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "nextUpdateBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint96",
                  "name": "stake",
                  "type": "uint96"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint96",
              "name": "minimumStake",
              "type": "uint96"
            },
            {
              "internalType": "struct IStakeRegistry.StrategyParams[]",
              "name": "strategyParams",
              "type": "tuple[]",
              "components": [
                {
                  "internalType": "contract IStrategy",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "multiplier",
                  "type": "uint96"
                }
              ]
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initializeQuorum"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "minimumStakeForQuorum",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "strategyIndices",
              "type": "uint256[]"
            },
            {
              "internalType": "uint96[]",
              "name": "newMultipliers",
              "type": "uint96[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "modifyStrategyParams"
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "quorumNumbers",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerOperator",
          "outputs": [
            {
              "internalType": "uint96[]",
              "name": "",
              "type": "uint96[]"
            },
            {
              "internalType": "uint96[]",
              "name": "",
              "type": "uint96[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "registryCoordinator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint256[]",
              "name": "indicesToRemove",
              "type": "uint256[]"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "removeStrategies"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "strategiesPerQuorum",
          "outputs": [
            {
              "internalType": "contract IStrategy",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "strategyParams",
          "outputs": [
            {
              "internalType": "contract IStrategy",
              "name": "strategy",
              "type": "address"
            },
            {
              "internalType": "uint96",
              "name": "multiplier",
              "type": "uint96"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint256",
              "name": "index",
              "type": "uint256"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "strategyParamsByIndex",
          "outputs": [
            {
              "internalType": "struct IStakeRegistry.StrategyParams",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "contract IStrategy",
                  "name": "strategy",
                  "type": "address"
                },
                {
                  "internalType": "uint96",
                  "name": "multiplier",
                  "type": "uint96"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "strategyParamsLength",
          "outputs": [
            {
              "internalType": "uint256",
              "name": "",
              "type": "uint256"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "quorumNumbers",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "updateOperatorStake",
          "outputs": [
            {
              "internalType": "uint192",
              "name": "",
              "type": "uint192"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "address",
              "name": "operator",
              "type": "address"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "weightOfOperatorForQuorum",
          "outputs": [
            {
              "internalType": "uint96",
              "name": "",
              "type": "uint96"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "deregisterOperator(bytes32,bytes)": {
            "details": "access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already deregistered         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for",
            "params": {
              "operatorId": "The id of the operator to deregister.",
              "quorumNumbers": "The quorum numbers the operator is deregistering from, where each byte is an 8 bit integer quorumNumber."
            }
          },
          "getCurrentStake(bytes32,uint8)": {
            "details": "Function returns weight of **0** in the event that the operator has no stake history"
          },
          "getCurrentTotalStake(uint8)": {
            "details": "Will revert if `_totalStakeHistory[quorumNumber]` is empty."
          },
          "getLatestStakeUpdate(bytes32,uint8)": {
            "details": "Function returns an StakeUpdate struct with **every entry equal to 0** in the event that the operator has no stake history"
          },
          "getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)": {
            "details": "Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators",
            "params": {
              "blockNumber": "Block number to make sure the stake is from.",
              "index": "Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.",
              "operatorId": "The id of the operator of interest.",
              "quorumNumber": "The quorum number to get the stake for."
            }
          },
          "getStakeHistory(bytes32,uint8)": {
            "params": {
              "operatorId": "The id of the operator of interest.",
              "quorumNumber": "The quorum number to get the stake for."
            }
          },
          "getStakeUpdateAtIndex(uint8,bytes32,uint256)": {
            "details": "Function will revert if `index` is out-of-bounds.",
            "params": {
              "index": "Array index for lookup, within the dynamic array `operatorIdToStakeHistory[operatorId][quorumNumber]`.",
              "operatorId": "The id of the operator of interest.",
              "quorumNumber": "The quorum number to get the stake for."
            }
          },
          "getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)": {
            "details": "Function will revert if `index` is out-of-bounds.used the BLSSignatureChecker to get past stakes of signing operators",
            "params": {
              "blockNumber": "Block number to make sure the stake is from.",
              "index": "Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.",
              "quorumNumber": "The quorum number to get the stake for."
            }
          },
          "getTotalStakeUpdateAtIndex(uint8,uint256)": {
            "params": {
              "index": "Array index for lookup, within the dynamic array `totalStakeHistory[quorumNumber]`.",
              "quorumNumber": "The quorum number to get the stake for."
            }
          },
          "modifyStrategyParams(uint8,uint256[],uint96[])": {
            "params": {
              "newMultipliers": "are the new multipliers for the strategies",
              "quorumNumber": "is the quorum number to change the strategy for",
              "strategyIndices": "are the indices of the strategies to change"
            }
          },
          "registerOperator(address,bytes32,bytes)": {
            "details": "access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already registered",
            "params": {
              "operator": "The address of the operator to register.",
              "operatorId": "The id of the operator to register.",
              "quorumNumbers": "The quorum numbers the operator is registering for, where each byte is an 8 bit integer quorumNumber."
            },
            "returns": {
              "_0": "The operator's current stake for each quorum, and the total stake for each quorum"
            }
          },
          "removeStrategies(uint8,uint256[])": {
            "details": "higher indices should be *first* in the list of @param indicesToRemove, since otherwise the removal of lower index entries will cause a shift in the indices of the other strategiesToRemove",
            "params": {
              "quorumNumber": "."
            }
          },
          "updateOperatorStake(address,bytes32,bytes)": {
            "returns": {
              "_0": "A bitmap of quorums where the operator no longer meets the minimum stake and should be deregistered."
            }
          },
          "weightOfOperatorForQuorum(uint8,address)": {
            "details": "reverts in the case that `quorumNumber` is greater than or equal to `quorumCount`"
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "MAX_WEIGHING_FUNCTION_LENGTH()": {
            "notice": "Maximum length of dynamic arrays in the `strategyParams` mapping."
          },
          "WEIGHTING_DIVISOR()": {
            "notice": "Constant used as a divisor in calculating weights."
          },
          "addStrategies(uint8,(address,uint96)[])": {
            "notice": "Adds new strategies and the associated multipliers to the @param quorumNumber."
          },
          "delegation()": {
            "notice": "The address of the Delegation contract for EigenLayer."
          },
          "deregisterOperator(bytes32,bytes)": {
            "notice": "Deregisters the operator with `operatorId` for the specified `quorumNumbers`."
          },
          "getCurrentStake(bytes32,uint8)": {
            "notice": "Returns the most recent stake weight for the `operatorId` for quorum `quorumNumber`"
          },
          "getCurrentTotalStake(uint8)": {
            "notice": "Returns the stake weight from the latest entry in `_totalStakeHistory` for quorum `quorumNumber`."
          },
          "getLatestStakeUpdate(bytes32,uint8)": {
            "notice": "Returns the most recent stake weight for the `operatorId` for a certain quorum"
          },
          "getStakeAtBlockNumber(bytes32,uint8,uint32)": {
            "notice": "Returns the stake of the operator for the provided `quorumNumber` at the given `blockNumber`"
          },
          "getStakeAtBlockNumberAndIndex(uint8,uint32,bytes32,uint256)": {
            "notice": "Returns the stake weight corresponding to `operatorId` for quorum `quorumNumber`, at the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array if the entry  corresponds to the operator's stake at `blockNumber`. Reverts otherwise."
          },
          "getStakeHistory(bytes32,uint8)": {
            "notice": "Returns the entire `operatorIdToStakeHistory[operatorId][quorumNumber]` array."
          },
          "getStakeUpdateAtIndex(uint8,bytes32,uint256)": {
            "notice": "Returns the `index`-th entry in the `operatorIdToStakeHistory[operatorId][quorumNumber]` array."
          },
          "getStakeUpdateIndexAtBlockNumber(bytes32,uint8,uint32)": {
            "notice": "Returns the indices of the operator stakes for the provided `quorumNumber` at the given `blockNumber`"
          },
          "getTotalStakeAtBlockNumberFromIndex(uint8,uint32,uint256)": {
            "notice": "Returns the total stake weight for quorum `quorumNumber`, at the `index`-th entry in the  `totalStakeHistory[quorumNumber]` array if the entry corresponds to the total stake at `blockNumber`.  Reverts otherwise."
          },
          "getTotalStakeIndicesAtBlockNumber(uint32,bytes)": {
            "notice": "Returns the indices of the total stakes for the provided `quorumNumbers` at the given `blockNumber`"
          },
          "getTotalStakeUpdateAtIndex(uint8,uint256)": {
            "notice": "Returns the `index`-th entry in the dynamic array of total stake, `totalStakeHistory` for quorum `quorumNumber`."
          },
          "initializeQuorum(uint8,uint96,(address,uint96)[])": {
            "notice": "Initialize a new quorum created by the registry coordinator by setting strategies, weights, and minimum stake"
          },
          "minimumStakeForQuorum(uint8)": {
            "notice": "In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]` evaluated by this contract's 'VoteWeigher' logic."
          },
          "modifyStrategyParams(uint8,uint256[],uint96[])": {
            "notice": "This function is used for modifying the weights of strategies that are already in the mapping strategyParams for a specific"
          },
          "registerOperator(address,bytes32,bytes)": {
            "notice": "Registers the `operator` with `operatorId` for the specified `quorumNumbers`."
          },
          "registryCoordinator()": {
            "notice": "the coordinator contract that this registry is associated with"
          },
          "removeStrategies(uint8,uint256[])": {
            "notice": "This function is used for removing strategies and their associated weights from the"
          },
          "strategyParams(uint8,uint256)": {
            "notice": "mapping from quorum number to the list of strategies considered and their corresponding multipliers for that specific quorum"
          },
          "strategyParamsByIndex(uint8,uint256)": {
            "notice": "Returns the strategy and weight multiplier for the `index`'th strategy in the quorum `quorumNumber`"
          },
          "strategyParamsLength(uint8)": {
            "notice": "Returns the length of the dynamic array stored in `strategyParams[quorumNumber]`."
          },
          "updateOperatorStake(address,bytes32,bytes)": {
            "notice": "Called by the registry coordinator to update an operator's stake for one or more quorums. If the operator no longer has the minimum stake required for a quorum, they are added to the"
          },
          "weightOfOperatorForQuorum(uint8,address)": {
            "notice": "This function computes the total weight of the @param operator in the quorum @param quorumNumber."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eigenlayer-middleware/=lib/eigenlayer-middleware/",
        "@eigenlayer-scripts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/script/",
        "@eigenlayer/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/",
        "@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/",
        "@openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/",
        "eigenlayer-middleware/=lib/eigenlayer-middleware/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/eigenlayer-middleware/src/StakeRegistryStorage.sol": "StakeRegistryStorage"
      },
      "libraries": {}
    },
    "sources": {
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "keccak256": "0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61",
        "urls": [
          "bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354",
          "dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"
        ],
        "license": "MIT"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBeaconChainOracle.sol": {
        "keccak256": "0x0fef07aa6179c77198f1514e12e628aa1c876e04f9c181ec853a322179e5be00",
        "urls": [
          "bzz-raw://51438325876cc2d4c77f58488a7e27b488015d1b663c50be6a5cafbd73b9c983",
          "dweb:/ipfs/QmViCuGoYZzi6wtXA8PPKigqVv3KMuNxEVQ1Td9dGqjL18"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol": {
        "keccak256": "0x6808a4feea1bde54f60f9816251f8552d05f0340d87e9a57523ffacdecdb7dfb",
        "urls": [
          "bzz-raw://24dd16f797a63f918428e52b22a821deda75cae1a6728c003375e3ad15fcb22e",
          "dweb:/ipfs/QmNidYeCGhstsjnZm4Mb6LMmRSNbRAx21nUCng1SMbuBqt"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IETHPOSDeposit.sol": {
        "keccak256": "0x2e60e5f4b0da0a0a4e2a07c63141120998559970c21deac743ea0c64a60a880c",
        "urls": [
          "bzz-raw://e635c346bde5b7ade9bcf35bc733081520cb86015be4fbc6e761e6e9482c4c91",
          "dweb:/ipfs/QmRoeazEnbFn5SPSWAkoFK2gSN9DMp3hJAnrLWuL2sKutz"
        ],
        "license": "CC0-1.0"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPod.sol": {
        "keccak256": "0xb50c36ad96b6679bb80fd8331f949cbfbcba0f529026e1421a4d2bae64396eba",
        "urls": [
          "bzz-raw://5719181d780120f1e688c0da276992a8caf185815917f453b3550537c31ed4cc",
          "dweb:/ipfs/QmYprRC5ZEXhz3zAUND5E8Xjn6s5TL8ZF8QbnndVq7aVPR"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol": {
        "keccak256": "0xd8a64dbed03d3a5cdbefe1af75968f2dde07f973749c2ef5197bf7187c3e448c",
        "urls": [
          "bzz-raw://27ccc7c1fd9352e9f9b357c9063d255dc0ed9583f43db09f786ac7497d7846b8",
          "dweb:/ipfs/QmeJzuJkE9m2NUNwZSp4tGZEZmih1LeucePup8hzMVDRbG"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPausable.sol": {
        "keccak256": "0x98cffc894842947377e24c1d375813a1120dd73a84c29782ab68404e109cb34f",
        "urls": [
          "bzz-raw://b3474f6c350ceaee57cbdfb08fb48835d0c6e81ae8ebfbb9667899584a139324",
          "dweb:/ipfs/QmWELKtksdtWxQbqAccd8yGyhKqrgPZXTADKR7BuT27Zg5"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol": {
        "keccak256": "0x9de8dd682bc0d812bbd6583c0231cbf35448d5eff58b74a93efa64cb9a768c49",
        "urls": [
          "bzz-raw://c00d6c675b9c72b092d287fe85fd37782588df32b8eb59ab4c7db7a86be25e7d",
          "dweb:/ipfs/QmeYokY3HhAdbBaCPdHg3PgQEdRCDFEJy3Wf7VtgHBkQSx"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol": {
        "keccak256": "0x5e52482a31d94401a8502f3014c4aada1142b4450fc0596dff8e1866a85fe092",
        "urls": [
          "bzz-raw://17dc326c9361bc1453379f26545963557b2883b0c88bc07d4477e04dbcc0cc8c",
          "dweb:/ipfs/QmZXT7A816W5JH2ymirE2ETaJttqztFCsEL22AV8oEfCK9"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISlasher.sol": {
        "keccak256": "0x45dfaa2cfdde87f48a6ee38bb6fb739847aef7cf3f6137bdcd8c8a330559ec79",
        "urls": [
          "bzz-raw://1b7f6bd75b42fcaa91ceb7140cb2c41926a1fe6ee2d3161e4fe6186b181ba232",
          "dweb:/ipfs/QmZjbdKiSs33C9i3GDc3sdD39Pz4YPkDoKftowoUF4kHmY"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol": {
        "keccak256": "0xc530c6a944b70051fd0dac0222de9a4b5baadeaf94ad194daac6ad8d2ace7420",
        "urls": [
          "bzz-raw://3767df0364ce835b52e786d2851431eb9223fe4747602107505477e162231d73",
          "dweb:/ipfs/QmZkH5bKUygQrJomndNaQqkefVRW4rRefCa8HPJ5HMczxJ"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol": {
        "keccak256": "0xc40998ca52abf38829f8ee99a28c5eed741361194d8774e84783c75a74902674",
        "urls": [
          "bzz-raw://2d03e87c279200f81ec9031ca1dc839e65829952e375748de0ed95a3d6861234",
          "dweb:/ipfs/QmQEhmNMQXxqmjFJdgrDceEYqwJQ4AWJR5TxgDy1ZMSrqN"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/BeaconChainProofs.sol": {
        "keccak256": "0x70d89b05c1c5f47b74a07fbb5a2c05e606fed494e749ea98a9915b7be73df377",
        "urls": [
          "bzz-raw://db1d3bfaee69aef53c8b12b492a17584e6d1ac94610cb8b38aad33e1cdd81af7",
          "dweb:/ipfs/QmfVsMTj1hcf9fMEm5RzvtcBN4dMcAKFBgUUDsNDr5XFpq"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Endian.sol": {
        "keccak256": "0xf3b72653ba2567a978d4612703fa5f71c5fcd015d8dac7818468f22772d90a9d",
        "urls": [
          "bzz-raw://cee9d09370d968138d775c39525db4cd0768d60d17be7685519de12444e7dd2f",
          "dweb:/ipfs/QmUdGh8wpMei3edKiEWA6S96s9dRt4ekZKJ4nau356X8xQ"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Merkle.sol": {
        "keccak256": "0x606eabfdc2241dab76f7c6e6754324ae9eb12b0a5068984d2c11e2cd2fa94d98",
        "urls": [
          "bzz-raw://a69c88393e9cf58ab066b75c75134b8c7cd51c242b726767cd8ec7e7d8351916",
          "dweb:/ipfs/QmaNMz951WD5JZeQs5yav29mZn2E6fvdFm5u3moMupRzSM"
        ],
        "license": "MIT"
      },
      "lib/eigenlayer-middleware/src/StakeRegistryStorage.sol": {
        "keccak256": "0x23df9a79c886917d6f581ed8fd7dc573ff01e6215cd2721a75b3c285e6a75d89",
        "urls": [
          "bzz-raw://86f455a0a23e7ad55f5dca08dacf591eec9963959df812351f21a8d84b9d2988",
          "dweb:/ipfs/QmNbZ8emJWZXDHDw7z2GrH7sc8gdpMNEQaYWE3KKNjrAmM"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IBLSApkRegistry.sol": {
        "keccak256": "0xfc84df26fafb537f309a85194e88543d593762ef737f148193bb88312a4703a7",
        "urls": [
          "bzz-raw://4c3108311624eb32f162f34ae505ff0b24bfac37bc3586695ae1c3846be8d48d",
          "dweb:/ipfs/QmRtD8nic2vG2kRfVRDaL3WMgc8NLU7PiEx3zMZaX68msh"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IIndexRegistry.sol": {
        "keccak256": "0x66ea31c35539fd47a94b874ac9339bc178f9cea3dfee932fd6deec51945f59cf",
        "urls": [
          "bzz-raw://48e0e16f4973a68487165cf35c178badd55c0d2c2e592c698723108694072637",
          "dweb:/ipfs/QmUG3aFym2i2bsUFD8YbicCEM6hLh1TsgM4XR89rkEUYzy"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IRegistry.sol": {
        "keccak256": "0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3",
        "urls": [
          "bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25",
          "dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IRegistryCoordinator.sol": {
        "keccak256": "0xaa994bdacd0d8718b4a9c018debece071e28a0906a3f041d53f1874eb882fad9",
        "urls": [
          "bzz-raw://0f175cfc849fb4ac38d1629e6f87c1d7b39bd5eb2bc62e6d40d57a9ec34a62db",
          "dweb:/ipfs/QmQhgQNjZaYYzEpk2X732ZKPfTbFGr8y8RLhDWizZSQLxi"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol": {
        "keccak256": "0xa990d3cff41340b37d8e5218627f8f83cd60acbce5e1846af28f6d65db0e2b2f",
        "urls": [
          "bzz-raw://68cc70d64f757e21c8a5d67b93d17543a160a8507a7b29f77bba4d2dc6f2a9c3",
          "dweb:/ipfs/QmUjzs5cA3k86w7Cewbei7kUNfRymuEidEbEy9hKQe22Ve"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/libraries/BN254.sol": {
        "keccak256": "0x40a9a94aaa705b67d1c4efdccb8e1ff8ccf41d1ce20639f6cd6fd27d84891417",
        "urls": [
          "bzz-raw://4b7a07633fc3fce4d2eac8dc16ee2cf138e34583e1822d3d705d7c567667bf49",
          "dweb:/ipfs/QmVWYp64T71yKnT2Bpoq4wj7bADUKmjW8w5uzhCTh5Bs91"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/eigenlayer-middleware/src/StakeRegistryStorage.sol",
    "id": 24697,
    "exportedSymbols": {
      "IDelegationManager": [
        9250
      ],
      "IRegistryCoordinator": [
        25337
      ],
      "IStakeRegistry": [
        25739
      ],
      "IStrategy": [
        10270
      ],
      "IStrategyManager": [
        10518
      ],
      "StakeRegistryStorage": [
        24696
      ]
    },
    "nodeType": "SourceUnit",
    "src": "37:2453:80",
    "nodes": [
      {
        "id": 24605,
        "nodeType": "PragmaDirective",
        "src": "37:24:80",
        "nodes": [],
        "literals": [
          "solidity",
          "=",
          "0.8",
          ".12"
        ]
      },
      {
        "id": 24607,
        "nodeType": "ImportDirective",
        "src": "63:104:80",
        "nodes": [],
        "absolutePath": "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol",
        "file": "eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24697,
        "sourceUnit": 9251,
        "symbolAliases": [
          {
            "foreign": {
              "id": 24606,
              "name": "IDelegationManager",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 9250,
              "src": "71:18:80",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_IDelegationManager_$9250_$",
                "typeString": "type(contract IDelegationManager)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 24610,
        "nodeType": "ImportDirective",
        "src": "168:111:80",
        "nodes": [],
        "absolutePath": "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol",
        "file": "eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24697,
        "sourceUnit": 10519,
        "symbolAliases": [
          {
            "foreign": {
              "id": 24608,
              "name": "IStrategyManager",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 10518,
              "src": "176:16:80",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_IStrategyManager_$10518_$",
                "typeString": "type(contract IStrategyManager)"
              }
            },
            "nameLocation": "-1:-1:-1"
          },
          {
            "foreign": {
              "id": 24609,
              "name": "IStrategy",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 10270,
              "src": "194:9:80",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_IStrategy_$10270_$",
                "typeString": "type(contract IStrategy)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 24612,
        "nodeType": "ImportDirective",
        "src": "281:75:80",
        "nodes": [],
        "absolutePath": "lib/eigenlayer-middleware/src/interfaces/IRegistryCoordinator.sol",
        "file": "./interfaces/IRegistryCoordinator.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24697,
        "sourceUnit": 25338,
        "symbolAliases": [
          {
            "foreign": {
              "id": 24611,
              "name": "IRegistryCoordinator",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 25337,
              "src": "289:20:80",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_IRegistryCoordinator_$25337_$",
                "typeString": "type(contract IRegistryCoordinator)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 24614,
        "nodeType": "ImportDirective",
        "src": "357:64:80",
        "nodes": [],
        "absolutePath": "lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol",
        "file": "./interfaces/IStakeRegistry.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 24697,
        "sourceUnit": 25740,
        "symbolAliases": [
          {
            "foreign": {
              "id": 24613,
              "name": "IStakeRegistry",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 25739,
              "src": "365:14:80",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_IStakeRegistry_$25739_$",
                "typeString": "type(contract IStakeRegistry)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 24696,
        "nodeType": "ContractDefinition",
        "src": "613:1876:80",
        "nodes": [
          {
            "id": 24621,
            "nodeType": "VariableDeclaration",
            "src": "748:48:80",
            "nodes": [],
            "baseFunctions": [
              25549
            ],
            "constant": true,
            "documentation": {
              "id": 24618,
              "nodeType": "StructuredDocumentation",
              "src": "681:62:80",
              "text": "@notice Constant used as a divisor in calculating weights."
            },
            "functionSelector": "5e5a6775",
            "mutability": "constant",
            "name": "WEIGHTING_DIVISOR",
            "nameLocation": "772:17:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 24619,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "748:7:80",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "31653138",
              "id": 24620,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "792:4:80",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_1000000000000000000_by_1",
                "typeString": "int_const 1000000000000000000"
              },
              "value": "1e18"
            },
            "visibility": "public"
          },
          {
            "id": 24625,
            "nodeType": "VariableDeclaration",
            "src": "884:55:80",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 24622,
              "nodeType": "StructuredDocumentation",
              "src": "802:77:80",
              "text": "@notice Maximum length of dynamic arrays in the `strategyParams` mapping."
            },
            "functionSelector": "7c172347",
            "mutability": "constant",
            "name": "MAX_WEIGHING_FUNCTION_LENGTH",
            "nameLocation": "906:28:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint8",
              "typeString": "uint8"
            },
            "typeName": {
              "id": 24623,
              "name": "uint8",
              "nodeType": "ElementaryTypeName",
              "src": "884:5:80",
              "typeDescriptions": {
                "typeIdentifier": "t_uint8",
                "typeString": "uint8"
              }
            },
            "value": {
              "hexValue": "3332",
              "id": 24624,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "937:2:80",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_32_by_1",
                "typeString": "int_const 32"
              },
              "value": "32"
            },
            "visibility": "public"
          },
          {
            "id": 24629,
            "nodeType": "VariableDeclaration",
            "src": "1018:42:80",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 24626,
              "nodeType": "StructuredDocumentation",
              "src": "945:68:80",
              "text": "@notice Constant used as a divisor in dealing with BIPS amounts."
            },
            "mutability": "constant",
            "name": "MAX_BIPS",
            "nameLocation": "1044:8:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_uint256",
              "typeString": "uint256"
            },
            "typeName": {
              "id": 24627,
              "name": "uint256",
              "nodeType": "ElementaryTypeName",
              "src": "1018:7:80",
              "typeDescriptions": {
                "typeIdentifier": "t_uint256",
                "typeString": "uint256"
              }
            },
            "value": {
              "hexValue": "3130303030",
              "id": 24628,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "number",
              "lValueRequested": false,
              "nodeType": "Literal",
              "src": "1055:5:80",
              "typeDescriptions": {
                "typeIdentifier": "t_rational_10000_by_1",
                "typeString": "int_const 10000"
              },
              "value": "10000"
            },
            "visibility": "internal"
          },
          {
            "id": 24633,
            "nodeType": "VariableDeclaration",
            "src": "1138:46:80",
            "nodes": [],
            "baseFunctions": [
              25556
            ],
            "constant": false,
            "documentation": {
              "id": 24630,
              "nodeType": "StructuredDocumentation",
              "src": "1067:66:80",
              "text": "@notice The address of the Delegation contract for EigenLayer."
            },
            "functionSelector": "df5cf723",
            "mutability": "immutable",
            "name": "delegation",
            "nameLocation": "1174:10:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_contract$_IDelegationManager_$9250",
              "typeString": "contract IDelegationManager"
            },
            "typeName": {
              "id": 24632,
              "nodeType": "UserDefinedTypeName",
              "pathNode": {
                "id": 24631,
                "name": "IDelegationManager",
                "nodeType": "IdentifierPath",
                "referencedDeclaration": 9250,
                "src": "1138:18:80"
              },
              "referencedDeclaration": 9250,
              "src": "1138:18:80",
              "typeDescriptions": {
                "typeIdentifier": "t_contract$_IDelegationManager_$9250",
                "typeString": "contract IDelegationManager"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24636,
            "nodeType": "VariableDeclaration",
            "src": "1270:44:80",
            "nodes": [],
            "baseFunctions": [
              25089
            ],
            "constant": false,
            "documentation": {
              "id": 24634,
              "nodeType": "StructuredDocumentation",
              "src": "1191:74:80",
              "text": "@notice the coordinator contract that this registry is associated with"
            },
            "functionSelector": "6d14a987",
            "mutability": "immutable",
            "name": "registryCoordinator",
            "nameLocation": "1295:19:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 24635,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "1270:7:80",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 24641,
            "nodeType": "VariableDeclaration",
            "src": "1490:53:80",
            "nodes": [],
            "baseFunctions": [
              25564
            ],
            "constant": false,
            "documentation": {
              "id": 24637,
              "nodeType": "StructuredDocumentation",
              "src": "1321:164:80",
              "text": "@notice In order to register for a quorum i, an operator must have at least `minimumStakeForQuorum[i]`\n evaluated by this contract's 'VoteWeigher' logic."
            },
            "functionSelector": "c46778a5",
            "mutability": "mutable",
            "name": "minimumStakeForQuorum",
            "nameLocation": "1522:21:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_uint96_$",
              "typeString": "mapping(uint8 => uint96)"
            },
            "typeName": {
              "id": 24640,
              "keyType": {
                "id": 24638,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "1498:5:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "1490:24:80",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_uint96_$",
                "typeString": "mapping(uint8 => uint96)"
              },
              "valueType": {
                "id": 24639,
                "name": "uint96",
                "nodeType": "ElementaryTypeName",
                "src": "1507:6:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint96",
                  "typeString": "uint96"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 24648,
            "nodeType": "VariableDeclaration",
            "src": "1610:59:80",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 24642,
              "nodeType": "StructuredDocumentation",
              "src": "1550:55:80",
              "text": "@notice History of the total stakes for each quorum"
            },
            "mutability": "mutable",
            "name": "_totalStakeHistory",
            "nameLocation": "1651:18:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_struct$_StakeUpdate_$25423_storage_$dyn_storage_$",
              "typeString": "mapping(uint8 => struct IStakeRegistry.StakeUpdate[])"
            },
            "typeName": {
              "id": 24647,
              "keyType": {
                "id": 24643,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "1618:5:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "1610:31:80",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_struct$_StakeUpdate_$25423_storage_$dyn_storage_$",
                "typeString": "mapping(uint8 => struct IStakeRegistry.StakeUpdate[])"
              },
              "valueType": {
                "baseType": {
                  "id": 24645,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 24644,
                    "name": "StakeUpdate",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 25423,
                    "src": "1627:11:80"
                  },
                  "referencedDeclaration": 25423,
                  "src": "1627:11:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_StakeUpdate_$25423_storage_ptr",
                    "typeString": "struct IStakeRegistry.StakeUpdate"
                  }
                },
                "id": 24646,
                "nodeType": "ArrayTypeName",
                "src": "1627:13:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_StakeUpdate_$25423_storage_$dyn_storage_ptr",
                  "typeString": "struct IStakeRegistry.StakeUpdate[]"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 24657,
            "nodeType": "VariableDeclaration",
            "src": "1765:81:80",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 24649,
              "nodeType": "StructuredDocumentation",
              "src": "1676:84:80",
              "text": "@notice mapping from operator's operatorId to the history of their stake updates"
            },
            "mutability": "mutable",
            "name": "operatorStakeHistory",
            "nameLocation": "1826:20:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint8_$_t_array$_t_struct$_StakeUpdate_$25423_storage_$dyn_storage_$_$",
              "typeString": "mapping(bytes32 => mapping(uint8 => struct IStakeRegistry.StakeUpdate[]))"
            },
            "typeName": {
              "id": 24656,
              "keyType": {
                "id": 24650,
                "name": "bytes32",
                "nodeType": "ElementaryTypeName",
                "src": "1773:7:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_bytes32",
                  "typeString": "bytes32"
                }
              },
              "nodeType": "Mapping",
              "src": "1765:51:80",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_bytes32_$_t_mapping$_t_uint8_$_t_array$_t_struct$_StakeUpdate_$25423_storage_$dyn_storage_$_$",
                "typeString": "mapping(bytes32 => mapping(uint8 => struct IStakeRegistry.StakeUpdate[]))"
              },
              "valueType": {
                "id": 24655,
                "keyType": {
                  "id": 24651,
                  "name": "uint8",
                  "nodeType": "ElementaryTypeName",
                  "src": "1792:5:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint8",
                    "typeString": "uint8"
                  }
                },
                "nodeType": "Mapping",
                "src": "1784:31:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_struct$_StakeUpdate_$25423_storage_$dyn_storage_$",
                  "typeString": "mapping(uint8 => struct IStakeRegistry.StakeUpdate[])"
                },
                "valueType": {
                  "baseType": {
                    "id": 24653,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 24652,
                      "name": "StakeUpdate",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 25423,
                      "src": "1801:11:80"
                    },
                    "referencedDeclaration": 25423,
                    "src": "1801:11:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_StakeUpdate_$25423_storage_ptr",
                      "typeString": "struct IStakeRegistry.StakeUpdate"
                    }
                  },
                  "id": 24654,
                  "nodeType": "ArrayTypeName",
                  "src": "1801:13:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_StakeUpdate_$25423_storage_$dyn_storage_ptr",
                    "typeString": "struct IStakeRegistry.StakeUpdate[]"
                  }
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 24664,
            "nodeType": "VariableDeclaration",
            "src": "2016:56:80",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 24658,
              "nodeType": "StructuredDocumentation",
              "src": "1853:158:80",
              "text": " @notice mapping from quorum number to the list of strategies considered and their\n corresponding multipliers for that specific quorum"
            },
            "functionSelector": "08732461",
            "mutability": "mutable",
            "name": "strategyParams",
            "nameLocation": "2058:14:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_struct$_StrategyParams_$25429_storage_$dyn_storage_$",
              "typeString": "mapping(uint8 => struct IStakeRegistry.StrategyParams[])"
            },
            "typeName": {
              "id": 24663,
              "keyType": {
                "id": 24659,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "2024:5:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "2016:34:80",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_struct$_StrategyParams_$25429_storage_$dyn_storage_$",
                "typeString": "mapping(uint8 => struct IStakeRegistry.StrategyParams[])"
              },
              "valueType": {
                "baseType": {
                  "id": 24661,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 24660,
                    "name": "StrategyParams",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 25429,
                    "src": "2033:14:80"
                  },
                  "referencedDeclaration": 25429,
                  "src": "2033:14:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_StrategyParams_$25429_storage_ptr",
                    "typeString": "struct IStakeRegistry.StrategyParams"
                  }
                },
                "id": 24662,
                "nodeType": "ArrayTypeName",
                "src": "2033:16:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_StrategyParams_$25429_storage_$dyn_storage_ptr",
                  "typeString": "struct IStakeRegistry.StrategyParams[]"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 24670,
            "nodeType": "VariableDeclaration",
            "src": "2078:56:80",
            "nodes": [],
            "constant": false,
            "functionSelector": "9f3ccf65",
            "mutability": "mutable",
            "name": "strategiesPerQuorum",
            "nameLocation": "2115:19:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_contract$_IStrategy_$10270_$dyn_storage_$",
              "typeString": "mapping(uint8 => contract IStrategy[])"
            },
            "typeName": {
              "id": 24669,
              "keyType": {
                "id": 24665,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "2086:5:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "2078:29:80",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_contract$_IStrategy_$10270_$dyn_storage_$",
                "typeString": "mapping(uint8 => contract IStrategy[])"
              },
              "valueType": {
                "baseType": {
                  "id": 24667,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 24666,
                    "name": "IStrategy",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 10270,
                    "src": "2095:9:80"
                  },
                  "referencedDeclaration": 10270,
                  "src": "2095:9:80",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IStrategy_$10270",
                    "typeString": "contract IStrategy"
                  }
                },
                "id": 24668,
                "nodeType": "ArrayTypeName",
                "src": "2095:11:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_contract$_IStrategy_$10270_$dyn_storage_ptr",
                  "typeString": "contract IStrategy[]"
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 24691,
            "nodeType": "FunctionDefinition",
            "src": "2142:226:80",
            "nodes": [],
            "body": {
              "id": 24690,
              "nodeType": "Block",
              "src": "2259:109:80",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 24684,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24679,
                      "name": "registryCoordinator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24636,
                      "src": "2269:19:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 24682,
                          "name": "_registryCoordinator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 24673,
                          "src": "2299:20:80",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRegistryCoordinator_$25337",
                            "typeString": "contract IRegistryCoordinator"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IRegistryCoordinator_$25337",
                            "typeString": "contract IRegistryCoordinator"
                          }
                        ],
                        "id": 24681,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "2291:7:80",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 24680,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "2291:7:80",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 24683,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "2291:29:80",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "2269:51:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 24685,
                  "nodeType": "ExpressionStatement",
                  "src": "2269:51:80"
                },
                {
                  "expression": {
                    "id": 24688,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 24686,
                      "name": "delegation",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24633,
                      "src": "2330:10:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IDelegationManager_$9250",
                        "typeString": "contract IDelegationManager"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "id": 24687,
                      "name": "_delegationManager",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 24676,
                      "src": "2343:18:80",
                      "typeDescriptions": {
                        "typeIdentifier": "t_contract$_IDelegationManager_$9250",
                        "typeString": "contract IDelegationManager"
                      }
                    },
                    "src": "2330:31:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IDelegationManager_$9250",
                      "typeString": "contract IDelegationManager"
                    }
                  },
                  "id": 24689,
                  "nodeType": "ExpressionStatement",
                  "src": "2330:31:80"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 24677,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 24673,
                  "mutability": "mutable",
                  "name": "_registryCoordinator",
                  "nameLocation": "2184:20:80",
                  "nodeType": "VariableDeclaration",
                  "scope": 24691,
                  "src": "2163:41:80",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRegistryCoordinator_$25337",
                    "typeString": "contract IRegistryCoordinator"
                  },
                  "typeName": {
                    "id": 24672,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 24671,
                      "name": "IRegistryCoordinator",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 25337,
                      "src": "2163:20:80"
                    },
                    "referencedDeclaration": 25337,
                    "src": "2163:20:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRegistryCoordinator_$25337",
                      "typeString": "contract IRegistryCoordinator"
                    }
                  },
                  "visibility": "internal"
                },
                {
                  "constant": false,
                  "id": 24676,
                  "mutability": "mutable",
                  "name": "_delegationManager",
                  "nameLocation": "2234:18:80",
                  "nodeType": "VariableDeclaration",
                  "scope": 24691,
                  "src": "2215:37:80",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IDelegationManager_$9250",
                    "typeString": "contract IDelegationManager"
                  },
                  "typeName": {
                    "id": 24675,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 24674,
                      "name": "IDelegationManager",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 9250,
                      "src": "2215:18:80"
                    },
                    "referencedDeclaration": 9250,
                    "src": "2215:18:80",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IDelegationManager_$9250",
                      "typeString": "contract IDelegationManager"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "2153:105:80"
            },
            "returnParameters": {
              "id": 24678,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "2259:0:80"
            },
            "scope": 24696,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 24695,
            "nodeType": "VariableDeclaration",
            "src": "2461:25:80",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "__GAP",
            "nameLocation": "2481:5:80",
            "scope": 24696,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$45_storage",
              "typeString": "uint256[45]"
            },
            "typeName": {
              "baseType": {
                "id": 24692,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "2461:7:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 24694,
              "length": {
                "hexValue": "3435",
                "id": 24693,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "2469:2:80",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_45_by_1",
                  "typeString": "int_const 45"
                },
                "value": "45"
              },
              "nodeType": "ArrayTypeName",
              "src": "2461:11:80",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$45_storage_ptr",
                "typeString": "uint256[45]"
              }
            },
            "visibility": "private"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 24616,
              "name": "IStakeRegistry",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25739,
              "src": "655:14:80"
            },
            "id": 24617,
            "nodeType": "InheritanceSpecifier",
            "src": "655:14:80"
          }
        ],
        "canonicalName": "StakeRegistryStorage",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 24615,
          "nodeType": "StructuredDocumentation",
          "src": "423:189:80",
          "text": " @title Storage variables for the `StakeRegistry` contract.\n @author Layr Labs, Inc.\n @notice This storage contract is separate from the logic to simplify the upgrade process."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          24696,
          25739,
          25090
        ],
        "name": "StakeRegistryStorage",
        "nameLocation": "631:20:80",
        "scope": 24697,
        "usedErrors": []
      }
    ],
    "license": "BUSL-1.1"
  },
  "id": 80
}