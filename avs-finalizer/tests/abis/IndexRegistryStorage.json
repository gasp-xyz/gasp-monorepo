{
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "uint32",
          "name": "newOperatorIndex",
          "type": "uint32"
        }
      ],
      "name": "QuorumIndexUpdate",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "OPERATOR_DOES_NOT_EXIST_ID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "currentOperatorIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "quorumNumbers",
          "type": "bytes"
        }
      ],
      "name": "deregisterOperator",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "operatorIndex",
          "type": "uint32"
        }
      ],
      "name": "getLatestOperatorUpdate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IIndexRegistry.OperatorUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "getLatestQuorumUpdate",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numOperators",
              "type": "uint32"
            }
          ],
          "internalType": "struct IIndexRegistry.QuorumUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "blockNumber",
          "type": "uint32"
        }
      ],
      "name": "getOperatorListAtBlockNumber",
      "outputs": [
        {
          "internalType": "bytes32[]",
          "name": "",
          "type": "bytes32[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "operatorIndex",
          "type": "uint32"
        },
        {
          "internalType": "uint32",
          "name": "arrayIndex",
          "type": "uint32"
        }
      ],
      "name": "getOperatorUpdateAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            }
          ],
          "internalType": "struct IIndexRegistry.OperatorUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        },
        {
          "internalType": "uint32",
          "name": "quorumIndex",
          "type": "uint32"
        }
      ],
      "name": "getQuorumUpdateAtIndex",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint32",
              "name": "fromBlockNumber",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "numOperators",
              "type": "uint32"
            }
          ],
          "internalType": "struct IIndexRegistry.QuorumUpdate",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "initializeQuorum",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "operatorId",
          "type": "bytes32"
        },
        {
          "internalType": "bytes",
          "name": "quorumNumbers",
          "type": "bytes"
        }
      ],
      "name": "registerOperator",
      "outputs": [
        {
          "internalType": "uint32[]",
          "name": "",
          "type": "uint32[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "registryCoordinator",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint8",
          "name": "quorumNumber",
          "type": "uint8"
        }
      ],
      "name": "totalOperatorsForQuorum",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "bytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "deployedBytecode": {
    "object": "0x",
    "sourceMap": "",
    "linkReferences": {}
  },
  "methodIdentifiers": {
    "OPERATOR_DOES_NOT_EXIST_ID()": "caa3cd76",
    "currentOperatorIndex(uint8,bytes32)": "e2e68580",
    "deregisterOperator(bytes32,bytes)": "bd29b8cd",
    "getLatestOperatorUpdate(uint8,uint32)": "12d1d74d",
    "getLatestQuorumUpdate(uint8)": "8121906f",
    "getOperatorListAtBlockNumber(uint8,uint32)": "89026245",
    "getOperatorUpdateAtIndex(uint8,uint32,uint32)": "2ed583e5",
    "getQuorumUpdateAtIndex(uint8,uint32)": "a48bb0ac",
    "initializeQuorum(uint8)": "26d941f2",
    "registerOperator(bytes32,bytes)": "00bff04d",
    "registryCoordinator()": "6d14a987",
    "totalOperatorsForQuorum(uint8)": "f3410922"
  },
  "rawMetadata": "{\"compiler\":{\"version\":\"0.8.12+commit.f00d7308\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"uint32\",\"name\":\"newOperatorIndex\",\"type\":\"uint32\"}],\"name\":\"QuorumIndexUpdate\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"OPERATOR_DOES_NOT_EXIST_ID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"currentOperatorIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"deregisterOperator\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"operatorIndex\",\"type\":\"uint32\"}],\"name\":\"getLatestOperatorUpdate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IIndexRegistry.OperatorUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"getLatestQuorumUpdate\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numOperators\",\"type\":\"uint32\"}],\"internalType\":\"struct IIndexRegistry.QuorumUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"blockNumber\",\"type\":\"uint32\"}],\"name\":\"getOperatorListAtBlockNumber\",\"outputs\":[{\"internalType\":\"bytes32[]\",\"name\":\"\",\"type\":\"bytes32[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"operatorIndex\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"arrayIndex\",\"type\":\"uint32\"}],\"name\":\"getOperatorUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"}],\"internalType\":\"struct IIndexRegistry.OperatorUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"},{\"internalType\":\"uint32\",\"name\":\"quorumIndex\",\"type\":\"uint32\"}],\"name\":\"getQuorumUpdateAtIndex\",\"outputs\":[{\"components\":[{\"internalType\":\"uint32\",\"name\":\"fromBlockNumber\",\"type\":\"uint32\"},{\"internalType\":\"uint32\",\"name\":\"numOperators\",\"type\":\"uint32\"}],\"internalType\":\"struct IIndexRegistry.QuorumUpdate\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"initializeQuorum\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"operatorId\",\"type\":\"bytes32\"},{\"internalType\":\"bytes\",\"name\":\"quorumNumbers\",\"type\":\"bytes\"}],\"name\":\"registerOperator\",\"outputs\":[{\"internalType\":\"uint32[]\",\"name\":\"\",\"type\":\"uint32[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"registryCoordinator\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint8\",\"name\":\"quorumNumber\",\"type\":\"uint8\"}],\"name\":\"totalOperatorsForQuorum\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Layr Labs, Inc.\",\"kind\":\"dev\",\"methods\":{\"deregisterOperator(bytes32,bytes)\":{\"details\":\"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already deregistered         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for\",\"params\":{\"operatorId\":\"is the id of the operator that is being deregistered\",\"quorumNumbers\":\"is the quorum numbers the operator is deregistered for\"}},\"initializeQuorum(uint8)\":{\"params\":{\"quorumNumber\":\"The number of the new quorum\"}},\"registerOperator(bytes32,bytes)\":{\"details\":\"access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already registered\",\"params\":{\"operatorId\":\"is the id of the operator that is being registered\",\"quorumNumbers\":\"is the quorum numbers the operator is registered for\"},\"returns\":{\"_0\":\"numOperatorsPerQuorum is a list of the number of operators (including the registering operator) in each of the quorums the operator is registered for\"}}},\"title\":\"Storage variables for the `IndexRegistry` contract.\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"OPERATOR_DOES_NOT_EXIST_ID()\":{\"notice\":\"The value that is returned when an operator does not exist at an index at a certain block\"},\"currentOperatorIndex(uint8,bytes32)\":{\"notice\":\"maps quorumNumber => operator id => current operatorIndex NOTE: This mapping is NOT updated when an operator is deregistered, so it's possible that an index retrieved from this mapping is inaccurate. If you're querying for an operator that might be deregistered, ALWAYS  check this index against the latest `_operatorIndexHistory` entry\"},\"deregisterOperator(bytes32,bytes)\":{\"notice\":\"Deregisters the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`.\"},\"getLatestOperatorUpdate(uint8,uint32)\":{\"notice\":\"Returns the most recent OperatorUpdate entry for the specified quorumNumber and operatorIndex\"},\"getLatestQuorumUpdate(uint8)\":{\"notice\":\"Returns the most recent QuorumUpdate entry for the specified quorumNumber\"},\"getOperatorListAtBlockNumber(uint8,uint32)\":{\"notice\":\"Returns an ordered list of operators of the services for the given `quorumNumber` at the given `blockNumber`\"},\"getOperatorUpdateAtIndex(uint8,uint32,uint32)\":{\"notice\":\"Returns the OperatorUpdate entry for the specified `operatorIndex` and `quorumNumber` at the specified `arrayIndex`\"},\"getQuorumUpdateAtIndex(uint8,uint32)\":{\"notice\":\"Returns the QuorumUpdate entry for the specified `quorumNumber` at the specified `quorumIndex`\"},\"initializeQuorum(uint8)\":{\"notice\":\"Initialize a quorum by pushing its first quorum update\"},\"registerOperator(bytes32,bytes)\":{\"notice\":\"Registers the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`.\"},\"registryCoordinator()\":{\"notice\":\"The RegistryCoordinator contract for this middleware\"},\"totalOperatorsForQuorum(uint8)\":{\"notice\":\"Returns the current number of operators of this service for `quorumNumber`.\"}},\"notice\":\"This storage contract is separate from the logic to simplify the upgrade process.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"lib/eigenlayer-middleware/src/IndexRegistryStorage.sol\":\"IndexRegistryStorage\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[\":@eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":@eigenlayer-scripts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/script/\",\":@eigenlayer/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/\",\":@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/\",\":@openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/\",\":ds-test/=lib/forge-std/lib/ds-test/src/\",\":eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/\",\":eigenlayer-middleware/=lib/eigenlayer-middleware/\",\":forge-std/=lib/forge-std/src/\",\":openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/\",\":openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/\"]},\"sources\":{\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol\":{\"keccak256\":\"0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497\",\"dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol\":{\"keccak256\":\"0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4\",\"dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol\":{\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354\",\"dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol\":{\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34\",\"dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBeaconChainOracle.sol\":{\"keccak256\":\"0x0fef07aa6179c77198f1514e12e628aa1c876e04f9c181ec853a322179e5be00\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://51438325876cc2d4c77f58488a7e27b488015d1b663c50be6a5cafbd73b9c983\",\"dweb:/ipfs/QmViCuGoYZzi6wtXA8PPKigqVv3KMuNxEVQ1Td9dGqjL18\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol\":{\"keccak256\":\"0x6808a4feea1bde54f60f9816251f8552d05f0340d87e9a57523ffacdecdb7dfb\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://24dd16f797a63f918428e52b22a821deda75cae1a6728c003375e3ad15fcb22e\",\"dweb:/ipfs/QmNidYeCGhstsjnZm4Mb6LMmRSNbRAx21nUCng1SMbuBqt\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IETHPOSDeposit.sol\":{\"keccak256\":\"0x2e60e5f4b0da0a0a4e2a07c63141120998559970c21deac743ea0c64a60a880c\",\"license\":\"CC0-1.0\",\"urls\":[\"bzz-raw://e635c346bde5b7ade9bcf35bc733081520cb86015be4fbc6e761e6e9482c4c91\",\"dweb:/ipfs/QmRoeazEnbFn5SPSWAkoFK2gSN9DMp3hJAnrLWuL2sKutz\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPod.sol\":{\"keccak256\":\"0xb50c36ad96b6679bb80fd8331f949cbfbcba0f529026e1421a4d2bae64396eba\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://5719181d780120f1e688c0da276992a8caf185815917f453b3550537c31ed4cc\",\"dweb:/ipfs/QmYprRC5ZEXhz3zAUND5E8Xjn6s5TL8ZF8QbnndVq7aVPR\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol\":{\"keccak256\":\"0xd8a64dbed03d3a5cdbefe1af75968f2dde07f973749c2ef5197bf7187c3e448c\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://27ccc7c1fd9352e9f9b357c9063d255dc0ed9583f43db09f786ac7497d7846b8\",\"dweb:/ipfs/QmeJzuJkE9m2NUNwZSp4tGZEZmih1LeucePup8hzMVDRbG\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPausable.sol\":{\"keccak256\":\"0x98cffc894842947377e24c1d375813a1120dd73a84c29782ab68404e109cb34f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://b3474f6c350ceaee57cbdfb08fb48835d0c6e81ae8ebfbb9667899584a139324\",\"dweb:/ipfs/QmWELKtksdtWxQbqAccd8yGyhKqrgPZXTADKR7BuT27Zg5\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol\":{\"keccak256\":\"0x9de8dd682bc0d812bbd6583c0231cbf35448d5eff58b74a93efa64cb9a768c49\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://c00d6c675b9c72b092d287fe85fd37782588df32b8eb59ab4c7db7a86be25e7d\",\"dweb:/ipfs/QmeYokY3HhAdbBaCPdHg3PgQEdRCDFEJy3Wf7VtgHBkQSx\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol\":{\"keccak256\":\"0x5e52482a31d94401a8502f3014c4aada1142b4450fc0596dff8e1866a85fe092\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://17dc326c9361bc1453379f26545963557b2883b0c88bc07d4477e04dbcc0cc8c\",\"dweb:/ipfs/QmZXT7A816W5JH2ymirE2ETaJttqztFCsEL22AV8oEfCK9\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISlasher.sol\":{\"keccak256\":\"0x45dfaa2cfdde87f48a6ee38bb6fb739847aef7cf3f6137bdcd8c8a330559ec79\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://1b7f6bd75b42fcaa91ceb7140cb2c41926a1fe6ee2d3161e4fe6186b181ba232\",\"dweb:/ipfs/QmZjbdKiSs33C9i3GDc3sdD39Pz4YPkDoKftowoUF4kHmY\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol\":{\"keccak256\":\"0xc530c6a944b70051fd0dac0222de9a4b5baadeaf94ad194daac6ad8d2ace7420\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://3767df0364ce835b52e786d2851431eb9223fe4747602107505477e162231d73\",\"dweb:/ipfs/QmZkH5bKUygQrJomndNaQqkefVRW4rRefCa8HPJ5HMczxJ\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol\":{\"keccak256\":\"0xc40998ca52abf38829f8ee99a28c5eed741361194d8774e84783c75a74902674\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://2d03e87c279200f81ec9031ca1dc839e65829952e375748de0ed95a3d6861234\",\"dweb:/ipfs/QmQEhmNMQXxqmjFJdgrDceEYqwJQ4AWJR5TxgDy1ZMSrqN\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/BeaconChainProofs.sol\":{\"keccak256\":\"0x70d89b05c1c5f47b74a07fbb5a2c05e606fed494e749ea98a9915b7be73df377\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://db1d3bfaee69aef53c8b12b492a17584e6d1ac94610cb8b38aad33e1cdd81af7\",\"dweb:/ipfs/QmfVsMTj1hcf9fMEm5RzvtcBN4dMcAKFBgUUDsNDr5XFpq\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Endian.sol\":{\"keccak256\":\"0xf3b72653ba2567a978d4612703fa5f71c5fcd015d8dac7818468f22772d90a9d\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://cee9d09370d968138d775c39525db4cd0768d60d17be7685519de12444e7dd2f\",\"dweb:/ipfs/QmUdGh8wpMei3edKiEWA6S96s9dRt4ekZKJ4nau356X8xQ\"]},\"lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Merkle.sol\":{\"keccak256\":\"0x606eabfdc2241dab76f7c6e6754324ae9eb12b0a5068984d2c11e2cd2fa94d98\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://a69c88393e9cf58ab066b75c75134b8c7cd51c242b726767cd8ec7e7d8351916\",\"dweb:/ipfs/QmaNMz951WD5JZeQs5yav29mZn2E6fvdFm5u3moMupRzSM\"]},\"lib/eigenlayer-middleware/src/IndexRegistryStorage.sol\":{\"keccak256\":\"0x2edb002eafafada2f1e3525466576f245758ad7b254f645423d6f261316b8d5f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://ed775849c888592fd8bf7d3d2c0f24fb9913b03edd74ac9101dde034e6e77891\",\"dweb:/ipfs/QmXi9BFmmJfqK7CjFHB5iPjmudBvVz6xgT5Ggdva5NvP8L\"]},\"lib/eigenlayer-middleware/src/interfaces/IBLSApkRegistry.sol\":{\"keccak256\":\"0xfc84df26fafb537f309a85194e88543d593762ef737f148193bb88312a4703a7\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://4c3108311624eb32f162f34ae505ff0b24bfac37bc3586695ae1c3846be8d48d\",\"dweb:/ipfs/QmRtD8nic2vG2kRfVRDaL3WMgc8NLU7PiEx3zMZaX68msh\"]},\"lib/eigenlayer-middleware/src/interfaces/IIndexRegistry.sol\":{\"keccak256\":\"0x66ea31c35539fd47a94b874ac9339bc178f9cea3dfee932fd6deec51945f59cf\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://48e0e16f4973a68487165cf35c178badd55c0d2c2e592c698723108694072637\",\"dweb:/ipfs/QmUG3aFym2i2bsUFD8YbicCEM6hLh1TsgM4XR89rkEUYzy\"]},\"lib/eigenlayer-middleware/src/interfaces/IRegistry.sol\":{\"keccak256\":\"0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25\",\"dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY\"]},\"lib/eigenlayer-middleware/src/interfaces/IRegistryCoordinator.sol\":{\"keccak256\":\"0xaa994bdacd0d8718b4a9c018debece071e28a0906a3f041d53f1874eb882fad9\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://0f175cfc849fb4ac38d1629e6f87c1d7b39bd5eb2bc62e6d40d57a9ec34a62db\",\"dweb:/ipfs/QmQhgQNjZaYYzEpk2X732ZKPfTbFGr8y8RLhDWizZSQLxi\"]},\"lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol\":{\"keccak256\":\"0xa990d3cff41340b37d8e5218627f8f83cd60acbce5e1846af28f6d65db0e2b2f\",\"license\":\"BUSL-1.1\",\"urls\":[\"bzz-raw://68cc70d64f757e21c8a5d67b93d17543a160a8507a7b29f77bba4d2dc6f2a9c3\",\"dweb:/ipfs/QmUjzs5cA3k86w7Cewbei7kUNfRymuEidEbEy9hKQe22Ve\"]},\"lib/eigenlayer-middleware/src/libraries/BN254.sol\":{\"keccak256\":\"0x40a9a94aaa705b67d1c4efdccb8e1ff8ccf41d1ce20639f6cd6fd27d84891417\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://4b7a07633fc3fce4d2eac8dc16ee2cf138e34583e1822d3d705d7c567667bf49\",\"dweb:/ipfs/QmVWYp64T71yKnT2Bpoq4wj7bADUKmjW8w5uzhCTh5Bs91\"]}},\"version\":1}",
  "metadata": {
    "compiler": {
      "version": "0.8.12+commit.f00d7308"
    },
    "language": "Solidity",
    "output": {
      "abi": [
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "version",
              "type": "uint8",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "Initialized",
          "anonymous": false
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32",
              "indexed": true
            },
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8",
              "indexed": false
            },
            {
              "internalType": "uint32",
              "name": "newOperatorIndex",
              "type": "uint32",
              "indexed": false
            }
          ],
          "type": "event",
          "name": "QuorumIndexUpdate",
          "anonymous": false
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "OPERATOR_DOES_NOT_EXIST_ID",
          "outputs": [
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "",
              "type": "bytes32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "currentOperatorIndex",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "quorumNumbers",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "deregisterOperator"
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "operatorIndex",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getLatestOperatorUpdate",
          "outputs": [
            {
              "internalType": "struct IIndexRegistry.OperatorUpdate",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "fromBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "operatorId",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getLatestQuorumUpdate",
          "outputs": [
            {
              "internalType": "struct IIndexRegistry.QuorumUpdate",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "fromBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "numOperators",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "blockNumber",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOperatorListAtBlockNumber",
          "outputs": [
            {
              "internalType": "bytes32[]",
              "name": "",
              "type": "bytes32[]"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "operatorIndex",
              "type": "uint32"
            },
            {
              "internalType": "uint32",
              "name": "arrayIndex",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getOperatorUpdateAtIndex",
          "outputs": [
            {
              "internalType": "struct IIndexRegistry.OperatorUpdate",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "fromBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "bytes32",
                  "name": "operatorId",
                  "type": "bytes32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            },
            {
              "internalType": "uint32",
              "name": "quorumIndex",
              "type": "uint32"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "getQuorumUpdateAtIndex",
          "outputs": [
            {
              "internalType": "struct IIndexRegistry.QuorumUpdate",
              "name": "",
              "type": "tuple",
              "components": [
                {
                  "internalType": "uint32",
                  "name": "fromBlockNumber",
                  "type": "uint32"
                },
                {
                  "internalType": "uint32",
                  "name": "numOperators",
                  "type": "uint32"
                }
              ]
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "initializeQuorum"
        },
        {
          "inputs": [
            {
              "internalType": "bytes32",
              "name": "operatorId",
              "type": "bytes32"
            },
            {
              "internalType": "bytes",
              "name": "quorumNumbers",
              "type": "bytes"
            }
          ],
          "stateMutability": "nonpayable",
          "type": "function",
          "name": "registerOperator",
          "outputs": [
            {
              "internalType": "uint32[]",
              "name": "",
              "type": "uint32[]"
            }
          ]
        },
        {
          "inputs": [],
          "stateMutability": "view",
          "type": "function",
          "name": "registryCoordinator",
          "outputs": [
            {
              "internalType": "address",
              "name": "",
              "type": "address"
            }
          ]
        },
        {
          "inputs": [
            {
              "internalType": "uint8",
              "name": "quorumNumber",
              "type": "uint8"
            }
          ],
          "stateMutability": "view",
          "type": "function",
          "name": "totalOperatorsForQuorum",
          "outputs": [
            {
              "internalType": "uint32",
              "name": "",
              "type": "uint32"
            }
          ]
        }
      ],
      "devdoc": {
        "kind": "dev",
        "methods": {
          "deregisterOperator(bytes32,bytes)": {
            "details": "access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already deregistered         5) `quorumNumbers` is a subset of the quorumNumbers that the operator is registered for",
            "params": {
              "operatorId": "is the id of the operator that is being deregistered",
              "quorumNumbers": "is the quorum numbers the operator is deregistered for"
            }
          },
          "initializeQuorum(uint8)": {
            "params": {
              "quorumNumber": "The number of the new quorum"
            }
          },
          "registerOperator(bytes32,bytes)": {
            "details": "access restricted to the RegistryCoordinatorPreconditions (these are assumed, not validated in this contract):         1) `quorumNumbers` has no duplicates         2) `quorumNumbers.length` != 0         3) `quorumNumbers` is ordered in ascending order         4) the operator is not already registered",
            "params": {
              "operatorId": "is the id of the operator that is being registered",
              "quorumNumbers": "is the quorum numbers the operator is registered for"
            },
            "returns": {
              "_0": "numOperatorsPerQuorum is a list of the number of operators (including the registering operator) in each of the quorums the operator is registered for"
            }
          }
        },
        "version": 1
      },
      "userdoc": {
        "kind": "user",
        "methods": {
          "OPERATOR_DOES_NOT_EXIST_ID()": {
            "notice": "The value that is returned when an operator does not exist at an index at a certain block"
          },
          "currentOperatorIndex(uint8,bytes32)": {
            "notice": "maps quorumNumber => operator id => current operatorIndex NOTE: This mapping is NOT updated when an operator is deregistered, so it's possible that an index retrieved from this mapping is inaccurate. If you're querying for an operator that might be deregistered, ALWAYS  check this index against the latest `_operatorIndexHistory` entry"
          },
          "deregisterOperator(bytes32,bytes)": {
            "notice": "Deregisters the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`."
          },
          "getLatestOperatorUpdate(uint8,uint32)": {
            "notice": "Returns the most recent OperatorUpdate entry for the specified quorumNumber and operatorIndex"
          },
          "getLatestQuorumUpdate(uint8)": {
            "notice": "Returns the most recent QuorumUpdate entry for the specified quorumNumber"
          },
          "getOperatorListAtBlockNumber(uint8,uint32)": {
            "notice": "Returns an ordered list of operators of the services for the given `quorumNumber` at the given `blockNumber`"
          },
          "getOperatorUpdateAtIndex(uint8,uint32,uint32)": {
            "notice": "Returns the OperatorUpdate entry for the specified `operatorIndex` and `quorumNumber` at the specified `arrayIndex`"
          },
          "getQuorumUpdateAtIndex(uint8,uint32)": {
            "notice": "Returns the QuorumUpdate entry for the specified `quorumNumber` at the specified `quorumIndex`"
          },
          "initializeQuorum(uint8)": {
            "notice": "Initialize a quorum by pushing its first quorum update"
          },
          "registerOperator(bytes32,bytes)": {
            "notice": "Registers the operator with the specified `operatorId` for the quorums specified by `quorumNumbers`."
          },
          "registryCoordinator()": {
            "notice": "The RegistryCoordinator contract for this middleware"
          },
          "totalOperatorsForQuorum(uint8)": {
            "notice": "Returns the current number of operators of this service for `quorumNumber`."
          }
        },
        "version": 1
      }
    },
    "settings": {
      "remappings": [
        "@eigenlayer-middleware/=lib/eigenlayer-middleware/",
        "@eigenlayer-scripts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/script/",
        "@eigenlayer/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/",
        "@openzeppelin-upgrades/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/",
        "@openzeppelin/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/",
        "ds-test/=lib/forge-std/lib/ds-test/src/",
        "eigenlayer-contracts/=lib/eigenlayer-middleware/lib/eigenlayer-contracts/",
        "eigenlayer-middleware/=lib/eigenlayer-middleware/",
        "forge-std/=lib/forge-std/src/",
        "openzeppelin-contracts-upgradeable/=lib/eigenlayer-middleware/lib/openzeppelin-contracts-upgradeable/",
        "openzeppelin-contracts/=lib/eigenlayer-middleware/lib/openzeppelin-contracts/"
      ],
      "optimizer": {
        "enabled": true,
        "runs": 200
      },
      "metadata": {
        "bytecodeHash": "ipfs"
      },
      "compilationTarget": {
        "lib/eigenlayer-middleware/src/IndexRegistryStorage.sol": "IndexRegistryStorage"
      },
      "libraries": {}
    },
    "sources": {
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol": {
        "keccak256": "0x0203dcadc5737d9ef2c211d6fa15d18ebc3b30dfa51903b64870b01a062b0b4e",
        "urls": [
          "bzz-raw://6eb2fd1e9894dbe778f4b8131adecebe570689e63cf892f4e21257bfe1252497",
          "dweb:/ipfs/QmXgUGNfZvrn6N2miv3nooSs7Jm34A41qz94fu2GtDFcx8"
        ],
        "license": "MIT"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/contracts/utils/AddressUpgradeable.sol": {
        "keccak256": "0x611aa3f23e59cfdd1863c536776407b3e33d695152a266fa7cfb34440a29a8a3",
        "urls": [
          "bzz-raw://9b4b2110b7f2b3eb32951bc08046fa90feccffa594e1176cb91cdfb0e94726b4",
          "dweb:/ipfs/QmSxLwYjicf9zWFuieRc8WQwE4FisA1Um5jp1iSa731TGt"
        ],
        "license": "MIT"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol": {
        "keccak256": "0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61",
        "urls": [
          "bzz-raw://ada1e030c0231db8d143b44ce92b4d1158eedb087880cad6d8cc7bd7ebe7b354",
          "dweb:/ipfs/QmWZ2NHZweRpz1U9GF6R1h65ri76dnX7fNxLBeM2t5N5Ce"
        ],
        "license": "MIT"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts/contracts/token/ERC20/IERC20.sol": {
        "keccak256": "0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b",
        "urls": [
          "bzz-raw://5a7d5b1ef5d8d5889ad2ed89d8619c09383b80b72ab226e0fe7bde1636481e34",
          "dweb:/ipfs/QmebXWgtEfumQGBdVeM6c71McLixYXQP5Bk6kKXuoY4Bmr"
        ],
        "license": "MIT"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IBeaconChainOracle.sol": {
        "keccak256": "0x0fef07aa6179c77198f1514e12e628aa1c876e04f9c181ec853a322179e5be00",
        "urls": [
          "bzz-raw://51438325876cc2d4c77f58488a7e27b488015d1b663c50be6a5cafbd73b9c983",
          "dweb:/ipfs/QmViCuGoYZzi6wtXA8PPKigqVv3KMuNxEVQ1Td9dGqjL18"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IDelegationManager.sol": {
        "keccak256": "0x6808a4feea1bde54f60f9816251f8552d05f0340d87e9a57523ffacdecdb7dfb",
        "urls": [
          "bzz-raw://24dd16f797a63f918428e52b22a821deda75cae1a6728c003375e3ad15fcb22e",
          "dweb:/ipfs/QmNidYeCGhstsjnZm4Mb6LMmRSNbRAx21nUCng1SMbuBqt"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IETHPOSDeposit.sol": {
        "keccak256": "0x2e60e5f4b0da0a0a4e2a07c63141120998559970c21deac743ea0c64a60a880c",
        "urls": [
          "bzz-raw://e635c346bde5b7ade9bcf35bc733081520cb86015be4fbc6e761e6e9482c4c91",
          "dweb:/ipfs/QmRoeazEnbFn5SPSWAkoFK2gSN9DMp3hJAnrLWuL2sKutz"
        ],
        "license": "CC0-1.0"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPod.sol": {
        "keccak256": "0xb50c36ad96b6679bb80fd8331f949cbfbcba0f529026e1421a4d2bae64396eba",
        "urls": [
          "bzz-raw://5719181d780120f1e688c0da276992a8caf185815917f453b3550537c31ed4cc",
          "dweb:/ipfs/QmYprRC5ZEXhz3zAUND5E8Xjn6s5TL8ZF8QbnndVq7aVPR"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IEigenPodManager.sol": {
        "keccak256": "0xd8a64dbed03d3a5cdbefe1af75968f2dde07f973749c2ef5197bf7187c3e448c",
        "urls": [
          "bzz-raw://27ccc7c1fd9352e9f9b357c9063d255dc0ed9583f43db09f786ac7497d7846b8",
          "dweb:/ipfs/QmeJzuJkE9m2NUNwZSp4tGZEZmih1LeucePup8hzMVDRbG"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPausable.sol": {
        "keccak256": "0x98cffc894842947377e24c1d375813a1120dd73a84c29782ab68404e109cb34f",
        "urls": [
          "bzz-raw://b3474f6c350ceaee57cbdfb08fb48835d0c6e81ae8ebfbb9667899584a139324",
          "dweb:/ipfs/QmWELKtksdtWxQbqAccd8yGyhKqrgPZXTADKR7BuT27Zg5"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IPauserRegistry.sol": {
        "keccak256": "0x9de8dd682bc0d812bbd6583c0231cbf35448d5eff58b74a93efa64cb9a768c49",
        "urls": [
          "bzz-raw://c00d6c675b9c72b092d287fe85fd37782588df32b8eb59ab4c7db7a86be25e7d",
          "dweb:/ipfs/QmeYokY3HhAdbBaCPdHg3PgQEdRCDFEJy3Wf7VtgHBkQSx"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISignatureUtils.sol": {
        "keccak256": "0x5e52482a31d94401a8502f3014c4aada1142b4450fc0596dff8e1866a85fe092",
        "urls": [
          "bzz-raw://17dc326c9361bc1453379f26545963557b2883b0c88bc07d4477e04dbcc0cc8c",
          "dweb:/ipfs/QmZXT7A816W5JH2ymirE2ETaJttqztFCsEL22AV8oEfCK9"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/ISlasher.sol": {
        "keccak256": "0x45dfaa2cfdde87f48a6ee38bb6fb739847aef7cf3f6137bdcd8c8a330559ec79",
        "urls": [
          "bzz-raw://1b7f6bd75b42fcaa91ceb7140cb2c41926a1fe6ee2d3161e4fe6186b181ba232",
          "dweb:/ipfs/QmZjbdKiSs33C9i3GDc3sdD39Pz4YPkDoKftowoUF4kHmY"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategy.sol": {
        "keccak256": "0xc530c6a944b70051fd0dac0222de9a4b5baadeaf94ad194daac6ad8d2ace7420",
        "urls": [
          "bzz-raw://3767df0364ce835b52e786d2851431eb9223fe4747602107505477e162231d73",
          "dweb:/ipfs/QmZkH5bKUygQrJomndNaQqkefVRW4rRefCa8HPJ5HMczxJ"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/interfaces/IStrategyManager.sol": {
        "keccak256": "0xc40998ca52abf38829f8ee99a28c5eed741361194d8774e84783c75a74902674",
        "urls": [
          "bzz-raw://2d03e87c279200f81ec9031ca1dc839e65829952e375748de0ed95a3d6861234",
          "dweb:/ipfs/QmQEhmNMQXxqmjFJdgrDceEYqwJQ4AWJR5TxgDy1ZMSrqN"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/BeaconChainProofs.sol": {
        "keccak256": "0x70d89b05c1c5f47b74a07fbb5a2c05e606fed494e749ea98a9915b7be73df377",
        "urls": [
          "bzz-raw://db1d3bfaee69aef53c8b12b492a17584e6d1ac94610cb8b38aad33e1cdd81af7",
          "dweb:/ipfs/QmfVsMTj1hcf9fMEm5RzvtcBN4dMcAKFBgUUDsNDr5XFpq"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Endian.sol": {
        "keccak256": "0xf3b72653ba2567a978d4612703fa5f71c5fcd015d8dac7818468f22772d90a9d",
        "urls": [
          "bzz-raw://cee9d09370d968138d775c39525db4cd0768d60d17be7685519de12444e7dd2f",
          "dweb:/ipfs/QmUdGh8wpMei3edKiEWA6S96s9dRt4ekZKJ4nau356X8xQ"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/lib/eigenlayer-contracts/src/contracts/libraries/Merkle.sol": {
        "keccak256": "0x606eabfdc2241dab76f7c6e6754324ae9eb12b0a5068984d2c11e2cd2fa94d98",
        "urls": [
          "bzz-raw://a69c88393e9cf58ab066b75c75134b8c7cd51c242b726767cd8ec7e7d8351916",
          "dweb:/ipfs/QmaNMz951WD5JZeQs5yav29mZn2E6fvdFm5u3moMupRzSM"
        ],
        "license": "MIT"
      },
      "lib/eigenlayer-middleware/src/IndexRegistryStorage.sol": {
        "keccak256": "0x2edb002eafafada2f1e3525466576f245758ad7b254f645423d6f261316b8d5f",
        "urls": [
          "bzz-raw://ed775849c888592fd8bf7d3d2c0f24fb9913b03edd74ac9101dde034e6e77891",
          "dweb:/ipfs/QmXi9BFmmJfqK7CjFHB5iPjmudBvVz6xgT5Ggdva5NvP8L"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IBLSApkRegistry.sol": {
        "keccak256": "0xfc84df26fafb537f309a85194e88543d593762ef737f148193bb88312a4703a7",
        "urls": [
          "bzz-raw://4c3108311624eb32f162f34ae505ff0b24bfac37bc3586695ae1c3846be8d48d",
          "dweb:/ipfs/QmRtD8nic2vG2kRfVRDaL3WMgc8NLU7PiEx3zMZaX68msh"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IIndexRegistry.sol": {
        "keccak256": "0x66ea31c35539fd47a94b874ac9339bc178f9cea3dfee932fd6deec51945f59cf",
        "urls": [
          "bzz-raw://48e0e16f4973a68487165cf35c178badd55c0d2c2e592c698723108694072637",
          "dweb:/ipfs/QmUG3aFym2i2bsUFD8YbicCEM6hLh1TsgM4XR89rkEUYzy"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IRegistry.sol": {
        "keccak256": "0x51426a17fb7e54bd3720e2890104e97a8559a13ff248b3d6b840916751c143d3",
        "urls": [
          "bzz-raw://01f91289e6100d528cb8b318cb14ff22a0bc52882c9d4db41585e030cc9ddc25",
          "dweb:/ipfs/Qmb22nqGrsrtNovHRwbMCvDHGENuxAgrWu3Db4p7Er2MHY"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IRegistryCoordinator.sol": {
        "keccak256": "0xaa994bdacd0d8718b4a9c018debece071e28a0906a3f041d53f1874eb882fad9",
        "urls": [
          "bzz-raw://0f175cfc849fb4ac38d1629e6f87c1d7b39bd5eb2bc62e6d40d57a9ec34a62db",
          "dweb:/ipfs/QmQhgQNjZaYYzEpk2X732ZKPfTbFGr8y8RLhDWizZSQLxi"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/interfaces/IStakeRegistry.sol": {
        "keccak256": "0xa990d3cff41340b37d8e5218627f8f83cd60acbce5e1846af28f6d65db0e2b2f",
        "urls": [
          "bzz-raw://68cc70d64f757e21c8a5d67b93d17543a160a8507a7b29f77bba4d2dc6f2a9c3",
          "dweb:/ipfs/QmUjzs5cA3k86w7Cewbei7kUNfRymuEidEbEy9hKQe22Ve"
        ],
        "license": "BUSL-1.1"
      },
      "lib/eigenlayer-middleware/src/libraries/BN254.sol": {
        "keccak256": "0x40a9a94aaa705b67d1c4efdccb8e1ff8ccf41d1ce20639f6cd6fd27d84891417",
        "urls": [
          "bzz-raw://4b7a07633fc3fce4d2eac8dc16ee2cf138e34583e1822d3d705d7c567667bf49",
          "dweb:/ipfs/QmVWYp64T71yKnT2Bpoq4wj7bADUKmjW8w5uzhCTh5Bs91"
        ],
        "license": "MIT"
      }
    },
    "version": 1
  },
  "ast": {
    "absolutePath": "lib/eigenlayer-middleware/src/IndexRegistryStorage.sol",
    "id": 19880,
    "exportedSymbols": {
      "IIndexRegistry": [
        25081
      ],
      "IRegistryCoordinator": [
        25337
      ],
      "IndexRegistryStorage": [
        19879
      ],
      "Initializable": [
        282
      ]
    },
    "nodeType": "SourceUnit",
    "src": "37:1959:74",
    "nodes": [
      {
        "id": 19813,
        "nodeType": "PragmaDirective",
        "src": "37:24:74",
        "nodes": [],
        "literals": [
          "solidity",
          "=",
          "0.8",
          ".12"
        ]
      },
      {
        "id": 19815,
        "nodeType": "ImportDirective",
        "src": "63:93:74",
        "nodes": [],
        "absolutePath": "lib/eigenlayer-middleware/lib/eigenlayer-contracts/lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol",
        "file": "@openzeppelin-upgrades/contracts/proxy/utils/Initializable.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 19880,
        "sourceUnit": 283,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19814,
              "name": "Initializable",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 282,
              "src": "71:13:74",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_Initializable_$282_$",
                "typeString": "type(contract Initializable)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 19817,
        "nodeType": "ImportDirective",
        "src": "158:75:74",
        "nodes": [],
        "absolutePath": "lib/eigenlayer-middleware/src/interfaces/IRegistryCoordinator.sol",
        "file": "./interfaces/IRegistryCoordinator.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 19880,
        "sourceUnit": 25338,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19816,
              "name": "IRegistryCoordinator",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 25337,
              "src": "166:20:74",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_IRegistryCoordinator_$25337_$",
                "typeString": "type(contract IRegistryCoordinator)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 19819,
        "nodeType": "ImportDirective",
        "src": "234:63:74",
        "nodes": [],
        "absolutePath": "lib/eigenlayer-middleware/src/interfaces/IIndexRegistry.sol",
        "file": "./interfaces/IIndexRegistry.sol",
        "nameLocation": "-1:-1:-1",
        "scope": 19880,
        "sourceUnit": 25082,
        "symbolAliases": [
          {
            "foreign": {
              "id": 19818,
              "name": "IIndexRegistry",
              "nodeType": "Identifier",
              "overloadedDeclarations": [],
              "referencedDeclaration": 25081,
              "src": "242:14:74",
              "typeDescriptions": {
                "typeIdentifier": "t_type$_t_contract$_IIndexRegistry_$25081_$",
                "typeString": "type(contract IIndexRegistry)"
              }
            },
            "nameLocation": "-1:-1:-1"
          }
        ],
        "unitAlias": ""
      },
      {
        "id": 19879,
        "nodeType": "ContractDefinition",
        "src": "489:1506:74",
        "nodes": [
          {
            "id": 19831,
            "nodeType": "VariableDeclaration",
            "src": "674:63:74",
            "nodes": [],
            "constant": true,
            "documentation": {
              "id": 19825,
              "nodeType": "StructuredDocumentation",
              "src": "568:101:74",
              "text": "@notice The value that is returned when an operator does not exist at an index at a certain block"
            },
            "functionSelector": "caa3cd76",
            "mutability": "constant",
            "name": "OPERATOR_DOES_NOT_EXIST_ID",
            "nameLocation": "698:26:74",
            "scope": 19879,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_bytes32",
              "typeString": "bytes32"
            },
            "typeName": {
              "id": 19826,
              "name": "bytes32",
              "nodeType": "ElementaryTypeName",
              "src": "674:7:74",
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "value": {
              "arguments": [
                {
                  "hexValue": "30",
                  "id": 19829,
                  "isConstant": false,
                  "isLValue": false,
                  "isPure": true,
                  "kind": "number",
                  "lValueRequested": false,
                  "nodeType": "Literal",
                  "src": "735:1:74",
                  "typeDescriptions": {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  },
                  "value": "0"
                }
              ],
              "expression": {
                "argumentTypes": [
                  {
                    "typeIdentifier": "t_rational_0_by_1",
                    "typeString": "int_const 0"
                  }
                ],
                "id": 19828,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "lValueRequested": false,
                "nodeType": "ElementaryTypeNameExpression",
                "src": "727:7:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_type$_t_bytes32_$",
                  "typeString": "type(bytes32)"
                },
                "typeName": {
                  "id": 19827,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "727:7:74",
                  "typeDescriptions": {}
                }
              },
              "id": 19830,
              "isConstant": false,
              "isLValue": false,
              "isPure": true,
              "kind": "typeConversion",
              "lValueRequested": false,
              "names": [],
              "nodeType": "FunctionCall",
              "src": "727:10:74",
              "tryCall": false,
              "typeDescriptions": {
                "typeIdentifier": "t_bytes32",
                "typeString": "bytes32"
              }
            },
            "visibility": "public"
          },
          {
            "id": 19834,
            "nodeType": "VariableDeclaration",
            "src": "813:44:74",
            "nodes": [],
            "baseFunctions": [
              25089
            ],
            "constant": false,
            "documentation": {
              "id": 19832,
              "nodeType": "StructuredDocumentation",
              "src": "744:64:74",
              "text": "@notice The RegistryCoordinator contract for this middleware"
            },
            "functionSelector": "6d14a987",
            "mutability": "immutable",
            "name": "registryCoordinator",
            "nameLocation": "838:19:74",
            "scope": 19879,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_address",
              "typeString": "address"
            },
            "typeName": {
              "id": 19833,
              "name": "address",
              "nodeType": "ElementaryTypeName",
              "src": "813:7:74",
              "stateMutability": "nonpayable",
              "typeDescriptions": {
                "typeIdentifier": "t_address",
                "typeString": "address"
              }
            },
            "visibility": "public"
          },
          {
            "id": 19841,
            "nodeType": "VariableDeclaration",
            "src": "1249:72:74",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19835,
              "nodeType": "StructuredDocumentation",
              "src": "864:380:74",
              "text": "@notice maps quorumNumber => operator id => current operatorIndex\n NOTE: This mapping is NOT updated when an operator is deregistered,\n so it's possible that an index retrieved from this mapping is inaccurate.\n If you're querying for an operator that might be deregistered, ALWAYS \n check this index against the latest `_operatorIndexHistory` entry"
            },
            "functionSelector": "e2e68580",
            "mutability": "mutable",
            "name": "currentOperatorIndex",
            "nameLocation": "1301:20:74",
            "scope": 19879,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_mapping$_t_bytes32_$_t_uint32_$_$",
              "typeString": "mapping(uint8 => mapping(bytes32 => uint32))"
            },
            "typeName": {
              "id": 19840,
              "keyType": {
                "id": 19836,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "1257:5:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "1249:44:74",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_mapping$_t_bytes32_$_t_uint32_$_$",
                "typeString": "mapping(uint8 => mapping(bytes32 => uint32))"
              },
              "valueType": {
                "id": 19839,
                "keyType": {
                  "id": 19837,
                  "name": "bytes32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1274:7:74",
                  "typeDescriptions": {
                    "typeIdentifier": "t_bytes32",
                    "typeString": "bytes32"
                  }
                },
                "nodeType": "Mapping",
                "src": "1266:26:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_bytes32_$_t_uint32_$",
                  "typeString": "mapping(bytes32 => uint32)"
                },
                "valueType": {
                  "id": 19838,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1285:6:74",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                }
              }
            },
            "visibility": "public"
          },
          {
            "id": 19850,
            "nodeType": "VariableDeclaration",
            "src": "1419:84:74",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19842,
              "nodeType": "StructuredDocumentation",
              "src": "1327:87:74",
              "text": "@notice maps quorumNumber => operatorIndex => historical operator ids at that index"
            },
            "mutability": "mutable",
            "name": "_operatorIndexHistory",
            "nameLocation": "1482:21:74",
            "scope": 19879,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_mapping$_t_uint32_$_t_array$_t_struct$_OperatorUpdate_$24987_storage_$dyn_storage_$_$",
              "typeString": "mapping(uint8 => mapping(uint32 => struct IIndexRegistry.OperatorUpdate[]))"
            },
            "typeName": {
              "id": 19849,
              "keyType": {
                "id": 19843,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "1427:5:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "1419:53:74",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_mapping$_t_uint32_$_t_array$_t_struct$_OperatorUpdate_$24987_storage_$dyn_storage_$_$",
                "typeString": "mapping(uint8 => mapping(uint32 => struct IIndexRegistry.OperatorUpdate[]))"
              },
              "valueType": {
                "id": 19848,
                "keyType": {
                  "id": 19844,
                  "name": "uint32",
                  "nodeType": "ElementaryTypeName",
                  "src": "1444:6:74",
                  "typeDescriptions": {
                    "typeIdentifier": "t_uint32",
                    "typeString": "uint32"
                  }
                },
                "nodeType": "Mapping",
                "src": "1436:35:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_mapping$_t_uint32_$_t_array$_t_struct$_OperatorUpdate_$24987_storage_$dyn_storage_$",
                  "typeString": "mapping(uint32 => struct IIndexRegistry.OperatorUpdate[])"
                },
                "valueType": {
                  "baseType": {
                    "id": 19846,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19845,
                      "name": "OperatorUpdate",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 24987,
                      "src": "1454:14:74"
                    },
                    "referencedDeclaration": 24987,
                    "src": "1454:14:74",
                    "typeDescriptions": {
                      "typeIdentifier": "t_struct$_OperatorUpdate_$24987_storage_ptr",
                      "typeString": "struct IIndexRegistry.OperatorUpdate"
                    }
                  },
                  "id": 19847,
                  "nodeType": "ArrayTypeName",
                  "src": "1454:16:74",
                  "typeDescriptions": {
                    "typeIdentifier": "t_array$_t_struct$_OperatorUpdate_$24987_storage_$dyn_storage_ptr",
                    "typeString": "struct IIndexRegistry.OperatorUpdate[]"
                  }
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19857,
            "nodeType": "VariableDeclaration",
            "src": "1595:63:74",
            "nodes": [],
            "constant": false,
            "documentation": {
              "id": 19851,
              "nodeType": "StructuredDocumentation",
              "src": "1509:81:74",
              "text": "@notice maps quorumNumber => historical number of unique registered operators"
            },
            "mutability": "mutable",
            "name": "_operatorCountHistory",
            "nameLocation": "1637:21:74",
            "scope": 19879,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_struct$_QuorumUpdate_$24992_storage_$dyn_storage_$",
              "typeString": "mapping(uint8 => struct IIndexRegistry.QuorumUpdate[])"
            },
            "typeName": {
              "id": 19856,
              "keyType": {
                "id": 19852,
                "name": "uint8",
                "nodeType": "ElementaryTypeName",
                "src": "1603:5:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint8",
                  "typeString": "uint8"
                }
              },
              "nodeType": "Mapping",
              "src": "1595:32:74",
              "typeDescriptions": {
                "typeIdentifier": "t_mapping$_t_uint8_$_t_array$_t_struct$_QuorumUpdate_$24992_storage_$dyn_storage_$",
                "typeString": "mapping(uint8 => struct IIndexRegistry.QuorumUpdate[])"
              },
              "valueType": {
                "baseType": {
                  "id": 19854,
                  "nodeType": "UserDefinedTypeName",
                  "pathNode": {
                    "id": 19853,
                    "name": "QuorumUpdate",
                    "nodeType": "IdentifierPath",
                    "referencedDeclaration": 24992,
                    "src": "1612:12:74"
                  },
                  "referencedDeclaration": 24992,
                  "src": "1612:12:74",
                  "typeDescriptions": {
                    "typeIdentifier": "t_struct$_QuorumUpdate_$24992_storage_ptr",
                    "typeString": "struct IIndexRegistry.QuorumUpdate"
                  }
                },
                "id": 19855,
                "nodeType": "ArrayTypeName",
                "src": "1612:14:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_array$_t_struct$_QuorumUpdate_$24992_storage_$dyn_storage_ptr",
                  "typeString": "struct IIndexRegistry.QuorumUpdate[]"
                }
              }
            },
            "visibility": "internal"
          },
          {
            "id": 19874,
            "nodeType": "FunctionDefinition",
            "src": "1665:258:74",
            "nodes": [],
            "body": {
              "id": 19873,
              "nodeType": "Block",
              "src": "1733:190:74",
              "nodes": [],
              "statements": [
                {
                  "expression": {
                    "id": 19868,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "lValueRequested": false,
                    "leftHandSide": {
                      "id": 19863,
                      "name": "registryCoordinator",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 19834,
                      "src": "1743:19:74",
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "nodeType": "Assignment",
                    "operator": "=",
                    "rightHandSide": {
                      "arguments": [
                        {
                          "id": 19866,
                          "name": "_registryCoordinator",
                          "nodeType": "Identifier",
                          "overloadedDeclarations": [],
                          "referencedDeclaration": 19860,
                          "src": "1773:20:74",
                          "typeDescriptions": {
                            "typeIdentifier": "t_contract$_IRegistryCoordinator_$25337",
                            "typeString": "contract IRegistryCoordinator"
                          }
                        }
                      ],
                      "expression": {
                        "argumentTypes": [
                          {
                            "typeIdentifier": "t_contract$_IRegistryCoordinator_$25337",
                            "typeString": "contract IRegistryCoordinator"
                          }
                        ],
                        "id": 19865,
                        "isConstant": false,
                        "isLValue": false,
                        "isPure": true,
                        "lValueRequested": false,
                        "nodeType": "ElementaryTypeNameExpression",
                        "src": "1765:7:74",
                        "typeDescriptions": {
                          "typeIdentifier": "t_type$_t_address_$",
                          "typeString": "type(address)"
                        },
                        "typeName": {
                          "id": 19864,
                          "name": "address",
                          "nodeType": "ElementaryTypeName",
                          "src": "1765:7:74",
                          "typeDescriptions": {}
                        }
                      },
                      "id": 19867,
                      "isConstant": false,
                      "isLValue": false,
                      "isPure": false,
                      "kind": "typeConversion",
                      "lValueRequested": false,
                      "names": [],
                      "nodeType": "FunctionCall",
                      "src": "1765:29:74",
                      "tryCall": false,
                      "typeDescriptions": {
                        "typeIdentifier": "t_address",
                        "typeString": "address"
                      }
                    },
                    "src": "1743:51:74",
                    "typeDescriptions": {
                      "typeIdentifier": "t_address",
                      "typeString": "address"
                    }
                  },
                  "id": 19869,
                  "nodeType": "ExpressionStatement",
                  "src": "1743:51:74"
                },
                {
                  "expression": {
                    "arguments": [],
                    "expression": {
                      "argumentTypes": [],
                      "id": 19870,
                      "name": "_disableInitializers",
                      "nodeType": "Identifier",
                      "overloadedDeclarations": [],
                      "referencedDeclaration": 281,
                      "src": "1894:20:74",
                      "typeDescriptions": {
                        "typeIdentifier": "t_function_internal_nonpayable$__$returns$__$",
                        "typeString": "function ()"
                      }
                    },
                    "id": 19871,
                    "isConstant": false,
                    "isLValue": false,
                    "isPure": false,
                    "kind": "functionCall",
                    "lValueRequested": false,
                    "names": [],
                    "nodeType": "FunctionCall",
                    "src": "1894:22:74",
                    "tryCall": false,
                    "typeDescriptions": {
                      "typeIdentifier": "t_tuple$__$",
                      "typeString": "tuple()"
                    }
                  },
                  "id": 19872,
                  "nodeType": "ExpressionStatement",
                  "src": "1894:22:74"
                }
              ]
            },
            "implemented": true,
            "kind": "constructor",
            "modifiers": [],
            "name": "",
            "nameLocation": "-1:-1:-1",
            "parameters": {
              "id": 19861,
              "nodeType": "ParameterList",
              "parameters": [
                {
                  "constant": false,
                  "id": 19860,
                  "mutability": "mutable",
                  "name": "_registryCoordinator",
                  "nameLocation": "1707:20:74",
                  "nodeType": "VariableDeclaration",
                  "scope": 19874,
                  "src": "1686:41:74",
                  "stateVariable": false,
                  "storageLocation": "default",
                  "typeDescriptions": {
                    "typeIdentifier": "t_contract$_IRegistryCoordinator_$25337",
                    "typeString": "contract IRegistryCoordinator"
                  },
                  "typeName": {
                    "id": 19859,
                    "nodeType": "UserDefinedTypeName",
                    "pathNode": {
                      "id": 19858,
                      "name": "IRegistryCoordinator",
                      "nodeType": "IdentifierPath",
                      "referencedDeclaration": 25337,
                      "src": "1686:20:74"
                    },
                    "referencedDeclaration": 25337,
                    "src": "1686:20:74",
                    "typeDescriptions": {
                      "typeIdentifier": "t_contract$_IRegistryCoordinator_$25337",
                      "typeString": "contract IRegistryCoordinator"
                    }
                  },
                  "visibility": "internal"
                }
              ],
              "src": "1676:57:74"
            },
            "returnParameters": {
              "id": 19862,
              "nodeType": "ParameterList",
              "parameters": [],
              "src": "1733:0:74"
            },
            "scope": 19879,
            "stateMutability": "nonpayable",
            "virtual": false,
            "visibility": "internal"
          },
          {
            "id": 19878,
            "nodeType": "VariableDeclaration",
            "src": "1967:25:74",
            "nodes": [],
            "constant": false,
            "mutability": "mutable",
            "name": "__GAP",
            "nameLocation": "1987:5:74",
            "scope": 19879,
            "stateVariable": true,
            "storageLocation": "default",
            "typeDescriptions": {
              "typeIdentifier": "t_array$_t_uint256_$47_storage",
              "typeString": "uint256[47]"
            },
            "typeName": {
              "baseType": {
                "id": 19875,
                "name": "uint256",
                "nodeType": "ElementaryTypeName",
                "src": "1967:7:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_uint256",
                  "typeString": "uint256"
                }
              },
              "id": 19877,
              "length": {
                "hexValue": "3437",
                "id": 19876,
                "isConstant": false,
                "isLValue": false,
                "isPure": true,
                "kind": "number",
                "lValueRequested": false,
                "nodeType": "Literal",
                "src": "1975:2:74",
                "typeDescriptions": {
                  "typeIdentifier": "t_rational_47_by_1",
                  "typeString": "int_const 47"
                },
                "value": "47"
              },
              "nodeType": "ArrayTypeName",
              "src": "1967:11:74",
              "typeDescriptions": {
                "typeIdentifier": "t_array$_t_uint256_$47_storage_ptr",
                "typeString": "uint256[47]"
              }
            },
            "visibility": "private"
          }
        ],
        "abstract": true,
        "baseContracts": [
          {
            "baseName": {
              "id": 19821,
              "name": "Initializable",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 282,
              "src": "531:13:74"
            },
            "id": 19822,
            "nodeType": "InheritanceSpecifier",
            "src": "531:13:74"
          },
          {
            "baseName": {
              "id": 19823,
              "name": "IIndexRegistry",
              "nodeType": "IdentifierPath",
              "referencedDeclaration": 25081,
              "src": "546:14:74"
            },
            "id": 19824,
            "nodeType": "InheritanceSpecifier",
            "src": "546:14:74"
          }
        ],
        "canonicalName": "IndexRegistryStorage",
        "contractDependencies": [],
        "contractKind": "contract",
        "documentation": {
          "id": 19820,
          "nodeType": "StructuredDocumentation",
          "src": "299:189:74",
          "text": " @title Storage variables for the `IndexRegistry` contract.\n @author Layr Labs, Inc.\n @notice This storage contract is separate from the logic to simplify the upgrade process."
        },
        "fullyImplemented": false,
        "linearizedBaseContracts": [
          19879,
          25081,
          25090,
          282
        ],
        "name": "IndexRegistryStorage",
        "nameLocation": "507:20:74",
        "scope": 19880,
        "usedErrors": []
      }
    ],
    "license": "BUSL-1.1"
  },
  "id": 74
}